"use strict";
/**
 * Класс контроля версии ДО, содержит методы, необходимые для перехода между версиями ДО
 * @class кДОконтрольВерсии
 */
class кДОконтрольВерсии{
    constructor(){
        // ROW_ID с записью с номеров версии в таблице [ДО карточки]
        this.нзВерсии = -1;
        // Номер версии ДО в базе
        this.ВерсияДокументооборота;
    }
    static ЗапуститьПроверкуВерсии(){
        if( Задача() != "Документооборот" ) return -1;
        var ДОконтроль = new кДОконтрольВерсии();
        ДОконтроль.ПроверитьВерсию();
        try{
            ДОконтроль.АктуализироватьВерсию();
        }
        catch( er ){
            Сообщить( "Невозможно обновить версию, необходимо повторить с правами администратора.\n" + er.message  );
        }
    }
    // Содержит текущую версию ДО, до которой необходимо обновление
    get ТекущаяВерсия() {
        return 2;
    }

    /**
     * Поиск текущей версии ДО в базе
     */
    ПроверитьВерсию(){
        this.ВерсияДокументооборота = 1;
        var зПроверкаВерсии = Query(
            ` SELECT TOP 1 Номер, ROW_ID
                FROM ~ДО карточки~
                WHERE [Дата создания] = '19991111' `, 1, "" );
        зПроверкаВерсии.УстановитьПараметры();
        while( зПроверкаВерсии.Следующий() ) {
            this.ВерсияДокументооборота = зПроверкаВерсии.Номер;
            this.нзВерсии = зПроверкаВерсии.ROW_ID;
        }
    }

    /**
     * Проставляет текущую версию задачи в базу
     * @returns {boolean}
     */
    ОбновитьДанныеПоВерсии(){
        if( this.нзВерсии == -1 ){
            var оДОкарточки = Объект( "ДО карточки" );
            оДОкарточки['Номер'] = this.ТекущаяВерсия;
            оДОкарточки['Дата'] = new Date( 1999, 11, 11 );
            this.нзВерсии = ВнестиЗапись( оДОкарточки );
            return true;
        }
        var кОбновитьДанные = Command( ` UPDATE ~ДО карточки~ SET Номер = :1 WHERE ROW_ID = :2 `, 1, "num,A,rID,S" );
        кОбновитьДанные.Выполнить( this.ТекущаяВерсия, this.нзВерсии );
        кОбновитьДанные.Завершить();
        return true;
    }
    /**
     * Выполнение необходимых процедур для актуализаци версии, если это необходимо
     */
    АктуализироватьВерсию(){
        if( !this.ВерсияДокументооборота ) throw  new StackError( "Версия ДО неопределена." );
        if( this.ВерсияДокументооборота >= this.ТекущаяВерсия ) return true;
        switch( this.ВерсияДокументооборота ){
            case 1:{
                кДОконтрольВерсии.ОбновлениеТаблицДляВерсии1();
                break;
            }
        }
        this.ОбновитьДанныеПоВерсии();
    }
    // Конвертация полей таблиц ДО из image в varchar( max )
    static ОбновлениеТаблицДляВерсии1(){
        кДОконтрольВерсии.ОбновлениеТаблицДляВерсии1_КонвертацияСтолбцаТаблицы( "ДО задания", "Отметки" );
        СобратьМусор();
        кДОконтрольВерсии.ОбновлениеТаблицДляВерсии1_КонвертацияСтолбцаТаблицы( "ДО задания шаблон", "Отметки" );
        СобратьМусор();
        кДОконтрольВерсии.ОбновлениеТаблицДляВерсии1_КонвертацияСтолбцаТаблицы( "ДО заметки", "Заметка" );
        СобратьМусор();
        кДОконтрольВерсии.ОбновлениеТаблицДляВерсии1_КонвертацияСтолбцаТаблицы( "ДО переходы", "Исходный текст" );
        СобратьМусор();
        кДОконтрольВерсии.ОбновлениеТаблицДляВерсии1_КонвертацияСтолбцаТаблицы( "ДО часы", "Примечание" );
        СобратьМусор();
        //кДОконтрольВерсии.ОбновлениеЭлектроннойПочты();
        //СобратьМусор();
        //кДОконтрольВерсии.ОбновлениеДокументооборота_ДеровоДокументов();
        //СобратьМусор();
    }
    static ОбновлениеТаблицДляВерсии1_КонвертацияСтолбцаТаблицы( ИмяТаблицы, ИмяСтолбца ){
        var СозданиеСтолбца = `   ALTER TABLE ~` + ИмяТаблицы + `~ ADD [` + ИмяСтолбца + `1] VARCHAR(max) NULL `;
        var СоздатьСтолбец = Command( СозданиеСтолбца, 1, "" );
        СоздатьСтолбец.Выполнить();
        СоздатьСтолбец.Завершить();
        var ДанныеТаблицы = BufferedReader( ` SELECT [` + ИмяСтолбца + `], ROW_ID FROM ~` + ИмяТаблицы + `~ `, 500, "" );
        var СтрокаЗапроса = ` UPDATE ~` + ИмяТаблицы + `~ SET [` + ИмяСтолбца+ `1] = :1 WHERE ROW_ID = :2 `;
        var ЗаписатьВременныйСтолбец = Command( СтрокаЗапроса , 500, "text,A,rID,S" );
        var Счетчик = 0;
        ДанныеТаблицы.УстановитьПараметры();
        var ВсегоСтрок = ДанныеТаблицы.Количество();
        while( ДанныеТаблицы.Следующий() ){
            if( Счетчик++ % 100 == 0 ) ВывестиСтатус( "Обработано строк в таблице " + ИмяТаблицы + " " + Счетчик + " из " + ВсегоСтрок );
            ЗаписатьВременныйСтолбец.Выполнить( ДанныеТаблицы.ПолеВТекст( ИмяСтолбца ), ДанныеТаблицы.ROW_ID );
        }
        ЗаписатьВременныйСтолбец.Завершить();
        var УдалитьСтолбец = Command( ` ALTER TABLE ~` + ИмяТаблицы + `~ DROP COLUMN [` + ИмяСтолбца+ `]`, 1, "" );
        УдалитьСтолбец.Выполнить();
        УдалитьСтолбец.Завершить();
        var ТекстЗапроса =  ` sp_rename 'stack.[` + ИмяТаблицы + `].[` + ИмяСтолбца + `1]', '` + ИмяСтолбца + `', 'COLUMN'; `;
        var ПереименоватьСтолбец = Command( ТекстЗапроса, 1, "" );
        ПереименоватьСтолбец.Выполнить();
        ПереименоватьСтолбец.Завершить();
    }
    static ОбновлениеЭлектроннойПочты(){
        var комманд = Command( 'ALTER TABLE stack.[Сообщения Вложения] ADD Тип int NULL;', 1 );
        комманд.Выполнить();
        комманд.Завершить();

        комманд = Command( "UPDATE stack.[Сообщения Вложения] set Тип=0 --file \
        where Сообщение=0; \
        UPDATE stack.[Сообщения Вложения] set Тип=1 --source \
        where Сообщение=2; \
        UPDATE stack.[Сообщения Вложения] set Тип=3 --plain \
        where Сообщение=1 and (isnull(ТипФайла,'')='' or ТипФайла='plain'); \
        UPDATE stack.[Сообщения Вложения] set Тип=4 --html \
        where Сообщение=1 and ТипФайла='html'; \
        update stack.[Сообщения Заголовок] set Признаки=0 \
        where Папка=-10 and Папка_ADD=0;", 1 );
        комманд.Выполнить();
        комманд.Завершить();
    }
    static ОбновлениеДокументооборота_ДеровоДокументов(){
        var комманд = Command( "UPDATE stack.[ДО категории карточек] set [Диалог создания]='ДО карточки Этап' \
        where [Название] like 'Этап'; \
        UPDATE stack.[ДО категории карточек] set [Диалог создания]='ДО карточки Проект' \
        where [Название] like ' Проект'", 1 );
        комманд.Выполнить();
        комманд.Завершить();
    }
}
//кДОконтрольВерсии.ЗапуститьПроверкуВерсии();
/**
 * @class кWinHttp Класс работы с объектом WinHttp.WinHttpRequest
 */
class кWinHttp{
    /**
     * Если объект не удалось создать, представитель this.Результат, примет значение с текстом ошибки
     * @param {string} Запрос текст запроса по умолчанию
     */
    constructor( Запрос ){
        /**
         * Текст запроса
         * @type {string}
         */
        this.Запрос = Запрос;
        /**
         * Имя используемой библиотеки, по умолчанию WinHttp.WinHttpRequest.5.1
         * @type {string}
         */
        this.ИмяБиблиотеки = "WinHttp.WinHttpRequest.5.1";
        /**
         * Объект WinHttp.WinHttpRequest
         * @type {object}
         */
        this.WinHttpRequest;
        /**
         * Метод отправки запрсоа;
         * @type {string}
         */
        this.Метод = "GET";
        this.Результат = '';
    }
    СоздатьОбъект(){
        this.WinHttpRequest = ВнешнийОбъект( this.ИмяБиблиотеки );
        if( !this.WinHttpRequest  ){
            throw new StackError( 'Не удалось создать объект ' + this.ИмяБиблиотеки );
        }
    }
    УстановитьСвойства( Свойства ){
        for( let Свойство in Свойства ) {
            //if( !Свойства.hasOwnProperty( Свойство ) )
            //http.SetRequestHeader("Connection", "keep-alive");
            //http.SetRequestHeader("Cookie", "name=asterisk");
        }
    }
    /**
     * Отправка и выполнение запрос, содержащегося в представителе this.Запрос
     * @param Запрос переопределение представителя this.Запрос
     * @param метод метод отправки запроса, если отличный от по умолчанию ( "GET" );
     * @returns {string|string|*} результат отправки запроса, либо ошибка
     */
    ОтправитьЗапрос( Запрос, метод ){
        if( Запрос ){
            this.Запрос = Запрос;
        }
        if( !this.Запрос ) {
            throw new StackError( 'Не указан запрос' );
        }
        if( !this.WinHttpRequest ){
            this.СоздатьОбъект();
        }
        try{
            this.WinHttpRequest.Open( метод ? метод : this.Метод, this.Запрос, 0 );
            this.WinHttpRequest.Send();
            this.Результат = this.WinHttpRequest.ResponseText();
        }
        catch( e ){
            throw e;
        }
        return this.Результат;
    }

    /**
     * Возвращает результат выполнения последнего запроса, либо текст ошибки
     * @returns {string|string|*|string}
     */
    ПоследнийОтвет(){
        return this.Результат;
    }
}
/**
 * Класс для работы с FTP
 * @class кСтекFTP
 * @extends БазовыйОбъект
 */
class кСтекFTP extends БазовыйОбъект{

    constructor(){
        super( "ДО FTP аккаунты" );
       /**
        * Имя локального сервера ftp.stack-it.ru
        * @type {string}
        */
        this.ЛокальныйСервер = ПрочитатьКонстанту( new Date(), "ЛОКСЕРВFTP" );
        /**
        * Адрес сервера в локальной сети, Пр.: 192.168.1.1
        * @type {string}
        */
        this.ЛокальныйАдрес = ПрочитатьКонстанту( new Date(), "ЛОКАЛЬНЫЙFTP" );
        /**
         * Экземпляр кWinHttp, инициализируется только при первом обращении
         * @type {кWinHttp}
         */
        this.WinHTTP;
        /**
         * ftp Сервер, подставляемый в окно при создании по умолчанию
         * @type {string}
         */
        this.СерверПоУмолчанию = "ftp.stack-it.ru";
        /**
         * полрт ftp Сервера, подставляемый в окно при создании по умолчанию
         * @type {number}
         */
        this.ПортПоУмолчанию = 21;
    }

    /**
     * Проверяет корректность заполненности полей для работы с FTP
     * Желательно более детально, пока так
     */
    ПроверитьКорректностьПолей(){
        if( !this.Логин || !this.Пароль || !this.Сервер || !this.ЛокальныйСервер ){
            throw new StackError( 'Не указан запрос', 10 );
        }
    }

    /**
     * Возвращает строку адреса ftp сервера в виде ftp://login:pasword@server.ru:port
     * если порт стандартный, то он опускается
     * @returns {string}
     */
    ПолучитьСтрокуАдреса(){
        var пСтрокаАдреса = "ftp://" + this.Объект.Логин + ":" + this.Объект.Пароль + "@" + this.Объект.Сервер;
        if( this.Объект.Порт != 21 && this.Объект.Порт ) пСтрокаАдреса += ":" +this.Объект.Порт;
        return пСтрокаАдреса;
    }

    /**
     * Возвращает строку адреса ftp сервера в виде ftp://login:pasword@network:port
     * если порт стандартный, то он опускается
     * @returns {string}
     */
    ПолучитьСтрокуАдресаЛокально(){
       // Если сервер расположен в нашей сети, заменим адрес на внутренний
       var Сервер = this.Объект.Сервер;
       if( this.Объект.Сервер.toLowerCase().indexOf( this.ЛокальныйСервер ) != -1  ){
            Сервер = this.ЛокальныйАдрес;
       }
       var пСтрокаАдреса = "ftp://" + this.Объект.Логин + ":" + this.Объект.Пароль + "@" + Сервер;
       if( this.Объект.Порт != 21 && this.Объект.Порт ) пСтрокаАдреса += ":" +this.Объект.Порт;
       return пСтрокаАдреса;
    }

    /**
     * Открывает папку FTP сервера в explorer
     */
    ОткрытьПапку(){
        Запустить( "CLIENT:explorer.exe " + this.ПолучитьСтрокуАдресаЛокально());
    }

    /**
     * Создает папку на FTP Сервере
     * @param ДобавлятьЗаписьВБазу true - если необходимо выполнять внесение новой записи в базу
     */
    СоздатьПапку( ДобавлятьЗаписьВБазу ){
        let СтрокаЗапроса = "http://" + this.ЛокальныйАдрес + "/ftp-service/index.php?username=" + this.Объект.Логин + "&password=" + this.Объект.Пароль + "&task=1";
        if( !this.WinHTTP ) this.WinHTTP = new кWinHttp(СтрокаЗапроса);
        var Результат = +this.WinHTTP.ОтправитьЗапрос();
        switch ( Результат ){
            case 2 : throw new StackError( 'Данный пользователь уже сущестует на сервере' ); break;
            case 3 : throw new StackError( 'Ошибка создания пользователя, попробуйте с другими параметрами.' ); break;
        }
        if( ДобавлятьЗаписьВБазу ) this.Сохранить();
    }

    /**
     * Удаляет папку на FTP Сервере
     * @param УдалятьЗаписьИзБазы true, если надо удалять запись из базы
     */
    УдалитьПапку( УдалятьЗаписьИзБазы ){
        let СтрокаЗапроса = "http://" + this.ЛокальныйАдрес + "/ftp-service/index.php?username=" + this.Объект.Логин + "&password=" + this.Объект.Пароль + "&task=2";
        if( !this.WinHTTP ) this.WinHTTP = new кWinHttp(СтрокаЗапроса);
        if( this.WinHTTP.ОтправитьЗапрос()  == 3 ){
            throw new StackError(  'Ошибка выполнения команды запроса.\nУдаление не выполнено.' );
        }
        if( УдалятьЗаписьИзБазы ) this.Удалить();
    }

    /**
     * Отображает строку адреса в новом окне
     */
    ПоказатьСтрокуАдреса(){
        if( !this.оДлгСтрокаАдреса ) {
            this.оДлгСтрокаАдреса = СоздатьДиалог("ДО FTP строка адреса");
        }
        this.оДлгСтрокаАдреса['@СтрокаАдресаFTP'] = this.ПолучитьСтрокуАдреса();
        this.оДлгСтрокаАдреса.Выполнить();
    }
}
/**
 * СТРУКТУРА ПРОЕКТОВ ЗАГОТОВКА
 */
class кПортфельПроектов{
    constructor(НомерЗаписи){
        this.НомерЗаписи = НомерЗаписи;
    }
    ПолучитьСписокКонтролеров() {
        var зКонтролеры = BufferedReader(`SELECT Row_ID FROM ~ДО контроль~ WHERE [Контроль-Аналитика]=:1`, 100, "S,S");
        var мКонтролеры = [];
        зКонтролеры.УстановитьПараметры(нзАналитик);
        while (зКонтролеры.Следующий()) {
            мКонтролеры[зКонтролеры.Row_ID] = зКонтролеры.Row_ID;
        }
        return мКонтролеры;
    }
}
class кПроект extends кПортфельПроектов{
    constructor(НомерЗаписи){
        super(НомерЗаписи);
    }
}
class кЭтапПроекта extends кПроект{
    constructor(НомерЗаписи){
        super(НомерЗаписи);
    }
}
/**
 * @class кЗаявка
 * @extends БазовыйОбъект
 */
class кЗаявка extends БазовыйОбъект {
    /**
     *
     * @param НомерЗаписи
     * @param Контекст
     */
    constructor( НомерЗаписи, Контекст ){
        super( 'ДО карточки',  НомерЗаписи, Контекст );
        /**
         * договор карточки (по хорошому должен быть нормальный класс)
         * @type {кДоговор}
         * @private
         */
        this._Договор;
        /**
         * текущая фаза заявки
         * @type {{id: number, Название: string, Исполнитель: string}}
         */
        this.ТекущаяФаза = {'id' : -1,
            'Название' : '',
            'Исполнитель' : '',
            'Работа' : -1,
            'ТипИсполнителя' : 0};

        /**
         * Работы по заявке
         */
        this._Работы;

        if( this.НомерЗаписи && !this.ПолученоИзКонтекста ){
            super.Прочитать();
        }
    }


    /**
     *
     * @param {array} работы
     */
    set Работы( работы ){
        this._Работы = работы;
    }
    /**
     *
     * @returns {array}
     */
    get Работы(){
        if( !this._Работы ) this._Работы = this.ПолучитьРаботы();
        return this._Работы;
    }


    /**
     *
     * @param Договор
     */
    set Договор( Договор ){
        this.УстановитьСвойство( "Договор", 'Карточка-Договор', 'кДоговор', Договор );
    }

    /**
     *
     * @returns {*}
     */
    get Договор() {
        return this.ПолучитьСвойство( "Договор", 'Карточка-Договор', 'кДоговор' );
    }

    Очистить(){
        this._Договор = undefined;
        super.Очистить();
    }
    ЕстьНепустыеЗадания() {
        var запросРабот = Query(`;WITH sum1 AS (
                               SELECT count(hour.ROW_ID) [cnt]
                               FROM ~ДО Карточки~ card
                                  JOIN ~ДО задания~ task ON task.[Задание-Карточка]=card.ROW_ID
                                  JOIN ~ДО часы~ hour ON hour.[Часы-Задание]=task.ROW_ID
                               WHERE card.ROW_ID=:1
                               UNION
                               SELECT count(task_ch.ROW_ID)
                               FROM ~ДО Карточки~ card
                                  JOIN ~ДО задания~ task ON task.[Задание-Карточка]=card.ROW_ID
                                  JOIN ~ДО задания~ task_ch ON task_ch.[Подзадания]=task.ROW_ID
                               WHERE card.ROW_ID=:2)
                               SELECT SUM([cnt]) cnt
                               FROM sum1`, 1, "id,S,id2,S");
        запросРабот.УстановитьПараметры( this.НомерЗаписи, this.НомерЗаписи );
        запросРабот.Следующий();
        return запросРабот.cnt > 0;
    }

    /**
     * взвращает дату завершения заявки исходя из ее договора
     * если договор указан, то читает параметр 'СРОК_ИСП' с договора + выходные
     * @returns {Date}
     */
    ЗавершитьДо() {
        var завершитьДо = this.Объект['Дата создания'];
        if( this.Договор.НомерЗаписи != -1 ) {
            var зСрокИсполнения = Query( 'SELECT TOP 1 prop.Значение ' +
                'FROM ~Свойства~ prop JOIN ~Виды параметров~ p on prop.[Виды-Параметры]=p.ROW_ID ' +
                "WHERE p.Название LIKE 'срок_исп' AND prop.[Параметры-Договор]=:1 " +
                'ORDER BY prop.ДатНач DESC', 1, "cont,S" );

            зСрокИсполнения.УстановитьПараметры( this.Договор.НомерЗаписи );
            if( зСрокИсполнения.Следующий() ) // указан срок выпонения - берем его
                завершитьДо = new кРабочийКалендарь().ПрибавитьРабочиеДни( завершитьДо, Number(зСрокИсполнения.Значение) );
        }
        return завершитьДо;
    }
    КоличествоРабот(){
        var зРабот = BufferedReader( 'SELECT Count(*) cnt FROM ~ДО задания~ ' +
            'WHERE [Задание-Карточка]=:1 AND ТипИсполнителя in(0,1)', 1, "id,S" );
        зРабот.УстановитьПараметры( this.НомерЗаписи );
        return зРабот.Следующий() ? зРабот.cnt : 0;
    }
    /**
     * Возвращает объъект с отработанными часами по заявке
     * Поля:
     * 'Дата'
     * 'Отработано'
     * 'КОплате'
     * @returns {*}
     */
    ПолучитьЧасы(){
        var зДанных = Query( 'SELECT MAX(h.[Дата ввода]) [Дата], ' +
            'SUM(60*datepart(hour, h.[Время работы]) + datepart(minute, h.[Время работы]))/60 [Часы], ' +
            'SUM(60*datepart(hour, h.[Время работы]) + datepart(minute, h.[Время работы]))%60 [Минуты], ' +
            'SUM(60*datepart(hour, h.[Время к оплате]) + datepart(minute, h.[Время к оплате]))/60 [ОплЧасы], ' +
            'SUM(60*datepart(hour, h.[Время к оплате]) + datepart(minute, h.[Время к оплате]))%60 [ОплМинуты] ' +
            'FROM ~ДО часы~ h ' +
            '   JOIN ~ДО задания~ task ON h.[Часы-Задание] = task.ROW_ID ' +
            'WHERE task.[Задание-Карточка] = :1', 1, "task,S" );
        зДанных.УстановитьПараметры( this.НомерЗаписи );
        if( зДанных.Следующий() ){
            return {
                'Дата': !зДанных.Дата.isEmpty() ? зДанных.Дата : new Date(),
                'Отработано': зДанных.Часы + ":" + зДанных.Минуты.ЧислоСВедущимиНулями(2),
                'КОплате': зДанных.ОплЧасы + ":" + зДанных.ОплМинуты.ЧислоСВедущимиНулями(2)
            };
        }
        return {
            'Дата': new Date(),
            'Отработано': "00:00",
            'КОплате': "00:00"
        };
    }

    /**
     * Возвращает массив объъектов с данными по работам заявки
     * Работа : БазовыйОбъект( "ДО задания" ), ( ТипИсполнителя IN(5,6,7,8) - это дополнения )
     * Файлы : [] БазовыйОбъект( "ДО внешние документы" )
     * Исполнители : {
     *     Исполнитель : {
     *      ФИО,
     *      ROW_ID,
     *      Телефон
     *     }
     *     Редактор : {
     *      ФИО,
     *      ROW_ID,
     *      Телефон
     *     }
     *     ЧастноеЛицо : {
     *      ФИО,
     *      ROW_ID,
     *      Телефон
     *     }
     * }
     * @returns {Array}
     */
    ПолучитьРаботы(){
        if( !this.НомерЗаписи || this.НомерЗаписи <= 0 ) return [];
        var дополнения = [];
        var файлы = [];
        var файл;
        var работа;
        var исполнители;
        var зДополнения = Query(
            ` SELECT job.*,
                    files.[ROW_ID] as file_ROW_ID
                   ,files.[Файл-Категория] as file_
                   ,files.[Примечание] as file_Примечание
                   ,files.[Имя файла] as [file_Имя файла]
                   ,files.[Короткое имя] as [file_Короткое имя]
                   ,files.[Редактор] as file_Редактор
                   ,files.[Добавлен] as file_Добавлен
                   ,files.[Скачано] as file_Скачано
                   ,files.[Время изменения] as [file_Время изменения]
                   ,files.[Дата изменения] as [file_Дата изменения]
                   ,files.[ИзмененияАвтор] as file_ИзмененияАвтор
                   ,files.[Новый файл] as [file_Новый файл]
                   ,files.[Признаки] as file_Признаки
                    ,edit.ФИО as edit_ФИО
                    ,edit.ROW_ID as edit_ROW_ID
                    ,edit.Телефон as edit_Телефон
                    ,peform.ФИО as peform_ФИО
                    ,peform.ROW_ID as peform_ROW_ID
                    ,peform.Телефон as peform_Телефон
                    ,man.ФИО as man_ФИО
                    ,man.ROW_ID as man_ROW_ID
                    ,man.Телефон as man_Телефон

                FROM ~ДО задания~ job
           LEFT JOIN ~ДО внешние документы~ files ON files.[Файл-Задание]=job.ROW_ID
           LEFT JOIN ~Сотрудники~ edit ON job.[Задание-Редактор]=edit.row_id
           LEFT JOIN ~Сотрудники~ peform ON job.[Задание-Исполнитель]=peform.row_id
           LEFT JOIN ~Частные лица~ man ON job.[Задание-Представитель]=man.row_id
               WHERE job.[Задание-Карточка]=:1
            ORDER BY job.[Дата выдачи] desc, job.[Время выдачи] desc `, 500, "card,S" );
        var предыдущаяРабота;
        зДополнения.УстановитьПараметры( this.НомерЗаписи );
        while( зДополнения.Следующий() ){
            if( предыдущаяРабота && предыдущаяРабота != зДополнения.ROW_ID ){
                работа.Файлы = файлы;
                дополнения.push( {Работа : работа, Исполнители : исполнители } );
                работа = null;
                исполнители = null;
                файлы = [];
            }
            предыдущаяРабота = зДополнения.ROW_ID;
            if( !работа ) работа = new кРабота( зДополнения.ROW_ID, зДополнения, this );
            if( !исполнители ){
                исполнители = {
                    Исполнитель : {
                        ФИО : зДополнения.peform_ФИО,
                        ROW_ID : зДополнения.peform_ROW_ID,
                        Телефон : зДополнения.peform_Телефон
                    },
                    Редактор : {
                        ФИО : зДополнения.edit_ФИО,
                        ROW_ID : зДополнения.edit_ROW_ID,
                        Телефон : зДополнения.edit_Телефон
                    },
                    ЧастноеЛицо : {
                        ФИО : зДополнения.man_ФИО,
                        ROW_ID : зДополнения.man_ROW_ID,
                        Телефон : зДополнения.man_Телефон
                    }
                };
            }
            if( зДополнения.file_ROW_ID ) {
                файл = new БазовыйОбъект("ДО внешние документы");
                файл.ПрочитатьИзКонтекста(зДополнения, "file_");
                файл.НомерЗаписи = зДополнения.file_ROW_ID;
                файлы.push(файл);
            }
        }
        if( работа ){
            работа.Файлы = файлы;
            дополнения.push( {Работа : работа, Исполнители : исполнители } );
        }
        return дополнения;
    }

    /**
     * Возвращает новый доступный номер заявки в соответсвии с договором
     * @returns {*}
     */
    НовыйНомер(){
        if( this.Договор.НомерЗаписи < 0 ) return 0;
        var зНомера = Query( 'SELECT ISNULL(max(card.[Номер]), 0) [Номер] ' +
            'FROM ~ДО Карточки~ card ' +
            '     JOIN ~Договор~ cont ON card.[Карточка-Договор]=cont.ROW_ID ' +
            'WHERE cont.ROW_ID=:1', 1, "id,S" );
        зНомера.УстановитьПараметры( this.Договор.НомерЗаписи );
        return зНомера.Следующий() ? зНомера.Номер + 1 : 1;
    }

    /**
     * Проверяет соблюдение условий для запуска в работу, если условие не выполнено создает исключение StackError
     */
    ПроверитьВозможностьЗапускаВРаботу(){
        var ОшибкаЗавершения = "Запустить в работу невозможно, т.к. ";
        if( !this.Объект ) throw new StackError( ОшибкаЗавершения + "заявка не инициализирована." );
        if( this.Объект['Карточка-Договор'] <= 0 ) throw new StackError( ОшибкаЗавершения + "необходимо заполнить договор." );
        if( !this.Объект['ПланЧасов'] ) throw new StackError( ОшибкаЗавершения + "необходимо заполнить план часов на заявку." );
        if( this.Объект['Карточка-Организация'] <= 0 ) throw new StackError( ОшибкаЗавершения + "не указана организация." );
        if( this.Объект['Карточки-Маршрут'] <= 0 ) throw new StackError( ОшибкаЗавершения + "не указан маршрут." );
    }

    /**
     * Запуск заявки в работу
     * @returns {boolean}
     */
    ЗапуститьВРаботу(){
        this.ПроверитьВозможностьЗапускаВРаботу();
        var работа = new кРабота();
        работа.Внести();
        работа.Заявка = this;
        работа.Объект["Задание-Исполнитель"] = НомерЗаписи( Пользователь() );
        работа.Объект["Задание-Редактор"] = НомерЗаписи( Пользователь() );
        работа.Объект["Завершить до"] = this.ЗавершитьДо();
        // ищем фазу с минимальным номером на маршруте
        var зСтартоваяФаза = Query( 'SELECT TOP 1 ROW_ID FROM ~ДО Фазы~ ' +
            'WHERE [Маршрут-фазы]=:1 ' +
            'ORDER BY Номер', 1, "m1,S" );
        зСтартоваяФаза.УстановитьПараметры( this.Объект['Карточки-Маршрут'] );
        зСтартоваяФаза.Следующий();
        работа.Фаза = new кФаза( зСтартоваяФаза.ROW_ID, null, работа );
        работа.Объект["Дата выдачи"] = new Date();
        работа.Объект["Время выдачи"] = new Date();
        работа.Сохранить();
        var длгЗавершение = СоздатьДиалог("ДО - Завершение работы");
        длгЗавершение.Обработчик.Работа = работа;
        if(!длгЗавершение.Выполнить()){
            работа.Удалить();
            return false;
        }
        try {
            работа.Завершить( длгЗавершение.Обработчик.ПараметрыЗавершения );
        }
        catch(err){
            работа.Удалить();
            throw err;
        }
        return true;
    }

    /**
     * устанавливает справочные данные текущего задания заявки
     * @returns {boolean} если такое задание существует
     */
    УстановитьТекущуюФазу(){
        if( this.ТекущаяФаза.id == -1 ){
            var текСтадия = BufferedReader( 'SELECT k.ROW_ID, kf.Название, isp.ФИО, chl.ФИО ЧФИО, task.ROW_ID idJob, task.ТипИсполнителя ' +
                'FROM ~ДО задания~ task ' +
                '     JOIN ~ДО фазы~ k ON k.ROW_ID = task.[Задание-Фаза] ' +
                '     JOIN ~ДО категории фаз~ kf ON kf.ROW_ID = k.[Фаза-Категория] ' +
                '     LEFT JOIN ~Сотрудники~ isp ON task.[Задание-Исполнитель] = isp.ROW_ID ' +
                '     LEFT JOIN ~Частные лица~ chl ON task.[Задание-Представитель] = chl.ROW_ID ' +
                'WHERE task.[Задание-Карточка]=:1 AND task.Подзадания<0 AND task.ТипИсполнителя IN(0,1)' +
                'ORDER BY task.[Дата выдачи] desc, task.[Время выдачи] desc, task.ROW_ID desc', 1, "id,S" );
            текСтадия.УстановитьПараметры( this.НомерЗаписи );
            if( текСтадия.Следующий() ) {
                this.ТекущаяФаза.id = текСтадия.ROW_ID;
                this.ТекущаяФаза.Название = текСтадия.Название;
                this.ТекущаяФаза.ТипИсполнителя = текСтадия.ТипИсполнителя;
                this.ТекущаяФаза.Исполнитель = this.ТекущаяФаза.ТипИсполнителя == 0 ? текСтадия.ФИО : текСтадия.ЧФИО;
                this.ТекущаяФаза.Работа = текСтадия.idJob;

            }
        }
        return this.ТекущаяФаза.id != -1;
    }

    /**
     * копирует файлы электронного сообщения в заявку
     * @param нзСообщение - ид электронного сообщения
     * @returns {Array} - список добавленных файлов
     */
    ДобавитьФайлыИзСообщения( нзСообщение ){
        if( нзСообщение < 0 ) return false;

        var зКатегории = BufferedReader( 'SELECT ROW_ID FROM ~ДО категории файлов~ WHERE Название like :1', 10, "name,A" );
        зКатегории.УстановитьПараметры( "Файл из почты" );
        var категорияФ = -1;
        if( зКатегории.Следующий() ) {
            категорияФ = зКатегории.ROW_ID;
        } else { // категорию не нашли - создадим
            var категория = new БазовыйОбъект( 'ДО категории файлов' );
            категория.ПрочитатьИзКонтекста( {'Название' : 'Файл из почты'} );
            категорияФ = категория.Внести();
        }
        var сообщение = new кЭлСообщение( нзСообщение );
        var вложенияСообщения = сообщение.ПолучитьВложение( -10 );
        // добавляем сам текст письма в html
        if( сообщение.ПолучитьТекст('html', -10)) {
            var вложениеhtml = new кЭлВложение(нзСообщение, 'сообщение');
            // его предварительно нужно упаковать
            вложениеhtml.Установить(-1, "Письмо.html", 4, УпаковатьДанные(сообщение.СменитьКодировкуHtml("cp866")), '');
            вложенияСообщения.push(вложениеhtml);
        }
        var результат = [];
        for( let вложение of вложенияСообщения ){
            // в заявку копируем только файлы и html
            //if( вложение.Тип != 0 && вложение.Тип != 4 ) continue;
            // todo удалить при переходе
            if( вложение.Тип != 0 && вложение.Тип != 1 ) continue;
            let внДок = this.ДобавитьВнешнийДокумент( вложение.ОбразФайла, вложение.ИмяФайла, категорияФ,
                сообщение.Объект['Организация-Сообщения'] );
            if( внДок > 0 ) результат.push( {'Документ' : внДок,
                'Имя' : вложение.ИмяФайла} );
        }

        return результат;
    }

    /**
     * добавялет внешний документ к заявке
     * @param образ - бинарное или текстовой представление файла
     * @param короткоеИмя - имя документа
     * @param категория - категория документа
     * @param организация - организация на документе
     * @returns {number|*}
     */
    ДобавитьВнешнийДокумент( образ, короткоеИмя, категория, организация ){
        var оВнешнийДокумент = new БазовыйОбъект( "ДО внешние документы" );
        var датаИзменения = new Date();

        оВнешнийДокумент.ПрочитатьИзКонтекста( {'Файл-Карточка' : this.НомерЗаписи,
            'Короткое имя' : короткоеИмя,
            'Файл-Категория' : категория,
            'Дата изменения' : датаИзменения,
            'Добавлен' : датаИзменения,
            'Время изменения' : датаИзменения,
            'Файл-Организация' : организация,
            'ИзмененияАвтор' : Пользователь().Имя} );
        if( оВнешнийДокумент.Внести() ){
            var оХранилище = new БазовыйОбъект( "ДО хранилище" );
            оХранилище.ПрочитатьИзКонтекста( {'Образ' : образ,
            'Хранилище-Файл' : оВнешнийДокумент.НомерЗаписи} );
            оХранилище.Внести();
        }
        return оВнешнийДокумент.НомерЗаписи;
    }

    /**
     * создает и отправляет сообщение с текстом на адрес назначения в зависимости от режима
     * @param нзОтправитель - номер записи либо частного лица организации, либо самой организации
     * @param текст - текстовая часть сообщения электронной почты
     * @param текстHml - html часть сообщения электронной почты
     * @param тема - тема собщения
     * @param кому - адресат сообщения
     * @param режим - режим отправки уведомления:
     *      режим = 0 - то адрес берем с организации, отправляем уведомление с вопросом
     *      режим = 1, то адрес берем с частного лица, row_id которого записано в нзОрг, отправляем уведомление без вопроса
     *      режим = 2, отправляем уведомление без вопроса, адрес берем с организации
     * @returns {number} - номер записи сохраненного сообещния в базе
     */
    ОтправитьУведомление( нзОтправитель, текст, текстHml, тема, кому, режим ){
        if( режим != 1 ) {
            var зПараметрУведомление = Query( 'SELECT TOP 1 val.Значение ' +
                'FROM ~Значения параметров~ val ' +
                '   JOIN ~Параметры~ vp ON val.[Параметр-Значения]=vp.ROW_ID ' +
                "WHERE val.[Орг-Параметры]=:1 AND vp.имя LIKE 'уведэлпочта'", 1, "org,S" );
            зПараметрУведомление.УстановитьПараметры( нзОтправитель );
            if( зПараметрУведомление.Следующий() && зПараметрУведомление.Значение.toUpperCase() == "нет" ) return -1;
        }
        try {
            var копия = "";
            var ящик = this.Объект['Карточки-Маршрут>Маршрут-Ящик'];
            // не задан ящик, с которого отправляем уведомления
            var сообщение = new кЭлСообщение(); // сообщение для отправки уведомления
            ящик = сообщение.ПрочитатьЯщик( ящик > 0 ? ящик : "Отправка уведомлений" );
            if( ящик == -1 ) throw new StackError( "Не указан почтовый ящик для отправки уведомлений" );
            if( !кому ) { // передали пустой адрес - возьмем с организации
                var обАдреса = null;
                if( режим == 1 ) {
                    обАдреса = сообщение.АдресаПредставителей( нзОтправитель.toString() );
                    нзОтправитель = -1;
                } else {
                    обАдреса = сообщение.АдресаОрганизаций( нзОтправитель.toString() );
                }
                кому = обАдреса.Адреса;
            }
            if( !кому ) throw new StackError( "Не указан электронный адрес для уведомления" );
            if( режим == 0 && !ДаНет( "Отправить уведомление на адрес " + кому + "?" ) ) return 0;
            if( режим != 1 ) копия = new кОрганизация( нзОтправитель ).ЭлектронныйАдресОбязательнойКопии();
            сообщение.ПрочитатьИзКонтекста( {
                'Кому': кому,
                'Тема': тема,
                'Приоритет': 0,
                'Папка': сообщение.Ящик.ПолучитьПапку( "Уведомления" ),
                'Папка_Узел': 0,
                'Организация-Сообщения': нзОтправитель,
                'Заявка-Почта': this.НомерЗаписи,
                'Признаки': 522 // Обработано, Отправлено, Удалено
            } );
            сообщение.УстановитьОтправителя();
            if( сообщение.СоздатьСообщение(текст, текстHml) && сообщение.ОтправитьПисьмо() && сообщение.Внести() > 0 ) {
                сообщение.СохранитьТекст(текст);
                сообщение.УстановитьДату('создано,получено');
            }
            return сообщение.НомерЗаписи;
        } catch( err ) {
            err.ОбработкаОшибки();
        }
    }

    /**
     * Возвращает директорию, в которой лежит заявка
     * @param полный сокращать ли путь длиннее 70 символов, true - не сокращать
     * @returns {string}
     */
    ПолучитьДиректориюЗаявки( полный ){
        var зПуть = Query(

            ' declare @ticket int SET @ticket = ( SELECT Папки FROM ~ДО карточки~ where ROW_ID = :1 )' +
            ';WITH Parent AS( ' +
            '   SELECT ROW_ID, Папки, Примечание ' +
            '   FROM ~ДО карточки~ WHERE ROW_ID=@ticket ' +
            '   UNION ALL ' +
            "   SELECT card.Row_id, card.Папки, card.Примечание + '\\' + Parent.Примечание as Примечание " +
            "   FROM ~ДО карточки~ card JOIN Parent ON parent.Папки=card.ROW_ID " +
            ") SELECT Примечание FROM Parent WHERE Папки=-10", 1, "rID,S" );

        var путь = '';
        зПуть.УстановитьПараметры( this.НомерЗаписи );
        if( зПуть.Следующий() ) путь = "\\" + зПуть.Примечание;
        if( путь.length > 70 ) путь =  путь.substr( 0, 33 ) + '\\...\\' + путь.substr( путь.length - 31 );
        return путь;
    }
}


/**
 * @class кРабота
 * @extends БазовыйОбъект
 */
class кРабота extends БазовыйОбъект {

    /**
     *
     * @param ROW_ID
     * @param контекст
     * @param заявка
     */
    constructor(ROW_ID, контекст, заявка) {
        super('ДО задания', ROW_ID, контекст);

        /**
         * Текущая фаза работы
         * @type {кФаза}
         * @private
         */
        this._Фаза;

        /**
         * заявка, заданием которой является данная работа
         * @type {кЗаявка}
         * @private
         */
        this._Заявка = заявка;

        /**
         * Список файлов, относящийся к этой работе
         * @type {array} []БазовыйОбъект
         */
        this._Файлы;

        /**
         * ROW_ID сотрудника
         */
        this.Пользователь = НомерЗаписи(Пользователь());

        this.ЭтоДо = (Задача() == 'Документооборот');

        if (this.НомерЗаписи && !this.ПолученоИзКонтекста) this.Прочитать();
    }

    /**
     * Файлы прикрепленные непосредственно к работе
     * @param {array} []БазовыйОбъект файлы
     */
    set Файлы(файлы) {
        this._Файлы = файлы;
    }

    /**
     * Файлы прикрепленные непосредственно к работе
     * @returns {*}
     */
    get Файлы() {
        if (this._Файлы) return this._Файлы;
        throw new StackError("Получение файлов работы не реализовано.");
    }

    /**
     *
     * @param {кЗаявка} заявка {кЗаявка}
     */
    set Заявка(заявка) {
        this.УстановитьСвойство("Заявка", 'Задание-Карточка', "кЗаявка", заявка);
    }

    /**
     * Заявка
     * @returns {кЗаявка}
     */
    get Заявка() {
        return this.ПолучитьСвойство("Заявка", 'Задание-Карточка', "кЗаявка");
    }

    /**
     * Текущая фаза
     * @param {кФаза} фаза
     */
    set Фаза(фаза) {
        this.УстановитьСвойство("Фаза", 'Задание-Фаза', "кФаза", фаза);
        this._Фаза.Работа = this;
    }

    /**
     * Текущая фаза
     * @returns {кФаза}
     */
    get Фаза() {
        var Фаза = this.ПолучитьСвойство("Фаза", 'Задание-Фаза', "кФаза");
        if (!Фаза.Работа) Фаза.Работа = this;
        return Фаза;
    }

    /**
     * Приводит объекты к начальному виду
     */
    Очистить() {
        this._Фаза = undefined;
        this._Заявка = undefined;
        this._Файлы = undefined;
        super.Очистить();
    }

    /**
     * Получение списка открытых подзаданий
     */
    ПолучитьПодзадания() {
        var з_ПодЗадания = BufferedReader(`Select *
                                                    From ~ДО Задания~
                                                   Where Подзадания = :1 and [Статус завершения] = 0
                                                 `, 100, "Row,S");
        var мРаботы = [];
        з_ПодЗадания.УстановитьПараметры(this.НомерЗаписи);
        while (з_ПодЗадания.Следующий()) {
            мРаботы[з_ПодЗадания.ROW_ID] =  new кРабота( з_ПодЗадания.ROW_ID, з_ПодЗадания );
        }
        return мРаботы;
    }

    /**
     * Возвращает следующий порядковый номер задания в заявке
     * @returns {Number}
     */
    ПолучитьСледующийНомер() {
        var зСледующийНомер = Query(`SELECT ISNULL( MAX([Свой номер]), 0 ) [nextnum]
                            FROM ~ДО задания~
                            WHERE [Задание-Карточка]=:1`, 100, "Path,S");
        зСледующийНомер.УстановитьПараметры(this.Заявка.НомерЗаписи);
        if (зСледующийНомер.Следующий()) {
            return зСледующийНомер.nextnum + 1;
        }
        return 1;
    }

    /**
     * Возвращает массив уточнений по заданию
     * @returns {Array} [] - Примечание
     */
    ПолучитьУточненияПоЗаданию() {
        var зНУточнений = BufferedReader(`SELECT job.row_id, job.Примечание
                                           FROM ~ДО задания~ job JOIN
                                             ( SELECT [Задание-Карточка] as Zk,max( [Свой номер] ) as [Свой номер]
                                               FROM ~ДО задания~ dz2 GROUP BY [Задание-Карточка] )tbl
                                             ON tbl.Zk = job.[Задание-Карточка] AND job.[Свой номер] = tbl.[Свой номер] AND ТипИсполнителя=0,
                                             ~ДО задания~ job1
                                           WHERE job.[Задание-Карточка]=:1 AND job1.ТипИсполнителя=5 AND job1.[Задание-Карточка]=job.[Задание-Карточка]`, 100, "card,S");
        var мУточнения = [];
        зНУточнений.УстановитьПараметры(this.Объект["Задание-Карточка"]);
        while (зНУточнений.Следующий()) {
            мУточнения[зНУточнений.ROW_ID] = зНУточнений.Примечание;
        }
        return мУточнения;
    }

    /**
     * Возвращает данные по предыдущей фазе
     * =================================
     *  НомерФазыВыход
     *  нзИсполнитель
     *  нзОрганизацияИсполн
     *  СтатусЗавершения
     *  Последний шаг
     *  Название
     *  ДополнительныеФлаги
     *  Предыдущая фаза
     *  ФИО
     *  Организация
     * @param нашИсполн true если исполнитель из нашей организации
     * @returns {Array}
     */
    ПолучитьДанныеПредыдущейФазы(нашИсполн) {
        var допСтр = ``;
        if (нашИсполн) {
            допСтр = " AND dz2.[Задание-Исполнитель] <> -1 ";
        }
        var зТекФаза = Query(`SELECT Top 1 df.Номер, dkf.Название, st.Row_ID нзИсполнитель, chL.Row_ID нзОрганизацияИсполн,
                                   st.ФИО, chL.ФИО Организация
                            FROM ~ДО задания~ dz
                            JOIN (     SELECT [Задание-Карточка] as Zk,max( [Свой номер] ) as [Свой номер]
                                         FROM ~ДО задания~ dz2
                                       WHERE dz2.Row_ID <> :1 ` + допСтр + `
                                     GROUP BY [Задание-Карточка]
                                  )tbl ON tbl.Zk = dz.[Задание-Карточка] AND dz.[Свой номер] = tbl.[Свой номер]
                            JOIN ~ДО фазы~ df ON dz.[Задание-Фаза] = df.ROW_ID
                            JOIN ~ДО категории фаз~ dkf ON dkf.ROW_ID = df.[Фаза-Категория]
                            LEFT JOIN ~Сотрудники~ st ON st.ROW_ID = dz.[Задание-Исполнитель]
                            LEFT JOIN ~Частные лица~ chL ON chL.ROW_ID = dz.[Задание-Представитель]
                            WHERE dz.[Задание-Карточка] = :2 AND dz.Row_ID <> :3 `, 1, "S,S,S,S,S,S");
        var мРез = [];
        зТекФаза.УстановитьПараметры(this.НомерЗаписи, this.Объект["Задание-Карточка"], this.НомерЗаписи);
        if (зТекФаза.Следующий()) {
            мРез["НомерФазыВыход"] = зТекФаза.Номер;
            мРез["нзИсполнитель"] = зТекФаза.нзИсполнитель;
            мРез["нзОрганизацияИсполн"] = зТекФаза.нзОрганизацияИсполн;
            мРез["СтатусЗавершения"] = 1;
            мРез["Последний шаг"] = 0;
            мРез["Название"] = зТекФаза.Название;
            мРез["ДополнительныеФлаги"] = 0;
            мРез["Предыдущая фаза"] = this.Объект["Задание-Фаза"];
            мРез["ФИО"] = зТекФаза.ФИО;
            мРез["Организация"] = зТекФаза.Организация;
        }
        return мРез;
    }

    /**
     * Возвращает объъект с отработанными часами по работе
     * Поля:
     * 'Дата'
     * 'Отработано'
     * 'КОплате'
     * @returns {*}
     */
    ПолучитьЧасы() {
        var зДанных = Query('SELECT MAX(h.[Дата ввода]) [Дата], ' +
            'SUM(60*datepart(hour, h.[Время работы]) + datepart(minute, h.[Время работы]))/60 [Часы], ' +
            'SUM(60*datepart(hour, h.[Время работы]) + datepart(minute, h.[Время работы]))%60 [Минуты], ' +
            'SUM(60*datepart(hour, h.[Время к оплате]) + datepart(minute, h.[Время к оплате]))/60 [ОплЧасы], ' +
            'SUM(60*datepart(hour, h.[Время к оплате]) + datepart(minute, h.[Время к оплате]))%60 [ОплМинуты] ' +
            'FROM ~ДО часы~ h ' +
            'WHERE h.[Часы-задание] = :1', 1, "task,S");
        зДанных.УстановитьПараметры(this.НомерЗаписи);
        if (зДанных.Следующий()) {
            var отработано = "";
            if (зДанных.Часы + зДанных.Минуты > 0) отработано = зДанных.Часы + ":" + зДанных.Минуты.ЧислоСВедущимиНулями(2);
            var кОплате = "";
            if (зДанных.ОплЧасы + зДанных.ОплМинуты > 0) кОплате = зДанных.ОплЧасы + ":" + зДанных.ОплМинуты.ЧислоСВедущимиНулями(2);
            return {
                'Дата': !зДанных.Дата.isEmpty() ? зДанных.Дата : new Date(),
                'Отработано': отработано,
                'КОплате': кОплате
            };
        }
        return {
            'Дата': new Date(),
            'Отработано': "",
            'КОплате': ""
        };
    }

    /**
     * Проверяет достаточно ли данных для завершения задания, а так же наличие ошибок
     * если задание завершить нельзя, генерирует throw new StackError( сообщиениеОбОшибке );
     * @param ПараметрыЗавершения список параметров для завершения задания
     */
    ПроверитьВозможностьЗавершенияРаботы(ПараметрыЗавершения) {
        var ОшибкаЗавершения = "Завершить задание невозможно, т.к. ";
        if (!this.Объект) {
            throw new StackError(ОшибкаЗавершения + "не определен объект this.Объект");
        }
        if (this.ПолучитьПодзадания().length) {
            throw new StackError(ОшибкаЗавершения + "имеются незавершенные подзадания.")
        }
        if ( this.Объект['Подзадания'] == -1 && this.ПолучитьУточненияПоЗаданию().length ) {
            throw new StackError(ОшибкаЗавершения + "по заданию есть незакрытые уточнения.")
        }
        // Для последнего шага разрешено, т.к. он всегда завершен, но может требоваться возврат к пред. фазе
        if (this.Объект["Статус завершения"] && !this.Фаза.ПоследнийШаг) {
            throw new StackError(ОшибкаЗавершения + "задание уже завершено.")
        }
        if (ПараметрыЗавершения.нзИсполнительНаш >= 0 && ПараметрыЗавершения.нзСтороннийИсполнитель >= 0) {
            throw new StackError(ОшибкаЗавершения + "нельзя указывать исполнителей с обеих сторон.");
        }
        if (ПараметрыЗавершения.ФазаПерехода
            && ( !ПараметрыЗавершения.ФазаПерехода.НомерЗаписи || ПараметрыЗавершения.ФазаПерехода.НомерЗаписи < 0 )) {
            throw new StackError(ОшибкаЗавершения + "фаза перехода некорректна.");
        }
    }

    /**
     * Приводит все незполненные параметры завершения работы к значениям по умолчанию
     * @param ПараметрыЗавершения
     * @returns {*}
     * @private
     */
    _УстановитьУмолчанияЗавершения(ПараметрыЗавершения) {
        if (!ПараметрыЗавершения) ПараметрыЗавершения = {};
        if (ПараметрыЗавершения.СтатусЗавершения == undefined) {
            ПараметрыЗавершения.СтатусЗавершения = 1;
        }
        if (!ПараметрыЗавершения.Комментарий) {
            ПараметрыЗавершения.Комментарий = '';
        }
        if (!ПараметрыЗавершения.нзИсполнительНаш) {
            ПараметрыЗавершения.нзИсполнительНаш = -1;
        }
        if (!ПараметрыЗавершения.нзСтороннийИсполнитель) {
            ПараметрыЗавершения.нзСтороннийИсполнитель = -1;
        }
        if (ПараметрыЗавершения.фОтпСообщение == undefined) {
            ПараметрыЗавершения.фОтпСообщение = false;
        }
        if (ПараметрыЗавершения.ДатНач == undefined || ПараметрыЗавершения.ДатНач.isEmpty()) {
            ПараметрыЗавершения.ДатНач = new Date();
        }
        if (ПараметрыЗавершения.ДатКнц == undefined || ПараметрыЗавершения.ДатКнц.isEmpty()) {
            ПараметрыЗавершения.ДатКнц = new Date();
        }
        if (!ПараметрыЗавершения.сообщитьоЗадании) {
            ПараметрыЗавершения.сообщитьоЗадании = true;
        }
        // Если фаза перехода есть, должен быть указан исполнитель, если не указан, берем текущего
        if (!(ПараметрыЗавершения.нзИсполнительНаш >= 0
            || ПараметрыЗавершения.нзСтороннийИсполнитель >= 0 ) && ПараметрыЗавершения.ФазаПерехода) {
            ПараметрыЗавершения.нзИсполнительНаш = this.Пользователь;
        }
        if (!ПараметрыЗавершения.ОтправитьУведомление) {
            ПараметрыЗавершения.ОтправитьУведомление = false;
        }
        return ПараметрыЗавершения;
    }

    /**
     * Выполняет завершение работы и все необходимые для этого действия, включая проверки на корректность
     *
     * @param ПараметрыЗавершения = {Object} Параметры:
     * @param {Number=} ПараметрыЗавершения.СтатусЗавершения=1
     * @param {String=} ПараметрыЗавершения.Комментарий=""
     * @param {Number=} ПараметрыЗавершения.нзИсполнительНаш=-1
     * @param {Number=} ПараметрыЗавершения.нзСтороннийИсполнитель=-1
     * @param {Boolean=} ПараметрыЗавершения.фОтпСообщение=false Отправка сообщений по почте
     * @param {Date=} [ПараметрыЗавершения.ДатНач=new Date()]
     * @param {Date=} [ПараметрыЗавершения.ДатКнц=new Date()]
     * @param {Date=} ПараметрыЗавершения.ДатАвтоЗав=undefined
     * @param {Number=} ПараметрыЗавершения.ФазаПерехода=undefined Если не определен, то работ создано не будет
     * @param {Boolean=} ПараметрыЗавершения.сообщитьоЗадании=true Отправка сообщений в мессенджер
     * @param {Boolean=} ПараметрыЗавершения.ОтправитьУведомление=false Отправка инф-ции о переходе по email
     * @returns {Array} Список порожденных работ
     */
    Завершить(ПараметрыЗавершения) {
        ПараметрыЗавершения = this._УстановитьУмолчанияЗавершения(ПараметрыЗавершения);
        this.ПроверитьВозможностьЗавершенияРаботы(ПараметрыЗавершения);
        this.Объект["Задание-Редактор"] = this.Пользователь;
        this.Объект["Статус завершения"] = ПараметрыЗавершения.СтатусЗавершения;
        this.Объект["Дата завершения"] = new Date();
        this.Объект["Время завершения"] = new Date();
        this.Объект["Отметки"] = ПараметрыЗавершения.Комментарий;
        this.Сохранить();
        if (ПараметрыЗавершения.фОтпСообщение) {
            try {
                this.ОтправитьОтвет(true);
            }
            catch (err) {
                err.ОбработкаОшибки();
            }
        }
        if (ПараметрыЗавершения.ОтправитьУведомление) {
            // ??? this.Заявка.ОтправитьУведомление(this.Заявка.Объект['Карточка-Организация'], тело, телоHtml, тема, "", 2);
        }

        //если некуда переходить, завершим
        if (!ПараметрыЗавершения.ФазаПерехода) return;

        var ФазаПерехода = ПараметрыЗавершения.ФазаПерехода;
        if (ФазаПерехода.ПоследнийШаг) {
            this.Заявка.Объект["Дата завершения"] = new Date();
            this.Заявка.Объект["Время завершения"] = new Date();
            this.Заявка.Сохранить();
        }
        var мНовыеЗадания = this._СоздатьСледующееЗадание(ПараметрыЗавершения);
        if (!ФазаПерехода.ПоследнийШаг && ПараметрыЗавершения.сообщитьоЗадании) {
            for (let инд in мНовыеЗадания) {
                if (!мНовыеЗадания.hasOwnProperty(инд)) continue;
                new кМессенджер(1, this.Заявка, мНовыеЗадания[инд]).Отправить(ПараметрыЗавершения.нзИсполнитель,
                    ПараметрыЗавершения.Комментарий, ФазаПерехода.ДанныеКатегории['Название']);
            }
        }
        return мНовыеЗадания;
    }

    /**
     *
     * @param ПараметрыЗавершения
     * @returns {Array}
     * @private
     */
    _СоздатьСледующееЗадание(ПараметрыЗавершения) {
        if (!ПараметрыЗавершения.ФазаПерехода) {
            throw new StackError("Невозможно создать задание, не указана фаза перехода.");
        }
        var ФазаПерехода = ПараметрыЗавершения.ФазаПерехода;
        var ЗавершитьДо = this.Заявка.Объект["Завершить до"];
        if (ЗавершитьДо.isEmpty()) {
            ЗавершитьДо = this.Заявка.ЗавершитьДо();
        }
        var сегодня = new Date();
        if (ФазаПерехода.Объект["План в часах"]) {
            ЗавершитьДо = new кРабочийКалендарь().ПрибавитьРабочиеДни(сегодня, ФазаПерехода.Объект["План в часах"]);
        }
        сегодня = new Date();
        var СледующийНомер = this.ПолучитьСледующийНомер();
        var мЗадания = [];
        var Работа = new кРабота();
        Работа.Очистить();
        Работа.Объект["Завершить до"] = !ПараметрыЗавершения.ДатКнц.isEmpty() ? ПараметрыЗавершения.ДатКнц : ЗавершитьДо;
        Работа.Объект["Задание-Редактор"] = this.Пользователь;
        Работа.Объект["Задание-Карточка"] = this.Заявка.НомерЗаписи;
        Работа.Объект["Задание-Фаза"] = ФазаПерехода.НомерЗаписи;
        Работа.Объект["Предыдущий номер"] = this.Номер;
        Работа.Объект["Папки"] = -10;
        Работа.Объект["Дата выдачи"] = !ПараметрыЗавершения.ДатНач.isEmpty() ? ПараметрыЗавершения.ДатНач : сегодня;
        Работа.Объект["Время выдачи"] = сегодня;
        Работа.Объект["Свой номер"] = СледующийНомер;
        Работа.Объект["Срок исполнения"] = ФазаПерехода.Объект["План в часах"];
        Работа.Объект["Задание-Наряд"] = -1;
        Работа.Объект["Статус завершения"] = 0;
        Работа.Объект["ТипИсполнителя"] = 0;
        Работа.Объект["Дата автозавершения"] = ФазаПерехода.Автозавершение
            ? new Date().ПрибавитьДату("день", this.АвтозавершениеДней) : "";
        Работа.Объект["Задание-Исполнитель"] = ПараметрыЗавершения.нзИсполнительНаш;
        Работа.Объект["Задание-Представитель"] = ПараметрыЗавершения.нзСтороннийИсполнитель;
        Работа.Объект["ТипИсполнителя"] = Работа.Объект["Задание-Представитель"] > 0 ? 1 : 0;
        // если это последний шаг, сразу закроем
        if (ФазаПерехода.ПоследнийШаг) {
            Работа.Объект["Статус завершения"] = 1;
            Работа.Объект["Дата завершения"] = new Date();
            Работа.Объект["Время завершения"] = new Date();
        }
        var резпоз = Работа.Внести();
        мЗадания[String(резпоз)] = Работа;
        if (ФазаПерехода.ПоследнийШаг) return мЗадания;
        // Создаем подзадания, если в маршруте они были указаны
        var РаботаШаблон;
        for (let i in ФазаПерехода.Шаблоны) {
            if (!ФазаПерехода.Шаблоны.hasOwnProperty(i)) continue;
            var РаботаШаблон = new кРабота(НомерЗаписи(Работа.Объект), Работа.Объект, this.Заявка);
            РаботаШаблон.Объект["Задание-Исполнитель"] = ФазаПерехода.Шаблоны[i].Объект["Задание-Исполнитель"];
            РаботаШаблон.Объект["Задание-Редактор"] = this.Пользователь;
            РаботаШаблон.Объект["Отметки"] = ФазаПерехода.Шаблоны[i].Объект["Отметки"];
            РаботаШаблон.Объект["Задание-Карточка"] = Работа.Объект["Задание-Карточка"];
            РаботаШаблон.Объект["Подзадания"] = резпоз;
            РаботаШаблон.Объект["Дата выдачи"] = new Date();
            РаботаШаблон.Объект["Время выдачи"] = new Date();
            РаботаШаблон.Объект["Свой номер"] = СледующийНомер;
            РаботаШаблон.Объект["Задание-Фаза"] = Работа.Объект["Задание-Фаза"];
            РаботаШаблон.Объект["Статус завершения"] = 0;
            РаботаШаблон.Объект["Папки"] = -10;
            резпоз = РаботаШаблон.Сохранить();
            мЗадания[String(резпоз)] = РаботаШаблон;
        }
        return мЗадания;
    }

    ЕстьОтмеченныеЧасы() {
        var зЧасы = BufferedReader('SELECT ROW_ID FROM ~ДО Часы~ WHERE [Часы-Задание] = :2 ', 1, "id,S");
        зЧасы.УстановитьПараметры(this.НомерЗаписи);
        return зЧасы.Следующий() ? true : false;
    }

    /**
     * Добавляет дополнение к текущему заданию
     * @param отправитьУведомление - отправить ли уведомление на email
     */
    ПринятьДополнение(отправитьУведомление) {
        if (this.Объект.ТипИсполнителя < 5 || this.Объект.ТипИсполнителя > 9) {
            throw new StackError("Принять можно только дополнения.");
        }

        var файлыID = ``;
        var файлыИмена = ``;
        for (let файл of this.Файлы) {
            файлыID += `,` + файл.НомерЗаписи;
            файлыИмена += `,` + файл.Объект['Короткое имя'];
        }
        if (файлыID) {
            файлыИмена = файлыИмена.substr(1);
            файлыID = файлыID.substr(1);
            var кВнДок = Command("UPDATE ~ДО внешние документы~ SET [Файл-Карточка] = :1 WHERE ROW_ID IN(" + файлыID + ")", 1, "card,S");
            кВнДок.Выполнить(this.Заявка.НомерЗаписи);
            кВнДок.Завершить();
        }

        var примечание = "Принято в текущую заявку. " + ФИО(Пользователь().ФИО) + (файлыИмена ? ". Файлы:\n" + файлыИмена : "");
        this.Объект['ТипИсполнителя'] = 6;
        this.Объект['Задание-Редактор'] = this.Пользователь;
        this.Объект['Примечание'] = this.Объект['Примечание'] + "\n" + примечание;
        this.Сохранить();

        this.Заявка.Объект['Примечание'] += ( "\n\n" + this.Объект['Отметки'] + "\n" + примечание );
        this.Заявка.Сохранить();

        if (отправитьУведомление) {
            var тема = "Дополнения к заявке № " + this.Заявка.Объект['Номер'] + " от " + this.Заявка.Объект['Дата создания'].format('rusDate') +
                " по договору " + this.Заявка.Договор.Объект.Номер + "/" + this.Заявка.Договор.Объект.Тема;
            var тело = `По заявке № ` + this.Заявка.Объект['Номер'] + " от " + this.Заявка.Объект['Дата создания'].format('rusDate') +
                ":\n\n" + this.Объект['Отметки'] + "\n\nпринято Исполнителем " + ФИО(Пользователь().ФИО);
            var телоHtml = `<div>По заявке № ` + this.Заявка.Объект['Номер'] + " от " + this.Заявка.Объект['Дата создания'].format('rusDate') +
                ":</div><br><div>" + this.Объект['Отметки'] + "</div><br><div>принято Исполнителем " + ФИО(Пользователь().ФИО) + "</div>";
            this.Заявка.ОтправитьУведомление(this.Заявка.Объект['Карточка-Организация'], тело, телоHtml, тема, "", 2);
        }
    }

    /**
     * Отклоняет дополнение по работе, если оно еще не принято и является дополнением
     * @param комментарий - какой комментарий прикрепить к дополнению
     * @param отправитьУведомление - отправить ли уведомление на email
     */
    ОтклонитьДополнение(комментарий, отправитьУведомление) {
        if (this.Объект.ТипИсполнителя < 5 || this.Объект.ТипИсполнителя > 9) {
            throw new StackError("Отклонять можно только дополнения.");
        }

        var примечание = "Отклонено " + ФИО(Пользователь().ФИО) + " по причине:\n" + комментарий;
        this.Объект['ТипИсполнителя'] = 8;
        this.Объект['Задание-Редактор'] = this.Пользователь;
        this.Объект['Примечание'] = this.Объект['Примечание'] + "\n" + примечание;
        this.Сохранить();

        var файлыID = ``;
        for (let файл of this.Файлы) {
            файлыID += `,` + файл.НомерЗаписи;
        }
        if (файлыID) {
            файлыID = файлыID.substr(1);
            var кВнДок = Command(`UPDATE ~ДО внешние документы~ SET Примечание = :1, Признаки = Признаки &~ 1 WHERE ROW_ID IN(` + файлыID + `);`, 1, "komm,A");
            кВнДок.Выполнить("Отклонено " + ФИО(Пользователь().ФИО) + ". Причину см. в истории заявки.");
            кВнДок.Завершить();
        }

        if (отправитьУведомление) {
            var тема = "Дополнения к заявке № " + this.Заявка.Объект['Номер'] + " от " + this.Заявка.Объект['Дата создания'].format('rusDate') +
                " по договору " + this.Заявка.Договор.Объект.Номер + "/" + this.Заявка.Договор.Объект.Тема;
            var тело = "По заявке № " + this.Заявка.Объект['Номер'] + " от " + this.Заявка.Объект['Дата создания'].format('rusDate') +
                ":\n\n" + this.Объект.Отметки + "\n\nотклонено Исполнителем " + ФИО(Пользователь().ФИО) + " по причине:\n" + комментарий;
            var телоHtml = `<div>По заявке № ` + this.Заявка.Объект['Номер'] + " от " + this.Заявка.Объект['Дата создания'].format('rusDate') +
                ":</div><br><div>" + this.Объект.Отметки + "</div><br><div>отклонено Исполнителем " + ФИО(Пользователь().ФИО) + " по причине:</div><div>" + комментарий + "</div>";
            this.Заявка.ОтправитьУведомление(this.Заявка.Объект['Карточка-Организация'], тело, телоHtml, тема, "", 2);
        }
    }

    /**
     * Создает заявку по дополнению к работе, если оно еще не принято и является дополнением
     * @param отправитьУведомление - отправить ли уведомление на email
     */
    СоздатьЗаявкуПоДополнению(отправитьУведомление) {
        if (this.Объект.ТипИсполнителя < 5 || this.Объект.ТипИсполнителя > 9) {
            throw new StackError("Отдельные заявки создавать можно только по дополнениям.");
        }

        var заявка = new кЗаявка();
        заявка.Очистить();
        КопироватьЗапись(заявка.Объект, this.Заявка.Объект, 2);
        заявка.Объект['Карточка-Заявка'] = this.НомерЗаписи;
        заявка.Объект['Дополнительная работа'] = this.Заявка.НомерЗаписи;
        заявка.Объект['Автор'] = this.Пользователь;
        заявка.Объект['Дата создания'] = new Date();
        заявка.Объект['Время создания'] = new Date();
        заявка.Объект['Завершить до'] = заявка.ЗавершитьДо();
        заявка.Объект['Примечание'] = this.Объект['Отметки'];
        заявка.Объект['Номер'] = заявка.НовыйНомер();
        var тема = "По заявке № " + this.Заявка.Объект['Номер'] + " от " + this.Заявка.Объект['Дата создания'].format("rusDate");
        тема += "\n\n" + this.Объект['Отметки'] + "\n\nоформлено новой заявкой № " + заявка.Объект['Номер'] +
            " от " + заявка.Объект['Дата создания'].format("rusDate");
        заявка.Объект['Тема'] = тема;
        заявка.Сохранить();

        var файлыID = ``;
        var файлыИмена = ``;
        for (let файл of this.Файлы) {
            файлыID += `,` + файл.НомерЗаписи;
            файлыИмена += `,` + файл.Объект['Короткое имя'];
        }
        if (файлыID) {
            файлыИмена = файлыИмена.substr(1);
            файлыID = файлыID.substr(1);
            var кВнДок = Command("UPDATE ~ДО внешние документы~ SET [Файл-Карточка] = :1 WHERE ROW_ID IN(" + файлыID + ")", 1, "card,S");
            кВнДок.Выполнить(this.Заявка.НомерЗаписи);
            кВнДок.Завершить();
        }

        this.Объект['ТипИсполнителя'] = 7;
        this.Объект['Задание-Редактор'] = this.Пользователь;
        var примечание = "Принято. Создана новая заявка № " + заявка.Объект.Номер + ". " + ФИО(Пользователь().ФИО) +
            (файлыИмена ? ". Приняты новые файлы:\n" + файлыИмена : "");
        this.Объект['Примечание'] = this.Объект['Примечание'] + "\n" + примечание;
        this.Сохранить();

        if (отправитьУведомление) {
            var телоHtml = "<div>По заявке № " + this.Заявка.Объект['Номер'] + " от "
                + this.Заявка.Объект['Дата создания'].format("rusDate") +
                ":</div><br><div>" + this.Объект.Отметки + "</div><br><div>оформлено новой заявкой № "
                + заявка.Объект.Номер + " от " + заявка.Объект['Дата создания'].format("rusDate") + "</div>";
            заявка.ОтправитьУведомление(заявка.Объект['Карточка-Организация'], тема, телоHtml, примечание, "", 2)
        }
    }

    /**
     * Формирует письмо по работе
     * @param добавитьКоммент
     */
    ОтправитьОтвет(добавитьКоммент) {
        if (!this.Заявка || this.Заявка.НомерЗаписи < 0) throw new StackError("Не указана заявка\n Отправка невозможна.");
        var кому = this.Заявка.Объект['ЭлПочта'];
        var организация = this.Заявка.Объект['Карточка-Организация'];
        if (!кому) { // не было адреса для ответа - возьмем с организации
            if (this.ЭтоДо) {
                кому = this.Заявка.Объект['Карточка-Организация>email'];
            } else {
                if (this.Заявка.Объект['КлиентТип'] == "Частное лицо") {
                    кому = this.Заявка.Объект['Заявка-Частное лицо>email']
                    организация = -1;
                } else {
                    кому = this.Заявка.Объект['Карточка-Организация>email'];
                }
            }
        }
        var мАдрес = кому.match(/<[A-Za-z0-9_@\.\-]+>/i);
        if (мАдрес) кому = мАдрес[0];
        if (!кому) throw new StackError("На заявке не указана электронная почта для ответа");
        // смотрим ящик для отправки писем на маршруте
        var сообщение = new кЭлСообщение(); // сообщение для отправки уведомления
        var ящик = this.Заявка.Объект['Карточки-Маршрут>Маршрут-Ящик'];
        ящик = сообщение.ПрочитатьЯщик(ящик > 0 ? ящик : "Отправка уведомлений");
        if (ящик == -1) throw new StackError("Не указан почтовый ящик для отправки ответа по заявке");

        var копия = new кОрганизация(организация).ЭлектронныйАдресОбязательнойКопии();
        var номер = this.Заявка.Объект['Номер'] + (this.Заявка.Объект['СтороннийНомер'] ? " / " + this.Заявка.Объект['СтороннийНомер'] : "" );
        var тема = "Стек: по заявке № " + номер +
            " от " + this.Заявка.Объект['Дата создания'].format('rusDate');
        var текст = '';
        if (!сообщение.Ящик.ЭтоHtml()) {
            текст = 'По Вашей заявке № ' + номер +
                " от " + this.Заявка.Объект['Дата создания'].format('rusDate') + "\n" +
                this.Заявка.Объект['Отметки'] +
                ( this.Объект.Отметки && добавитьКоммент ? "\n\nСообщаю следующее:\n" + this.Объект.Отметки : "" );
        } else {
            текст = '<div><strong>По Вашей заявке № ' + номер +
                " от " + this.Заявка.Объект['Дата создания'].format('rusDate') + "</strong></div><div><i>" +
                this.Заявка.Объект['Отметки'] + "</i></div>" +
                ( this.Объект.Отметки && добавитьКоммент ? "<br><div><strong>Сообщаю следующее:</strong></div><div>" + this.Объект.Отметки : "" ) + "</div>";
        }
        сообщение.ПрочитатьИзКонтекста({
            'Кому': кому,
            'Копия': копия,
            'Тема': тема,
            'Папка': сообщение.Ящик.НомерЗаписи,
            'Приоритет': 0,
            'Организация-Сообщения': организация,
            'Заявка-Почта': this.Объект['Задание-Карточка']
        });
        сообщение.Ответить('ДОборот', текст, this.НомерЗаписи);
    }
}

/**
 * @class кПереход
 * @extends БазовыйОбъект
 */
class кПереход extends БазовыйОбъект{
    /**
     *
     * @param НомерЗаписи
     * @param Контекст
     * @param Фаза
     */
    constructor( НомерЗаписи, Контекст, Фаза ){
        super( "ДО переходы", НомерЗаписи, Контекст );
        this.Фаза = Фаза;
        /**
         * ROW_ID следующей фазы
         * @type {number}
         */
        this.ФазаПерехода = this.Фаза.НомерЗаписи;
        /**
         * Требует ли указать исполнителя
         * @type {boolean}
         */
        this.ТребуетИсполнителя = false;
        /**
         * Какой разрешен исполнитель true - наш, else - сторонний
         * @type {boolean}
         */
        this.ИсполнительИзНашейОрганизации = true;
        /**
         * Требует ли указание орг-ции
         * @type {boolean}
         */
        this.ТребуетОрганизацию = false;
        /**
         * Требует ли срок исполнения
         * @type {boolean}
         */
        this.ТребуетСрокИсполнения = false;
        /**
         * Назначить исполнителя с предыдущей фазы
         * @type {boolean}
         */
        this.НазначитьПредыдущегоИсполинителя = false;
        /**
         * Требует изменить срок завершения
         * @type {boolean}
         */
        this.ТребуетСменыСрокаЗавершения = false;
        /**
         * Отправлять ли уведомление клиенту
         * @type {boolean}
         */
        this.ОтправитьУведомлениеКлиенту = false;
        /**
         * Возможность указания периода работы
         * @type {boolean}
         */
        this.МожноУказатьПериодРаботы = false;
        /**
         * Состояние при завершении
         * @type {number}
         */
        this.СостояниеПризавершении = 0;
        /**
         * Исполнители перехода
         * @type {{}}
         * @private
         */
        this._Исполнитель;

        /**
         * Фаза перехода
         * @type {кФаза}
         * @private
         */
        this._ФазаВыход;
        /**
         * Предыдущая фаза
         * @type {кФаза}
         * @private
         */
        this._ФазаВход;
        if( this.НомерЗаписи ){
            this.Инициализировать();
        }
    }
    /**
     * устанавливает фазу, на которую будет совершен переход
     */
    set ФазаВыход( Фаза ) {
        this._ФазаВыход = Фаза;
    }
    /**
     * Возвращает фазу, на которую будет совершен переход
     */
    get ФазаВыход() {
        if( !this._ФазаВыход || this._ФазаВыход.НомерЗаписи != this.Объект["Фаза-Выход"] ){
            this._ФазаВыход = new кФаза(this.Объект["Фаза-Выход"], null, this.Фаза.Работа );
        }
        return this._ФазаВыход;
    }

    /**
     * устанавливает фазу, c которой был совершен переход
     */
    set ФазаВход( Фаза ) {
        this._ФазаВход = Фаза;
    }
    /**
     * Возвращает фазу, с которой был совершен переход
     */
    get ФазаВход(){
        if( !this._ФазаВход || this._ФазаВход.НомерЗаписи != this.Объект["Фаза-Вход"] ){
            this._ФазаВход = new кФаза(this.Объект["Фаза-Вход"], null, this.Фаза.Работа);
        }
        return this._ФазаВход;
    }

    /**
     * Получение исполнителей по переходу
     * @returns {*}
     */
    get Исполнитель() {
        if( this._Исполнитель ) return this._Исполнитель;
        this._Исполнитель = {};
        this._Исполнитель.нзОрганизация = -1;
        this._Исполнитель.Организация = "";
        this._Исполнитель.нзПредставитель = -1;
        this._Исполнитель.нзСотрудник = -1;
        this._Исполнитель.Сотрудник = "";
        this._Исполнитель.Представитель = "";
        // Такая проверка нужна для стартовых фаз, когда ничего не заполнено, но галки поставить в маршруте могут
        if (this.НазначитьПредыдущегоИсполинителя && this.Фаза.Работа  && this.Фаза.Работа.Объект ) {
            var поискРаботы = Query(`SELECT TOP 1 zad.[Задание-Исполнитель], zad.[Задание-Наряд],
                                                        zad.Папки, zad.[Задание-Представитель]
                                           FROM ~ДО Задания~ zad
                                              JOIN ~ДО Фазы~ doFaz ON zad.[Задание-Фаза] = doFaz.Row_ID
                                                                      and doFaz.Row_ID = :1
                                           WHERE zad.[Задание-Карточка] = :2  and zad.[Подзадания] = -1
                                           ORDER BY zad.ROW_ID desc`, 1, "S,S,S,S");

            поискРаботы.УстановитьПараметры(this.Объект["Предыдущая фаза"], this.Фаза.Работа.Объект["Задание-Карточка"]);
            if (поискРаботы.Следующий()) {
                this._Исполнитель.нзПредставитель = поискРаботы["Задание-Представитель"];
                this._Исполнитель.нзСотрудник = поискРаботы["Задание-Исполнитель"];
                var Сотрудник = new кСотрудник(this._Исполнитель.нзСотрудник)
            } else{
                var поискСотрудника = Query(
                        ` SELECT TOP 1 [Исполнитель по умолчанию]
                            FROM ~ДО фазы~ df
                            WHERE ROW_ID = :1 `, 1, "rID,S" );
                поискСотрудника.УстановитьПараметры( this.Объект["Предыдущая фаза"] );
                while( поискСотрудника.Следующий() ){
                    this._Исполнитель.нзПредставитель = -1;
                    this._Исполнитель.нзСотрудник =  поискСотрудника["Исполнитель по умолчанию"];
                    var Сотрудник = new кСотрудник( this._Исполнитель.нзСотрудник );
                }
            }
        }
        if ( this.ФазаВыход.ИсполнительПоУмолчанию != -1 && this.ИсполнительИзНашейОрганизации ) {
            var Сотрудник = new кСотрудник(this.ФазаВыход.ИсполнительПоУмолчанию);
            this._Исполнитель.нзОрганизация = Сотрудник.ПолучитьНзОрганизации();
            this._Исполнитель.нзСотрудник = this.ФазаВыход.ИсполнительПоУмолчанию;
        }
        // Если исполнитель не указан и организация сторонняя, проверим, если представитель всего 1, возмем его
        if ( this._Исполнитель.нзПредставитель == -1 && !this.ИсполнительИзНашейОрганизации ) {
            var мПредставители = кОрганизация.ПолучитьПредставителейОрганизации(this.НомерЗаписи);
            var i = 0;
            for( let Представитель in мПредставители ){
                if( мПредставители.hasOwnProperty(Представитель) ) continue;
                if( i == 1 ){
                    this._Исполнитель.нзПредставитель = -1;
                    break;
                }
                this._Исполнитель.нзПредставитель = мПредставители[Представитель].ROW_ID;
                i++;
            }
        }
        if( !this.ИсполнительИзНашейОрганизации && this._Исполнитель.нзПредставитель == -1 ){
            this._Исполнитель.нзПредставитель = this.Фаза.Работа.Заявка.Объект['Карточка-Представитель'];
        }
        this._Исполнитель.Сотрудник = this._Исполнитель.нзСотрудник != -1 ? Сотрудник.Объект["ФИО"] : "";
        if( this._Исполнитель.нзПредставитель != -1 ) {
            var з_пред = Query(`Select Top 1 ФИО From ~Частные лица~ Where ROW_ID = :1`, 10, "ROW,S");
            з_пред.УстановитьПараметры(this._Исполнитель.нзПредставитель);
            this._Исполнитель.Представитель = з_пред.Следующий() ? з_пред.ФИО : "";
        }
        this._Исполнитель.Организация = this._Исполнитель.Представитель;
        return this._Исполнитель;
    }
    Инициализировать(){
        if( !this.НомерЗаписи ){
            throw  new StackError( "Невозможно инициализировать переход с номером записи " + this.НомерЗаписи );
        }
        super.Прочитать( this.НомерЗаписи );
        this.ИсполнительИзНашейОрганизации = true;
        this.СостояниеПризавершении          = this.Объект["Статус завершения"];
        this.ИсполнительИзНашейОрганизации   = this.Объект["ТипСотрудника"] ? false : true;
        this.ТребуетИсполнителя              = this.Объект.ДополнительныеФлаги % 2   >= 1  ? true : false;
        this.ТребуетОрганизацию              = this.Объект.ДополнительныеФлаги % 4   >= 2  ? true : false;
        this.ТребуетСрокИсполнения           = this.Объект.ДополнительныеФлаги % 8   >= 4  ? true : false;
        this.НазначитьПредыдущегоИсполинителя = this.Объект.ДополнительныеФлаги % 16  >= 8  ? true : false;
        this.ТребуетСменыСрокаЗавершения     = this.Объект.ДополнительныеФлаги % 32  >= 16 ? true : false;
        this.ОтправитьУведомлениеКлиенту     = this.Объект.ДополнительныеФлаги % 64  >= 32 ? true : false;
        this.МожноУказатьПериодРаботы        = this.Объект.ДополнительныеФлаги % 128 >= 64 ? true : false;
        this._Исполнитель = undefined;
        this._ФазаВыход = undefined;
        this._ФазаВход = undefined;
    }
}
/**
 * @class кФаза
 * @extends БазовыйОбъект
 */
class кФаза extends БазовыйОбъект{
    /**
     *
     * @param Работа
     * @param НомерЗаписи
     * @param Контекст
     */
    constructor( НомерЗаписи, Контекст, Работа ) {
        super('ДО фазы', НомерЗаписи, Контекст);
        if (!Контекст) {
            this.Прочитать(НомерЗаписи);
        }

        this.Работа = Работа;
        /**
         * Порядковый номер фазы
         * @type {number}
         */
        this.Номер = 0;
        /**
         * Срок исполнения фазы
         * @type {number}
         */
        this.Срок = 0;
        /**
         * @type {number}
         */
        this.Автовыполнение = 0;
        /**
         * Куда переходить при автовыполнении
         * @type {number}
         */
        this.ПереходПриУспехе = 0;
        /**
         * массив переходов с элементами кПереход
         * @type {Array}
         * @private
         */
        this._Переходы;
        /**
         * Завершать автоматически по истечении срока, true - завершать, false - нет
         * @type {boolean}
         */
        this.Автозавершение = false;
        /**
         * Через сколько дней завершать
         * @type {number}
         */
        this.АвтозавершениеДней = 0;
        /**
         * через сколько дней отправить письмо предупреждение
         * @type {number}
         */
        this.АвтозавершениеПредупреждение = 0;
        /**
         * Куда переходить при автозавершении
         * @type {number}
         */
        this.АвтозавершениеФаза = 0;
        /**
         * Примечание к фазе
         * @type {string}
         */
        this.Комментарий = "";
        /**
         * ROW_ID исполнителя по умолчанию
         */
        this.ИсполнительПоУмолчанию = -1;
        /**
         * Выбрать предыдущую фазу и исполнителя
         * @type {boolean}
         */
        this.ВыбратьПредыдущуюФазуиИсполнителя = false;
        /**
         * Это последний шаг
         * @type {boolean}
         */
        this.ПоследнийШаг = false;
        /**
         * Комментарий обязателен
         * @type {boolean}
         */
        this.ОбязателенКомментарий = false;
        /**
         * Список подзаданий при завершении, нереализовано
         * @type {Array}
         */
        this.Подзадания = [];

        /**
         * Список шаблонов перехода
         * @type {БазовыйОбъект}
         * @private
         */
        this._Шаблоны;

        this.ДанныеКатегории = {
            Название: "",
            Автовыполнение: 0,
            Цвет: ""
        };
        this.Проинициализировать();
    }

    /**
     * Заполнение массива this.Шаблоны шаблоны переходов фаз
     */
    get Шаблоны(){
        if( this._Шаблоны ) return this._Шаблоны;
        this._Шаблоны = [];
        if( !this.зШаблоны ) {
            this.зШаблоны = Query( ` SELECT * FROM ~ДО задания шаблон~ WHERE [Задание-Фаза] = :1 `, 10, "rID,S" );
        }
        this.зШаблоны.УстановитьПараметры( this.НомерЗаписи );
        while( this.зШаблоны.Следующий() ){
            this._Шаблоны[this.зШаблоны.ROW_ID] = new БазовыйОбъект( "ДО задания шаблон", this.зШаблоны.ROW_ID, this.зШаблоны );
        }
    }
    /**
     *
     */
    get Переходы(){
        if( this._Переходы ) return this._Переходы;
        this._Переходы = {};
        if( !this.зПереходы ) {
            this.зПереходы = Query(
                ` SELECT ROW_ID, [Фаза-Вход], [Фаза-Выход], [Автовыполнение], [Интервал], [Название]
                    , [Исходный текст], [Номер], [ДополнительныеФлаги], [Предыдущая фаза]
                    , [Статус завершения], [ТипСотрудника]
                    FROM ~ДО переходы~
                    WHERE [Фаза-Вход] = :1 `, 10, "rID,S");
        }
        this.зПереходы.УстановитьПараметры( this.НомерЗаписи );
        while( this.зПереходы.Следующий() ){
            this._Переходы[String(this.зПереходы.ROW_ID)] = new кПереход( this.зПереходы.ROW_ID, this.зПереходы, this );
        }

        /**
         * Если данная фаза предусматривает возврат на предыдущую фазу, добавим ее в список переходов
         */
        if( this.ВыбратьПредыдущуюФазуиИсполнителя  ){
            if( this.Работа.Объект ){
                // на предыдущую фазу возвращаем на сторону др. организации, что бы перешагнуть переходы между
                //сотрудниками одной организации
                if( this.Работа.Объект['Задание-Исполнитель'] != -1 ) {
                    var допСтр = " AND dz.[Задание-Исполнитель] = -1 ";
                } else{
                    var допСтр = " AND dz.[Задание-Исполнитель] != -1 ";
                }
                // Да, огромный запрос, Да, скорей всего можно с этим что то сделать
                var зПредыдущаяРабота = Query(
                    ` DECLARE @ticket int SET @ticket  = :1
                      DECLARE @work int SET @work  = :2
	                   SELECT st.ROW_ID as st_ID, st.ФИО as st_FIO, chL.ROW_ID as chL_ID
	                    , chL.[Организация-Частные лица] as chl_orgID,  chL.ФИО as chl_FIO
	                    , dz.stageID as stage_ID, dz.ROW_ID as workID
	                    , dz.stage_name as stage_name
	                     FROM ( SELECT TOP 1 dz.[Задание-Исполнитель], dz.[Задание-Представитель]
						          , df.ROW_ID as stageID, dkf.Название as stage_name, dz.ROW_ID
                                  FROM ~ДО Задания~ dz
                                  JOIN ~ДО фазы~ df ON dz.[Задание-Фаза] = df.ROW_ID
                                  JOIN stack.[ДО категории фаз] dkf ON dkf.ROW_ID = df.[Фаза-Категория]
			                     WHERE dz.[Задание-Карточка] = @ticket
			                      AND df.[Последний шаг] = 0  ` + допСтр
                    + ` AND dz.Подзадания = -1 AND dz.ROW_ID < @work
			                  ORDER BY dz.ROW_ID DESC ) dz
                    LEFT JOIN ~Сотрудники~ st ON st.ROW_ID = dz.[Задание-Исполнитель]
                    LEFT JOIN ~Частные лица~ chL ON chL.ROW_ID = dz.[Задание-Представитель] `
                    , 1, "ticket,S,work,S" );
                // Получение перехода, имеющего требуемые входящую и исходящую фазы
                var зПереход = Query(
                   ` DECLARE @ticket int SET @ticket  = :1
                     DECLARE @work int SET @work  = :2
                     DECLARE @stage int SET @stage  = :3
                      SELECT TOP 1 *
                        FROM ~ДО переходы~
                       WHERE [Фаза-Выход] = @stage AND [Фаза-Вход] in
                            ( SELECT dz.[Задание-Фаза]
                                FROM ~ДО Задания~ dz
                               WHERE dz.[Задание-Карточка] = @ticket
                                AND dz.Подзадания = -1 AND dz.ROW_ID < @work ) `, 1, 'ticket,S,work,S,stage,S' );
                зПредыдущаяРабота.УстановитьПараметры( this.Работа.Заявка.НомерЗаписи, this.Работа.НомерЗаписи );
                while( зПредыдущаяРабота.Следующий() ) {
                    зПереход.УстановитьПараметры(this.Работа.Заявка.НомерЗаписи, зПредыдущаяРабота.workID
                        , зПредыдущаяРабота.stage_ID);
                    while (зПереход.Следующий()) {
                        var нзПереход = String(зПереход.ROW_ID);
                        this._Переходы[нзПереход] = new кПереход(зПереход.ROW_ID, зПереход, this);
                        this._Переходы[нзПереход].Объект.Название = "Вернуть на " + зПредыдущаяРабота.stage_name;
                        this._Переходы[нзПереход].НомерЗаписи = зПереход.ROW_ID;
                        this._Переходы[нзПереход]._Исполнитель = {};
                        this._Переходы[нзПереход]._Исполнитель.нзОрганизация = зПредыдущаяРабота.chl_orgID;
                        this._Переходы[нзПереход]._Исполнитель.Организация
                            = СвойствоОрганизации(зПредыдущаяРабота.chl_orgID, "ОК");
                        this._Переходы[нзПереход]._Исполнитель.нзПредставитель = зПредыдущаяРабота.chL_ID;
                        this._Переходы[нзПереход]._Исполнитель.нзСотрудник = зПредыдущаяРабота.st_ID;
                        this._Переходы[нзПереход]._Исполнитель.Сотрудник = зПредыдущаяРабота.st_FIO;
                        this._Переходы[нзПереход]._Исполнитель.Представитель = зПредыдущаяРабота.chl_FIO;
                        // Что бы не давать выбрать исполнителя
                        this._Переходы[нзПереход].ТребуетИсполнителя = false;
                    }
                }
            }
        }
        return this._Переходы;
    }
    ЗаполнитьКатегорию() {
        var зКатегория = Query( `SELECT * FROM ~ДО категории фаз~ WHERE ROW_ID = :1 `, 1, "rID,S" );
        зКатегория.УстановитьПараметры( this.Объект['Фаза-Категория'] );
        if( зКатегория.Следующий() ){
            this.ДанныеКатегории = {
                Название: зКатегория.Название,
                Автовыполнение: зКатегория.Автовыполнение,
                Цвет: зКатегория.Цвет
            };
        }
    }
    Проинициализировать(){
        this.ЗаполнитьКатегорию();
        this.Номер = this.Объект.Номер;
        this.Срок = this.Объект['План в часах'];
        this.Автовыполнение = this.Объект.Автовыполнение;
        this.ПереходПриУспехе = this.Объект.СледующийНомер;
        this.Автозавершение = this.Объект["Автоматическое завершение"] ? true : false;
        this.АвтозавершениеДней = this.Объект["Авт_зав_дней"];
        this.АвтозавершениеПредупреждение = this.Объект["Авт_зав_дней"];
        this.АвтозавершениеФаза = this.Объект["Авт_переход"];
        this.Комментарий = this.Объект.Авт_коммент;
        this.ИсполнительПоУмолчанию = this.Объект["Исполнитель по умолчанию"];
        this.ВыбратьПредыдущуюФазуиИсполнителя = this.Объект["УказатьПредФазу"] ? true : false;
        this.ПоследнийШаг =  this.Объект["Последний шаг"] ? true : false;
        this.ОбязателенКомментарий = this.Объект["Обязателен комментарий"] ? true : false;
    }
    Очистить(){
        this._Шаблоны = undefined;
        this._Переходы = undefined;
    }
}
/**
 * @class ПраваДО
 */
class ПраваДО {
    /**
     * возращает true, если указанное право разрешено для пользователя
     * @param право {Number|String} - проверяемое право пользователя
     * @returns {boolean|*} - true, если указанное право разрешено
     */
    static Разрешено( право ){
        var разрешение = 0x0;
        var права = УказанноеПравоНаРесурс( "Документооборот" );
        if( typeof право == 'string' ) {
            switch( право.toLowerCase() ){
                case 'завершатьчужиезадания':
                    разрешение = 0x1;
                    break;
                case 'созданиесертификатов':
                    разрешение = 0x2;
                    break;
                case 'созданиеftp':
                    разрешение = 0x4;
                    break;
                case 'модераторыbugtracker':
                    разрешение = 0x8;
                    break;
                case 'руководитель':
                    разрешение = 0x10;
                    break;
            }
        }
        else if ( typeof право == 'number' ) {
            разрешение = право
        } else throw new StackError( 'Передан неврный тип аргумента при проверке прав сотрудника' );
        // возвращаем с проверкой на супервизора, т.к. Права для него всегда 0!
        return (права & разрешение) > 0 || Супервизор();
    }
}
/**
 * @class кМессенджер @extends БазовыйОбъект
 */
class кМессенджер extends БазовыйОбъект {
    /**
     * @param тип - тип сообщения
     * @param заявка @type {кБазовыйОбъект} - объект от таблицы 'ДО карточки', не обязательный
     * @param задание @type {кБазовыйОбъект} - от таблицы 'ДО задания', не обязательный
     */
    constructor( тип, заявка, задание ){
        super( "ДО сообщения" );
        /**
         * тип сообщения:
         * 0 - обычное сообщение чата
         * 1 - новое задание
         * 2 - изменение задания
         * 3 - переназначенное задание
         * 4 - новость
         * 5 - новое подзадание
         * 6 - уточнение задания
         * 7 - уведомление о выполнении задания
         * 8 - обычное уведомление
         * @type {Number}
         */
        this.Тип = тип;
        /**
         * задание мессенджера
         * @type {кРабота}
         */
        this.Задание = задание;
        /**
         * заявка мессенджера
         * @type {кРабота}
         */
        this.Заявка = заявка;
    }

    /**
     * возвращает
     * @returns {boolean}
     * @constructor
     */
    Проверка(){
        try {
            if( this.Заявка && this.Заявка.НомерЗаписи < 0 ) throw new StackError( "Мессенджер: у заявки отрицательный НомерЗаписи" );
            if( this.Задание && this.Задание.НомерЗаписи < 0 ) throw new StackError( "Мессенджер: у задания отрицательный НомерЗаписи" );
            if( this.Тип < 0 || this.Тип > 8 ) throw new StackError( "Мессенджер: неправильный тип сообщения" );
        }
        catch( err ){
            if( err instanceof StackError ) err.ОбработкаОшибки();
            return false;
        }

        return true;
    }

    /**
     * отправляет сообщение всем действующим сотрудникам
     * @param отКого @type {string} - отправитель сообщения
     * @param сообщение @type {string} - текст сообщения
     */
    ОтправитьСотрудникам( отКого, сообщение ){
        if( !this.Проверка() ) return false;
            // извлекаем всех действующих сотрудников
        var зСотрудники = BufferedReader( "SELECT [row_id] as [Кому] \
            FROM ~Сотрудники~ \
            WHERE [ФИО] NOT LIKE '%группа%' AND [ФИО] NOT LIKE '%отдел%' \
                 AND [ФИО] NOT LIKE '%Администратор%' AND [Сотрудники_ADD] != 0 AND [Уволен] IS NULL \
            ORDER BY [ФИО]", 500 );
        зСотрудники.УстановитьПараметры();
        while( зСотрудники.Следующий() ) {
            this.Добавить( зСотрудники.Кому, сообщение, '', отКого );
        }
        return true;
    }
    Отправить( кому, сообщение, названиеРаботы, тема ) {
        if( !this.Проверка() ) return false;

        var пользователь = НомерЗаписи( Пользователь() );
        var исполнитель = this.Задание.Объект['Задание-Исполнитель'];
        var рез = false;
        // Задание назначаем сами себе - сообщения не нужны
        if( пользователь == исполнитель && исполнитель == кому ) return true;

        switch( this.Тип ) {
            case 1: // Текущий пользователь посылает новому исполнителю задание
                if( кому != -1 ) рез = this.Добавить( кому, сообщение, тема, названиеРаботы );
                if( пользователь != исполнитель && кому != исполнитель ) { // Текущий пользователь снял с текущего исполнителя задание
                    this.Тип = 3;
                    рез = this.Добавить( исполнитель );
                }
                break;
            case 2:
                рез = this.Добавить( исполнитель );
                break;
            case 5:
            case 6: // тема "Произошло изменение заявки, Необходимо выбрать действие."
                рез = this.Добавить( исполнитель, this.Задание.Объект.Отметки, тема, названиеРаботы );
                break;
        }
        return рез;
    }

    /**
     * добавляет сообщение в чат
     * @param кому @type {number} - ид сотрудника, кому предназначено сообщение
     * @param сообщение @type {string} - текст сообщения
     * @param тема @type {string} - тема сообщения, если есть заявка, то Примечание (текст заявки)
     * @param названиеРаботы @type {string} - название работы
     * @param отКого @type {string} - подпись отправителя
     * @returns {Boolean} - true, если удалось внести запись
     */
    Добавить( кому, сообщение, тема, названиеРаботы, отКого ){
        if( сообщение == undefined ) сообщение = '';
        if( названиеРаботы == undefined ) названиеРаботы = '';
        if( отКого == undefined ) отКого = Пользователь().ФИО;
        if( тема == undefined && this.Заявка ) тема = this.Заявка.Объект.Примечание;

        var номерЗаявки = this.Заявка ? this.Заявка.Объект.Номер : '';
        var заказчик = this.Заявка ? this.Заявка.Объект['Карточка-Организация>Название'] : '';
        var сегодня = new Date();
        this.ПрочитатьИзКонтекста( { 'ВремяЗаписи' : сегодня,
            'Пользователь' : кому,
            'ТипСообщения' : this.Тип,
            'ОтКого' : отКого,
            'НомерЗаявки' : номерЗаявки,
            'Заказчик' : заказчик,
            'Сообщение' : сообщение,
            'Тема' : тема,
            'НазваниеРаботы' : названиеРаботы,
            'Просмотрено' : 0
        } );
        var нзНовоеСообщение = this.Внести();
        // TODO криво сделан мессенджер, стек не умеет работать с datateme
        var кОбновитьВремя = Command( ` UPDATE ~ДО сообщения~ SET [ВремяЗаписи] = getDate() WHERE ROW_ID = :1 `, 1, "rID,S" );
        кОбновитьВремя.Выполнить( нзНовоеСообщение );
        кОбновитьВремя.Завершить();
        return нзНовоеСообщение;
    }
}

/**
 * Класс с методами автоматический действи ДО
 * @class АвтоматическиеДействия
 * АвтоматическиеДействия.ПредупреждениеЗакрытияЗаявок()
 */
class АвтоматическиеДействия {
    constructor( идРаботы ) {
        this.ПолучитьШаблонСообщения = Query( ` SELECT [ШаблонТекст] FROM ~Сообщения Шаблон~ WHERE ROW_ID = :1 `, 1, "rID,S");
        /**
         * задание для автоматических действий
         * @type {кРабота}
         */
        this.Работа = null;
        if( идРаботы ) this.Работа = new кРабота( идРаботы );
    }
    /**
     * Метод завершения заявок на фазе с флагом автозавершения
     */
    static ЗавершениеЗаявок() {
        Сообщить("Старт автоматического завершения!");
        var зФазыАвт = BufferedReader(`SELECT faz.*, vihod.Номер НомерФазыВыход, vihod.ROW_ID as ИдФазаПереход FROM ~ДО Фазы~ faz
                                     JOIN ~До фазы~ vihod on vihod.ROW_ID = faz.Авт_переход
                                     WHERE faz.[Автоматическое завершение]=1`, 100, "");
        зФазыАвт.УстановитьПараметры();
        ВывестиСтатус("Закрытие заявок...");
        while (зФазыАвт.Следующий()) {
            var зТекРаб = BufferedReader(`SELECT * FROM ~ДО Задания~ WHERE [Статус завершения] = 0 and [Задание-Фаза] = :1 `, "100", "S,S");
            зТекРаб.УстановитьПараметры(зФазыАвт.Row_ID);
            while (зТекРаб.Следующий()) {
                var датаЗакрытия = new кРабочийКалендарь().ПрибавитьРабочиеДни(зТекРаб['Дата выдачи'], зФазыАвт.Авт_зав_дней);
                if (зТекРаб['Дата автозавершения'] > датаЗакрытия) // если на задании установлена дата авт. завершения, то берем ее
                    датаЗакрытия = зТекРаб['Дата автозавершения'];
                if (датаЗакрытия <= new Date() && зТекРаб['Завершить до'] <= new Date()) {
                    //this.Работа = new кРабота();
                    var Уведомление = new АвтоматическиеДействия( зТекРаб.ROW_ID );
                    ВывестиСтатус("Закрытие заявок: " + Уведомление.Работа.Заявка.Объект.Номер);
                    // todo может метод по созданию перехода у Работы, чтобы не думать о нзИсполнитель?
                    Сообщить("Изменить завершение")
                    Уведомление.Работа.Переход = new кПереход(зТекРаб.ИдФазаПереход);
                    Уведомление.Работа.Переход.ПараметрыПерехода.нзИсполнитель = НомерЗаписи(Пользователь());
                    Уведомление.Работа.Переход.ПараметрыПерехода.Комментарий = зФазыАвт.Авт_коммент.trim();
                    Уведомление.Работа.Завершить();

                    Уведомление.ОтправитьУведомление();
                    if (зФазыАвт.Авт_завершение_ф_ия) {
                        ВыполнитьФункцию(зФазыАвт.Авт_завершение_ф_ия);
                        Пауза(30000);
                    }
                }
            }
        }
    }

    /**
     * Метод отправи предупреждений по заявке на фазе с флагом автозавершения
     */
    static ПредупреждениеЗакрытияЗаявок() {
        Сообщить("Старт операции");
        var зФазыАвт = BufferedReader(`SELECT faz.*, vihod.Номер НомерФазыВыход FROM ~ДО Фазы~ faz
                                     JOIN ~До фазы~ vihod on vihod.ROW_ID = faz.Авт_переход
                                     WHERE faz.[Автоматическое завершение]=1`, 100, "");
        зФазыАвт.УстановитьПараметры();
        var оСообщЗаг = Объект("Сообщения Заголовок");
        while (зФазыАвт.Следующий()) {
            var зТекРаб = BufferedReader(`SELECT TOP 1 * FROM ~ДО Задания~ WHERE [Статус завершения] = 0 and [Задание-Фаза] = :1 `, "100", "S,S");
            зТекРаб.УстановитьПараметры(зФазыАвт.Row_ID);
            while (зТекРаб.Следующий()) {
                ВывестиСтатус("Закрытие заявок...");
                var датаПредупр = new кРабочийКалендарь().ПрибавитьРабочиеДни(зТекРаб['Дата выдачи'], зФазыАвт.Авт_зав_дней);
                датаПредупр = датаПредупр.ПрибавитьДату("день", зФазыАвт.Авт_пред_дней * ( -1 ));
                if (датаПредупр <= new Date() && зТекРаб['Завершить до'].ПрибавитьДату("день", зФазыАвт.Авт_пред_дней * ( -1 )).equalsWithoutTime(new Date())) {
                    this.Работа = new кРабота(зТекРаб.ROW_ID);
                    ВывестиСтатус("Предупреждение: " + this.Работа.Заявка.Объект.Номер);
                    var Предупрежедние = new АвтоматическиеДействия();
                    Предупрежедние.Работа = this.Работа;
                    Предупрежедние.ОтправитьПредупреждение();
                    if (зФазыАвт.Авт_предупр_ф_ия) {
                        ВыполнитьФункцию(зФазыАвт.Авт_предупр_ф_ия);
                    }
                }
            }
        }
    }
    // Тема письма
    get Заголовок(){
        var сТема = "Стек - по заявке №" + this.Работа.Заявка.Объект.Номер + " от " + this.Работа.Заявка.Объект['Дата создания'].format('dd.MM.yyyy') + " по договору " +
            this.Работа.Заявка.Договор.Объект['Номер'] + "/" + this.Работа.Заявка.Договор.Объект['Тема'];
        return сТема;
    }
    // определяем исполнителя, который отправил запрос на уточнение
    get Исполнитель(){
        var зПревРаб = BufferedReader(`SELECT Top 1 m.ФИО FROM ~ДО Задания~ task
                                     LEFT JOIN ~Сотрудники~ m ON m.ROW_ID=task.[Задание-Исполнитель]
                                     WHERE task.[Статус завершения] = 1 and task.[Задание-Карточка] = :1
                                     order by task.[Дата выдачи] desc, task.[Время выдачи] desc`, "100", "S,S");
        зПревРаб.УстановитьПараметры( this.Работа.Заявка.НомерЗаписи );
        var фиоИсп = зПревРаб.Следующий() ? зПревРаб.ФИО : "";
        return фиоИсп;
    }
    // Когда закроется заявка
    get ДатаЗакрытия(){
        var ДатаЗакрытия = new кРабочийКалендарь();
        return ДатаЗакрытия.ПрибавитьРабочиеДни(this.Работа.Объект['Дата выдачи'], this.Работа.Фаза.Объект.Авт_зав_дней);
    }
    // Получаем шаблон письма из базы для предупреждения
    get ТекстПредупреждения(){
        this.ПолучитьШаблонСообщения.УстановитьПараметры( this.Работа.Фаза.Объект["Шаблон предупреждение"] );
        while( this.ПолучитьШаблонСообщения.Следующий() )
            return this.ПолучитьШаблонСообщения.ШаблонТекст;
        return '';
    }
    // Получаем шаблон письма из базы для завершения заявки
    get ТекстЗавершения(){
        this.ПолучитьШаблонСообщения.УстановитьПараметры( this.Работа.Фаза.Объект["Шаблон завершение"] );
        while( this.ПолучитьШаблонСообщения.Следудющий() )
            return this.ПолучитьШаблонСообщения.ШаблонТекст;
        return '';
    }
    // Отправка сообщения о завершении
    ОтправитьУведомление() {
        var сТема = this.Заголовок + " Завершение";
        var сТело = this.ТекстЗавершения;
        if( !сТело ) return "";
        сТело = this.ОбработатьШаблон( сТело );
        // todo нет html части уведомления
        this.Работа.Заявка.ОтправитьУведомление( this.Работа.Заявка.Объект['Карточка-Организация'], сТело, "", сТема, "", 2 );
    }
    // Отправка сообщения с предупреждением
    ОтправитьПредупреждение(){
        var сТема = this.Заголовок + " Предупреждение";
        var сТело = this.ТекстПредупреждения;
        if( !сТело ) return "";
        сТело = this.ОбработатьШаблон( сТело );
        // todo нет html части уведомления
        this.Работа.Заявка.ОтправитьУведомление( this.Работа.Заявка.Объект['Карточка-Организация'], сТело, "", сТема, "", 2 );
    }

    /**
     * Краткий шаблон и соответвия его объекту
     * @returns {Array}
     */
    get ВозможныеСоответствияШаблонов(){
        var Соответствия = [];
        Соответствия['Работа'] = 'this.Работа.Объект';
        Соответствия['Заявка'] = 'this.Работа.Заявка.Объект';
        Соответствия['Договор'] = 'this.Работа.Заявка.Договор.Объект';
        Соответствия['Организация'] = 'this.Работа.Заявка.Договор.Грузополучатель.Объект';
        Соответствия['Дата'] = 'new Date().format("dd.MM.yyyy")';
        Соответствия['Время'] = 'new Date().format("hh:mm")';
        Соответствия['Исполнитель'] = 'this.Исполнитель';
        Соответствия['ДатаЗакрытия'] = 'this.ДатаЗакрытия';
        return Соответствия;
    }
    /**
     * Заменяет шаблоны на значения из классов
     * @param Текст
     */
    ОбработатьШаблон( Текст ){
        var ПоискШаблонов= new RegExp( '%([^!]*)!', 'gi' );
        var Соответствия = this.ВозможныеСоответствияШаблонов;
        var Элемент;
        var Шаблон = '';
        var мПодстановки = [];
        var мШаблоны;
        var Дата = this.ДатаЗакрытия;
        while (( мШаблоны = ПоискШаблонов.exec(Текст)) !== null) {
            if (мШаблоны.index === ПоискШаблонов.lastIndex) {
                ПоискШаблонов.lastIndex++;
            }
            Шаблон = мШаблоны[1].split('.');
            if( !Соответствия[Шаблон[0]] ) continue;
            Элемент = Соответствия[Шаблон[0]] + ( Шаблон[1] ? '["' + Шаблон[1] + '"]' : '' );
            if( мПодстановки[Элемент] ) continue;
            try{
                мПодстановки[Элемент] = [];
                мПодстановки[Элемент].Значение = eval( Элемент );
                // На данном шаге нельзя определить тип данных, поэтому просто пытаемся все привести к формату
                try{
                    мПодстановки[Элемент].Значение = мПодстановки[Элемент].Значение.format("dd.MM.yyyy");
                }
                catch(er){

                }
                мПодстановки[Элемент].Поле = мШаблоны[0];
            }
            catch(er){
                мПодстановки[Элемент] = [];
                мПодстановки[Элемент].Значение = '!НЕИЗВЕСТНЫЙ ШАБЛОН(' +  мШаблоны[0] + ')!';
                мПодстановки[Элемент].Поле = мШаблоны[0];
            }
        }
        // Преобразуем текст
        for( let i in мПодстановки ){
            if(!мПодстановки.hasOwnProperty(i)) continue;
            Текст = Текст.replaceAll( мПодстановки[i].Поле,мПодстановки[i].Значение );
        }
        return Текст;
    }
}

class ДанныеЗвонка {
    constructor() {

    }

    Ввести() {
        this.длгДанныеЗвонка = СоздатьДиалог("Данные звонка");
        var пРезультат = this.ЗаполнитьВыборкуПоЗвонку();
        if (!пРезультат) return -1;
        if (пРезультат == 0) {
            длгДанныеЗвонка.Выполнить();
            return 1;
        }
        if (пРезультат > 0) {

            ДанныеЗвонка_ПоказатьДанныеПоОрганизации(пРезультат);
            return 1;
        }
        if (пРезультат < 0) {
            var оСотрудники = Объект("Сотрудники");
            ПрочитатьЗаписьТаблицы(оСотрудники, пРезультат * ( -1 ));
            оСотрудники.Редактировать("&Сотрудник");
            return 1;
        }
    }

    ЗаполнитьВыборкуПоЗвонку() {
        var пИмяВыборкиЗвонка = "Данные звонка";
        var вДанныеПоЗвонку = new БазоваяВыборка(пИмяВыборкиЗвонка);
        вДанныеПоЗвонку.Очистить();
        var мРезультат = ПолучитьДанныеЗвонка();
        this.длгДанныеЗвонка.Заголовок = "Входящий вызов с номера " + мРезультат.Номер;
        if (!мРезультат.length) {
            Сообщить("Нет данных по звонку");
            return "";
        }
        if (!мРезультат.мОрг.length && !мРезультат.мСотр.length) {
            Сообщить("Нет данных по звонку");
            return "";
        }
        var зОрганизации = query(`SELECT Наименование FROM ~Организации~ WHERE ROW_ID = :1`, 10, "rID,S");
        var зЧастныеЛица = query(`SELECT ФИО, Должность FROM ~Частные лица~ WHERE ROW_ID = :1`, 10, "rID,S");
        var зСотрудники = query(`SELECT ФИО, ФлагВнедр FROM ~Сотрудники~ WHERE ROW_ID = :1`, 10, "rID,S");
        var пДанныеНайдены = 0;
        var пИД;
        var нзКарточки = -1;
        for (let пИД in мРезультат.мОрг) {
            if (!мРезультат.мОрг.hasOwnProperty(пИД)) continue;
            зОрганизации.УстановитьПараметры(мРезультат.мОрг[пИД]);
            while (зОрганизации.Следующий()) {
                нзКарточки = мРезультат.мОрг[пИД];
                вДанныеПоЗвонку.ROW_ID_org = мРезультат.мОрг[пИД];
                вДанныеПоЗвонку.ROW_ID_sotr = -1;
                вДанныеПоЗвонку.ФИО = "";
                вДанныеПоЗвонку.Должность = "";
                вДанныеПоЗвонку.Организация = зОрганизации.Наименование;
                зЧастныеЛица.УстановитьПараметры(пИД);
                while (зЧастныеЛица.Следующий()) {
                    вДанныеПоЗвонку.ФИО = зЧастныеЛица.ФИО;
                    вДанныеПоЗвонку.Должность = зЧастныеЛица.Должность;
                    ВнестиЗапись(вДанныеПоЗвонку);
                    пДанныеНайдены++;
                }
                if (пИД < 0) {
                    пДанныеНайдены++;
                    ВнестиЗапись(вДанныеПоЗвонку);
                }
            }
        }
        вДанныеПоЗвонку.Перенабрать();
        if (пДанныеНайдены == 1) return нзКарточки;
        пДанныеНайдены = 0;
        for (let пИд in мРезультат.мСотр) {
            нзКарточки = пИД * ( -1 );
            вДанныеПоЗвонку.ROW_ID_org = -1;
            вДанныеПоЗвонку.ROW_ID_sotr = пИД;
            вДанныеПоЗвонку.Организация = Лицо0().Наименование;
            вДанныеПоЗвонку.ФИО = "";
            вДанныеПоЗвонку.Должность = "";
            зСотрудники.УстановитьПараметры(пИД);
            while (зСотрудники.Следующий()) {
                вДанныеПоЗвонку.ФИО = зСотрудники.ФИО;
                вДанныеПоЗвонку.Должность = ДанныеЗвонка_ВернутьДолжностьСотрудникаСтек(зСотрудники.ФлагВнедр);
                ВнестиЗапись(вДанныеПоЗвонку);
                пДанныеНайдены++;
            }
            if (пДанныеНайдены == 0)ВнестиЗапись(вДанныеПоЗвонку);
        }
        вДанныеПоЗвонку.Перенабрать();
        if (пДанныеНайдены == 1)return нзКарточки;
        return 0;
    }
}
/**
 * Проведение опроса у пользователей при старте комплекса
 * @class кПровестиОпрос
 */
class кПровестиОпрос{
    constructor(){
        this.Пользователь = НомерЗаписи( Пользователь() );
        this.ИмяДиалогаОпроса = "ДО опросы вопрос сотруднику";
    }
    Опросить(){
        var зОпросы = BufferedReader(
            ` SELECT dov.[ROW_ID],dov.[Номер],dov.[Варианты],dov.[Комментарий],dov.[Название]
                FROM ~ДО опросы вопросы~ dov
           LEFT JOIN ~ДО опросы ответы~ doo ON dov.ROW_ID = doo.[До ответы-Вопросы] AND doo.[До ответы-Сотрудник] = :1
           WHERE dov.Папки_ADD = 1 AND doo.ROW_ID IS NULL AND :2 BETWEEN dov.ДатНач AND dov.ДатКнц `, 100, "IDS,S,rDate,D" );
        зОпросы.УстановитьПараметры( this.Пользователь, new Date() );
        var длгВопросСотруднику, Ответы, кВнестиОтвет, ВсегоОтветов, НомерОтвета, ТекстОтвета ;
        while( зОпросы.Следующий() ) {
            if (!длгВопросСотруднику) {
                длгВопросСотруднику = СоздатьДиалог(this.ИмяДиалогаОпроса);
                this.ЭлСписокСостояний = ListBox(this.ИмяДиалогаОпроса, "СписокОтветов");
            }
            длгВопросСотруднику.Заголовок = "Опрос: " + зОпросы.Номер + " " + зОпросы.Название;
            длгВопросСотруднику['@Комментарий'] = зОпросы.Комментарий;
            длгВопросСотруднику['@Дополнение'] = "";
            this.ЭлСписокСостояний.Очистить();
            Ответы = зОпросы.Варианты.split("\n");
            for (let Ответ of Ответы) {
                if (Ответ.length) this.ЭлСписокСостояний.Добавить(Ответ);
            }
            if (длгВопросСотруднику.Выполнить()) {
                if (!кВнестиОтвет) {
                    кВнестиОтвет = Command(
                        ` INSERT INTO ~ДО опросы ответы~
                        ( [До ответы-Вопросы], [До ответы-Сотрудник], ВариантНомер, ВариантТекст, Комментарий, Дата, Время )
                        VALUES( :1, :2, :3, :4, :5, getdate(), getdate() ) `, 10, "vID,S,stID,S,NO,S,TO,A,KO,A");
                }
                ВсегоОтветов = this.ЭлСписокСостояний.Количество;
                while( --ВсегоОтветов >= 0 ){
                    if( this.ЭлСписокСостояний.Помечен[ВсегоОтветов]  ){
                        НомерОтвета = ВсегоОтветов + 1;
                        ТекстОтвета = this.ЭлСписокСостояний.Элементы[ВсегоОтветов];
                    }
                }
                кВнестиОтвет.Выполнить(зОпросы.ROW_ID, this.Пользователь, НомерОтвета, ТекстОтвета, длгВопросСотруднику['@Дополнение']);
            }
        }
        if( кВнестиОтвет ) кВнестиОтвет.Завершить();
        СобратьМусор();
    }
}