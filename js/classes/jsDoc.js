"use strict";

/**
 * Объявление базового класса
 * @class класс кПримерБазовогоКласса
 * @property {кНаследник} СвойствоКлассаРаз Первое свойство класса кПримерБазовогоКласса
 * @property {кНаследник} СвойствоКлассаДва Второе свойство класса кПримерБазовогоКласса
 */

class кПримерБазовогоКласса{
    constructor(){
        /**
         * Представитель базового класса пример с типом
         * @type {кНаследник}
         */
        this.Представитель1;
        /** Пример представителя пример без типа */
        this.Предтсавитель2;
        /**
         * @private
         */
        this._СвойствоКлассаРаз;
        this.__defineGetter__("СвойствоКлассаРаз", function(){
            return this._СвойствоКлассаРаз;
        });
        this.__defineSetter__("СвойствоКлассаРаз", function(val){
            this._СвойствоКлассаРаз = _СвойствоКлассаРаз;
        });
        this._СвойствоКлассаДва;
        this.__defineGetter__("СвойствоКлассаДва", function(){
            return this._СвойствоКлассаДва;
        });
        this.__defineSetter__("СвойствоКлассаДва", function(val){
            this._СвойствоКлассаДва = СвойствоКлассаДва;
        });
    }

    /**
     * Демеонстрация описания метода класса кПримерБазовогоКласса
     * Метод класса Возвращает текст
     * @param Выбор {string}
     * @returns {string}
     */
    МетодКласса( Выбор ){
        return 'test';
    }
}
/**
 * Класс наследующий класс кПримерБазовогоКласса
 * @extends кПримерБазовогоКласса
 * @class  класс кНаследник
 */
class кНаследник extends кПримерБазовогоКласса{
    constructor(){
        super();
    }

    /**
     * Демонстрация описания метода класса кНаследник
     * Метод класса кНаследник
     * @param {Date} Переменная
     * @returns {Date} Возвращает параметр метода
     */
    МетодКлассакНаследник( Переменная ){
        return Переменная;
    }

}