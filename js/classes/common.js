'use strict';
/**
 * @class кРабочийКалендарь
 */
class кРабочийКалендарь {
    constructor(){
        this.РабочиДни = [];
        // загружаем рабочю неделю
        var рабНеделя = ПрочитатьКонстанту( new Date(), "РАБНЕДЕЛЯ" );
        if( рабНеделя ) {
            this.РабочиДни = рабНеделя.split(";");
            // конвертируем в навзвания дней недели
            for (let i in this.РабочиДни) {
                if (!this.РабочиДни.hasOwnProperty(i)) continue;
                var день = Number(this.РабочиДни[i]);
                if (день == 7) день = 0;
                this.РабочиДни[i] = dateFormat.i18n.dayNames[день + 7];
            }
        }
        // константа не задана - возвращаем стандартную рабочую неделю
        if( this.РабочиДни.length == 0 ) this.РабочиДни = dateFormat.i18n.dayNames.slice( 8, 13 ); // Пн-Пт
    }

    /**
     *
     * @param дата
     * @returns {boolean}
     */
    ЭтоРабочийДень( дата ){
        var датаРас = new Date( дата.getFullYear(), 0, 1 );
        var рабочий = true;
        var дни = ПрочитатьКонстанту( датаРас, "РАБДНИ" );
        if( this.РабочиДни.indexOf( дата.ДеньНедели() ) == -1 ){
            var дни = ПрочитатьКонстанту( датаРас, "ВЫХДНИ" );
            рабочий = false;
        }
        var новыйДень = дата.getDate().toString() + (дата.getMonth() + 1).toString();
        if( дни.indexOf(новыйДень) != -1 ) рабочий = !рабочий;

        return рабочий;
    }

    /**
     *
     * @param дата
     * @param дней
     * @returns {*}
     */
    ПрибавитьРабочиеДни( дата, дней ){
        var учтеноРабДней = 0;
        while( учтеноРабДней != дней ){
            дата.setDate( дата.getDate() + 1 );
            if( this.ЭтоРабочийДень(дата) ) учтеноРабДней++;
        }
        return дата;
    }
}

/**
 * Общий класс документов
 * @class кДокумент
 */
class кДокумент extends БазовыйОбъект {
    constructor(ТипДокумента, НомерЗаписи) {
        super("Документ", НомерЗаписи);
        this.ТипДокумента = ТипДокумента;
    }

    НайтиСоздатьПапкуДокументов() {

    }

    НайтиНовыйНомер() {

    }

    /**
     * @returns {String} Номер документа для печати
     */
    ПечатныйНомер() {
        if (!this.Объект) this.Прочитать();
        return this.Объект.Номер;
    }

    /**
     * Возвращает Лицо1|Лицо2|Лицо3 с верхнего уровня иерархии организации
     * @param {String} Лицо - Поле связи Лицо1|Лицо2|Лицо3
     * @returns {кОрганизация} Организация с верхнего уровня, если не найдена то Лицо0
     */
    ЛицоСПапки(Лицо) {
        let запрос = Query(`;With S as (
                            select row_id, Папки, Папки_ADD, 1 as уровень,`
            + Лицо + ` from stack.Документ
                              where row_id = :1
                              union all
                              select d.[ROW_ID],d.[Папки],d.Папки_ADD, уровень+1 as уровень,d.`
            + Лицо + ` from stack.Документ d
                      join S on d.row_id = s.Папки)
                      select top 1 ` + Лицо + ` from S where Папки_ADD = 0 and ` + Лицо + ` > 0 order by Уровень`, 10, "p1,S");
        запрос.УстановитьПараметры(this.НомерЗаписи);
        return new кОрганизация(запрос.Следующий() ? запрос[Лицо] : НомерЗаписи(Лицо0()));
    }

    static Тип2НазваниеКратко(ТипДокумента) {
        switch (ТипДокумента) {
            case 1:
                return "Исх.счет";
            case 4:
                return "СФАванс";
            case 21:
            case "ПлатВход":
                return "Платеж";
            case 23:
            case "КассаПрих":
                return "Прих.ордер";
            case 28:
            case "ТребвИсхд":
                return "Требование";
            case 35:
            case "СчетФактуры":
                return "Счет-Фактура";
            default:
                return this.Тип2НазваниеВыборки(ТипДокумента);
        }
    }

    static Тип2НазваниеВыборки(ТипДокумента) {
        switch (Number(ТипДокумента)) {
            case 1:
                return "Исходящие счета";
            case 3:
                return "Выписки из банка";
            case 4:
                return "Счета-фактуры на авансы";
            case 21:
                return "Входящие платежи";
            case 22:
                return "Исходящие платежи";
            case 23:
                return "Приходные ордера";
            case 28:
                return "Исходящие требования";
            case 35:
                return "Счета-фактуры";
            case 67:
                return "Платежные ведомости";
            case 71:
                return "Акты снятия качества";
            case 77:
                return "Групповые счетчики";
            case 78:
                return "Ведомости индивидуальных счетчиков";
            case 80:
                return "Сторонние контрольные счетчики";
            case 91:
                return "Сторнирование фактур/оплат";
            default:
                return "Неизвестный тип документа";
        }
    }

    static НазваниеВыборки2Тип(Название) {
        switch (Название) {
            case "Исходящие счета" :
                return 1;
            case "Выписки из банка":
                return 3;
            case "Счета-фактуры на авансы":
                return 4;
            case "Входящие платежи":
                return 21;
            case "Исходящие платежи":
                return 22;
            case "Приходные ордера":
                return 23;
            case "Исходящие требования":
                return 28;
            case "Счета-фактуры"   :
                return 35;
            case "Платежные ведомости" :
                return 67;
            case "Акты снятия качества" :
                return 71;
            case "Групповые счетчики" :
                return 77;
            case "Ведомости индивидуальных счетчиков" :
                return 78;
            case "Сторонние контрольные счетчики" :
                return 80;
            case "Сторнирование фактур/оплат" :
                return 91;
            default:
                return 0;
        }
    }
}