/**
 * Created by Константин on 20.04.2015.
 */
"use strict";

/**
 * @extends БазовыйОбъект
 * @class класс кЭлЯщик - объект для работы с записью ящика электронной почты, а так же для получения и
 * отправки электронных сообщений по выбранному протоколу
 */
class кЭлЯщик extends БазовыйОбъект {
    constructor() {
        super('Сообщения Заголовок', -1);
        /**
         * Объект для хранения информации о почтовом протоколе, запись таблицы 'Сообщения Транспорт'
         * @type {БазовыйОбъект}
         */
        this.Транспорт = undefined;
        /**
         * объект для работы с почтовым протоколом в ящике - получение/отправка
         * @type {Объект}
         */
        this.ЭлПочта = undefined;
        /**
         * Название почтового ящика
         * @type {string}
         */
        this.Название = '';
        /**
         * Ссылка на запись тарнспорта ящика
         * @type {number}
         */
        this.ИдТранспорт = -1;
        /**
         * ид папки "входящие" в ящике
         * @type {number}
         */
        this.Входящие = -1;
        /**
         * ид папки "исходящие" в ящике
         * @type {number}
         */
        this.Исходящие = -1;
        /**
         * ид папки "удаленные" в ящике
         * @type {number}
         */
        this.Корзина = -1;
        /**
         * ид папки "отправленные" в ящике
         * @type {number}
         */
        this.Отправленные = -1;
        /**
         * каталог для временного хранения файлов вложений сообщения, очищается при следующей отправке
         * @type {string}
         */
        this.КаталогХранилище = '';
        if( arguments.length == 1 ){
            if( typeof arguments[0] == 'number' ){
                this.Прочитать( arguments[0] );
            } else if( typeof arguments[0] == 'object' ){
                this.Установить( НомерЗаписи(arguments[0]) );
                this.ПрочитатьИзКонтекста( arguments[0] );
            } else if( typeof arguments[0] == 'string' ){
                var зКонф = BufferedReader( 'SELECT cfg.[Конфигурация-Ящик] ' +
                    'FROM ~Почта Конфигурация~ cfg ' +
                    '     JOIN ~Сообщения Заголовок~ head ON cfg.[Конфигурация-Ящик] = head.ROW_ID ' +
                    'WHERE [Вид данных] like :1', 1, "name,A" );
                зКонф.УстановитьПараметры( arguments[0] );
                if( зКонф.Следующий() ) {
                    this.Прочитать( зКонф['Конфигурация-Ящик'] );
                } else {
                    throw new StackError( 'Необходимо настроить ящик для "' + arguments[0] +  '".\n' +
                        'Создайте в конфигурации почты запись с данными "' + arguments[0] +  '"' );
                }
            }
            this.Название = this.Объект['ОтКого'];
            this.ИдТранспорт = this.Объект['Сообщение-Транспорт'];
            this.ЗагрузитьПапки();
            this.Транспорт = new БазовыйОбъект('Сообщения Транспорт', this.ИдТранспорт);
            this.Транспорт.Прочитать();
        }
    }

    /**
     * Загружает служебные папки ящика: входящие, Исходящие, Отправленные и Корзина
     */
    ЗагрузитьПапки(){
        var зПапок = Query( 'SELECT ROW_ID, Вид FROM ~Сообщения Заголовок~ WHERE [Папка]=:1', 10, 'id,S' );
        зПапок.УстановитьПараметры(this.НомерЗаписи);
        while( зПапок.Следующий() ){
            switch( зПапок.Вид ){
                case 10:
                    this.Входящие = зПапок.ROW_ID;
                    break;
                case 11:
                    this.Исходящие = зПапок.ROW_ID;
                    break;
                case 12:
                    this.Отправленные = зПапок.ROW_ID;
                    break;
                case 13:
                    this.Корзина = зПапок.ROW_ID;
                    break;
            }
        }
    }
    СоздатьПапки(){
            // добавить служебные папки в ящик
        var оПапка = new БазовыйОбъект('Сообщения Заголовок');
        оПапка.ПрочитатьИзКонтекста( {'Папка' : this.НомерЗаписи,
            'Папка_Узел' : 1,
            'ОтКого' : 'Входящие',
            'Сообщение-Транспорт' : this.ИдТранспорт,
            'Вид' : 10,
            'Признаки' : 0} );
        оПапка.Внести();
        оПапка.ПрочитатьИзКонтекста( {'ОтКого' : 'Исходящие', 'Вид' : 11} );
        оПапка.Внести();
        оПапка.ПрочитатьИзКонтекста( {'ОтКого' : 'Отправленные', 'Вид' : 12} );
        оПапка.Внести();
        оПапка.ПрочитатьИзКонтекста( {'ОтКого' : 'Корзина', 'Вид' : 13} );
        оПапка.Внести();
    }

    /**
     * устанавливаетначальные параметры почты для отправки сообщения, такие как сервер, порт, логин, пароль, и т.д.
     * @returns {boolean} true, если удалось создать объект для отправки сообщения
     */
    УстановитьПочту( отправка ) {
        if( this.ИдТранспорт > 0 && this.Транспорт.Объект ) {
            if( отправка ) {
                this.КаталогХранилище = КаталогПрограммы() + "Email\\";
                СоздатьКаталог( this.КаталогХранилище ); // создадим каталог для временного хранения файлов-вложений
                this.ЭлПочта = СоздатьСоединениеSMTP( this.Транспорт.Объект.ИсхСервер, this.Транспорт.Объект.ИсхПорт, this.Транспорт.Объект.Тип );
                this.ЭлПочта.УстановитьСоединениеSMTP( this.Транспорт.Объект.ИсхЛогин, this.Транспорт.Объект.ИсхПароль, this.Транспорт.Объект.Шифр );
                this.ЭлПочта.УстановитьТипСоединения( this.Транспорт.Объект.ИсхШифрование, this.Транспорт.Объект.ИсхПодключение );
                this.ЭлПочта.УстановитьОтправителя( this.Транспорт.Объект.ОтФио, this.Транспорт.Объект.ОтЭлАдрес, this.Транспорт.Объект.ОтЭлАдрес );
            } else {
                this.ЭлПочта = СоздатьСоединение(this.Транспорт.Объект.ВхСервер, this.Транспорт.Объект.ВхПорт, this.Транспорт.Объект.ВхШифрование );
            }
        }
        return this.ЭлПочта != undefined;
    }

    /**
     * возвращает true, если в ящике настроена отправка писем в формате html
     * @returns {boolean} true, если отправка настроена в формате html
     */
    ЭтоHtml(){
        if( this.Транспорт.Объект ) return (this.Транспорт.Объект.ТрПризнаки & 1) == 1;

        return false;
    }

    Соединить(){
        if( this.Транспорт.Объект && this.ИдТранспорт > 0 ) {
            return this.ЭлПочта.Соединить( this.Транспорт.Объект.ВхЛогин, this.Транспорт.Объект.ВхПароль,
                this.Транспорт.Объект.ВхПодключение, this.Транспорт.Объект.Шифр );
        }
        return false;
    }
    ОтправитьСообщения(){
        if( !this.Транспорт ){
            Сообщить( "Некорректные настройки почтового ящика", 'OK,ERROR_TITLE' );
            return false;
        }
        if( this.Исходящие == -1 ){
            Сообщить( 'В ящике "' + this.Название + '" не существует папки "Исходящие".\nПопробуйте пересоздать ящик', 'OK,ERROR_TITLE' );
            return false;
        }
        this.УстановитьПочту( true );
        // запрос на извлечение всех сообщений в папке исходящие ящика
        var send = BufferedReader( 'SELECT ROW_ID FROM ~Сообщения Заголовок~ ' +
            'WHERE Папка = :1 AND Папка_ADD=1 AND Признаки & 64=0;', 100, "RI,S" );

        var отправлено = 0, ошибка = 0, поз_отпр = -1;
        send.УстановитьПараметры( this.Исходящие );
        var писем = send.Количество();
        if( писем > 0 ){
            while( send.Следующий() ){
                ВывестиСтатус( "Отправляю сообщение: " + (отправлено + 1) + "/" + писем );
                var удачно = true;
                var сообщение = new кЭлСообщение( send.ROW_ID );
                сообщение.Ящик = this;
                var plain = undefined, html = undefined;
                if( this.ЭтоHtml() ){ // формируем письмо в формате html
                    if( this.СоставлениеТекст() ) plain = сообщение.ПолучитьТекст( 'plain', -10 );
                    if( this.СоставлениеHtml() ) html = сообщение.ПолучитьТекст( 'html', -10 );
                } else {
                    plain = сообщение.ПолучитьТекст( 'plain', -10 );
                }
                удачно = сообщение.СоздатьСообщение( plain, html );
                if( удачно ){
                    var мВложения = сообщение.ПолучитьВложение( -10, this.КаталогХранилище );
                    for( let вложение of мВложения ){
                        if( !вложение.ИмяФайла ){
                            удачно = false;
                            break;
                        }
                        this.ЭлПочта.ДобавитьВложение( вложение.ИмяФайла, вложение.ContentId );
                    }
                }
                if( !удачно ) {
                    ошибка++;
                    continue;
                }
                if( this.ЭлПочта.ОтправитьПисьмо() ){
                    сообщение.СброситьПризнак( "Заблокировано" );
                    сообщение.УстановитьДату( "Отправлено" );
                    сообщение.УстановитьПризнак( 10 ); // признаки Отправлено, Обработано отправляемому письму
                    сообщение.ПереместитьВПапку( this.Отправленные );
                    отправлено++;
                } else {
                    ошибка++;
                }
            }
        }

        ПеренабратьВыборку( "Электронные сообщения" );
        if( отправлено == 0 && ошибка == 0 ) Сообщить( "Нет сообщений для отправки." );
        if( ошибка ) Сообщить( ошибка + "/" + писем + " сообщений не удалось отправить." );
        if( отправлено ) Сообщить( "Отправлено " + отправлено + "/" + писем + " сообщений." );
    }

    СоставлениеТекст(){
        if( this.Транспорт.Объект )
            return (this.Транспорт.Объект.ТрПризнаки & 4) > 0 || (this.Транспорт.Объект.ТрПризнаки & 8) > 0;
        return false;
    }
    СоставлениеHtml(){
        if( this.Транспорт.Объект )
            return (this.Транспорт.Объект.ТрПризнаки & 2) > 0 || (this.Транспорт.Объект.ТрПризнаки & 8) > 0;
        return false;
    }

    /**
     * ищет папку внутри ящика по ее названию, если не находит - создает ее внутри ящика
     * @param название {string} - навзание папки
     * @returns {number} - номер записи первой найденной папки с таким навзанием
     */
    ПолучитьПапку( название ){
        var зПапки = Query( ';WITH Parent AS( ' +
            '   SELECT ROW_ID,Папка,Откого FROM ~Сообщения Заголовок~ WHERE ROW_ID=:1 ' +
            '   UNION ALL ' +
            '   SELECT head.ROW_ID,head.Папка,head.Откого ' +
            '   FROM ~Сообщения Заголовок~ head JOIN Parent ON Parent.ROW_ID = head.Папка ' +
            '   WHERE head.Папка_ADD=0 ' +
            ') SELECT TOP 1 ROW_ID FROM Parent WHERE ОтКого like :2', 1, "id,S,name,A" );
        зПапки.УстановитьПараметры( this.НомерЗаписи, название );
        if( зПапки.Следующий() ){
            return зПапки.ROW_ID;
        } else { // создаем папку с таким именем внутри самого ящика
            var оПапка = new БазовыйОбъект('Сообщения Заголовок');
            оПапка.ПрочитатьИзКонтекста( {'Папка' : this.НомерЗаписи,
                'Папка_Узел' : 1,
                'ОтКого' : название,
                'Сообщение-Транспорт' : this.ИдТранспорт,
                'Вид' : 0,
                'Признаки' : 0} );
            return оПапка.Внести();
        }
    }

    /**
     * проверка наличия всех служебных папок в ящике
     * @returns {boolean} - возвращает true, когда в ящике существуют все папки, в противном случае -
     * генерит исключительную ситуацию
     */
    ПроверитьПапки(){
        if( this.НомерЗаписи <= 0 )
            throw new StackError( "Почтовый ящик не инициализирован" );
        if( this.Входящие == -1 )
            throw new StackError( 'В ящике "' + this.Название + '" нет папки Входящие. Попробуйте пересоздать ящик' );
        if( this.Исходящие == -1 )
            throw new StackError( 'В ящике "' + this.Название + '" нет папки Исходящие. Попробуйте пересоздать ящик' );
        if( this.Отправленные == -1 )
            throw new StackError( 'В ящике "' + this.Название + '" нет папки Отправленные. Попробуйте пересоздать ящик' );
        if( this.Корзина == -1 )
            throw new StackError( 'В ящике "' + this.Название + '" нет папки Корзина. Попробуйте пересоздать ящик' );
        return true;
    }
    ПрочитатьКонфигурацию( конфигурация ){

    }
    /**
     * проверяет, не является ли папка с именем/типом служебной, то есть одной из: Входящие, Исходящие, Корзина, Отправленные
     * @param папка - либо название папки, либо ее тип в числовом виде
     * @returns {boolean} true, если папка является служебной
     */
    static ЭтоСлужебнаяПапка( папка ){
        if( typeof папка == 'string' ){
            папка = папка.toLowerCase();
            if( папка == "входящие" || папка == "исходящие" || папка == "отправленные" || папка == "корзина" ) return true;
        } else if( typeof папка == 'number' ){
            if( папка >= 10 && папка <= 13 ) return true;
        }
        return false;
    }

    /**
     * ищет электронный ящик по его названию
     * @param название - название эл. ящика
     * @returns {number} - номер записи найденного ящика
     */
    static ПолучитьЭлектронныйЯщик( название ){
        if( название.trim() == "" ) return -1;
        var зЯщик = BufferedReader( "SELECT ROW_ID FROM ~Сообщения Заголовок~ WHERE ОтКого like :1 AND [Папка_ADD]=0 AND Вид=9" , 10, "name,A" );
        зЯщик.УстановитьПараметры( название );
        return зЯщик.Следующий() ? зЯщик.ROW_ID : -1;
    }
}

/**
 * @extends БазовыйОбъект
 * @class класс кЭлСообщение - объект для работы с записью элетронного сообщения
 * Отправка и получение сообщения происходит с помощью объекта Ящик
 */
class кЭлСообщение extends БазовыйОбъект {
    constructor() {
        super( 'Сообщения Заголовок', -1 );
        /**
         * Электронный ящик для отправки/получения сообщения
         * @type {кЭлЯщик}
         */
        this.Ящик = undefined;
        /**
         * текстовая часть сообщения
         * @type {string}
         */
        this.Текст = '';
        /**
         * html-часть сообщения
         * @type {string}
         */
        this.ТекстHtml = '';
        /**
         * вложение сообщения - массив элементов вложения
         * @type {Array}
         */
        this.Вложения = undefined;
        // и еще куча полей сообщения...
        if( arguments[0] ) this.Прочитать( arguments[0] );
    }

    Прочитать( параметр ){
        if( typeof параметр == 'number' ){
            return super.Прочитать( параметр );
        } else if( typeof параметр == 'object' ){
            this.Установить( НомерЗаписи(параметр) );
            return super.ПрочитатьИзКонтекста( параметр );
        }
        return false;
    }

    /**
     * Возвращает почтовый ящик сообщения
     * @returns {number} - ид почтового ящика сообщения как папки верхнего уровня в иерархии
     */
    ПрочитатьЯщик( видРассылки ){
        if( !this.Ящик ) {
            if( видРассылки ) {
                this.Ящик = new кЭлЯщик( видРассылки );
            } else {
                if( this.НомерЗаписи <= 0 ) throw new StackError( 'Не инициализировано сообщение для чтения ящика' );
                var иерархия = Query( ';WITH Parent AS ( ' +
                    '   SELECT ROW_ID, Папка, 0 as Level FROM ~Сообщения Заголовок~ WHERE ROW_ID=:1 ' +
                    '   UNION ALL ' +
                    '   SELECT mail.ROW_ID, mail.Папка, Parent.Level+1 as Level ' +
                    '   FROM ~Сообщения Заголовок~ mail JOIN Parent ON Parent.Папка=mail.row_id ' +
                    ') SELECT TOP 1 ROW_ID, Level ' +
                    'FROM Parent ORDER BY Level desc', 1, "id,S" );
                иерархия.УстановитьПараметры( this.НомерЗаписи );
                if( иерархия.Следующий() ) this.Ящик = new кЭлЯщик( иерархия.ROW_ID );
            }
            if( !this.Ящик.ПроверитьПапки() ) return -1;
        }
        return this.Ящик.НомерЗаписи;
    }

    /**
     * определяет категорию письма (Входящее(10), Исходящее(11), Отправленное(12), Удаленное(13))
     * @returns {number} код катеогрии
     */
    ТипСообщения(){
        var зИерархии = BufferedReader( 'WITH HierUp AS( ' +
            '   SELECT ROW_ID, Папка, Вид, 0 as level ' +
            '   FROM ~Сообщения заголовок~ WHERE ROW_ID=:1 ' +
            '   UNION ALL ' +
            '   SELECT head.ROW_ID, head.Папка, head.Вид, level+1 as level ' +
            '   FROM ~Сообщения заголовок~ head JOIN HierUp on head.ROW_ID=HierUp.Папка ' +
            ') SELECT TOP 1 Вид FROM HierUp ' +
            'WHERE Папка<>-10 ' +
            'ORDER BY level desc', 1, "id,S" );
        зИерархии.УстановитьПараметры( this.НомерЗаписи );
        if( !зИерархии.Следующий() ) зИерархии.Вид = 0;

        return зИерархии.Вид;
    }
    ПризнакВЧисло( стрПризнак ) {
        var признак = 0;
        if( typeof стрПризнак  == 'string' ) {
            switch( стрПризнак.toLowerCase() ) {
                case "прочитано":
                    признак = 1;
                    break;
                case "обработано":
                    признак = 2;
                    break;
                case "перенаправлено":
                    признак = 4;
                    break;
                case "отправлено":
                    признак = 8;
                    break;
                case "переслано":
                    признак = 16;
                    break;
                case "ответ":
                    признак = 32;
                    break;
                case "заблокировано":
                    признак = 64;
                    break;
                case "припарковано":
                    признак = 128;
                    break;
                case "нет организации":
                    признак = 256;
                    break;
                case "удалено":
                    признак = 512;
                    break;
            }
        } else признак = стрПризнак;
        return признак;
    }

    /**
     * снимает с сообщения указанный признак
     * @param стрПризнак признак сообщения
     * @returns {boolean} true, если удалось сохранить новый признак
     */
    СброситьПризнак( стрПризнак ){
        if( this.НомерЗаписи == -1 || (typeof стрПризнак  != 'string' && typeof стрПризнак  != 'number')) return false;
        var признак = this.ПризнакВЧисло( стрПризнак );
        this.Объект.Признаки &= признак;
        var update = Command( "UPDATE ~Сообщения Заголовок~ SET Признаки = Признаки &~ :1 WHERE row_id = :2", 1, "fl,R,id,S" );
        update.Выполнить( признак, this.НомерЗаписи );
        update.Завершить();
        return true;
    }
    /**
     * устанавливает к сообщению указанный признак
     * @param стрПризнак признак сообщения
     * @returns {boolean} true, если удалось сохранить новый признак
     */
    УстановитьПризнак( стрПризнак ){
        if( this.НомерЗаписи == -1 || (typeof стрПризнак  != 'string' && typeof стрПризнак  != 'number')) return false;
        var признак = this.ПризнакВЧисло( стрПризнак );
        this.Объект.Признаки |= признак;
        var update = Command( "UPDATE ~Сообщения Заголовок~ SET Признаки = Признаки|:1 WHERE row_id=:2 AND Папка_ADD=1", 1, "fl,R,id,S" );
        update.Выполнить( признак, this.НомерЗаписи );
        update.Завершить();
        return true;
    }

    /**
     * возвращает исходный текст сообщения (сохранен в базе не в сжатом виде)
     * @returns {string} исходный текст сообщения
     */
    ИсходныйТекст(){
        var зИсходника = Query( 'SELECT Образ, Тип FROM ~Сообщения Вложения~ ' +
            'WHERE [Вложение-Заголовок]=:1 AND Тип IN(1,2) AND Письмо=-10', 1, "id,S" );
        зИсходника.УстановитьПараметры( this.НомерЗаписи );
        if( зИсходника.Следующий() ){
            switch( зИсходника.Тип ){
                case 1: return зИсходника.Образ;
                case 2: return зИсходника.РаспаковатьДвоичноеПоле( "Образ" );
            }
        }

        return '';
    }

    /**
     * возвращает часть сообщения по типу, если она есть
     * @param тип если 'plain', то вернет текстовую часть сообщения, если 'html' - то html часть письма, в противном случае ''
     * @returns {string} строку части сообщения
     */
    ПолучитьТекст( тип, корень ){
        var загрузить = false;
        switch( тип.toLowerCase() ){
            case 'plain':
                тип = 3;
                if( !this.Текст ) загрузить = true;
                break;
            case 'html':
                тип = 4;
                if( !this.ТекстHtml ) загрузить = true;
                break;
            default :
                return '';
        }
        if( загрузить ) {
            var зТела = Query( 'SELECT Образ FROM ~Сообщения Вложения~ ' +
                'WHERE [Вложение-Заголовок]=:1 AND Тип=:1 AND Письмо=:2', 1, "id,S,type,S,hier,S" );
            зТела.УстановитьПараметры( this.НомерЗаписи, тип, корень ); // извлечем тело сообщения из таблицы
            if( зТела.Следующий() ){
                if( тип == 3 ) {
                    //this.Текст = зТела.Образ;
                    this.Текст = зТела.ПолеВТекст("Образ");
                } else {
                    //this.ТекстHtml = зТела.Образ;
                    this.ТекстHtml = зТела.ПолеВТекст("Образ");
                }
            }
        }
        switch( тип ){
            case 3: return this.Текст;
            case 4: return this.ТекстHtml;
        }
        return '';
    }

    /**
     * проверяет, есть ли вложение у сообщения
     * @returns {boolean} - true, если вложение у сообщения есть
     */
    ЕстьВложение() {
        var естьВложение = Query( "SELECT TOP 1 ROW_ID FROM ~Сообщения Вложения~ WHERE [Вложение-Заголовок]=:1 AND Тип=0", 1, "head,S" );
        естьВложение.УстановитьПараметры( this.НомерЗаписи );
        return естьВложение.Следующий() ? true : false;
    }

    /**
     * преобразует ссылки html части письма в реальные файлы для отображения содержимого контента в браузере
     * @param режим - режим сохранения файлов на клиенте: 0 - с добавлением к contentId ид записи вложения,
     * 1 - просто по имени contentId
     * @returns {string} - преобразованный текст для использования в браузере
     */
    ПрочитатьHtml( режим ){
        if( !this.ТекстHtml ) return '';

        var вложение = new кЭлВложение( this.НомерЗаписи, 'сообщение' );
        return вложение.ПрочитатьHtml( this.ТекстHtml, режим );
    }

    /**
     * привязывает письмо к организации по его адресу
     * @param email электронный адрес, откуда пришло сообщение
     * @param тихийРежим true - для тихого режима получения почты, false - для интерактивного режима диалога
     * @returns {number} row_id найденной/выбранной организации
     */
    УстановитьОрганизацию( email, тихийРежим ){
        if( !email.trimLeft() ) {
            ВсплывающееОкно( "Не указан адрес отправителя" );
            return -1;
        }
        // полный адрес отправителя (возможно вместе с именем отправителя)
        // выделим электронный адрес отправителя
        var email1 = new RegExp('<[A-Za-z0-9_@\.\-]+>', 'i').exec( email );
        if( email1 ) email = email1[0].slice( 1, -1 );

        var зОрганизации = BufferedReader( "SELECT row_id as Орг, Название, '' as ФИО, email " +
            "FROM ~Организации~ " +
            "WHERE email LIKE '%" + email + "%' " +
            "UNION ALL " +
            "SELECT [Организация-Частные лица] as Орг, Название, ФИО, face.email " +
            "FROM ~Частные лица~ face JOIN ~Организации~ org on face.[Организация-Частные лица]=org.ROW_ID " +
            "WHERE face.email LIKE '%" + email + "%' and face.[Организация-Частные лица] NOT IN(" +
            "SELECT ROW_ID FROM ~Организации~ WHERE email LIKE '%" + email + "%')", 100 );
        зОрганизации.УстановитьПараметры();
        if( тихийРежим ){
            if( зОрганизации.Количество() == 1 && зОрганизации.Следующий() ) {
                return зОрганизации.Орг;
            }
        } else {
            if( зОрганизации.Количество() == 0 ) {
                ВсплывающееОкно( "Не могу установить список организаций для сообщения" );
            } else if( зОрганизации.Количество() == 1 ){
                зОрганизации.Следующий();
                return зОрганизации.Орг;
            } else {
                var длг = СоздатьДиалог( "ЭлектронноеСообщение Организация" );
                var вОрганизация = new БазоваяВыборка( "ЭлСообщение Организация" );
                вОрганизация.ПолучитьВыборку();
                while( зОрганизации.Следующий() ){
                    вОрганизация.Внести( зОрганизации );
                }
                длг.Обработчик.Диалог = "ЭлектронноеСообщение";
                if( длг.Выполнить() ) return длг.Обработчик.Организация;
            }
        }
        return -1;
    }

    /**
     * копирует вложение сообщения для пересылки собщения
     * @param нзСообщение - сообщение, куда нужно скопировать вложение текущего письма
     * @param корень- уровень иерархии, откуда нужно копировать вложение
     */
    КопироватьВложение( нзСообщение, корень ){
        this.ПолучитьВложение( корень );
        for( let вложение of this.Вложения ){
            вложение.ИдРодитель = нзСообщение;
            вложение.Внести();
        }
    }

    /**
     * возвращает вложение сообщения, если указан путь для выгрузки вложения в файл, то еще и сохраняет его в
     * файлы по имени вложения для дальнейшей их отправки
     * @param корень - уровень иерархии, откуда начать получать вложение
     * @param путь - каталог для выгрузки файлов вложения
     * @returns {Array} - массив объектов вложения (кЭлВложение)
     */
    ПолучитьВложение( корень, путь ){
        if( !this.Вложения ){
            this.Вложения = [];
            var зВложения = Query( ';WITH Parent AS( ' +
                '   SELECT ROW_ID, Письмо, Образ, ИмяФайла, Тип, [Content-Id] ' +
                '   FROM ~Сообщения Вложения~ WHERE [Вложение-Заголовок]=:1 AND Письмо=:2 ' +
                '   UNION ALL ' +
                '   SELECT attach.ROW_ID, attach.Письмо, attach.Образ, attach.ИмяФайла, attach.Тип, attach.[Content-Id] ' +
                '   FROM ~Сообщения Вложения~ attach JOIN Parent ON attach.Письмо = Parent.ROW_ID ' +
                ') SELECT ROW_ID, Образ, ИмяФайла ' +
                'FROM Parent WHERE Тип=0',100, "id,S,Hier,S" )
            зВложения.УстановитьПараметры( this.НомерЗаписи, корень );
            while( зВложения.Следующий() ){
                var вложение = new кЭлВложение( this.НомерЗаписи, 'сообщение' );
                // передали путь - значит нужно распаковать файл на диск
                if( путь != undefined ){
                    if( зВложения.ДвоичноеПолеВФайл("Образ", путь + зВложения.ИмяФайла) ){
                        зВложения.ИмяФайла = '';
                    } else {
                        зВложения.ИмяФайла = путь + зВложения.ИмяФайла;
                    }
                }
                вложение.Установить( зВложения.ROW_ID, зВложения.ИмяФайла, 0, зВложения.Образ, зВложения['Content-Id'] );
                this.Вложения.push( вложение );
            }
        }
        return this.Вложения;
    }

    /**
     * сохраняет текст сообщения в базу в соответсвии с его составлением
     * @param текст - текст сообщения (как plain, так и html)
     */
    СохранитьТекст( текст ){
        var plain = undefined, html = undefined;
        if( this.Ящик.ЭтоHtml() ){ // формируем письмо в формате html
            // todo посмотреть ф-цию преобразования html в текст в JS
            if( this.Ящик.СоставлениеHtml() ) plain = HTMLВТекст( текст, 144 );
            if( this.Ящик.СоставлениеТекст() ) html = this.УстановитьContentID( текст );
        } else {
            plain = текст;
        }

        if( plain != undefined ) this.СохранитьЧасть( plain, 'plain' );
        if( html != undefined ) this.СохранитьЧасть( html, 'html' );
    }

    /**
     * сохраняет определенную часть сообщения в базу, если уже внесена, то обновляет ее
     * @param текст - текст части сообщения
     * @param тип - тип части сообещния ('plain' или 'html')
     */
    СохранитьЧасть( текст, тип ){
        switch( тип.toLowerCase() ){
            case 'plain':
                тип = 3;
                break;
            case 'html':
                тип = 4;
                break;
            default :
                return false;
        }
        var естьТело = Query( 'SELECT ROW_ID FROM ~Сообщения Вложения~ ' +
            'WHERE [Вложение-Заголовок]=:1 AND Тип=:2 AND Письмо=-10', 1, "id,S,type,S" );
        var вложение = new кЭлВложение( this.НомерЗаписи, 'сообщение' );
        естьТело.УстановитьПараметры( this.НомерЗаписи, тип );
        if( естьТело.Следующий() ){
            вложение.Установить( естьТело.ROW_ID, '', тип, текст );
            return вложение.Сохранить();
        } else {
            вложение.Установить( -1, '', тип, текст );
            return вложение.Внести();
        }
    }
    УстановитьContentID( текст ){
        var вложение = new кЭлВложение( this.НомерЗаписи, 'сообщение' );
        return вложение.УстановитьContentID( текст, this.Ящик.Объект.ОтЭлАдрес );
    }
    АдресОрганизации( мОрганизаций ){
        var организация = -1, адреса = '';
        for( let адрес of мОрганизаций ){
            // ссылку на орагнизацию берем с первой организации
            if( организация == -1 ) организация = адрес.id;

            // удаляем символы <> из названия организации/представителя
            адрес.Название = адрес.Название.replace( /[<>]+/g, '"' );
            // формируем строку email в виде Название <email0>;email1;....
            var мАдрес = адрес.email.split( ";" );
            for( let i = 0; i < мАдрес.length; i++ ){
                if( i == 0 && мАдрес[i].indexOf('<') == -1){
                    адрес.Название += " <" + мАдрес[i].trim() + ">";
                } else {
                    адрес.Название += мАдрес[i].trim() + ";";
                }
            }
            адреса += адрес.Название;
        }

        var мРезультат = {'Организация' : организация,
            'Адреса' : адреса};
        return мРезультат;
    }

    /**
     * возвращает электронные адреса в нужном формате для отправки сообщений организации
     * @param стрОрганизации - строка номеров записей организаций через ','
     * @returns {Object} - объект с полем Организация (номер записи организации) и полем Адреса (эл. адреса)
     */
    АдресаОрганизаций( стрОрганизации ){
        var мАдреса = [];
        if( стрОрганизации ){
            стрОрганизации = стрОрганизации.trim();
            var зОрганизации = BufferedReader( "SELECT ROW_ID, Название, email FROM ~Организации~ WHERE ROW_ID IN(" + стрОрганизации + ")", 100 );
            зОрганизации.УстановитьПараметры();
            while( зОрганизации.Следующий() ){
                мАдреса.push( {'Название' : зОрганизации.Название.trim(),
                'email' : зОрганизации.email.trim(),
                'id' : зОрганизации.ROW_ID} );
            }
        }
        return this.АдресОрганизации( мАдреса );
    }
    АдресаПредставителей( стрПредставители ){
        var мАдреса = [];
        if( стрПредставители ){
            стрПредставители = стрПредставители.trim();
            var зПредставители = BufferedReader( "SELECT ФИО as [Название], email, [Организация-Частные лица] Орг FROM ~Частные лица~ " +
                "WHERE ROW_ID IN(" + стрПредставители + ")", 100 );
            зПредставители.УстановитьПараметры();
            while( зПредставители.Следующий() ){
                мАдреса.push( {'Название' : зПредставители.Название.trim(),
                    'email' : зПредставители.email.trim(),
                    'id' : зПредставители.Орг} );
            }
        }
        return this.АдресОрганизации( мАдреса );
    }

    /**
     * устанавливает дату сообщения текущей
     * @param поля - строка типов даты для обновления, перечисленных через ','(отправлено, создано, получено)
     */
    УстановитьДату( поля ){
        var мПоля = поля.split( ',' );
        var стрЗапроса = "UPDATE ~Сообщения Заголовок~ SET";
        for( let i = 0; i < мПоля.length; i++ ){
            мПоля[i] = мПоля[i].trim();
            if( i != 0 ) стрЗапроса += ',';
            switch( мПоля[i].toLowerCase() ){
                case 'отправлено':
                    стрЗапроса += "[ДатаОтправки] = CURRENT_TIMESTAMP, Отправлено = CONVERT(varchar, CURRENT_TIMESTAMP, 20)";
                    break;
                case "создано":
                    стрЗапроса += "[ДатаСоздания] = CURRENT_TIMESTAMP, Создано = CONVERT(varchar, CURRENT_TIMESTAMP, 20)";
                    break;
                case "получено":
                    стрЗапроса += "[ДатаПолучения] = CURRENT_TIMESTAMP, Получено = CONVERT(varchar, CURRENT_TIMESTAMP, 20)";
                    break;
                default :
                    throw "Некорректная дата для обновления";
            }
        }
        стрЗапроса += " WHERE ROW_ID=:1";
        var cmd = Command( стрЗапроса, 10, "id,S" );
        cmd.Выполнить( this.НомерЗаписи );
        cmd.Завершить();
    }
    Ответить( операция ){
        var вЭлСообщения = ПолучитьВыборку( "Электронные сообщения" );
        вЭлСообщения.Операция = операция;
        вЭлСообщения.Позиция = this.НомерЗаписи;
        вЭлСообщения.Папка = this.Объект.Папка;
        вЭлСообщения.Корень = -10;
        switch( операция ){
            case "Ответ":
                var адресат = this.Объект.ОтКого;
                var regExp = /[0-9a-zA-Z_\.\-]+@[0-9a-z_\.\-]+\.[a-z]{2,4}/;
                var result = regExp.exec( адресат );
                if( result ) адресат = адресат.substr( 0, result.index-1 ).replace( /[<>]/g, '' ) +
                    ' <' + result[0] + '>';
                вЭлСообщения.Кому = адресат;
                вЭлСообщения['Организация-Сообщения'] = this.Объект['Организация-Сообщения'];
                вЭлСообщения.Тема = this.Объект.Тема;
                break;
            case "Перенаправить":
                вЭлСообщения.Тема = this.Объект.Тема;
                break;
            case "Переслать":
                вЭлСообщения.ОтКого = this.Объект.ОтКого;
                вЭлСообщения.Тема = this.Объект.Тема;
                break;
            case "ДОборот":
                вЭлСообщения.Кому = this.Объект.Кому;
                вЭлСообщения.Копия = this.Объект.Копия;
                вЭлСообщения['Организация-Сообщения'] = this.Объект['Организация-Сообщения'];
                вЭлСообщения.Тема = this.Объект.Тема;
                вЭлСообщения.ТелоСообщения = arguments[1];
                вЭлСообщения.Задание = arguments[2];
                break;
        }
        this.ПрочитатьЯщик();
        if( операция == "ДОборот" ){
            вЭлСообщения.Редактировать(this.Ящик.ЭтоHtml() ?
                "ЭлектронноеСообщение Создание HTML" : "ЭлектронноеСообщение Создание", "Исходящее письмо");
        } else {
            вЭлСообщения.РедактироватьНемодально(this.Ящик.ЭтоHtml() ?
                "ЭлектронноеСообщение Создание HTML" : "ЭлектронноеСообщение Создание", "Исходящее письмо");
        }
    }
    /**
     * создает сообщение электронной почты
     * @param тема - тема сообщения
     * @param адресат - адресат сообщения
     * @param текст - тело сообщения
     * @param копия - адрес, куда будет направлена копия сообщения
     * @param скрытаяКопия - адрес, куда будет направлена скрытая копия сообщения
     * @returns {boolean} true, если удалось создать объект сообщения для отправки
     */
    СоздатьСообщение( текст, текстHtml ){
        if( !this.Ящик && this.ПрочитатьЯщик() < 0 ){
            Сообщить( "Некорректные настройки почтового ящика", 'OK,ERROR_TITLE' );
            return false;
        }
        if( !this.Ящик.ЭлПочта && !this.Ящик.УстановитьПочту(true) ) return false;
        // очистим каталог с временным хранилищем файлов
        УдалитьФайл( "Email\\*" )

        this.Ящик.ЭлПочта.ДобавитьТемуПисьма( this.Объект.Тема );
        var мАдреса = this.РазобратьАдреса( this.Объект.Кому.trim() );
        for( let адрес of мАдреса ) {
            this.Ящик.ЭлПочта.ДобавитьПолучателя( адрес.Адрес, адрес.Имя );
        }
        if( this.Объект.Копия ) { // разберем, на случай если в поле Копия был введен не один адрес
            мАдреса = this.РазобратьАдреса( this.Объект.Копия.trim() );
            for( let адрес of мАдреса ) {
                this.Ящик.ЭлПочта.ДобавитьКопиюПолучателя( адрес.Адрес, адрес.Имя );
            }
            this.Ящик.ЭлПочта.Копия = this.Ящик.ЭлПочта.ПолучателиПисьма( 2 );
        }
        if( this.Объект.СкрытаяКопия ) { // разберем, на случай если в поле СкрытаяКопия был введен не один адрес
            мАдреса = this.РазобратьАдреса( this.Объект.СкрытаяКопия.trim() );
            for( let адрес of мАдреса ) {
                this.Ящик.ЭлПочта.ДобавитьСкрытуюКопиюПолучателя( адрес.Адрес, адрес.Имя );
            }
            this.Ящик.ЭлПочта.СкрытаяКопия = this.ЭлПочта.ПолучателиПисьма( 3 );
        }
        if( текст != undefined ) this.Ящик.ЭлПочта.ДобавитьВТелоПисьма( текст );
        if( текстHtml != undefined ) this.Ящик.ЭлПочта.ДобавитьВТелоПисьма( текстHtml, 1 );
        this.Ящик.ЭлПочта.Кому = this.Ящик.ЭлПочта.ПолучателиПисьма( 1 );
        this.Ящик.ЭлПочта.ОтКого = this.Ящик.Транспорт.Объект.ОтФио + " <" + this.Ящик.Транспорт.Объект.ОтЭлАдрес + ">";

        return true;
    }

    /**
     * преобразует адреса письма, перечисленные через ";", в объект для дальнейшей их подстановки в сообщение
     * строка имеет вид: "имя адресата" <email>;"имя адресата" <email>;...
     * @param адреса - строка адресов, разделенных ";"
     * @returns {{}} - объект, элементами которго являются объекты, состоящие из полей: Имя и Адрес
     */
    РазобратьАдреса( адреса ){
        var мАдреса = адреса.split( ";" );
        var мРезультат = [];
        for( let адрес of мАдреса ) {
            адрес = адрес.trim();
            if( !адрес ) continue;

            var поз = адрес.search( /<[A-Za-z0-9_@\.\- ]+>/i );
            if( поз == 0 ) { // в строке получателя только электронный адрес
                мРезультат.push( {
                    'Адрес': адрес.substring( поз + 1, адрес.indexOf( '>', поз - 1 ) ).trim(),
                    'Имя': ''
                } );
            } else if( поз == -1 ) { // нет имени и электронный адрес без <>
                var мАдрес = адрес.split( ' ' );
                if( мАдрес ) { // есть адреса через пробел
                    for( let адрес1 of мАдрес ) {
                        if( адрес1.trim() ) {
                            мРезультат.push( {
                                'Адрес': адрес1.trim(),
                                'Имя': ''
                            } );
                        }
                    }
                } else {
                    мРезультат.push( {
                        'Адрес': адрес,
                        'Имя': ''
                    } );
                }
            } else { // в строке получателя есть имя и есть эл. адрес
                мРезультат.push( {
                    'Адрес': адрес.substring( поз + 1, адрес.indexOf( '>', поз + 1 ) ).trim(),
                    'Имя': адрес.substr( 0, поз ).trim()
                } );
            }
        }
        return мРезультат;
    }
    ПереместитьВПапку( папка ){
        var cmd = Command( "UPDATE ~Сообщения Заголовок~ SET Папка=:1 WHERE ROW_ID=:2", 1, "mas,S,id,S" );
        cmd.Выполнить( папка, this.НомерЗаписи );
        cmd.Завершить();
    }
    УстановитьОтправителя(){
        if( !this.Ящик && this.ПрочитатьЯщик() < 0 ) return '';

        this.Объект.ОтКого = this.Ящик.Транспорт.Объект.ОтФио + " <" + this.Ящик.Транспорт.Объект.ОтЭлАдрес + ">";
        return this.Объект.ОтКого;
    }

    /**
     * сохраняет новое вложение сообщения в базу
     * @param полноеИмяФайла - полное имя фала вложения
     * @returns {boolean} - true, если файл можно добавить
     */
    ДобавитьВложение( полноеИмяФайла ){
        var вложение = new кЭлВложение( this.НомерЗаписи, 'сообщение' );

        var аттрибутыФ = АтрибутыФайла( полноеИмяФайла );
        if( аттрибутыФ.Размер > 0 ) return вложение.ДобавитьФайл( полноеИмяФайла );

        return false;
    }
}

/**
 * @extends БазовыйОбъект
 * @class класс кЭлШаблон - объект для работы с шаблоном электронного сообщения
 */
class кЭлШаблон extends БазовыйОбъект {
    constructor( имя, идТранспорт, этоHtml ) {
        super( 'Сообщения Шаблон', -1 );
        /**
         * имя шаблона
         * @type {string}
         */
        this.Имя = имя;
        /**
         * ссылка на запись таблицы 'Сообщения Транспорт'
         * @type {number}
         */
        this.ИдТранспорт = идТранспорт;
        /**
         * этот шаблон написан в формате Html
         * @type {boolean}
         */
        this.ЭтоHtml = этоHtml;
        /**
         * текст шаблона в зависимости от типа шаблона
         * @type {string}
         */
        this.Текст = '';
    }
    Прочитать( номерЗаписи ){
        if( номерЗаписи != undefined ){
            if( super.Прочитать( номерЗаписи ) ){
                this.Текст = this.ЭтоHtml ? this.Объект.ШаблонHTML : this.Объект.ШаблонТекст;
                this.Имя = this.Объект.Название;
            }
            // если этот шаблон не из этого ящика и не является общим шаблоном ('Транспорт-Шаблон'==-1), то
            // он не должен загрузиться
            if( this.Объект['Транспорт-Шаблон'] != this.ИдТранспорт && this.Объект['Транспорт-Шаблон'] != -1 ){
                this.Текст = '';
                return false;
            }
        }

        var зШаблон = Query( 'SELECT ROW_ID FROM ~Сообщения Шаблон~ WHERE :1 IN([Транспорт-Шаблон],-1) AND Название=:2', 1, "id,S,name,A" );
        зШаблон.УстановитьПараметры( this.ИдТранспорт, this.Имя );
        if( зШаблон.Следующий() ) {
            if( номерЗаписи == undefined ){
                super.Прочитать( зШаблон.ROW_ID )
                this.Текст = this.ЭтоHtml ? this.Объект.ШаблонHTML : this.Объект.ШаблонТекст;
            }
        } else if( this.НомерЗаписи < 0 ){
            this.ПрочитатьИзКонтекста( {'Название' : this.Имя,
                'Транспорт-Шаблон' : this.ИдТранспорт} );
        }
        return this.Объект != null;
    }
    Сохранить( текст ) {
        if( this.ЭтоHtml ){
            this.ОбработатьHtml( текст );
        } else {
            this.Объект.ШаблонТекст = текст;
        }
        if( this.НомерЗаписи > 0 ) {
            return super.Сохранить();
        } else
            return super.Внести();
    }
    ОбработатьHtml( текст ){
        if( !this.ЭтоHtml ) return текст;
        текст = this.УстановитьContentID( текст );

        var стр_сид;
        // собираем строку тех Content-Id, которые действительно остались после редактирования шаблона
        var мСид = текст.match( /cid:([A-Za-z0-9_\.@]+)/g );
        for( let сид of мСид ) {
            стр_сид += ",'" + сид.substr( 3 ) + "'";
        }

        var кмдУдаление = `DELETE FROM ~Сообщения Вложения~ WHERE [Вложение-Шаблон]=:1`;
        if( стр_сид ) {
            стр_сид = стр_сид.substr( 1 );
            кмдУдаление += ' AND [Content-Id] NOT IN(' + стр_сид + ')';
        }
        // собственно удаление лишних картинок из шаблона
        var кУдаление = Command( кмдУдаление, 10, "sh,S" );
        кУдаление.Выполнить( this.НомерЗаписи );
        кУдаление.Завершить();
        this.Объект.ШаблонHTML = текст;
        return текст;
    }
    УстановитьContentID( текст ){
        var вложение = new кЭлВложение( this.НомерЗаписи, 'шаблон' );
        return вложение.УстановитьContentID( текст, "" );
    }
    Существует(){
        var зШаблона = Query( "SELECT ROW_ID FROM ~Сообщения Шаблон~ " +
            "WHERE [Транспорт-Шаблон]=:1 AND Название LIKE :2", 100, "tr,S,name,A" );
        зШаблона.УстановитьПараметры( this.ИдТранспорт, this.Имя );
        return зШаблона.Следующий() ? true : false;
    }
    // todo написать это
    Цитата( текст, символовВСтроке, заглавныйСимвол ){
        return текст;
    }
    // todo проверить на одной лексеме
    /**
     * подстановка переменных шаблона по переданным параметрам
     * @param сообщение - кЭлСообщение, оригинальное сообщение
     * @param тема - тема сообщения
     * @param адресат - адресат сообщения
     * @returns {string} - текст шаблона с подставленными значениями переменных шаблона
     */
    Разобрать( сообщение, тема, адресат ){
        if( !this.Текст || this.НомерЗаписи < 0 ) return '';
        var задание = arguments[3] != undefined ? arguments[3] : -1;
        var заявка = arguments[4] != undefined ? arguments[4] : -1;
        var внешнийТекст = arguments[5] != undefined ? arguments[5] : '';
        if( сообщение ) сообщение.ПрочитатьЯщик();

        var мЛексемы = this.Текст.split( /%(\w+)/g );
        var результат = '', подстановка = '';
        var картинка = false;
        for( let i in мЛексемы ){
            if( !мЛексемы.hasOwnProperty(i) ) continue;

            if( i % 2 == 0 || мЛексемы.length == 1 ){ // это просто текст между лексемами - вставляем как есть
                if( картинка ){
                    результат += this.ШаблонКартинка( мЛексемы[i].substr(0, мЛексемы[i].indexOf('"')-1) );
                    картинка = false;
                } else {
                    результат += мЛексемы[i];
                }
            } else { // разбираемся с подстановками
                switch( мЛексемы[i].toUpperCase() ){
                    // Текст
                    /*case "CURSOR":
                        подстановка = "%CURSOR";
                        break;*/
                    case "TEXT":
                        подстановка = this.ШаблонТекст( сообщение );
                        break;
                    case "HTML":
                        подстановка = this.ШаблонHtml( сообщение );
                        break;
                    case "QUOTES":
                        подстановка = this.ШаблонЦитата( сообщение );
                        break;
                    case "DATE":
                        подстановка = this.ШаблонДата();
                        break;
                    case "DATESHORT":
                        подстановка = this.ШаблонКороткаяДата();
                        break;
                    case "TIME":
                        подстановка = this.ШаблонКороткоеВремя();
                        break;
                    case "TIMELONG":
                        подстановка = this.ШаблонВремя();
                        break;
                    case "DOW":
                        подстановка = this.ШаблонДеньНедели();
                        break;
                    case "ODATE":
                        подстановка = this.ШаблонДата( сообщение );
                        break;
                    case "ODATESHORT":
                        подстановка = this.ШаблонКороткаяДата( сообщение );
                        break;
                    case "OTIME":
                        подстановка = this.ШаблонКороткоеВремя( сообщение );
                        break;
                    case "OTIMELONG":
                        подстановка = this.ШаблонВремя( сообщение );
                        break;
                    case "ODOW":
                        подстановка = this.ШаблонДеньНедели( сообщение );
                        break;
                    case "SUBJ":
                        подстановка = тема;
                        break;
                    case "OSUBJ":
                        подстановка = this.ШаблонТема( сообщение );
                        break;
                    // Информация об отправителе
                    case "FROMNAME":
                        подстановка = this.ШаблонФиоОтправителя( сообщение.Ящик );
                        break;
                    case "FROMFNAME":
                        подстановка = this.ШаблонФамилияОтправителя( сообщение.Ящик );
                        break;
                    case "FROMLNAME":
                        подстановка = this.ШаблонИмяОтправителя( сообщение.Ящик );
                        break;
                    case "REPLYNAME":
                        подстановка = this.ШаблонФиоОбратныйАдрес( сообщение.Ящик );
                        break;
                    case "REPLYFNAME":
                        подстановка = this.ШаблонФамилияОбратныйАдрес( сообщение.Ящик );
                        break;
                    case "REPLYLNAME":
                        подстановка = this.ШаблонИмяОбратныйАдрес( сообщение.Ящик );
                        break;
                    case "FROMADDR":
                        подстановка = this.ШаблонАдресОтправителя( сообщение.Ящик );
                        break;
                    case "REPLYADDR":
                        подстановка = this.ШаблонОбратныйАдрес( сообщение.Ящик );
                        break;
                    case "OFROMNAME":
                        подстановка = this.ШаблонФиоОтправителяСообщение( сообщение );
                        break;
                    case "OFROMFNAME":
                        подстановка = this.ШаблонФамилияОтправителяСообщение( сообщение );
                        break;
                    case "OFROMLNAME":
                        подстановка = this.ШаблонИмяОтправителяСообщение( сообщение );
                        break;
                    case "OFROMADDR":
                        подстановка = this.ШаблонАдресОтправителяСообщение( сообщение );
                        break;
                    // Информация о получателе
                    case "TONAME":
                        подстановка = this.ШаблонФиоАдресат( адресат );
                        break;
                    case "TOFNAME":
                        подстановка = this.ШаблонФамилияАдресат( адресат );
                        break;
                    case "TOLNAME":
                        подстановка = this.ШаблонИмяАдресат( адресат );
                        break;
                    case "TOADDR":
                        подстановка = this.ШаблонАдресАдресат( адресат );
                        break;
                    case "OTONAME":
                        подстановка = this.ШаблонФиоАдресатОригинал( сообщение );
                        break;
                    case "OTOFNAME":
                        подстановка = this.ШаблонФамилияАдресатОригинал( сообщение );
                        break;
                    case "OTOLNAME":
                        подстановка = this.ШаблонИмяАдресатОригинал( сообщение );
                        break;
                    case "OTOADDR":
                        подстановка = this.ШаблонАдресАдресатОригинал( сообщение );
                        break;
                    // Разное
                    case "ACCOUNTNAME":
                        подстановка = this.ШаблонНазваниеЯщика( сообщение.Ящик );
                        break;
                    /*case "ATTACHMENTS":
                        подстановка = this.ШаблонATTACHMENTS( -1 );
                        break;*/
                    case "OATTACHMENTS":
                        подстановка = this.ШаблонВложения( сообщение );
                        break;
                    // todo заменить на JS версию
                    case "USERNAME":
                        подстановка = ФИО( Пользователь().ФИО );
                        break;
                    // документооборот
                    case "TEXTCARD":
                        подстановка = this.ШаблонЗаявка( заявка );
                        break;
                    case "TEXTTASK":
                        подстановка = this.ШаблонЗадание( задание );
                        break;
                    case "QTEXTCARD":
                        подстановка = this.ШаблонЗаявкаЦитата( заявка );
                        break;
                    case "QTEXTTASK":
                        подстановка = this.ШаблонЗаданиеЦитата( задание );
                        break;
                    case "MESSAGE":
                        подстановка = внешнийТекст;
                        break;
                    case "IMAGE":
                        картинка = true;
                    default :
                        подстановка = '';
                }
                результат += подстановка;
            }
        }

        return результат;
    }
    ШаблонТекст( сообщение ){
        var текст = сообщение.ПолучитьТекст( "plain", -10 ); // посмотрим тело письма в текстовом виде
        if( !текст ) {
            текст = сообщение.ПолучитьТекст( "html", -10 ); // извлечем html тела письма
            if( текст ) текст = HTMLВТекст( текст, 144 ); // переведем в текст
        }
        return текст;
    }

    ШаблонHtml( сообщение ){
        var текст = сообщение.ПолучитьТекст( "html", -10 ); // извлечем html тела письма
        if( !текст ){ // посмотрим тело письма в текстовом виде
            текст = сообщение.ПолучитьТекст( "plain", -10 );
        } else {
            текст = сообщение.ПрочитатьHtml( 1 );
        }
        return текст;
    }

    ШаблонЦитата( сообщение ){
        return this.Цитата( this.ШаблонТекст(сообщение), 144, ">" );
    }

    ШаблонДата( сообщение ){
        var дата = new Date();
        if( arguments.length == 1 && сообщение.Объект ) {
            дата = сообщение.Объект.ДатаСоздания;
        }
        return дата.getDate() + " " + дата.МесяцПрописью() + " " + дата.getFullYear() + " г.";
    }

    ШаблонКороткаяДата( сообщение ){
        var дата = new Date();
        if( arguments.length == 1 && сообщение.Объект ) {
            дата = сообщение.Объект.ДатаСоздания;
        }
        return дата.format("rusDate");
    }

    ШаблонВремя( сообщение ){
        if( сообщение && сообщение.Объект ) {
            var создано = сообщение.Объект.Создано;
            return создано.substr( создано.indexOf(' ') + 1 );
        }
        return new Date().format( 'isoTime' );
    }

    ШаблонКороткоеВремя( сообщение ){
        if( сообщение && сообщение.Объект ) {
            var создано = сообщение.Объект.Создано;
            return создано.slice( создано.indexOf(' ') + 1, -3 );
        }
        return new Date().format( 'HH:mm' );
    }

    ШаблонДеньНедели( сообщение ){
        var дата = new Date();
        if( arguments.length == 1 && сообщение.Объект ) {
            дата = сообщение.Объект.ДатаСоздания;
        }
        return дата.ДеньНедели();
    }

    ШаблонТема( сообщение ){
        if( сообщение.Объект ){
            return сообщение.Объект.Тема;
        }
        return '';
    }

    ШаблонФиоОтправителя( ящик ){
        if( ящик.Транспорт.Объект ) {
            return ящик.Транспорт.Объект.ОтФио;
        }
        return '';
    }

    ШаблонФамилияОтправителя( ящик ){
        if( ящик.Транспорт.Объект ) {
            var фио = new кЧеловек( ящик.Транспорт.Объект.ОтФио );
            фио.РаспаковатьФио();
            return фио.Фамилия;
        }
        return '';
    }

    ШаблонИмяОтправителя( ящик ){
        if( ящик.Транспорт.Объект ) {
            var фио = new кЧеловек( ящик.Транспорт.Объект.ОтФио );
            фио.РаспаковатьФио();
            return фио.Имя;
        }
        return "";
    }

    ШаблонФиоОбратныйАдрес( ящик ){
        if( ящик.Транспорт.Объект ) {
            return ящик.Транспорт.Объект.ОбрАдрФио;
        }
        return '';
    }

    ШаблонФамилияОбратныйАдрес( ящик ){
        if( ящик.Транспорт.Объект ) {
            var фио = new кЧеловек( ящик.Транспорт.Объект.ОбрАдрФио );
            фио.РаспаковатьФио();
            return фио.Фамилия;
        }
        return '';
    }

    ШаблонИмяОбратныйАдрес( ящик ){
        if( ящик.Транспорт.Объект ) {
            var фио = new кЧеловек( ящик.Транспорт.Объект.ОбрАдрФио );
            фио.РаспаковатьФио();
            return фио.Имя;
        }
        return '';
    }

    ШаблонАдресОтправителя( ящик ){
        if( ящик.Транспорт.Объект ) {
            return ящик.Транспорт.Объект.ОтЭлАдрес;
        }
        return '';
    }

    ШаблонОбратныйАдрес( ящик ){
        if( ящик.Транспорт.Объект ) {
            return ящик.Транспорт.Объект.ОбрАдрЭлАдрес;
        }
        return '';
    }

    ШаблонФиоОтправителяСообщение( сообщение ){
        if( сообщение.Объект ){
            var поз = сообщение.Объект.ОтКого.indexOf( '<' );
            if( поз != -1 ) return сообщение.Объект.ОтКого.substr( 0, поз-1 ).trim();
        }
        return '';
    }

    ШаблонФамилияОтправителяСообщение( сообщение ){ //ШаблонOFROMFNAME
        if( сообщение.Объект ) {
            var отправитель = сообщение.Объект.ОтКого;
            var позКнц = отправитель.indexOf( '<' );
            if( позКнц >= 0 ) отправитель = отправитель.substring( 0, позКнц );
            var фио = new кЧеловек( отправитель );
            фио.РаспаковатьФио();
            return фио.Фамилия;
        }
        return '';
    }

    ШаблонИмяОтправителяСообщение( сообщение ) { //ШаблонOFROMLNAME
        if( сообщение.Объект ) {
            var отправитель = сообщение.Объект.ОтКого;
            var позКнц = отправитель.indexOf( '<' );
            if( позКнц >= 0 ) отправитель = отправитель.substring( 0, позКнц );
            var фио = new кЧеловек( отправитель );
            фио.РаспаковатьФио();
            return фио.Имя;
        }
        return '';
    }

    ШаблонАдресОтправителяСообщение( сообщение ) {
        if( сообщение.Объект ) {
            return this.ШаблонАдресАдресат( сообщение.Объект.ОтКого );
        }
        return '';
    }

    ШаблонФиоАдресат( адресат ){
        var поз = адресат.indexOf( '<' );
        if( поз != -1 ) return адресат.substr( 0, поз ).trim();
        return '';
    }

    ШаблонФамилияАдресат( адресат ){
        var поз = адресат.indexOf( '<' );
        if( поз != -1 ) {
            var фио = new кЧеловек( адресат.substring(0, поз).trim() );
            фио.РаспаковатьФио();
            return фио.Фамилия;
        }
        return '';
    }

    ШаблонИмяАдресат( адресат ){
        var поз = адресат.indexOf( '<' );
        if( поз != -1 ) {
            var фио = new кЧеловек( адресат.substring(0, поз).trim() );
            фио.РаспаковатьФио();
            return фио.Имя;
        }
        return '';
    }

    ШаблонАдресАдресат( адресат ){
        var адрес = адресат.trim();
        var мАдрес = new RegExp('<[A-Za-z0-9_@\.\-]+>', 'i').exec( адрес );
        if( мАдрес ) адрес = мАдрес[0].slice( 1, -1 );

        return адрес;
    }

    ШаблонФиоАдресатОригинал( сообщение ){
        if( сообщение.Объект ) {
            return this.ШаблонФиоАдресат( сообщение.Объект.Кому );
        }
        return '';
    }

    ШаблонФамилияАдресатОригинал( сообщение ){
        if( сообщение.Объект ) {
            return this.ШаблонФамилияАдресат( сообщение.Объект.Кому );
        }
        return '';
    }

    ШаблонИмяАдресатОригинал( сообщение ){
        if( сообщение.Объект ) {
            return this.ШаблонИмяАдресат( сообщение.Объект.Кому );
        }
        return '';
    }

    ШаблонАдресАдресатОригинал( сообщение ){
        if( сообщение.Объект ) {
            return this.ШаблонАдресАдресат( сообщение.Объект.Кому );
        }
        return '';
    }

    ШаблонНазваниеЯщика( ящик ){
        return ящик.Название;
    }
    // todo для оптимизации можно попробовать без образа файла
    ШаблонВложения( сообщение ){
        var мВложения = сообщение.ПолучитьВложение( -10 );
        var результат = '';
        for( let вложение of мВложения ){
            if( результат ) результат += ',';
            результат += вложение.ИмяФайла;
        }
        return результат;
    }
    ШаблонЗаявка( заявка ){
        var зКарточка = Query( "SELECT Примечание FROM ~ДО карточки~ WHERE ROW_ID=:1", 1, "id,S" );
        зКарточка.УстановитьПараметры( заявка );
        return зКарточка.Следующий() ? зКарточка.Примечание : '';
    }

    ШаблонЗадание( задание ){
        var зЗадание = Query( "SELECT Отметки FROM ~ДО задания~ WHERE ROW_ID=:1", 1, "id,S" );
        зЗадание.УстановитьПараметры( задание );
        return зЗадание.Следующий() ? зЗадание.Отметки : '';
    }

    ШаблонЗаявкаЦитата( заявка ){
        return this.Цитата( this.ШаблонЗаявка(заявка), 144, ">" );
    }

    ШаблонЗаданиеЦитата( задание ){
        return this.Цитата( this.ШаблонЗадание(задание), 144, ">" );
    }

    ШаблонКартинка( текст ){
        var вложение = new кЭлВложение( this.НомерЗаписи, 'шаблон' );
        return "<img " + вложение.ПрочитатьHtml(текст, 0) + ">";
    }
}

/**
 * @extends БазовыйОбъект
 * @class класс кЭлВложение - объект для работы с вложением электронного сообщения
 */
class кЭлВложение extends БазовыйОбъект {
    constructor( идРодитель, тип ) {
        super( 'Сообщения Вложения', -1 );
        /**
         * номер записи владельца записи: сообщения или шаблона
         * @type {number}
         */
        this.ИдРодитель = идРодитель;
        /**
         * команда для сохранения записи вложения в базу
         * @type {Command}
         */
        this.КомандаВнести = undefined;
        /**
         * команда для сохранения записи вложения в базу
         * @type {Command}
         */
        this.КомандаСохранить = undefined;
        /**
         * имя поля для записи ссылки родителя в базу
         * @type {string}
         */
        this.Ссылка = тип.toLowerCase() == 'шаблон' ? '[Вложение-Шаблон]' : '[Вложение-Заголовок]';
        /**
         * полное имя файла (с путем) для сохранения во вложение
         * @type {string}
         */
        this.ИмяФайла = '';
        /**
         * файл в бинарном виде
         * @type {string}
         */
        this.ОбразФайла = '';
        /**
         * content-id вложения
         * @type {string}
         */
        this.ContentId = '';
        /**
         * тип вложенпия сообщения: 0 - вложение сообщения, 1 - исходный код сообщения, 2 - текстовая часть тела, 3 - html часть тела
         * @type {number}
         */
        this.Тип = 0;
        this.Иерархия = -10;
    }
    Внести() {
        if( !this.КомандаВнести ){
            if( !this.ОбразФайла ) {
                this.КомандаВнести = Query( "INSERT INTO ~Сообщения Вложения~(" + this.Ссылка +
                    ",Образ,ИмяФайла,Письмо,ПолноеИмя,Тип,[Content-Id]) " +
                    " VALUES(:1, :2, :3, :4, :5, :6, :7); " +
                    "SELECT SCOPE_IDENTITY() [id];", 1, "p1,S,p2,F,p3,A,p4,S,p5,A,p6,S,p7,A" );
            } else {
                this.КомандаВнести = Query( "INSERT INTO ~Сообщения Вложения~(" + this.Ссылка +
                    ",Образ,ИмяФайла,Письмо,ПолноеИмя,Тип,[Content-Id]) " +
                    " VALUES(:1, :2, :3, :4, :5, :6, :7); " +
                    "SELECT SCOPE_IDENTITY() [id];", 1, "p1,S,p2,M,p3,A,p4,S,p5,A,p6,S,p7,A" );
            }
        }
        if( this.ИмяФайла || this.ОбразФайла ) {
            this.КомандаВнести.УстановитьПараметры( this.ИдРодитель, this.ОбразФайла ? this.ОбразФайла : this.ИмяФайла,
                this.КраткоеИмя(), this.Иерархия, this.ИмяФайла, this.Тип, this.ContentId );
            this.НомерЗаписи = this.КомандаВнести.Следующий() ? this.КомандаВнести.id : -1;
        }
        return this.НомерЗаписи > 0 ? this.НомерЗаписи : false;
    }
    Сохранить(){
        if( this.НомерЗаписи < 0 ) return false;

        if( !this.КомандаСохранить )
            this.КомандаСохранить = Command( "UPDATE ~Сообщения Вложения~ " +
                " SET " + this.Ссылка + "=:1, Образ=:2, ИмяФайла=:3, ПолноеИмя=:4, [Content-Id]=:5 " +
                "WHERE ROW_ID=:6", 1, "p1,S,p2,M,p3,A,p4,A,p5,A,p6,S" );
        this.КомандаСохранить.Выполнить( this.ИдРодитель, this.ОбразФайла,
            this.КраткоеИмя(), this.ИмяФайла, this.ContentId, this.НомерЗаписи );
        return true;
    }
    Установить( номерЗаписи, имяФайла, тип, образФайла, contentId, иерархия ){
        this.НомерЗаписи = номерЗаписи;
        this.ИмяФайла = имяФайла;
        if( тип != undefined ) this.Тип = тип;
        if( образФайла != undefined ) this.ОбразФайла = образФайла;
        if( contentId != undefined ) this.ContentId = contentId;
        if( иерархия != undefined ) this.Иерархия = иерархия;
    }

    ОткрытьФайл( путь ){
        if( this.НомерЗаписи > 0 ) {
            var зОбраза = Query( "SELECT [Образ], [ИмяФайла] FROM ~Сообщения Вложения~ WHERE ROW_ID=:1", 1, "own,S" );
            зОбраза.УстановитьПараметры( this.НомерЗаписи );
            if( зОбраза.Следующий() ){
                this.ИмяФайла = зОбраза.ИмяФайла;
                if( !зОбраза.ДвоичноеПолеВФайл("Образ", путь + this.ИмяФайлаСохранение()) )
                    return путь + this.ИмяФайлаСохранение();
            }
        }
        return '';
    }

    /**
     * возвращает имя файла без запрещенных символов для сохранения его на диске
     * @returns {string} имя файла
     */
    ИмяФайлаСохранение(){
        return this.ИмяФайла.replace( /[\\/*\?"<>|\:]+/g, '_' );
    }

    /**
     * вносит вложение-файл в базу
     * @param файл - полное имя файла с путем
     * @returns {boolean} - true, если удалось сохранить в базу
     */
    ДобавитьФайл( файл ){
        this.ИмяФайла = файл;
        return this.Внести();
    }

    /**
     * извлекает из полного имени файла с путем его имя
     * @param файл - полное имя файла с путем
     * @returns {string} - краткое имя файла
     */
    КраткоеИмя(){
        var мЧасти = this.ИмяФайла.split( /\\/g );
        if( мЧасти ) return мЧасти[мЧасти.length-1];

        return this.ИмяФайла;
    }

    // todo надо проверить
    УстановитьContentID( текст, email ){
        var результат = '', поз = 0;
        var contentid = '', домен = "@stack-it.ru";
        if( (поз = email.indexOf('@')) > 0 ) {
            домен = email.substr( поз-1 );
        }
        var мТекст = текст.split( /(src="file:\/\/\/[A-Za-z0-9_\.@]+)/g );
        // if файлов не будет найдено, то результат будет помещен в первый элемент массива
        for( let i in мТекст ) {
            if( !мТекст.hasOwnProperty(i) ) continue;
                // в четном индексе массива содержиться просто текст между разделителями
            if( i % 2 == 0 ) {
                результат += мТекст[i];
            } else { // в нечетном индексе массива содержиться разделитель - то есть имя файла
                // сначала сохраним образ файла в базу
                let имяФайла = "CLIENT:" + мТекст[i].substr( 12 );
                var атрф = АтрибутыФайла( имяФайла );
                contentid = this.СоздатьContentID( i, домен );
                if( атрф.Размер > 0 ) {
                    this.Установить( -1, имяФайла, 0, '', contentid );
                    this.Внести();
                }
                // добавляем строковое представление в возвращаемое значение
                результат += 'src="cid:' + contentid + '"';
            }
        }

        return результат;
    }

    /**
     * генерит Content-Id вложения по следующему шаблону part<номер>.<4 случайных символа>.<4 случайных символа><домен>
     * @param номер - номер для генерации
     * @param домен - домен ящика, с которого будет отправлено сообщение с этим вложением (чтобы подчеркнуть принадлежность к ящику)
     * @returns {string} - новый ContentId для вложения
     */
    СоздатьContentID( номер, домен ){
        var часть1 = (Math.random().toString(36)).slice(2, 7);
        var часть2 = (Math.random().toString(36)).slice(2, 7);
        return "part" + номер.ЧислоСВедущимиНулями(2) + "." + стр_рандом1 + "." + стр_рандом2 + домен;
    }

    /**
     * распаковывает файлы ссылок на диск в каталог Email в каталоге клиента программы
     * @param режим - если 0, то распаковывает файлы на диск с именем <ссылка><номе_записи_владельца>
     *     если 1 - то распаковыевает с именем файла из базы
     * @returns {Array} - индексами служат имя ссылки, значение - имя файла на диске в зависимости от режима
     */
    ПолучитьContentID( режим ) {
        var зСсылки = Query( 'SELECT Образ, [Content-Id], [ИмяФайла],' + this.Ссылка + ' [mail] ' +
            'FROM ~Сообщения Вложения~ ' +
            "WHERE " + this.Ссылка + "=:1 AND [Content-Id]<>''", 10, "id,S" );
        зСсылки.УстановитьПараметры( this.ИдРодитель );
        var мРезультат = [];
        while( зСсылки.Следующий() ){
            var имяФайла = '';
            if( режим == 0 ) {
                имяФайла = зСсылки['Content-Id'] + зСсылки.mail;
            } else {
                имяФайла = зСсылки.ИмяФайла;
            }
            мРезультат[зСсылки['Content-Id']] = имяФайла;
            if( !ЕстьФайл( "CLIENT:Email\\" + имяФайла, "ч" ) ) {
                зСсылки.ДвоичноеПолеВФайл( "Образ", "CLIENT:Email\\" + имяФайла );
            }
        }
        return мРезультат;
    }

    /**
     * заменяет относительные ссылки письма реальными файлами на клиенте,
     * файлы предварительно должны быть выгруженя из базы на диск
     * @param текст - текст Html
     * @param режим - если 0, то распаковывает файлы на диск с именем <ссылка><номе_записи_владельца>
     *     если 1 - то распаковыевает с именем файла из базы
     * @returns {string} - строка html с подставленными именами реальных файлов
     */
    ПрочитатьHtml( текст, режим ) {
        var мСсылки = this.ПолучитьContentID( режим );
        var результат = '';
        var мТекст = текст.split( /(cid:[A-Za-z0-9_\.@]+)/ );
        var путь = КаталогКлиента().replace( /\\/g, '/' );
        for( let i in мТекст ) {
            if( !мТекст.hasOwnProperty( i ) ) continue;

            if( i % 2 == 0 ) {
                результат += мТекст[i];
            } else {
                var contentid = мСсылки[мТекст[i].substr(4)];
                результат += "file:///" + путь + "EMail/" + contentid;
            }
        }
        return результат;
    }

    /**
     * ищет тег <meta> в html вложения и заменяет в нем кодироку на кодировка
     * если не находит, явно дописывает кодировку внутрь
     * @param кодировка {string} - текстовый вид кодировки в html (например, 'cp866')
     * @returns {string} html с нужной кодировкой
     */
    СменитьКодировкуHtml( кодировка ){
        var html = '';
        if( !this.ОбразФайла ) return html;

        var regExp = new RegExp( /<meta.*?charset=([^"']+)/i );
        if( regExp.test(this.ОбразФайла) ) {
            html = this.ОбразФайла.replace( /<meta.*?charset=([^"']+)/i, '$1' + кодировка );
        } else {
            html = `<head><meta http-equiv="Content-Type" content="text/html; charset=` + кодировка +`" /></head>` + this.ОбразФайла;
        }

        return html;
    }
}