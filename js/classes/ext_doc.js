"use strict";
/**
 * Класс работы со внешними документами.
 * Умеет читать, сканировать, сохранять данные.
 */
class ВнешнийДокумент extends БазовыйОбъект {
    constructor(НомерЗаписи) {
        super("Внешние документы", НомерЗаписи);
        if (НомерЗаписи)
            this.Прочитать();
        this.Инициазизирован = false;
        this.СписокУстройств = new Map();
        this.Инфо = undefined;
        this.ПутьКФайлуКлиент = "";
    }

    /**
     * Инициализирует драйвер,формирует список подкюченных устройств
     * @returns {Number} Инициализирован или нет
     */
    ИнициализироватьДрайвер() {
        this.Сканер = СоздатьВнешнийДокумент();
        this.Сканер.ИнициализироватьДрайвер();
        this.Инфо = this.Сканер.ДрайверИнфо();
        if (this.Инфо.СписокСканеров != "") {
            var Устройства = this.Инфо.СписокСканеров.split(";");
            for (let инд of Устройства) {
                if (Устройства.hasOwnProperty(инд)) {
                    var КлючИмя = Устройства[инд].split("=");
                    this.СписокУстройств.set(КлючИмя[0], КлючИмя[1]);
                }
            }
            var текУстройство = this.Инфо.ТекущийСканер.split("=");
            this.Сканер.ВыбратьСканер(текУстройство[0]);
            this.Инициазизирован = true;
        }
        else {
            // Если устройств не найдено, то нечего держать драйвер
            this.Сканер.ОсвободитьДрайвер();
        }
        return this.Инициазизирован;
    }

    /**
     * Посылает команду сканирования внешнему устройству (Сканеру) и ожидает результат выполнения
     * при необходимости инициализирует драйвер
     * @returns {boolean} Результат выполнения операции
     */
    Сканировать() {
        if (!this.Инициазизирован)
            this.ИнициализироватьДрайвер();
        if (this.СписокУстройств.length > 0) {
            this.Сканер.Сканировать();
            return this.Сканер.ОбразДоступен() > 0;
        }
        return false;
    }

    /**
     * Сохраняет образ или данные из БД в файл
     * @param путь {String} Путь к файлу, если не указан, то будет вызван диалог
     * @returns {boolean} Результат выполнения операции
     */
    СохранитьВФайл(путь) {
        if (!путь) {
            путь = this.СпроситьПутьКФайлу();
        }

        // Если это сканер
        if (this.Инициазизирован || this.Сканер.ОбразДоступен()) {
            return this.Сканер.ЗаписатьОбраз(путь) > 0;
        }
        else if (this.НомерЗаписи) {
            var зОбраза = Query("SELECT [Код файла] FROM ~Внешние документы~ WHERE ROW_ID=:1", 1, "own,S");
            зОбраза.УстановитьПараметры(this.НомерЗаписи);
            if (зОбраза.Следующий()) {
                return зОбраза.ДвоичноеПолеВФайл("Код файла", путь) == 0;
            }
        }
    }

    ПолучитьРасширениеФайла(путь) {
        var parts;
        return ( parts = this.Объект["Оригинальное имя"].split("/").pop().split(".") ).length > 1 ? parts.pop() : "";
    }

    СпроситьПутьКФайлу(РасширениеФайла) {
        // Если это запись в БД определим расширение файла от туда
        if (this.НомерЗаписи && !РасширениеФайла) {
            РасширениеФайла = this.ПолучитьРасширениеФайла(this.Объект["Оригинальное имя"]);
        }
        var путь = ВыбратьФайл("", РасширениеФайла ? "*." + РасширениеФайла : "");
        // Путь куда сохранять не определен, выходим
        if (!путь) return "";

        // Если у выбранного файла нет разрешения, добавим его
        if (this.ПолучитьРасширениеФайла(путь) == "" && РасширениеФайла != "")
            путь += "." + РасширениеФайла;
        this.Объект["Оригинальное имя"] = путь;
        return путь;
    }

    ПрочитатьИзФайла(путь) {
        if (!путь) {
            путь = this.СпроситьПутьКФайлу();
        }
        var Док = this.Сканер.ПолучитьДокумент(путь);
        return Док.Ошибка == "";
    }

    СохранитьвБД() {
        if (!this.НомерЗаписи) return false;
    }

    /**
     * Освобождает драйвер и прибирается за собой
     */
    ОсвободитьДрайвер() {
        if (!this.Инициазизирован) return;
        if (this.Сканер.ОбразДоступен())
            this.Сканер.ОчиститьОбраз();
        this.Сканер.ОсвободитьДрайвер();
        this.Инициазизирован = false;
        this.СписокУстройств.clear();
        this.Инфо = undefined;
    }
}