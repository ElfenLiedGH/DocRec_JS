"use strict";
/**
 * @class кWEBtools утилиты для работы с WEB
 */
class кWEBtools {
    constructor() {

    }

    /**
     * Генерация строки латинских символов и цифр указанной длинны
     * @param ДлинаПароля требуемая длинна
     * @return {string} строка случайных символов из набора abcdefghijklmnpqrstuvwxyz123456789ABCDEFGHIJKLMNPQRSTUVWXYZ
     */
    static ГенерацияПароля(ДлинаПароля) {
        var s = '', abd = 'abcdefghijklmnpqrstuvwxyz123456789ABCDEFGHIJKLMNPQRSTUVWXYZ', aL = abd.length;
        while (s.length < ДлинаПароля) s += abd[Math.random() * aL | 0];
        return s;
    }

    /**
     * Создание пароля для лс/организации/частного лица, при этом старый пароль удаляется
     * новый пароль сохраняется в базу
     * TODO Убрал создание отчета и генерацию логина, т.к. тут явно ни к месту
     * @param _НомерЗаписи Номер записи к которой будет привязан пароль
     * @param _тип 1 - лицевой счет, 2 - организация, 3 - Частное лицо
     * @param email - если указать, производит проверку на корректность и записывает в пароль
     * @returns {string} - либо восьмисимольный пароль, либо сообщение об ошибке
     */
    static ПересоздатьПарольЛК(_НомерЗаписи, _тип, email) {
        if (_НомерЗаписи <= 0) return undefined;
        var ПолеТаблицы = '';
        switch (_тип) {
            case 1:
                ПолеТаблицы = 'Пароль-Лицевой';
                break;

            case 2:
                ПолеТаблицы = 'Пароль-Организация';
                break;
            case 3:
                ПолеТаблицы = 'Пароль-Частные лица';
                break;
            default:
                return 'Неизвестный тип таблицы'
        }
        var кУдалитьСтарыйПароль = Command('DELETE FROM ~Пароли~ WHERE [' + ПолеТаблицы + ']= :1 ', 1, "rID,S");
        кУдалитьСтарыйПароль.Выполнить(_НомерЗаписи);
        кУдалитьСтарыйПароль.Завершить();
        var НовыйПароль = кWEBtools.ГенерацияПароля(8);
        var оПароль = Объект("Пароли");
        оПароль[ПолеТаблицы] = _НомерЗаписи;
        оПароль.Доступ = md5sum(НовыйПароль);
        if (email != undefined) {
            var testEmail = /^([a-z0-9_-]+\.)*[a-z0-9_-]+@[a-z0-9_-]+(\.[a-z0-9_-]+)*\.[a-z]{2,6}$/g;
            if (!testEmail.test(email)) {
                return 'Неверный формат! Формат электнной почты - *@*.*';
            }
            оПароль['E-Mail'] = email;
        }
        ВнестиЗапись(оПароль);
        return НовыйПароль;
    }
}

/**
 * Обработка команд пришедших через WEB
 * @class кВнешниеКоманды
 */
class кВнешниеКоманды {
    constructor() {
        /**
         * Приходит из контекста
         */
        this.ДвоичныеДанные = ДвоичныеДанные;
        /**
         * Разобранная команда
         * @type {Array}
         */
        this.мПараметры;
    }

    ОбработкаВнешнихКоманд(_команда) {
        Сообщить( _команда);
        this.мПараметры = _команда.split("$");
        Сообщить(this.мПараметры[0].toUpperCase() )
        switch (this.мПараметры[0].toUpperCase()) {
            /*
             // функция выполения произвольной функции из веб-сервиса

             case "META_FUNCTION":
             var команда = `` +  мПарам[2];
             var пСтр = `` + eval( команда );
             var пРезультатСтрока = СложитьДвоичныеДанные( Размер( пСтр ) + "$", пСтр );
             return пРезультатСтрока;


             // ПАРАМЕТРЫ ДЛЯ ОТЧЕТОВ

             // Запрос параметров для передачи их в отчет
             case"GET_PARAMETERS":

             // В зависимости от названия отчета выполнить функцию
             switch( мПарам[3] ){
             case "Карточка строения: 03 - Отчет о затратах на содержание, техобслуживание и технический ремонт Birt":
             return мПарам[1] + "$" + ПараметрыОтчета_ЗатратыНаСодержание( мПарам[2] );

             case "ЛС: Выписка из лицевого счета Birt":
             return мПарам[1] + "$" + ПараметрыОтчета_ВыпискаИзЛицевого( мПарам[2] );

             // Формирование квитанции
             case "Квитанция":
             return мПарам[1] + "$" + ПараметрыОтчета_КвитанцияBirt( мПарам[2] );
             }

             // Выполнение отчета в Birt и передача результатов на сайт
             case "EXECUTE_REPORT":
             return ВыполнитьОтчетЧерезСокет( мПарам[2], мПарам[3], мПарам[4], мПарам[5], мПарам[6] );

             //
             // АБОНЕНТЫ - ФИЗЛИЦА
             //

             // Строка доступных месяцев для печати квитанции (закрытые месяцы)
             case "KVT_LIST":
             return мПарам[1] + "$" + ИзвлечениеМесяцевПечатиКвитанций( мПарам[2] );

             // Строка доступных месяцев для печати квитанции (массовая печать с подготовкой)
             case "KVT_LIST_MASS":
             return мПарам[1] + "$" + ИзвлечениеМесяцевПечатиКвитанцийМасс( мПарам[2] );

             // Команда получения приборов учета из базы
             case "SCH_OLD":
             return мПарам[1] + "$" + ПриборыУчетаЧерезСокет( мПарам[2] );

             // Команда занесение показаний приборов учета
             case "SCH_NEW":
             return мПарам[1] + "$" + ЗанесениеПоказанийЧерезСокет( мПарам );

             // Основные параметры лицевого в формате json
             case "LS_PARAM":
             return ПараметрыЛицевогоЧерезСокет( мПарам[2], 0 );

             // Основные параметры лицевого в формате json в латинице
             case "LS_PARAM_LATIN":
             return ПараметрыЛицевогоЧерезСокет( мПарам[2], 1 );

             // Выписка с начислениями и платежами в формате json
             case "LS_NACHISL":
             return НачисленияПлатежиЧерезСокет( мПарам[2], мПарам[3], мПарам[4] );

             // Выписка с начислениями и платежами в формате json за месяц
             case "LS_NACHISL_MONTH":
             return returnСальдоЛицевого( мПарам[2], мПарам[3] );

             // История платежей в формате json
             case "LS_PAYMENTS":
             return ИсторияПлатежейЧерезСокет( мПарам[2] );

             // История платежей в формате json по датам
             case "LS_PAYMENTS_BY_DATE":
             return ИсторияПлатежейЧерезСокетПоДатам( мПарам[2], мПарам[3], мПарам[4] );

             // История показаний счетчиков формате json
             case "SCH_HISTORY":
             return ИсторияПоказанийЧерезСокет( мПарам[2] );

             // История показаний счетчиков формате json по датам
             case "SCH_HISTORY_BY_DATE":
             return ИсторияПоказанийЧерезСокетПоДатам( мПарам[2], мПарам[3], мПарам[4] );

             // Проверить лицевой - коммуналка или нет
             case "LS_IS_COMMUNALKA":
             return ЛицевойКоммуналка( мПарам[2] );

             // получить значение параметра на лицевом
             case "GET_PAR":
             return ПолучитьЗначениеПараметраВеб( мПарам[2], мПарам[3] );

             case "SET_PAR":
             {
             пСтр = `` + УстановитьЗначениеПараметраВеб( мПарам[2],мПарам[3],мПарам[4] );
             пРезультатСтрока = СложитьДвоичныеДанные( Размер( пСтр ) + "$", пСтр );
             return  пРезультатСтрока;
             }

             //
             // АБОНЕНТЫ - ОРГАНИЗАЦИИ, ЮРЛИЦА
             //

             // Основные параметры организации кратко в формате html
             case "ORG_PARAM_SHORT":
             return ПараметрыОрганизацииЧерезСокетКратко( мПарам[2] );

             // Команда значение поля флаг [Ф1] из таб. 'Организации'
             case "GET_ORG_FLAG":
             return мПарам[1] + "$" + ПолучитьЗначениеПоляФ1ДляОрганизаций( мПарам[2] );

             // Информация по договорам и объектам учета юрлица
             case "UL_INFO":
             return ПолучениеИнформацииЮрЛица( мПарам[2] );

             // Информация по договорам и объектам учета юрлица - только заголовки,список договоров
             case "UL_INFO_LITE":
             return ПолучитьСписокДоговоровWEB( мПарам[2] );

             // Информация по договорам и объектам учета юрлица - детально
             case "GET_DOG_INFO":
             return ПолучитьИнформациюОДоговореWEB( мПарам[2], мПарам[3] );

             // Команда получения приборов учета из базы
             case "SCH_OLD_UL":
             return ПриборыУчетаЧерезСокетЮрлица( мПарам[2] );

             // Команда занесение показаний приборов учета
             case "SCH_NEW_UL":
             return ЗанесениеПоказанийЧерезСокетЮрлица( мПарам[2], мПарам[3] );

             //
             // ПЛАТЕЖНЫЕ СИСТЕМЫ
             //

             // Проведение оплаты, зачисление средств на л/с
             // Название платежной системы содержится в поле [ОКОНХ] - мПарам[4]
             case "PAYSERVICE_PAY":
             return мПарам[1] + "$" + ОбработкаПлатежаВеб( мПарам[2], мПарам[3], мПарам[4], мПарам[5], мПарам[6] );

             // Получить информацию о платеже по номеру транзакции
             case "PAYSERVICE_PAYMENTINFO":
             return мПарам[1] + "$" + ИнформацияПлатежаВеб( мПарам[2], мПарам[3] );

             // Команда проверка состояния л/с для плат. систем. Название системы соерж. в поле [ОКОНХ] - мПарам[4]
             case "PAYSERVICE_OSMP_CHECK":
             return мПарам[1] + "$" + ОбработкаЗапросаCheckОСМП( мПарам[2], мПарам[3], мПарам[4] );

             // Проведение оплаты, зачисление средств на л/с
             case "PAYSERVICE_OSMP_PAY":
             return мПарам[1] + "$" + ОбработкаЗапросаPayОСМП( мПарам[2], мПарам[3], мПарам[4], мПарам[5], мПарам[6] );

             //
             // АВАРИЙНО-ДИСПЕТЧЕРСКАЯ СЛУЖБА
             //

             // Команда получения адреса
             case "ADS_GET_ADDRESS":
             return ПолучитьАдресПоТипу( мПарам[2], мПарам[3] );

             // Команда получения наряд-заказов по дому или квартире
             case "ADS_GET_NARZAKAZ":
             return ПолучитьТаблицуНарядЗаказов( мПарам[2] );

             // Команда добавления наряд-заказа
             case "ADS_ADD_NARZAKAZ":
             return ДобавитьНарядЗаказ( мПарам[2], мПарам[3], мПарам[4], мПарам[5], мПарам[6], мПарам[7] );

             // Команда смены пароля абонента
             case "CHANGE_PASS":
             return СменитьПарольАбонента( мПарам[2], мПарам[3] );

             // Команда смены электронного адреса абонента
             case "CHANGE_EMAIL":
             return СменитьЕмаилАбонента( мПарам[2], мПарам[3] );

             // Команда получения e-maila абонента
             case "GET_EMAIL":
             return ПолучитьЕмаилАбонента( мПарам[2] );

             // Команда "восстановления" пароля абонента путем установки нового пароля
             case "PASS_RECOVERY":
             return СменитьПарольСПроверкойПоЕмаил( мПарам[2], мПарам[3], мПарам[4]);

             // Регистрация нового абонента
             case "REG_ABONENT":
             return ЗарегистрироватьАбонента( мПарам[2], мПарам[3], мПарам[4], мПарам[5], мПарам[6], мПарам[7] );

             //
             // ЗАГРУЗКА ФАЙЛОВ ЧЕРЕЗ ЛИЧНЫЙ КАБИНЕТ
             //

             // Запросить список файлов доступных для скачивания
             case "GET_UPLOADS":
             return ПолучитьСписокФайловДляСкачиванияWEB( мПарам[2] );

             // Получить имя файла для скачивания
             case "GET_DOWNLOAD_FILENAME":
             return ПолучитьИмяФайлаWEB( мПарам[2], мПарам[3] );

             // Скачать файл
             case "DOWNLOAD_FILE":
             return СкачатьФайлWEB( мПарам[2], мПарам[3] );

             //
             // ЛК ДЛЯ УК
             //

             // получение реестра домов
             case "GET_HIERARCHY":
             return получитьИерархию( мПарам[2], мПарам[3] );

             // возращаем хлебные крошки
             case "GET_BREADCRUMBS":
             {
             var мКрошки;
             var инд = 1000000;
             получитьХлебныеКрошки( мПарам[2] );
             перем пСтр = json_encode( мКрошки );
             пРезультатСтрока = СложитьДвоичныеДанные( Размер( пСтр ) + "$", пСтр );
             return пРезультатСтрока;
             }

             // получение row_id по лицевому
             case "GET_ROWID":
             {
             пСтр = "";
             пСтр += ПолучитьRow_IdПоЛицевому( Число( мПарам[2] ) );
             пРезультатСтрока = СложитьДвоичныеДанные( Размер( пСтр ) + "$", пСтр );
             return пРезультатСтрока;
             }

             // получение лицевого по row_id
             case "GET_LSNUM":
             {
             пСтр = "";
             пСтр += ПолучитьЛицевойПоRow_Id( Число( мПарам[2] ) );
             пРезультатСтрока = СложитьДвоичныеДанные( Размер( пСтр ) + "$", пСтр );
             return пРезультатСтрока;
             }

             //
             // 1468
             //

             // получение row_id дома по коду
             case "GET_HOUSE_BY_CODE":
             {
             пСтр = "";
             пСтр += ОпределитьДомПоКоду(  мПарам[2], мПарам[3] );
             пРезультатСтрока = СложитьДвоичныеДанные( Размер( пСтр ) + "$", пСтр );
             return пРезультатСтрока;
             }

             // привязка кода к дому
             case "BIND_CODE":
             {
             пСтр = "1";
             пСтр += НазначитьКодДляДома(  мПарам[2], мПарам[3] );
             пРезультатСтрока = СложитьДвоичныеДанные( Размер( пСтр ) + "$", пСтр );
             return пРезультатСтрока;
             }

             // получить данные паспорта
             case "GET_PASSPORT_DATA":
             {
             var мДанные = СборДанныхДляЭПД(  мПарам[2] );
             перем пСтр = json_encode( мДанные );
             пРезультатСтрока = СложитьДвоичныеДанные( Размер( пСтр ) + "$", пСтр );
             return пРезультатСтрока;
             }

             // записать данные паспорта
             case "SET_PASSPORT_DATA":
             {
             пСтр = "1";
             пСтр += ВнестиИзмененияЭПД(  мПарам[2], мПарам[3] );
             пРезультатСтрока = СложитьДвоичныеДанные( Размер( пСтр ) + "$", пСтр );
             return пРезультатСтрока;
             }

             // загрузить файл паспорта
             case "UPLOAD_PASSPORT_FILE":
             {
             пСтр = `` + ЗагрузитьФайлПаспортаВБазу(  мПарам[2] );
             пРезультатСтрока = СложитьДвоичныеДанные( Размер( пСтр ) + "$", пСтр );
             return пРезультатСтрока;
             }

             // скачать файл паспорта
             case "DOWNLOAD_PASSPORT_FILE":
             return ВыгрузитьФайлПаспортаИзБазы(  мПарам[2] );

             // получить список домов
             case "GET_LIST_HOUSE_PASSPORT":
             return ПолучитьДомаДляГенерацииПаспорта(  );
             */
            //
            // Helpdesk
            //

            // Список работ по ROW_ID сотрудника
            case "GET_WORKS_BY_ID":
                return this.ПолучитьЗаданияПоRow_Id();
            // Список документов по ROW_ID сотрудника
            case "GET_DOCUMENTS_BY_ID":
                return this.ПолучитьДокументыПоRow_Id();
            // Получение данных работы ROW_ID работы
            case "GET_WORK_DATA_BY_ID":
                return this.ПолучитьДанныеЗаявкиПоИД();

            // Получение данных работы ROW_ID работы
            case "GET_ORDER_DATA_BY_ID":
                return this.ПолучитьДанныеOrderПоИД();

             // return массив возможных статусов заявки
             case "GET_STATUSES_ARRAY":
             return кВнешниеКоманды.СтатусЗаданияВМассив();

            // Авторизация helpdesk
            case "GET_AUTH":
                return this.АвторизацияЧастныеЛица();

             // Получить список файлов по ROW_ID заявки/работы
             case "GET_FILES_BY_ID":
             return this.ПолучитьФайлыЗаявкиПоИД();
/*
             // Список комментариев по ROW_ID заявки
             case "GET_COMMENTS_BY_ID":
             return ПолучитьКомментарииПоИД( мПарам[2] );
*/
             // Список вариантов завершения заявки по её ROW_ID
             case "GET_VARIANTS_BY_ID":
             return this.ПолучитьПереходыПоИД();

             // Закрыть заявку по ROW_ID заявки
             case "CLOSE_WORK_BY_ID":
             return ЗавершитьРаботуПоИд ( мПарам[2], мПарам[3], мПарам[4], мПарам[5], мПарам[6] );

             // Скачать файл по его ROW_ID
             case "DOWNLOAD_FILE_BY_ID":
             return this.СкачатьФайл();
/*
             case "UPLOAD_FILE":
             return ЗакачатьФайлВБазу( мПарам[2], мПарам[3], мПарам[4], мПарам[5], мПарам[6] );

             case "GET_DOCUMENTS_TREE":
             return ПолучитьСписокПроектовПоИДЧастногоЛица( мПарам[2] );
             */
            case "GET_USER_INFO":
                return this.ПолучитьИнфоПоЧастномуЛицу();
            /*
             case "GET_DOCUMENTS_BY_FOLDER":
             return ПолучитьДокументыПоПапке( мПарам[2] );

             case "BLOCK_FILE_BY_ID":
             return ЗаблокироватьФайлHelpdesk( мПарам[2] );

             case "UNBLOCK_FILE_BY_ID":
             return РазблокироватьФайлHelpdesk( мПарам[2] );
*/
             case "GET_ORDER_WORKS":
             return this.ПолучитьРаботыПоИДЗаявки();
/*
             case "GET_COMMENT_BY_WORK_ID":
             return ПолучитьКомментарийПоИДРаботы( мПарам[2] );

             case "UPDATE_FILE":
             return ЗаменитьФайлВБазе( мПарам[2], мПарам[3], мПарам[4], мПарам[5], мПарам[6], мПарам[7] );

             case "DELETE_FILE_BY_ID":
             return УдалитьФайлИзБазы( мПарам[2] );

             case "GET_FILE_HISTORY":
             return ПолучитьИсториюФайла( мПарам[2] );

             case "GET_DOCUMENTS_ON_CONTROL":
             return ПолучитьДокументыНаКонтролеЧастногоЛица( мПарам[2] );

             case "NEW_ORDER_GET_CONTRACTS_BY_UID":
             return ПолучитьСписокДоговоровПоПредставителю( мПарам[2] );

             case "NEW_ORDER_GET_CONTRACT_DATA":
             return ПолучитьДанныеДоговора( мПарам[2] );

             case "NEW_ORDER_GET_ADD_DATA":
             return ПолучитьПроектМаршрутПоАналитике( мПарам[2] );

             case "CREATE_NEW_EMPTY_ORDER":
             return СоздатьНовуюПустуюЗаявку( мПарам[2] );

             case "CREATE_NEW_ORDER":
             return СоздатьНовуюЗаявку( мПарам[2], мПарам[3], мПарам[4], мПарам[5], мПарам[6], мПарам[7], мПарам[8], мПарам[9], мПарам[10], мПарам[11], мПарам[12], мПарам[13] );

             case "GET_UNALLOCATED_ORDERS":
             return ВыдатьНераспределенныеЗаявки( мПарам[2] );

             case "SAVE_ORDER_CHANGES":
             return СохранитьИзмененияЗаявки( мПарам[2], мПарам[3] );

             case "GET_ORDER_CATEGORIES":
             return ДОТипыКатегорий();

             case "GET_ORDER_PRIORITY":
             return ДОСписокПриоритетов();

             case "DELETE_NEW_ORDER_BY_ID":
             return УдалитьНераспределеннуюЗаявку( мПарам[2] );

             case "GET_ACTIVE_CONTRACT":
             return СуществуетЛиДоговорВнедрения( мПарам[2] );

             case "GET_ALL_ORDERS_OF_ORG":
             return ПолучитьВсеЗаявкиОрганизации( мПарам[2] );

             case "GET_DOCUMENTS_ON_CONTROL":
             return ПолучитьДокументыНаКонтролеЧастногоЛица( мПарам[2] );

             case "CHANGE_END_DATE":
             return ИзменитьДатуЗавершенияЗаявки( мПарам[2] );

             case "GET_CONTRACT_TYPE":
             return ПолучитьТипДоговораПоИДЗаявки( мПарам[2] );

             case "ISSET_ACTIVE_DOGOVOR":
             return СуществуетЛиАктивныйДоговор( мПарам[2] );

             case "GET_ALL_EMAIL_BY_ORDERS_OF_ORG":
             return ПолучитьВсеEmailОрганизации( мПарам[2] );

             case "GET_ACTIVE_CONTRACTS_BY_ORG":
             return ПолучитьДействующиеДоговорыПоЧЛ( мПарам[2] );

             case "GET_ACTIVE_CONTRACTS_R_BY_ORG":
             return ПолучитьДоговорыОтчетПоЧЛ( мПарам[2] );

             case "GET_ALL_CONTRACTS_BY_ORG":
             return ПолучитьВсеДоговорыОрганизации( мПарам[2] );

             case "GET_PERFORMER_BY_ID_WORK":
             return ПолучитьИсполнителяПоРаботе( мПарам[2] );

             case "GET_ALL_ORDERS_BY_CONTRACT_ID":
             return ПолучитьВсеЗаявкиПоДоговору( мПарам[2] );

             case "GET_NUMOFDAYS_BY_CONTRACT_ID":
             return ПолучитьКолДнейПоДоговору( мПарам[2] );

             case "GET_ANALYTIC_BY_ID_DOGOVOR":
             return ПолучитьСписокПроектовПоИДДоговора( мПарам[2] );
*/
             case "GET_LIST_TAGS_BY_ORG":
             return this.ПолучитьСписокМетокПоИДОрганизации();
/*
             case "CHANGE_TAGS_BY_ORG":
             return ИзменитьСписокМетокПоИДОрганизации( мПарам[2] );

             case "CHANGE_TAGS_ON_ORDER":
             return ИзменитьСписокМетокНаЗаявке( мПарам[2] );

             case "CHANGE_USER_SETTINGS":
             return ИзменитьНастройкиПользователя( мПарам[2] );

             case "RECOVER_USER_PWD":
             return ВосстановитьПарольЧЛ( мПарам[2] );

             case "ADMIN_GET_LIST":
             return АдминСписокКлиентов( мПарам[2] );

             case "ADMIN_LOGIN_CHL":
             return АдминАвторизация( мПарам[2] );
*/
             case "GET_ADDITIONS_OF_ORDER":
             return this.ПолучитьДополненияЗаявки();
/*
             case "CREATE_ADDITION":
             return СоздатьДополнениеКЗаявке( мПарам[2], мПарам[3], мПарам[4] );

             case "UPLOAD_TEMP_FILE":
             return ЗакачатьВременныйФайл( мПарам[2] );

             case "SEND_NEW_POST":
             return ОтправитьНовостьВДокументооборот( мПарам[2] );

             case "SEND_NEW_COMMENT":
             return ОтправитьКомментарийВДокументооборот( мПарам[2] );

             case "GET_FTP_PARAMS":
             return ПолучитьПараметрыFTP( мПарам[2] );

             case "CREATE_NEW_FTP_USER":
             return СгенеритьFTPподключение( мПарам[2] );

             case "CHANGE_USER_PWD_BY_LS_EMAIL":
             return СменитьПарольПоЛсИЕмайл( мПарам[2] );

             case "CREATE_NEW_ORDER_FOR_DEMO_VERSION":
             return СоздатьКарточкуОрганизацииПоДемо();

             case "CREATE_NEW_ORDER_FOR_DEMO_VERSION_NEW":
             return СоздатьКарточкуОрганизацииПоДемоНовая();

             case "SEND_TEXT_EMAIL":
             return ОтправитьЭлПочтуВеб( мПарам[2], мПарам[3], мПарам[4], мПарам[5] );

             case "IS_ACTIVE_TICKET_PHONE":
             return УзнатьСтатусЗаявкиПоАТС( мПарам[2], мПарам[3]);

             // получение зазипованного json с детализацие по организации
             case "GET_DETAL_ORG_EXCEL":
             return ВебОтчетПоОрганизации( мПарам[2], мПарам[3], мПарам[4], мПарам[5], мПарам[6] );

             //Отправка уведомления о дополнении
             case "SEND_NOTIFICATION":
             return ОтправитьУведомлениеВКонвертик();
*/
             case "IS_ACTIVE_DOG_BY_ID_WORK":
             return this.АктивныйЛиДоговор();
/*
             case "GET_FRIENDS_LIST":
             return ПолучитьСписокКоллег( мПарам[2] );

             case "GET_ALL_EMAILS_ON_ORDERS":
             return ПолучитьВсеEmailОргНаЗаявках( мПарам[2] );

             case "CHANGE_EMAIL_ON_ORDERS":
             return ИзменитьЕмайлыНаЗаявках( мПарам[2] );

             //
             // ТЕХПРИСОЕДИНЕНИЕ
             //

             case "TEHPRIS_REGFIZ":
             return ТехприсРегистрацияАбонентаФизлица( мПарам[2] );

             case "TEHPRIS_REGUL":
             return ТехприсРегистрацияАбонентаЮрлица( мПарам[2] );

             case "TEHPRIS_AUTH":
             return ТехприсАвторизация( мПарам[2] );

             case "TEHPRIS_SENDORDER_FIZ15":
             return ТехприсСохранениеФизЛицо15кВт();

             case "TEHPRIS_SENDORDER_VREMPRIS":
             return ТехприсСохранениеВремПрис();

             case "TEHPRIS_SENDORDER_UL150":
             return ТехприсСохранениеЮрлицоДо150();

             case "TEHPRIS_SENDORDER_UL150_670":
             return ТехприсСохранениеЮрлицо150_670();
             case "TEHPRIS_GET_UNALLOCATED_ORDERS":
             return ТехприсВыдатьНераспределенныеЗаявки( мПарам[2] );

             case "TEHPRIS_GET_ALL_ORDERS_OF_ORG":
             return ТехприсПолучитьВсеЗаявкиОрганизации( мПарам[2] );

             case "TEHPRIS_DOWNLOAD_FILE":
             return ТехприсСкачатьФайл( мПарам[2] );

             case "IS_THEME_VNEDRENIE":
             return ПолучитьВнедрениеЛи( мПарам[2] );
             */
            case "SD_AUTH_SOT":
                return this.АвторизацияСотрудникаЧЛ();
            /*
             case "TEHPRIS_CHECKSTATUS":
             return ТехприсПолучитьСтатусЗаявки(мПарам[2]);
             */
            /*
             case "SHOW_LOG_WEB":
             return ПрочитатьЛогвВеб( мПарам[2], мПарам[3] );
             */

        }

        var _СтрКоманда = "Server answer: Unknown command.";
        //Клиент_ОбработкаВнешнихКоманд();

        return _СтрКоманда;
    }

    /**
     *
     * @returns {*}
     */
    АвторизацияСотрудникаЧЛ() {
        var _масПараметры = JSON.parse(this.мПараметры[1]);
        var _логин = _масПараметры["LOGIN"];
        var _пароль = РаспаковатьДанные(this.ДвоичныеДанные);
        _пароль = "'" + _пароль + "'";
        var зАвторизация = Query(`SELECT logins.name, chl.ROW_ID as clhID, sot.ROW_ID as sotID
                        FROM sys.sql_logins logins
                        JOIN ~Пользователи~ u ON u.Имя = logins.name
                        JOIN ~Сотрудники~ sot ON sot.[ТабНомер] = u.Номер
                        JOIN ~Частные лица~ chl ON chl.[Частные лица-Сотрудник] = sot.ROW_ID
                        WHERE PWDCOMPARE(` + _пароль + `, password_hash) = 1
                           AND logins.name = :1;
                       `, 500, "LOG,A");
        зАвторизация.УстановитьПараметры(_логин);
        var масОтвет = {};
        if (зАвторизация.Следующий()) {
            масОтвет = {"RESULT": зАвторизация.clhID, "SOTID": зАвторизация.sotID};
        } else {
            масОтвет = {"RESULT": 0};
        }
        return кВнешниеКоманды.ОбработатьРезультат(масОтвет);
    }

    /**
     * Авторизация Частного лица
     */
    АвторизацияЧастныеЛица() {
        var масВходныеДанные = JSON.parse(this.мПараметры[1]);
        var пЛогин = масВходныеДанные["login"];
        var пПароль = масВходныеДанные["password"];
        var зАвторизация = Query(`SELECT ch.[ROW_ID]
                          FROM ~Частные лица~ ch
                          JOIN ~Пароли~ p ON p.[Пароль-Частные лица] = ch.[ROW_ID]
                          WHERE [Логин] = :1 AND
                                [Доступ]= :2
                         `, 100, "log,A,pass,A");
        var масОтвет = {};
        зАвторизация.УстановитьПараметры(пЛогин, пПароль);
        if (зАвторизация.Следующий()) {
            масОтвет["RESULT"] = зАвторизация.ROW_ID;
        } else {
            масОтвет["RESULT"] = 0;
        }
        return кВнешниеКоманды.ОбработатьРезультат(масОтвет);
    }

    АктивныйЛиДоговор() {
        var мВходныеДанные = JSON.parse(this.мПараметры[1]);
        var _ид = мВходныеДанные["id"];
        var _тип = мВходныеДанные["type"];
        var Заявка;
        if (_тип == "work") {
            Заявка = new кРабота(_ид).Заявка;
        } else{
            Заявка = new кЗаявка;
        }
        var мОтвет = {
            NUMBER: Заявка.Договор.Объект["Номер"],
            TYPE: Заявка.Договор.Объект["Тема"],
            ACTIVE: 0
        };
        var ТекДат = new Date();
        if( Заявка.Договор.Объект["Окончание"] >= ТекДат && Заявка.Договор.Объект["Начало договора"] <= ТекДат ){
            мОтвет.ACTIVE = 1;
        }
        return кВнешниеКоманды.ОбработатьРезультат(мОтвет);
    }
    /**
     *
     * @returns {*}
     */
    ПолучитьЗаданияПоRow_Id() {
        var _масПараметры = JSON.parse(this.мПараметры[1]);
        // Если запрос с фильтром по меткам
        var допУсловиеМетки = ``;
        if (_масПараметры["tag"] && _масПараметры["option_search"]) {
            // Выбираем тип поиска (OR = 1 AND = 0)
            var пУсловиеВыборки = ``;
            if (!_масПараметры["option_search"]) {
                пУсловиеВыборки = ` AND `;
            } else if (_масПараметры["option_search"] == 1) {
                пУсловиеВыборки = ` OR `;
            } else {
                пУсловиеВыборки = ` AND `;
            }
            for (let i in _масПараметры["tag"]) {
                if (!_масПараметры["tag"].hasOwnProperty(i)) continue;
                if (_масПараметры["tag"][i]) {
                    if (!допУсловиеМетки.length) {
                        допУсловиеМетки += `dk.[Метки клиентов] LIKE '%` + _масПараметры["tag"][i] + `%'`;
                    } else {
                        допУсловиеМетки += пУсловиеВыборки + `dk.[Метки клиентов] LIKE '%` + _масПараметры["tag"][i] + `%'`;
                    }
                }
            }
            if (допУсловиеМетки.length)
                допУсловиеМетки = ` AND (` + допУсловиеМетки + `)`;
        }

        var _нзПредставителя = _масПараметры["uid"];
        if (_масПараметры["sotid"]) {
            _нзПредставителя = _масПараметры["sotid"];
            var допУсловие = "z.[Задание-Исполнитель] = :1";
            var joinStr = "JOIN ~Сотрудники~ sot  ON z.[Задание-Исполнитель]=sot.[ROW_ID]";
            var selectStr = "sot.[ФИО] as Исполнитель,"
        } else {
            var допУсловие = "z.[Задание-Представитель] = :1";
            var joinStr = "JOIN ~Частные лица~ ch  ON z.[Задание-Представитель]=ch.[ROW_ID]";
            var selectStr = "ch.[ФИО] as Исполнитель,"
        }


        var зРаботы = Query(`SELECT z.[ROW_ID], z.[Время принятия] as ВремПрин, z.[Время завершения] as ВремЗав,
                            z.[Дата выдачи] as ДатаВыд, z.[Дата завершения] as ДатаЗав,
                            z.[Дата принятия] as ДатаПрин, z.[Завершить до] as ЗавДо,
                            z.[Задание-Карточка],
                            convert(varchar(255),convert(char(10), z.[Дата выдачи], 104)) + ' ' + convert(varchar(255),convert(char(5), z.[Время выдачи], 108)) as "ДатаВремяВыдачи",
                            m.[Название] as Маршрут,
                            dk.[Номер], dk.Примечание, dk.Приоритет, dk.Тема, dk.СтороннийНомер, dk.[Адресат] as Организация, dk.[Метки клиентов] as МеткиКлиентов,
                            fk.[Название],
                            ` + selectStr + `
                            [Статус завершения] as Статус,
                            dog.Номер as НомерДог, dog.Тема as ТемаДог

                            ,(SELECT TOP 1 [ROW_ID]
                               FROM ~ДО внешние документы~
                               WHERE [Файл-Карточка] = z.[Задание-Карточка] AND ([Новый файл] < 0)) as НаличиеФайлов

                            ,(SELECT TOP 1 sot.ФИО FROM ~ДО задания~ dz
                               LEFT JOIN ~Сотрудники~ sot ON dz.[Задание-Исполнитель] = sot.ROW_ID
                               WHERE [Дата завершения] IS NOT NULL AND [Задание-Карточка] = z.[Задание-Карточка]
                               ORDER BY dz.[ROW_ID] DESC) as ФИОсот

                            ,(SELECT TOP 1 ch.ФИО FROM ~ДО задания~ dz
                               LEFT JOIN ~Частные лица~ ch ON dz.[Задание-Представитель]=ch.[ROW_ID]
                               WHERE [Дата завершения] IS NOT NULL AND [Задание-Карточка] = z.[Задание-Карточка]
                               ORDER BY dz.[ROW_ID] DESC) as ФИОчл

                            ,(SELECT TOP 1 convert(varchar(255),convert(char(10), [Дата выдачи], 104)) + ' ' + convert(varchar(255),convert(char(5), [Время выдачи], 108)) as "time"
                               FROM ~ДО задания~ dz
                               WHERE [Дата завершения] IS NOT NULL AND [Задание-Карточка] = z.[Задание-Карточка]
                               ORDER BY dz.[ROW_ID] DESC) as ВремяВыдачиЗадания

                     FROM ~ДО задания~ z
                     JOIN ~ДО фазы~ f  ON z.[Задание-Фаза]=f.[ROW_ID]
                     JOIN ~ДО маршруты~ m ON f.[Маршрут-Фазы]=m.[ROW_ID]
                     JOIN ~ДО карточки~ dk ON z.[Задание-Карточка]=dk.ROW_ID
                     LEFT JOIN ~Договор~ dog ON dk.[Карточка-Договор] = dog.ROW_ID
                     JOIN ~ДО категории фаз~ fk  ON f.[Фаза-Категория]=fk.[ROW_ID]
                     ` + joinStr + `
                     WHERE [Статус завершения] = 0 AND
                         ` + допУсловие + ` ` + допУсловиеМетки + `
                    `, 1, "PR,I");
        зРаботы.УстановитьПараметры(_нзПредставителя);
        var масРаботыЛат = {};
        while (зРаботы.Следующий()) {
            масРаботыЛат[String(зРаботы.ROW_ID)] = {
                ROUTE:          зРаботы.Маршрут,
                NUMBER:         зРаботы.Номер,
                TITLE:          зРаботы.Название,
                EXECUTOR:       зРаботы.Исполнитель,
                STATUS:         зРаботы.Статус,
                TIME_PRIN:      зРаботы.ВремПрин.format("HH:mm"),
                TIME_ZAV:       зРаботы.ВремЗав.format("HH:mm"),
                DATE_VYD:       зРаботы.ДатаВыд.format("dd.MM.yy"),
                DATE_ZAV:       зРаботы.ДатаЗав.format("dd.MM.yy"),
                DATE_PRIN:      зРаботы.ДатаПрин.format("dd.MM.yy"),
                ZAV_DO:         зРаботы.ЗавДо.format("dd.MM.yy"),
                ORGANIZATION:   зРаботы.Организация,
                CONTENT:        зРаботы.Примечание,
                PRIORITY:       зРаботы.Приоритет,
                TOPIC:          зРаботы.Тема,
                CATEGORY:       "",
                CONTRACT:       зРаботы.НомерДог + зРаботы.ТемаДог,
                DATETIME:       зРаботы.ДатаВремяВыдачи,
                SIDEDNUMBER:    зРаботы.СтороннийНомер,
                PREV_EXECUTOR:  зРаботы.ФИОчл == "" ? ФИО(зРаботы.ФИОсот) : ФИО(зРаботы.ФИОчл),
                FILE:           зРаботы.НаличиеФайлов > 0 ? 1 : 0,
                CLIENT_TAGS:    зРаботы.МеткиКлиентов
            };
        }
        if (!Object.keys(масРаботыЛат).length) масРаботыЛат["RESULT"] = 0;
        return кВнешниеКоманды.ОбработатьРезультат(масРаботыЛат);
    }

    /**
     *
     * @returns {string}
     */
    ЗавершитьРаботуПоИд() {
        var _ид = this.мПараметры[1];
        var _вариант = this.мПараметры[2];
        var _исполнитель = this.мПараметры[4];
        var Работа = new кРабота(_ид);
        УстановитьПолеСвязи(Работа, "Задание-Редактор", НомерЗаписи(Пользователь()));
        Работа.Сохранить();
        Работа.Переход = new кПереход(_вариант);
        if (Работа.Переход.ИсполнительИзНашейОрганизации) {
            Работа.Переход.ПараметрыПерехода.нзИсполнитель = _исполнитель;
        } else {
            Работа.Переход.ПараметрыПерехода.нзОрганизацияИсполн = _исполнитель;
        }
        Работа.Переход.ПараметрыПерехода.Комментарий = РаспаковатьДанные(this.ДвоичныеДанные);
        var мОтвет;
        try {
            Работа.Завершить(true);
            мОтвет["ANSWER"] = "ok";
        }
        catch (er) {
            мОтвет["ANSWER"] = er.message;
        }
        return кВнешниеКоманды.ОбработатьРезультат(мОтвет);
    }

    /**
     * Получить список Работ по ROW_ID Заявки (ИСТОРИЯ!!!)
     * @returns {string}
     */
    ПолучитьРаботыПоИДЗаявки() {
        var пЗаявка = JSON.parse(this.мПараметры[1]);
        var ИДкарточки = пЗаявка["id"];
        if (пЗаявка["type"].toLowerCase() == "work") ИДкарточки = кВнешниеКоманды.ПолучитьИДкарточки(ИДкарточки);
        var _нзПредставителя = пЗаявка["uid"];
        var зРаботы = Query(`SELECT z.[ROW_ID]
                           ,k.[Номер]
                           ,z.[Статус завершения] as Состояние
                           ,z.[Дата выдачи] as Выдано
                           ,convert(char(5), z.[Время выдачи], 108) as ВремВыд
                           ,z.[Завершить до] as ЗавДо
                           ,z.[Подзадания]
                           ,z.[Дата завершения] as Завершено
                           ,convert(char(5), z.[Время завершения], 108) [time]
                           , z.[Время завершения]
                           ,z.[Отметки]
                           , hour.[Время работы]
                           ,CONVERT(varchar, hour.[Время работы], 108) ВремяРаботы
                           ,CONVERT(varchar, hour.[Время к оплате], 108) ВремяКОплате
                           ,dog.[Тема]
                          ,z.[Задание-Представитель] as Представитель
                     FROM ~ДО карточки~ k
                     JOIN ~ДО задания~ z ON k.ROW_ID = z.[Задание-Карточка]
                     LEFT JOIN ~ДО часы~ hour ON z.ROW_ID = hour.[Часы-Задание]
                     LEFT JOIN ~Договор~ dog ON k.[Карточка-Договор] = dog.ROW_ID
                     WHERE k.ROW_ID = :1 AND [ТипИсполнителя] NOT IN (5, 6, 7, 8)`, 10, "kID,S");
        зРаботы.УстановитьПараметры(ИДкарточки);
        var масРаботы = {};
        var нзРаботы;
        var мЧасы;
        while (зРаботы.Следующий()) {
            var мИсполнитель = кВнешниеКоманды.ПолучитьИсполнителяПоИДЗаявки(зРаботы.ROW_ID);
            var пФаза = кВнешниеКоманды.ПолучитьФазуПоИДРаботы(зРаботы.ROW_ID);
            нзРаботы = String(зРаботы.ROW_ID);
            масРаботы[нзРаботы] = {};
            масРаботы[нзРаботы].НОМЕР = зРаботы.Номер;
            масРаботы[нзРаботы].СОСТОЯНИЕ = зРаботы.Состояние;
            масРаботы[нзРаботы].ВЫДАНО = зРаботы.Выдано.format("dd.MM.yy") + " " + зРаботы.ВремВыд;
            if (масРаботы[нзРаботы].СОСТОЯНИЕ == 0) {
                масРаботы[нзРаботы].ЗАВЕРШЕНО = "";
                масРаботы[нзРаботы].МОЖНОЗАВЕРШИТЬ = зРаботы.Представитель == _нзПредставителя ? 1 : 0;
            } else {
                масРаботы[нзРаботы].ЗАВЕРШЕНО = зРаботы.Завершено.format("dd.MM.yy") + " " + зРаботы.time;
                масРаботы[нзРаботы].МОЖНОЗАВЕРШИТЬ = 0;
            }
// TODO надо запросить нормальную обработку вермени в dll
            if (масРаботы[нзРаботы].ОТРАБОТАНО) {
                мЧасы = зРаботы.ВремяРаботы.split(":");
                масРаботы[нзРаботы].ОТРАБОТАНО.ПрибавитьДату("hh", мЧасы[0]);
                масРаботы[нзРаботы].ОТРАБОТАНО.ПрибавитьДату("mm", мЧасы[1]);

            } else {
                мЧасы = зРаботы.ВремяРаботы.split(":");
                масРаботы[нзРаботы].ОТРАБОТАНО = new Date(2000, 1, 1, мЧасы[0]?мЧасы[0]:0, мЧасы[1]?мЧасы[1]:0);
            }
            if (масРаботы[нзРаботы].КОПЛАТЕ) {
                мЧасы = зРаботы.ВремяКОплате.split(":");
                масРаботы[нзРаботы].КОПЛАТЕ.ПрибавитьДату("hh", мЧасы[0]);
                масРаботы[нзРаботы].КОПЛАТЕ.ПрибавитьДату("mm", мЧасы[1]);
            } else {
                мЧасы = зРаботы.ВремяКОплате.split(":");
                масРаботы[нзРаботы].КОПЛАТЕ = new Date(2000, 1, 1, мЧасы[0]?мЧасы[0]:0, мЧасы[1]?мЧасы[1]:0);
            }
            масРаботы[нзРаботы].ФИО = мИсполнитель["ФИО"];
            масРаботы[нзРаботы].ТЕЛЕФОН = мИсполнитель["ТелИсп"] ? мИсполнитель["ТелИсп"] : "";
            масРаботы[нзРаботы].СОТРУДНИК = мИсполнитель.ЧейИсполнитель == 1 ? 1 : 0;
            масРаботы[нзРаботы].КОММЕНТАРИЙ = зРаботы.Отметки;
            масРаботы[нзРаботы].ПОДЗАДАНИЕ = зРаботы.Подзадания > 0 ? 1 : 0;
            масРаботы[нзРаботы].ФАЗА = пФаза;
        }
        for( let i in масРаботы ){
            if( !масРаботы.hasOwnProperty(i) ) continue;
            масРаботы[i].ОТРАБОТАНО = масРаботы[i].ОТРАБОТАНО.format( "HH:mm:ss" );
            масРаботы[i].КОПЛАТЕ = масРаботы[i].КОПЛАТЕ.format( "HH:mm:ss" );
        }
        return кВнешниеКоманды.ОбработатьРезультат(масРаботы);
    }

    /**
     *
     * @returns {string}
     */
    ПолучитьДополненияЗаявки() {
        var мВходныеДанные = JSON.parse(this.мПараметры[1]);
        var _нзКарточки = мВходныеДанные["id"];
        if (мВходныеДанные["type"].toLowerCase() == "work") {
            _нзКарточки = кВнешниеКоманды.ПолучитьИДкарточки(мВходныеДанные["id"]);
        }
        var зДополнения = Query(`SELECT z.[ROW_ID]
                              ,convert(char(5), z.[Время выдачи], 108) as ВремВыд
                              ,z.[Отметки]
                              ,z.[Дата выдачи] as ДатаВыд
                              ,z.[Задание-Представитель] as Автор
                              ,z.[ТипИсполнителя]
                              ,ch.ФИО
                        FROM ~ДО задания~ z
                        LEFT JOIN ~Частные лица~ ch ON z.[Задание-Представитель] = ch.ROW_ID
                        WHERE z.[Задание-Карточка] = :1 AND
                              z.[ТипИсполнителя] IN (5,6,7,8)
                       `, 500, "ORG,S");
        var мСтатусы = {
            5: "Ожидает обработки",
            6: "Принято в заявку",
            7: "Создана новая заявка",
            8: "Отклонено"
        };
        var мОтвет = {};
        зДополнения.УстановитьПараметры(_нзКарточки);
        while (зДополнения.Следующий()) {
            мОтвет[string(зДополнения.ROW_ID)] = {
                ДАТА: зДополнения.ДатаВыд + " " + зДополнения.ВремВыд,
                ТЕКСТ: зДополнения.Отметки,
                АВТОР: зДополнения.Автор < 0 ? "" : ФИО(зДополнения.ФИО),
                СТАТУС: мСтатусы[зДополнения.ТипИсполнителя]
            };
        }
        return кВнешниеКоманды.ОбработатьРезультат(мОтвет);
    }

    /**
     *
     * @returns {string}
     */
    ПолучитьИнфоПоЧастномуЛицу() {
        var пЧастноеЛицо = JSON.parse(this.мПараметры[1]);
        var _нзЧастноеЛицо = пЧастноеЛицо["uid"];
        var зИнфо = Query(`SELECT ch.ROW_ID нзЧЛ
                         ,ch.ФИО
                         ,org.ROW_ID нзОрг
                         ,org.Название
                         ,org.email as ЕмайлОрг
                         ,ch.email as ЕмайлЧЛ
                   FROM ~Частные лица~ ch
                   JOIN ~Организации~ org ON ch.[Организация-Частные лица] = org.ROW_ID
                   WHERE ch.ROW_ID = :1`, 1, "FL,S");
        зИнфо.УстановитьПараметры(_нзЧастноеЛицо);
        var масИнфо = {};
        if (зИнфо.Следующий()) {
            масИнфо["НЗЧЛ"] = зИнфо.нзЧЛ;
            масИнфо["ФИО"] = ФИО(зИнфо.ФИО);
            масИнфо["НЗОРГ"] = зИнфо.нзОрг;
            масИнфо["ОРГАНИЗАЦИЯ"] = зИнфо.Название;
            масИнфо["EMAIL"] = зИнфо.ЕмайлОрг;
            масИнфо["EMAILUSER"] = зИнфо.ЕмайлЧЛ;
        }
        return кВнешниеКоманды.ОбработатьРезультат(масИнфо);
    }
    /**
     * Получаем список заявок по ROW_ID сотрудника
     */
    ПолучитьДокументыПоRow_Id() {
        var _масПараметры = JSON.parse(this.мПараметры[1]);
        var var_нзПредставителя = _масПараметры["uid"];
        var зДокументы = Query(`SELECT k.[ROW_ID], k.[Номер], [Адресат], k.[Дата создания] as Дата,
                              [Входящий номер] as ВходНом,[Исходящий номер] as ИсхНом, [Содержание],
                              k.[Завершить до] as ЗавДо,
                              [СтороннийНомер],[ЭлПочта],[Исходящая дата],
                              [Карточка-Организация],[Карточка-ПлОрганизация],
                              sot.ФИО as Автор
                        FROM ~ДО карточки~ k
                        JOIN ~Сотрудники~ sot ON k.Автор  = sot.ROW_ID
                        JOIN ~ДО маршруты~ m  ON m.ROW_ID = k.[Карточки-Маршрут]
                        JOIN ~ДО контроль~ c  ON k.ROW_ID = c.[Контроль-Карточка]
                        WHERE [Контроль-Представитель] = :1
                       `, 100, "PR,I");

        зДокументы.УстановитьПараметры(_нзПредставителя);
        var масДокументы = {};
        var пНомерЗаписи;
        var пФазаИсполнитель;
        while (зДокументы.Следующий()) {
            пФазаИсполнитель = this.ПолучитьФазуИсполнителяПоИД(пНомерЗаписи);
            пНомерЗаписи = String(зДокументы.ROW_ID);
            масДокументы[пНомерЗаписи] = {
                КОМУ: зДокументы.Адресат,
                ДАТА: зДокументы.Дата,
                НОМЕР: зДокументы.Номер,
                ЗАВДО: зДокументы.ЗавДо,
                АВТОР: зДокументы.Автор,
                ИСХНОМ: зДокументы.ИсхНом,
                МАРШРУТ: зДокументы.Маршрут,
                ВХОДНОМ: зДокументы.ВходНом,
                ТЕКФАЗА: пФазаИсполнитель["Фаза"],
                СОДЕРЖАНИЕ: зДокументы.Содержание,
                ИСПОЛНИТЕЛЬ: пФазаИсполнитель["Исполнитель"]
            };
        }
        if (!Object.keys(масДокументы).length) масДокументы["РЕЗУЛЬТАТ"] = "Не найдено документов";
        return кВнешниеКоманды.ОбработатьРезультат(масДокументы);
    }
    /**
     * Получить Фазу и Исполнителя по ROW_ID Заявки
     */
    ПолучитьФазуИсполнителяПоИД( _нзДОкарточки ) {
        var зТекФаза = Query(`SELECT dkf.Название, st.ФИО, st.Телефон, chl.ФИО ЧФИО, dz.ТипИсполнителя
                      FROM ~ДО задания~ dz
                      JOIN ( SELECT [Задание-Карточка]  as Zk,
                                    max( [Свой номер] ) as [Свой номер]
                             FROM ~ДО задания~ dz2
                             GROUP BY [Задание-Карточка]
                            )tbl ON tbl.Zk = dz.[Задание-Карточка] AND dz.[Свой номер] = tbl.[Свой номер]
                      JOIN ~ДО фазы~            df ON dz.[Задание-Фаза] = df.ROW_ID
                      JOIN ~ДО категории фаз~  dkf ON dkf.ROW_ID = df.[Фаза-Категория]
                      LEFT JOIN ~Сотрудники~    st ON dz.[Задание-Исполнитель] = st.ROW_ID
                      LEFT JOIN ~Частные лица~ chl ON dz.[Задание-Представитель] = chl.ROW_ID
                      WHERE dz.[Задание-Карточка] = :1
                     `, 1, "rID,S");
        зТекФаза.УстановитьПараметры(_нзДОкарточки);
        var масДокументы;
        if (зТекФаза.Следующий()) {
            var мТелСот = зТекФаза.Телефон.split("#");
            масДокументы = {
                ФАЗА: зТекФаза.Название,
                // 0 - наш исполнитель, 1 - сторониий
                ИСПОЛНИТЕЛЬ: зТекФаза.ТипИсполнителя == 0 ? ФИО(зТекФаза.ФИО) : ФИО(зТекФаза.ЧФИО),
                ЧЕЙИСПОЛНИТЕЛЬ: зТекФаза.ТипИсполнителя == 0 ? 0 : 1,
                ТЕЛИСП: мТелСот[1] == "" ? "" : мТелСот[1]
            };
        } else {
            масДокументы = {
                ФАЗА: "",
                ИСПОЛНИТЕЛЬ: "",
                ЧЕЙИСПОЛНИТЕЛЬ: "",
                ТЕЛИСП: ""
            };
        }
        return масДокументы;
    }
    ПолучитьДанныеЗаявкиПоИД() {

        var _пЗаявка = JSON.parse(this.мПараметры[1]);
        var _нзИД = _пЗаявка["id"];

        var зРаботы = Query(`SELECT k.[Номер], k.[Дата создания] as Дата1, k.[Адресат] as ОтКого,
                            k.[Содержание], [Статус завершения] as Статус,
                            k.[Время создания] as Время1, k.[Исходящий номер] as НомИсх,
                            k.[Исходящая дата] as ДатаИсх, k.[Резолюция], k.[Примечание],
                            k.[Тема], k.[Приоритет], k.[СтороннийНомер],
                            k.[Карточки-Аналитика] as Аналитика, k.[Метки клиентов] as МеткиКлиентов,
                            z.[Время выдачи] as ВремВыд, z.[Время принятия] as ВремПрин,
                            z.[Время завершения] as ВремЗав, z.[Дата выдачи] as ДатаВыд,
                            z.[Дата принятия] as ДатаПрин, z.[Дата завершения] as ДатаЗав,
                            z.[Завершить до] as ЗавДо,
                            kk.Название as Категория,
                            ch.ФИО as Исполнитель,
                            fk.Название,
                            dog.Тема as ТемДог

                     FROM ~ДО задания~ as z
                     LEFT JOIN ~ДО карточки~ as         k ON k.ROW_ID = z.[Задание-Карточка]
                     LEFT JOIN ~ДО категории карточек~ kk ON k.[Карточки-Категория] = kk.ROW_ID
                     LEFT JOIN ~ДО фазы~                f ON z.[Задание-Фаза]=f.[ROW_ID]
                     LEFT JOIN ~ДО категории фаз~      fk ON f.[Фаза-Категория] = fk.[ROW_ID]
                     LEFT JOIN ~Частные лица~          ch ON z.[Задание-Представитель] = ch.[ROW_ID]
                     LEFT JOIN ~Договор~              dog ON k.[Карточка-Договор] = dog.ROW_ID
                     WHERE z.[ROW_ID] = :1
                    `, 500, "nID,S");
        var масОтвет;
        зРаботы.УстановитьПараметры(_нзИД);
        while (зРаботы.Следующий()) {
            масОтвет = {
                FROM:           зРаботы.ОтКого,
                THEME:          зРаботы.Тема,
                STATUS:         зРаботы.Статус,
                CONTENT:        зРаботы.Примечание,
                DATEWORK:       зРаботы.Дата1.format("dd.MM.yy"),
                CATEGORY:       зРаботы.Категория,
                NAMEWORK:       зРаботы.Название,
                PRIORITY:       зРаботы.Приоритет,
                ANALYTICS:      зРаботы.Аналитика,
                NUMBERWORK:     зРаботы.Номер,
                IMPLEMENTER:    зРаботы.Исполнитель,
                SECONDNUMBER:   зРаботы.СтороннийНомер,
                DATEOFPERFORMANCE: зРаботы.ЗавДо.format("dd.MM.yy"),
                CLIENT_TAGS:    зРаботы.МеткиКлиентов,
                SHOWTIME:       ( зРаботы.ТемДог.charAt(0) == "С" || зРаботы.indexOf("ПВСЭА") != -1) ? 1 : 0
            };
        }
        return кВнешниеКоманды.ОбработатьРезультат(масОтвет);
    }

    ПолучитьФайлыЗаявкиПоИД() {
        var _ИД = JSON.parse(this.мПараметры[1]);
        var _тип = _ИД["type"];
        if (_тип.toLowerCase() == "work") {
            var зФайлы = Query(`SELECT vd.[ROW_ID],
                              vd.[Редактор],
                              vd.[Признаки],
                              vd.[Короткое имя] as Название,
                              vd.[Файл-Задание] as Задание,
                              vd.[ИзмененияАвтор] as Автор,
                              vd.[Время изменения] as Врем,
                              convert(char(5), vd.[Время изменения], 108) [time]
                       FROM ~ДО задания~ as z
                       JOIN ~ДО карточки~ as           k ON k.[ROW_ID] = z.[Задание-Карточка]
                       JOIN ~ДО внешние документы~ as vd ON k.[ROW_ID] = vd.[Файл-Карточка]
                       WHERE z.[ROW_ID] = :1 AND
                             vd.[Новый файл] < 0
                      `, 10, "rID,S");

            зФайлы.УстановитьПараметры(_ИД["id"]);
        } else {
            зФайлы = Query(`SELECT vd.ROW_ID,
                              vd.[Короткое имя] as Название,
                              vd.[Редактор],
                              vd.[Время изменения] as Врем,
                              convert(char(5), vd.[Время изменения], 108) [time],
                              vd.[ИзмененияАвтор] as Автор
                             ,vd.[Файл-Задание] as Задание
                             ,vd.[Признаки]
                       FROM ~ДО карточки~ as k
                       JOIN ~ДО внешние документы~ as vd ON k.[ROW_ID] = vd.[Файл-Карточка]
                       WHERE k.[ROW_ID] = :1 AND vd.[Новый файл] < 0`, 10, "rID,S");

            зФайлы.УстановитьПараметры(_ИД["id"]);
        }
        var масФайлы = {};
        while (зФайлы.Следующий()) {
            масФайлы[String(зФайлы.ROW_ID)] = {
                EDITOR: зФайлы.Редактор,
                CREATED: зФайлы.Врем.format("dd.MM.yy") + " " + зФайлы.time,
                CREATOR: зФайлы.Автор,
                FILENAME: зФайлы.Название,
                TEMPORARY: зФайлы.Признаки,
                ADDITION_ID: зФайлы.Задание
            };
        }
        return кВнешниеКоманды.ОбработатьРезультат(масФайлы);
    }

    /**
     * Возвращает JSON строку меток, допустимых для данной организации (таблица Организации, поле "Метки клиентов")
     * @returns {string}
     */
    ПолучитьСписокМетокПоИДОрганизации() {
        var _масПараметры = JSON.parse(this.мПараметры[1]);
        var зТегиОрганизации = Query(`SELECT TOP(1) org.[Метки клиентов] as МеткиКлиентов
                             FROM ~Организации~ as org
                             WHERE org.[ROW_ID] = :1
                            `, 1, "nzOrg,S");
        зТегиОрганизации.УстановитьПараметры(_масПараметры["id_org"]);
        var мМеткиКлиентов = {};
        if (зТегиОрганизации.Следующий()) {
            мМеткиКлиентов = зТегиОрганизации.МеткиКлиентов.split("#");
        } else {
            мМеткиКлиентов [1]="";
        }
        return кВнешниеКоманды.ОбработатьРезультат(мМеткиКлиентов);
    }

    /**
     * Отдать Файл из базы в WEB
     * @returns {*}
     */
    СкачатьФайл() {
        var масВходныеДанные = JSON.parse(this.мПараметры[1]);
        var _нзФайла = масВходныеДанные["id"];
        var _нзЧастногоЛица = масВходныеДанные["uid"];
        var _нзОрг = кВнешниеКоманды.ПолучитьИДОрганизацииПоИДЧастногоЛица(_нзЧастногоЛица);
        var зОргПоФайлу = Query(`SELECT vd.[ROW_ID]
                               ,[Карточка-Организация] as орг
                               ,[Карточка-ПлОрганизация]as плОрг
                         FROM ~ДО внешние документы~ vd
                         JOIN ~ДО карточки~ dk ON vd.[Файл-Карточка] = dk.ROW_ID
                         WHERE vd.[ROW_ID] = :1
                        `, 1, "FL,S");
        зОргПоФайлу.УстановитьПараметры(_нзФайла);
        if (зОргПоФайлу.Следующий()) {
            var пОрг = зОргПоФайлу.орг;
            var пПлОрг = зОргПоФайлу.плОрг;
            if (пОрг == _нзОрг || пПлОрг == _нзОрг) {
                var зФайл = Query(`SELECT [Образ], DATALENGTH([Образ]) Размер
                         FROM ~ДО хранилище~
                         WHERE [Хранилище-Файл] = :1`, 1, "FL,S");
                зФайл.УстановитьПараметры(_нзФайла);
                if (зФайл.Следующий()) {
                    return СложитьДвоичныеДанные(зФайл.Размер + "$", зФайл.Образ);;
                }
            }
        }
        return "1$0";
    }

    /**
     * Получить Варианты завершения Работы по её ROW_ID
     */
    ПолучитьПереходыПоИД() {
        var масВходныеДанные = JSON.parse(this.мПараметры[1]);
        var нзДоЗаданий = масВходныеДанные["id"];
        var Работа = new кРабота(нзДоЗаданий);
        var дг = {};
        if (Работа.Фаза.ВыбратьПредыдущуюФазуиИсполнителя) {
            var мПереход = Работа.ПолучитьДанныеПредыдущейФазы(1);
            дг["99999"] = {
                //this.$ФазаВыход = new кФаза(null,this.Объект["Фаза-Выход"])
                ROW_ID:                 мПереход.НомерЗаписи,
                НЗИСПОЛНИТЕЛЬ:          мПереход["нзИсполнитель"],
                НЗОРГАНИЗАЦИЯИСПОЛН:    мПереход["нзОрганизацияИсполн"],
                FIO:                    мПереход["ФИО"],
                ОРГАНИЗАЦИЯ:            мПереход['Организация'],
                ФЛАГИ:                  0,
                VARIANT:                "Вернуть на фазу " + "\"" + мПереход["Название"] + "\"",
                НОМЕРФАЗЫВЫХОД:         мПереход["НомерФазыВыход"],
                СТАТУСЗАВЕРШЕНИЯ:       мПереход["Предыдущая фаза"],
                ПОСЛЕДНИЙШАГ:           мПереход["Последний шаг"],
                ДОПОЛНИТЕЛЬНЫЕФЛАГИ:    мПереход["ДополнительныеФлаги"],
                ПРЕДЫДУЩАЯФАЗА:         мПереход["Предыдущая фаза"],
                НУЖЕНВЫБОР:     4,
                ИСПОЛНИТЕЛЬДЕФОЛТ:      мПереход["нзИсполнитель"]
            };
        } else {
            var Переходы = Работа.Фаза.Переходы;
            for (let i in Переходы) {
                if (!Переходы.hasOwnProperty(i)) continue;
                дг[String(Переходы[i].НомерЗаписи)] = {
                    ROW_ID:                 Переходы[i].НомерЗаписи,
                    НЗИСПОЛНИТЕЛЬ:          Переходы[i].Исполнитель.нзСотрудник,
                    НЗОРГАНИЗАЦИЯИСПОЛН:    Переходы[i].Исполнитель.нзПредставитель,
                    FIO:                    Переходы[i].Исполнитель.Сотрудник,
                    ОРГАНИЗАЦИЯ:            Переходы[i].Исполнитель.Организация,
                    ФЛАГИ:                  0,
                    VARIANT:                Переходы[i].Объект.Название,
                    НОМЕРФАЗЫВЫХОД:         Переходы[i].Объект.Номер,
                    СТАТУСЗАВЕРШЕНИЯ:       Переходы[i].Объект["Предыдущая фаза"],
                    ПОСЛЕДНИЙШАГ:           Переходы[i].ФазаВыход.Объект["Последний шаг"],
                    ДОПОЛНИТЕЛЬНЫЕФЛАГИ:    Переходы[i].Объект["ДополнительныеФлаги"],
                    ПРЕДЫДУЩАЯФАЗА:         Переходы[i].Объект["Предыдущая фаза"],
                    НУЖЕНВЫБОР:             Переходы[i].ИсполнительИзНашейОрганизации ? 1 : 2,
                    ИСПОЛНИТЕЛЬДЕФОЛТ:      Переходы[i].Исполнитель.нзСотрудник,
                    //ИСПОЛНИТЕЛИ: мИсполнителиПерехода[_счетчик]
                };
            }
        }
        return кВнешниеКоманды.ОбработатьРезультат(дг);
    }

    /**
     *  Получить ROW_ID заявки по ROW_ID работы
     * @param _идЗадания
     * @returns {string}
     */
    static ПолучитьИДкарточки( _идЗадания ) {
        var зКарточка = Query(`SELECT [Задание-Карточка] as Карточка
                       FROM ~ДО задания~ z
                       JOIN ~ДО карточки~ k ON z.[Задание-Карточка] = k.[ROW_ID]
                       WHERE z.ROW_ID = :1
                      `, 1, "rID,S");
        зКарточка.УстановитьПараметры(_идЗадания);
        var пИД = "";
        if (зКарточка.Следующий()) пИД = зКарточка.Карточка;
        return пИД;
    }
    /**
     * Получить ROW_ID Исполнителя и Представителя для Работы
     * @param _нзЗаявки
     * @returns {{Исполнитель: string, Представитель: string}}
     */
    static ПолучитьИДИсполнителяПредставителяПоИДЗаявки( _нзЗаявки ) {
        var зИспПред = Query(`SELECT [ROW_ID]
                            ,[Задание-Исполнитель] as Исполнитель
                            ,[Задание-Представитель] as Представитель
                      FROM ~ДО задания~
                      WHERE ROW_ID = :1`, 1, "FL,S");
        зИспПред.УстановитьПараметры(_нзЗаявки);
        var мИспПред = {
            Исполнитель: "",
            Представитель: ""
        };

        if (зИспПред.Следующий()) {
            мИспПред = {
                Исполнитель: зИспПред.Исполнитель,
                Представитель: зИспПред.Представитель
            };
        }
        return мИспПред;
    }

    /**
     * Получить Фазу Работы по её ROW_ID
     * @param _нзРаботы
     * @returns {*}
     */
    static ПолучитьФазуПоИДРаботы(_нзРаботы) {
        var зФаза = Query(`SELECT kf.[Название]
                   FROM ~ДО задания~ z
                   JOIN ~ДО фазы~ f ON z.[Задание-Фаза] = f.ROW_ID
                   JOIN ~ДО категории фаз~ kf ON f.[Фаза-Категория] = kf.ROW_ID
                   WHERE z.ROW_ID = :1`, 10, "fID,S");
        зФаза.УстановитьПараметры(_нзРаботы);
        if (зФаза.Следующий()) return зФаза.Название;
        return "";
    }

    /**
     * Получить НАЗВАНИЕ Организации по Сотруднику
     * @param _нзОрганизации
     * @returns {*}
     */
    static ПолучитьОрганизациюПоСотруднику( _нзОрганизации ) {
        var зОРГ = Query(`SELECT  ФИО
                  FROM ~Сотрудники~
                  WHERE ROW_ID = :1`, 1, "FL,S");
        зОРГ.УстановитьПараметры(_нзОрганизации);
        if (зОРГ.Следующий()) {
            return зОРГ.ФИО;
        }
        return "";
    }

    /**
     *
     * @param _нзПредставителя
     * @returns {*}
     */
    static ПолучитьИДОрганизацииПоИДЧастногоЛица( _нзПредставителя ) {
        var зОРГ = Query(`SELECT [Организация-Частные лица] as Организация
                  FROM ~Частные лица~
                  WHERE ROW_ID = :1`, 1, "FL,S");
        зОРГ.УстановитьПараметры(_нзПредставителя);
        if (зОРГ.Следующий()) return зОРГ.Организация;
        return "";
    }

    /**
     * Получить ФИО и ОРГАНИЗАЦИЮ по ROW_ID работы
     * @param _нзЗаявки
     * @returns {{ФИО: string, ЧЕЙИСПОЛНИТЕЛЬ: string}}
     */
    static ПолучитьИсполнителяПоИДЗаявки( _нзЗаявки ) {

        var мИспПред = кВнешниеКоманды.ПолучитьИДИсполнителяПредставителяПоИДЗаявки(_нзЗаявки);
        var масИсполнитель = {
            ФИО: "",
            ЧЕЙИСПОЛНИТЕЛЬ: ""
        };
        // Исполнитель - Сотрудинки
        if (мИспПред.Исполнитель > 0) {
            var зИсполнитель = Query(`SELECT [Сотрудники]
                                   ,[ФИО]
                                   ,[Телефон]
                             FROM ~Сотрудники~
                             WHERE ROW_ID = :1`, 1, "FL,S");
            зИсполнитель.УстановитьПараметры(мИспПред.Исполнитель);
            if (зИсполнитель.Следующий()) {
                масИсполнитель = {
                    ФИО: ФИО(зИсполнитель.ФИО),
                    ЧЕЙИСПОЛНИТЕЛЬ: 0
                };
                if (зИсполнитель.Сотрудники > 0) {
                    масИсполнитель["ОРГАНИЗАЦИЯ"] = кВнешниеКоманды.ПолучитьОрганизациюПоСотруднику(зИсполнитель.Сотрудники);
                }
                var мТелСот = зИсполнитель.Телефон.split("#");
                масИсполнитель["ТЕЛИСП"] = мТелСот[1] == "" ? "" : мТелСот[1];
            }
            // Исполнитель - Частные лица
        } else {
            var зПред = Query(`SELECT [Организация-Частные лица] as Организация
                            ,[ФИО]
                      FROM ~Частные лица~
                      WHERE ROW_ID = :1`, 1, "FL,S");
            зПред.УстановитьПараметры(мИспПред.Представитель);
            if (зПред.Следующий()) {
                if (зПред.Организация > 0) {
                    масИсполнитель["Организация"] = ДанныеОрганизации(зПред.Организация, "ОН").Н;
                }
                масИсполнитель["ФИО"] = ФИО(зПред.ФИО);
                масИсполнитель["ЧЕЙИСПОЛНИТЕЛЬ"] = 1;
            }
        }
        if (!масИсполнитель["ОРГАНИЗАЦИЯ"]) {
            масИсполнитель["ОРГАНИЗАЦИЯ"] = "";
            масИсполнитель["ЧЕЙИСПОЛНИТЕЛЬ"] = "";
        }
        return масИсполнитель;
    }


    /*
    todo отсутвует опиание
    static СтатусЗаданияВМассив(){

    }
    */

    /**
     * Преобразует массив в JSON
     * @param Результат
     * @returns {string}
     */
    static ОбработатьРезультат(Результат){
        var пСтр = JSON.stringify( Результат );
        пСтр = пСтр.length + "$" + пСтр;
        Сообщить( "ОбработатьРезультат" + пСтр );
        return пСтр
    }
}




















