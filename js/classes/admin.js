"use strict";

class БазаДанных {
	static ПроверитьИндексы() {
		this.СоздатьДиалогАдминаБД( "Проверка индексов" );
	} 
	
	static ДефрагментироватьИндексы() {
		this.СоздатьДиалогАдминаБД( "Дефрагментация индексов" );
	}
	
	static СоздатьДиалогАдминаБД( имяДиалога ) {
		if( this.ПользовательЯвляетсяАдминомБД() )
		{
			var оДиал = СоздатьДиалог( имяДиалога );
			оДиал.Выполнить();
			оДиал.Разрушить();
		}
	}
	
	static ПользовательЯвляетсяАдминомБД() {
		var запрос = Query( "SELECT TOP 1 Ф1&2 AS АдминБД FROM ~Пользователи~ WHERE Имя = :1", 10, "p1,A" );
		
		var имяПользователя = Пользователь().Имя;
		запрос.УстановитьПараметры( имяПользователя );
		if( !запрос.Следующий() ) {
			this.ОбработатьОшибкуСтека( "Не найден пользователь в базе !" );
			return false;
		}
			
		if( запрос.АдминБД != 2 ) {
			this.ОбработатьОшибкуСтека( "У Вас недостаточно прав !" );
			return false;
		}
		
		return true;
	}
	
	static ОбработатьОшибкуСтека( текстОшибки ) {
		var ошибка = new StackError( текстОшибки );
		ошибка.ОбработкаОшибки();
	}
}

/**
 * После запуска функция раз в минуту запрашивает плановые события, если найдено событие
 * с датой исполнения = ТекДат() +/- 2 минуты, создает по нему фактические события и меняет
 * дату исполнения планового события на дату следующего исполнения согласно расписанию
 * для однократных событий выставляет дату равную ТекДат()
 */
function ЗапускСобытийПоРасписанию(){
    var зЗапросОжидающихСобытий = query( `SELECT ROW_ID, Операция, [Тип выполнения], Название
                                     FROM ~События плановые~
                                     WHERE [Время] <= GetDate()`, 5, "" );

    var кВнестиСледующееИсполнение = command( `UPDATE ~События плановые~
                                          SET [Время] = DateAdd(day, 1, [Время])
                                          WHERE ROW_ID = :1`, 1, "rID,S" );

    var пСчетчик = 0;
    while( 1 == 1 ){
        зЗапросОжидающихСобытий.УстановитьПараметры( );
        while( зЗапросОжидающихСобытий.Следующий() ){
            ВывестиСтатус( "Обработка.... обработано событий: " + пСчетчик++ );
            ВыполнитьФункцию( зЗапросОжидающихСобытий.Операция );
            // Ежедневно
            if( 'зЗапросОжидающихСобытий.Тип выполнения' == 1 ){
                кВнестиСледующееИсполнение.Выполнить( зЗапросОжидающихСобытий.ROW_ID );
                Сообщить( new Date() + " СООБЩЕНИЕ: Событие \"" + зЗапросОжидающихСобытий.Название +"\" Выполнено." );
            }
        }
        кВнестиСледующееИсполнение.Завершить();
        ВывестиСтатус( "Ожидание....  обработано событий: " + пСчетчик );
        Пауза( 60000 );
    }
}