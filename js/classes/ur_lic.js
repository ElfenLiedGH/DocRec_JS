'use strict';
/**
 * @module Юридические лица
 */

/**
 * @class кДоговор - класс для работы с договором
 * @extends БазовыйОбъект
 */
class кДоговор extends БазовыйОбъект {
    /**
     * @Param {Number=} НомерЗаписи Номер записи договора
     */
    constructor( номерЗаписи, загрузить ) {
        super("Договор");
        if (arguments.length > 0) {
            this.Установить( номерЗаписи );
            if( загрузить ) this.Прочитать( номерЗаписи );
        }
        /**
         * Параметры договора
         */
        this.Параметры = [];
        this.ОблагаетсяНДС = false; // Вариант НДС Организации
        this.нзГрузоотправитель = -1;
        this.нзПродавец = -1;
        this.ПапкаПримечание = "";
        this.ПрефиксГруппНумерации = "";
        /**
         * Через разделитель "|" имена папок договора
         * @type {string}
         */
        this.ИерархияПапок = "";

        if (this.НомерЗаписи > 0) {
            this._ДанныеПапки();
            this._ИерархияПапок();
        }
    }

    /**
     * Читает параметры договора в this.Параметры
     * @param НаДату
     */
    ПрочитатьПараметрыДоговора(НаДату) {
        var зПарам = Query(`select par.Название as Имя, zp.Значение from ~Свойства~ zp inner join ~Виды параметров~ par on par.ROW_ID = zp.[Виды-Параметры]
                            where [Параметры-Договор] = :1 and :2 between zp.ДатНач and zp.ДатКнц`, 100, "p1,S,p2,D");
        зПарам.УстановитьПараметры(this.НомерЗаписи, НаДату);
        while (зПарам.Следующий())
            this.Параметры[зПарам.Имя] = зПарам.Значение;
    }


    /**
     *
     * @param НаДату
     * @returns {boolean}
     */
    Действует(НаДату) {
        return true;
    }

    /**
     * @private
     */
    _ДанныеПапки() {
        let зПапкаДоговора = Query(`
            DECLARE @iddog int;
            SET @iddog = :1;

            ;WITH parent AS (
                SELECT ROW_ID, Папки, Папки_ADD, convert(varchar(100),'1') as sort,
                    Примечание, Плательщик, Грузополучатель, [День выставления счета] ПрефиксГН
                FROM ~Договор~
                WHERE ROW_ID=@iddog
                UNION ALL
                SELECT child.ROW_ID, child.Папки, child.Папки_ADD, convert(varchar(100), parent.sort + ' ') as sort,
                    child.Примечание, child.Плательщик, child.Грузополучатель, child.[День выставления счета] ПрефиксГН
                FROM ~Договор~ child
                JOIN parent ON child.ROW_ID = parent.[Папки]
            )

            SELECT TOP 1 Примечание, Плательщик, Грузополучатель,
                (SELECT [Вариант НДС] from ~Организации~ where ROW_ID = Плательщик) as НДС, ПрефиксГН
            FROM parent
            WHERE Папки_ADD = 0
            AND Parent.ROW_ID <> @iddog
            AND Плательщик > 0
            ORDER BY sort+'|'
            `, 1, "p1,S");
        зПапкаДоговора.УстановитьПараметры(this.НомерЗаписи);

        if (зПапкаДоговора.Следующий()) {
            this.ОблагаетсяНДС = (зПапкаДоговора.НДС == 0); // Вариант НДС Организации
            this.нзГрузоотправитель = зПапкаДоговора.Грузополучатель;
            this.нзПродавец = зПапкаДоговора.Плательщик;
            this.ПапкаПримечание = зПапкаДоговора.Примечание;
            this.ПрефиксГруппНумерации = зПапкаДоговора.ПрефиксГН;
        }

        return true;
    }

    _ИерархияПапок() {
        this.ИерархияПапок = кДоговор.ПолучитьИерархиюПапок(this.НомерЗаписи);
    }

    static ПолучитьИерархиюПапок(нзДоговор) {
        let зПапки = Query(`
            ;WITH dogovor AS (
                SELECT ROW_ID as нзДоговор, Примечание, [Папки_ADD], Папки, 0 AS Уровень, CONVERT(nvarchar(4000), ISNULL(Примечание, '')) AS Иерархия
                FROM ~Договор~
                WHERE ROW_ID = (SELECT Папки FROM ~Договор~ WHERE ROW_ID = :1)
                UNION ALL
                SELECT d.ROW_ID as нзДоговор, d.Примечание, d.[Папки_ADD], d.Папки, dogovor.Уровень + 1 AS Уровень, CONVERT(nvarchar(4000) , ISNULL(d.Примечание, '')) + '|' + dogovor.Иерархия AS Иерархия
                FROM ~Договор~  d
                JOIN dogovor ON dogovor.Папки = d.ROW_ID
                WHERE d.[Папки_ADD] = 0
            )

            SELECT TOP 1 Иерархия
            FROM dogovor
            WHERE Папки_ADD = 0
            ORDER BY Уровень DESC
            `, 1, "p1,S");

        зПапки.УстановитьПараметры(нзДоговор);
        return зПапки.Следующий() ? зПапки.Иерархия : "";
    }

    ПолучитьСтавкуНДС(Дата) {
        return (this.ОблагаетсяНДС) ? Number(ПрочитатьКонстанту(Дата, "НДС")) : 0;
    }

    /**
     * Получить номер записи грузоотправителя, с папки или Лицо0
     * @returns {Number} Номер записи грузоотправителя
     */
    НомерЗаписиГрузоотправителя() {
        let з_груз = Query(`declare @iddog int;
                            set @iddog = :1
                            ;WITH Parent AS( SELECT ROW_ID, [Папки],[Грузополучатель]
                                         FROM ~Договор~
                                         WHERE ROW_ID=@iddog
                                         UNION ALL
                                         SELECT Child.ROW_ID, Child.[Папки], Child.[Грузополучатель]
                                         FROM ~Договор~ Child
                                         INNER JOIN Parent on Parent.[Папки] = Child.ROW_ID
                                       )
                                 SELECT Parent.[Грузополучатель]
                                 FROM Parent
                                 WHERE Parent.[Грузополучатель]<>-1 and Parent.ROW_ID<>@iddog`, 10, "p1,S");
        з_груз.УстановитьПараметры(this.НомерЗаписи);
        return з_груз.Следующий() ? з_груз.Грузополучатель : НомерЗаписи(Лицо0());
    }

    /**
     * Извлекает Расчетный счет грузоотправителя по иерархии договоров
     * @returns {Object} Объект с данными по расчетному счету (РСчет,Банк,БИК,КоррСчет)
     */
    РасчетныйСчетГрузоотправителя() {
        var зРСчет = Query(`WITH Parent AS( SELECT ROW_ID, [Папки],[Наш р/с-Договор],
                                                [Папки_ADD],[Примечание]
                                         FROM ~Договор~
                                         WHERE ROW_ID=:1
                                         UNION ALL
                                         SELECT Child.ROW_ID, Child.[Папки],Child.[Наш р/с-Договор],
                                                Child.[Папки_ADD],Child.[Примечание]
                                         FROM ~Договор~ Child
                                         INNER JOIN Parent on Parent.[Папки] = Child.ROW_ID
                                       )
                         SELECT rs.[Р/счет] as РСчет,bank.БИК,bank.[Название банка] as Банк, bank.КоррСчет
                         FROM Parent
                         JOIN ~Расчетные счета~ rs on rs.row_id = Parent.[Наш р/с-Договор]
                         JOIN ~Банки~ bank on bank.row_id = rs.[Банк-Р/с]
                         WHERE [Наш р/с-Договор] <> -1`, 10, "p1,S");
        зРСчет.УстановитьПараметры(this.НомерЗаписи);
        return зРСчет.Следующий() ? зРСчет.toJSObject() : {"РСчет": "", "Банк": "", "БИК": "", "КоррСчет": ""};
    }

    /**
     * Рассчитывает Договор
     * @param МесяцРасчета
     */
    Рассчитать(МесяцРасчета) {

    }

    // Возвращает массив с данными начислений договора за МесяцРасчета
    ДанныеРасчетаДоговора(МесяцРасчета) {

    }

    ПроверитьСвободныйНомер(Номер) {
        var запрос_уникальности = Query("SELECT ROW_ID From ~Договор~ Where Номер = :1 AND ROW_ID <> :2 AND [Папки_ADD]=1", 10, "p1,A,p2,S");
        запрос_уникальности.УстановитьПараметры(Номер, this.НомерЗаписи);
        return запрос_уникальности.Следующий() <= 0;
    }

    ПолучитьДиапазонСвободныхНомеров() {
        var Диапазон = {};
        Диапазон["Мин"] = 0;
        Диапазон["Макс"] = 0;
        if (this.НомерЗаписи > 0) {
            var з_диап = Query(`;With S as
                            ( select [ROW_ID], [Папки], [Минимальный номер], [Максимальный номер], Папки_ADD, 1 as уровень
                                From ~Договор~
                               where Row_Id = :1
                              union all
                              select d.[ROW_ID],d.[Папки],d.[Минимальный номер],d.[Максимальный номер],d.Папки_ADD, уровень+1 as уровень
                                from ~Договор~ d
                                join S on d.row_id = s.Папки
                            )
                            select top 1 [Минимальный номер] as МинНом, [Максимальный номер] as МаксНом
                            from S
                            where Папки_ADD = 0 and [Максимальный номер] > 0
                            order by Уровень`, 10, "dog,S");
            з_диап.УстановитьПараметры(this.НомерЗаписи);
            if (з_диап.Следующий()) {
                Диапазон["Мин"] = з_диап.МинНом;
                Диапазон["Макс"] = з_диап.МаксНом;
            }
        }
        return Диапазон;
    }

    static ТипДоговора() {
        return [""];
    }

    /**
     * Возвращает массив документов с указанным типом за период по договору
     * @param ДатНач {Date}
     * @param ДатКнц {Date}
     * @param ТипыДокументов {String=} Типы документов через запятую (35,4). Если параметр не указан, то все типы
     * @return {Array.<Object>}
     */
    ДокументыЗаПериод(ДатНач, ДатКнц, ТипыДокументов) {
        let мДокументы = [];
        let ФильтрДокументов = ТипыДокументов ? `and [Тип документа] in (` + ТипыДокументов + `)` : ``;
        let зДок = Query(`select row_id, row_id as НомерЗаписи, Номер, Дата, РасчМесяц, ВидСчета,[Тип документа]
                            from ~Документ~
                            where [Документы-Договор]=:1 ` + ФильтрДокументов + ` and Дата between :1 and :2 `, 100, "p1,S,p2,D,p3,D");
        зДок.УстановитьПараметры(this.НомерЗаписи, ДатНач, ДатКнц);
        while (зДок.Следующий()) {
            мДокументы.push(КопироватьОбъект(зДок));
        }
        return мДокументы;
    }
}

/**
 * @extends БазовыйОбъект
 * @class класс кНоменклатура - объект для работы с таблицей Номенклатура
 */
class кНоменклатура extends БазовыйОбъект {
    constructor(НомерЗаписи) {
        super('Номенклатура', НомерЗаписи);
    }

    // TODO это в заплатки наверно
    static ОКЕИСФ(ЕдИзмерения) {
        switch (ЕдИзмерения.toUpperCase()) {
            case "ШТ"   :
                return "Штука";
            case "Ч"    :
                return "Час";
            case "МЕС"  :
                return "Месяц";
            case "УСЛ." :
                return "Услуга";
        }
        return "-";
    }

    static ОКЕИ(ЕдИзмерения) {
        switch (ЕдИзмерения.toUpperCase()) {
            case "М2"    :
                return "055";
            case "М3"    :
                return "113";
            case "Л"     :
                return "112";
            case "ГКАЛ"  :
                return "233";
            case "КГ"    :
                return "166";
            case "КВТ"   :
                return "214";
            case "МВТ"   :
                return "215";
            case "КВТ*Ч" :
            case "КВТ.Ч" :
                return "245";
            case "КВ*АР" :
                return "248";
            case "ШТ"    :
                return "796";
            case "Ч"     :
                return "356";
            case "МЕС"   :
                return "362";
        }
        return "-";
    }
}
/**
 *
 * @class КомплектДокументов
 */
class КомплектДокументов {
    static НапечататьКомплектыДокументов(мСписокДоговоров) {
        if (мСписокДоговоров.length === 0)
            return false;
        let пРежимПодписи = Number(ПрочитатьКонстанту(РабМес(), "ПОДПИСЬ"));
        let Диалог = СоздатьДиалог("Диалог печати комплекта");
        let позГрузоотправителя = new кДоговор(мСписокДоговоров[0]).НомерЗаписиГрузоотправителя();
        var Подписи = кОрганизация.ПолучитьПредставителейОрганизации(позГрузоотправителя);
        Диалог.Обработчик.Подписи = Подписи;

        if (!Диалог.Выполнить()) {
            Сообщить("Формирование прервано");
            return false;
        }
        var ВремяНачала = Date.now();

        let дг = Сетка("Диалог печати комплекта", "Настройка комплекта");
        if (!дг.ЧислоЗаписей()) {
            Сообщить("Нет данных для печати документов");
            return false;
        }

        let ДатаР = Диалог.Месяц;
        СоздатьОкноСостояния("Окно состояния", "Этап", "Идет печать комплектов документов по договорам",
            "Действие", "Подготовка к печати...",
            "Прогресс", мСписокДоговоров.length);
        let мСписокОтчетов = [];
        for (let инд = 0; инд < дг.ЧислоЗаписей(); инд++) {
            дг.Запись(инд);
            let Колво = ПрочитатьПолеСвязи(дг, "@Печать") ? дг["@Кол_во"] : 0;
            if (Колво != 0) {
                мСписокОтчетов.push(КопироватьОбъект(дг));
            }
        }
        var пРуководитель = Подписи[1][Диалог.Обработчик.ключРук];
        var пБухгалтер = Подписи[1][Диалог.Обработчик.ключГлБух];
        var ПодписиОтчета = {
            ФИОРук: пРуководитель.ФИО,
            ДолжностьРук: пРуководитель.Должность,
            ОснованиеРук: пРуководитель.Основание,
            ФИОГлБухгалтера: пБухгалтер.ФИО,
            ДолжностьБух: пБухгалтер.Должность,
            ОснованиеБух: пБухгалтер.Основание,
            ДолжИсп: "",
            ФИОИсп: ""
        };
        отчеты.OpenSpool();
        var СчетчикДоговоров = 0;
        var СчетчикДокументов = 0;
        for (let текпозДоговора of мСписокДоговоров) {
            СчетчикДоговоров++;
            let Договор = new кДоговор(текпозДоговора);
            for (let текОтчет of мСписокОтчетов) {
                let ПрошлоВремени = new Date(Date.now() - ВремяНачала);
                УстановитьПоляОкнаСостояния("Этап", "Идет печать комплектов документов по договорам",
                    "Действие", "Обработано договоров - " + СчетчикДоговоров + " из " + мСписокДоговоров.length +
                    ". Выведено документов на печать - " + СчетчикДокументов +
                    ".\nПрошло " + ПрошлоВремени.format("isoTime", "UTC"),
                    "Прогресс", СчетчикДоговоров);

                let НазваниеОтчета = текОтчет["@Документ"];
                let ДокументыДоговора = [];
                switch (текОтчет["@Тип"]) {
                    case 1:
                        break;
                    case 999:
                        break;
                    default:
                        ДокументыДоговора = Договор.ДокументыЗаПериод(ДатаР, ДатаР.ПоследнееЧисло(), Number(текОтчет["@Тип"]));
                }
                for (let Документ of ДокументыДоговора) {

                    if (отчеты.ExecuteReport(НазваниеОтчета, {
                            "Запись": Документ,
                            "Подписи": ПодписиОтчета
                        }, Number(текОтчет["@Кол_во"]))) {
                        СчетчикДокументов += Number(текОтчет["@Кол_во"]);
                    }

                }
            }
        }
        отчеты.StopSpool();
        УдалитьОкноСостояния();
    }

    /**
     * Читает варианты комплектов из констант КОМПЛЕКТ[0-9]
     * @returns {{Комплекты: Array, Ключи: Array}} Комплекты - Названия комплектов, Ключи - индексы комплектов
     */
    static ПолучитьВариантыКомплектов() {
        let Комплекты = [];
        let Ключи = [];
        let з_конст = Query(`select [Полное имя], Имя, Значение from ~Константы~ where Имя like 'КОМПЛЕКТ[0-9]%'`, 10, "");
        з_конст.УстановитьПараметры();
        while (з_конст.Следующий()) {
            let инд = Number(з_конст.Имя.substring(8, 9));
            Комплекты.push(з_конст["Полное имя"]);
            Ключи.push(инд);
        }
        return {Комплекты, Ключи};
    }

    static ПолучитьСписокДокументовДляКомплекта(Вариант) {
        return ПрочитатьКонстанту(РабМес(), "КОМПЛЕКТ" + Вариант).split(";");
    }
}