'use strict';
/**
 * @module Юридические лица
 */


/**
 * @class СальдоДоговора - класс для расчета сальдо договора
 */
class СальдоДоговора {
    /**
     *
     * @param {Number} НомерЗаписиДоговора Номер записи договора
     */
    constructor( НомерЗаписиДоговора ) {
        this.НомерЗаписи = НомерЗаписиДоговора;
        /* 0 - считаем как обычно ( применяем зачет взаимных требований )
         * 1 - платежи связываются с фактурами в ручную периодом или явным указанием, все остатки повисают в кредите до тех пор пока период не закончиться, потом как обычно
         * 2 - платежи связываются фактурами, все не связанные и остатки повисают в кредите
         */
        this.СтавкаНДС = Number( ПрочитатьКонстанту( РабМес(), "НДС" ) );
        this.РазрешенРасчетЗакрытогоПериода = false;
        this.мСписокДокументов = [];
        this.мСписокАвансов = [];
    }

    /**
     * @param {Date} МесяцРасчета - за который месяц рассчитывать сальдо
     * @param {Boolean} СохранятьСальдо - Сохранять ли сальдо в базе данных
     */
    Рассчитать( МесяцРасчета, СохранятьСальдо ) {
        this.ВариантРасчета = this._ПолучитьПараметрДоговорора( "РАСЧСАЛЬДО", МесяцРасчета ) || Number( ПрочитатьКонстанту( РабМес(), "РАСЧСАЛЬДО" ) );
        this.БезРасчетаСальдо = this._ПолучитьПараметрДоговорора( "БЕЗРАСЧСЛД", МесяцРасчета );
        this._ЗаполнитьИерархию( this.НомерЗаписи );
        this._ОчиститьСальдо( МесяцРасчета, СохранятьСальдо );
        this._ПодготовкаЗапросов();
        var мСчетов = [];
        var мПлатежей = [];
        var мСторно = [];
        var мОтрицательныхПлатежей = [];
        var мОтрицательныхФактур = [];
        var массивИтогов;
        var списокДокументов = BufferedReader( this.зСписокДокументов, 500, "DB,D,DE,D,PD,D" );
        списокДокументов.УстановитьПараметры( МесяцРасчета, МесяцРасчета.ПоследнееЧисло(), МесяцРасчета.СледующийМесяц( -1 ) );
        while (списокДокументов.Следующий() > 0) {
            var текущийДокумент = списокДокументов.toJSObject(); //this.stack2js( списокДокументов );
            // игнорируем документы с нулевой суммой
            if (текущийДокумент["Сумма"] !== 0) {
                if (текущийДокумент["N п/п"] === -1) {
                    // платеж
                    if (текущийДокумент["Признак"] === 3) {
                        //отрицательный платеж обрабатывается отдельно
                        if (текущийДокумент["Сумма"] < 0) {
                            мОтрицательныхПлатежей.push( текущийДокумент );
                            мОтрицательныхПлатежей[мОтрицательныхПлатежей.length - 1]["Сумма"] = -мОтрицательныхПлатежей[СчетчикДокументовДоговора]["Сумма"];
                        }
                        else {
                            мПлатежей.push( текущийДокумент );
                        }
                    }

                    else { // счет (признаки: 1=сальдо, 2=счет-фактура)
                        //отрицательная фактура
                        if (текущийДокумент["Признак"] === 2 && текущийДокумент["Сумма"] < 0) {
                            let текИнд = мОтрицательныхФактур.push( текущийДокумент ) - 1;

                            мОтрицательныхФактур[текИнд]["Сумма"] = -мОтрицательныхФактур[текИнд]["Сумма"];
                            мОтрицательныхФактур[текИнд]["Сумма2"] = -мОтрицательныхФактур[текИнд]["Сумма2"];
                        }
                        //сальдо или положительная фактура
                        else {
                            мСчетов.push( текущийДокумент );
                        }
                    }
                } else {
                    // документ сторнирования (здесь могут быть вперемежку счета и платежи)
                    мСторно.push( текущийДокумент );
                }
            }
        }
        массивИтогов = this._ПостОбработкаСальдо( МесяцРасчета, мСторно, мСчетов, мПлатежей, мОтрицательныхПлатежей, мОтрицательныхФактур );
        this._СохранитьСальдо( МесяцРасчета, массивИтогов );
    }

    _ПостОбработкаСальдо( МесяцРасчета, мСторно, мСчетов, мПлатежей, мОтрицательныхПлатежей, мОтрицательныхФактур ) {
        // итоговый массив, который вернет эта ф-я как результат своей работы
        var массивИтогов = [];
        var номПП1 = 0, суммаОстатка = 0, сумма2 = 0;
        this.мСписокДокументов = [];
        this.мСписокАвансов = [];
        /* ШАГ №1
         перебираем документы сторно,
         - при сторнировании счета-фактуры уменьшаем сумму дебетового сальдо/начисления, ссылающихся на него
         - при сторнировании оплаты уменьшаем сумму кредитового сальдо/платежа, ссылающихся на него
         - возвращенные документы переносим по их назначению (счета - в счета, платежи - в платежи) */
        if (мСторно.length > 0)
            this._ОбработкаДокументовСторно( мСторно, мСчетов );
        /* ШАГ 2 будем гасить отрицательные фактуры, если это кор.фактура - то она будет в первую очередь гасить своего родителя и потомков
         при условии, что они остались в сальдо все отрицательные фактуры, идут перед платежами, в погашение дебиторки
         */
        if (мОтрицательныхФактур.length > 0)
            this._ОбработкаОтрицательныхФактур( мОтрицательныхФактур, мСчетов, мПлатежей );
        // ШАГ3 прежде чем считать сальдо обработаем отрицательные платежи? если конечно таковые есть. это та же сторнировка, только с более низким приоритетом (т.к. нет явного укзания документа)
        if (мОтрицательныхПлатежей.length > 0) {
            this._ОбработкаОтрицательныхПлатежей( МесяцРасчета, мОтрицательныхПлатежей );
        }
        //  ШАГ №4 перебрать входящие платежи и погасить входящие счета, у которых явно указан счет
        if (мПлатежей.length > 0) {
            this._ОбработкаПлатежейПоДокументам( МесяцРасчета, мПлатежей, мСчетов );
            // ШАГ №5 перебрать входящие платежи и погасить входящие счета с учетом периода оплаты
            this._ОбработкаПлатежейЗаПериод( МесяцРасчета, мПлатежей, мСчетов );
            // ШАГ №6 перебрать входящие платежи и погасить входящие счета, которые без указания Счета и периода
            this._ОбработкаПлатежей( МесяцРасчета, мПлатежей, мСчетов );
        }

        // перебрать входящие платежи и занести ненулевые в исходящее сальдо
        for (let текПлатеж of мПлатежей) {
            // игнорируем платежи с нулевой суммой
            if (текПлатеж["Сумма"]) {
                let инд1 = текПлатеж["ДатаДокумента"];
                let инд2 = текПлатеж.key;
                if(!массивИтогов[инд1])
                    массивИтогов[инд1] = [];
                if(!массивИтогов[инд1][инд2])
                    массивИтогов[инд1][инд2] = [];
                массивИтогов[инд1][инд2]["Счет"] = текПлатеж["Счет"];
                массивИтогов[инд1][инд2]["Платеж"] = текПлатеж["Платеж"];
                массивИтогов[инд1][инд2]["Сумма"] = -текПлатеж["Сумма"];
                массивИтогов[инд1][инд2]["Сумма2"] = 0;
                массивИтогов[инд1][инд2]["Разрешение"] = текПлатеж["Разрешение"];
                массивИтогов[инд1][инд2]["Виды-Задолженности"] = текПлатеж["Виды-Задолженности"];

                // остаток платежа рассчитывамого месяца не перекрыт фактурой -  значит сохранить этот остаток как авансовый платеж
                if (текПлатеж["ДатаДокумента"] >= МесяцРасчета) {
                    let _инд1 = текПлатеж["Платеж"];
                    if (!this.мСписокАвансов[_инд1]) this.мСписокАвансов[_инд1] = {};
                    this.мСписокАвансов[_инд1]["Дата"] = текПлатеж["ДатаДокумента"];
                    this.мСписокАвансов[_инд1]["Сумма"] += текПлатеж["Сумма"];
                }
            }
        }

        // перебрать входящие счета и занести ненулевые в исходящее сальдо
        for (let текСчет of мСчетов) {
            // игнорируем счета с нулевой суммой
            if (текСчет["Сумма"]) {
                let инд1 =  текСчет["ДатаДокумента"] ;
                let инд2 = текСчет.key;
                if(!массивИтогов[инд1])
                   массивИтогов[инд1] = [];
                if(!массивИтогов[инд1][инд2])
                   массивИтогов[инд1][инд2] = [];
                массивИтогов[инд1][инд2]["Счет"] = текСчет["Счет"];
                массивИтогов[инд1][инд2]["Платеж"] = текСчет["Платеж"];
                массивИтогов[инд1][инд2]["Сумма"] = текСчет["Сумма"];
                массивИтогов[инд1][инд2]["Сумма2"] = текСчет["Сумма2"];
                массивИтогов[инд1][инд2]["Разрешение"] = текСчет["Разрешение"];
                массивИтогов[инд1][инд2]["Виды-Задолженности"] = текСчет["Виды-Задолженности"];
            }
        }
        return массивИтогов;
    }

    // сохраняем результаты расчета сальдо
    _СохранитьСальдо( МесяцРасчета, массивИтогов ) {
        // todo refactor
        if (массивИтогов) {
            var оСальдо = Объект( "Сальдо договора" );
            оСальдо['Сальдо-Договор'] = this.НомерЗаписи;
            оСальдо.Месяц = МесяцРасчета;
            for (let Итог in массивИтогов) {
                if (!массивИтогов.hasOwnProperty( Итог )) continue;
                for (let инд_row_id in массивИтогов[Итог]) {
                    if (!массивИтогов[Итог].hasOwnProperty( инд_row_id )) continue;
                    if (массивИтогов[Итог][инд_row_id]["Сумма"]) {
                        оСальдо['Счет-Сальдо'] = массивИтогов[Итог][инд_row_id]["Счет"];
                        оСальдо['Платеж-Сальдо'] = массивИтогов[Итог][инд_row_id]["Платеж"];
                        оСальдо["Сумма"] = массивИтогов[Итог][инд_row_id]["Сумма"];
                        оСальдо["Сумма2"] = массивИтогов[Итог][инд_row_id]["Сумма2"];
                        оСальдо["ДатаДокумента"] = new Date( Итог );
                        оСальдо['Виды-Задолженности'] = массивИтогов[Итог][инд_row_id]["Виды-Задолженности"];
                        ВнестиЗапись( оСальдо );
                    }
                }
            }
        }
    }

    _ОбработкаДокументовСторно( мСторно, мСчетов ) {
        for (let Сторно of мСторно) {
            // здесь обрабатываем сам сторнируемый документ - если он есть в сальдо/начислениях/платеже, уменьшаем его сумму на величину сторно, но не более, чем до 0
            if (Сторно["N п/п"] === 0) {
                // сторнирован платеж
                if (Сторно["Признак"] == 3) {
                    for (let Платеж of мПлатежей) {
                        if (Платеж["Платеж"] == Сторно["Платеж"]) {
                            //индШаг = ВнестиДетализациюРасчетаСальдо( позТекДог, "ШАГ1", индШаг, мПлатежей[номПППлатеж, "Платеж"], -1, -мСторно[номППСторно, "Сумма"] );

                            // уменьшаем платеж на сумму сторно (если платеж текущего месяца либо висит в кредите)
                            Платеж["Сумма"] -= Сторно["Сумма"];
                            if (Платеж["Сумма"] < 0) {
                                Платеж["Сумма"] = 0;
                            }
                        }
                    }
                }

                // сторнирована счет-фактура
                if (Сторно["Признак"] == 1) {
                    var ОбработанСчет = false;
                    for (let Счет of мСчетов) {
                        if (Счет["Счет"] == Сторно["Счет"]) {
                            // индШаг = ВнестиДетализациюРасчетаСальдо( позТекДог, "ШАГ1", индШаг, -1, мСчетов[номППСчет, "Счет"], -мСторно[номППСторно, "Сумма"] );

                            // уменьшаем счет на сумму сторно (если счет текущего месяца либо висит в кредите)
                            Счет["Сумма"] -= Сторно["Сумма"];
                            if (Счет["Сумма"] < 0) {
                                Счет["Сумма"] = 0;
                            }
                            Счет["Сумма2"] = ( Счет["Сумма"] * Счет["КоэфНДС"] ).toFixed( 2 );
                            ОбработанСчет = 1;
                        }
                    }

                    // вернуть в расчет отрицательное сторно на счете, которого нет в текущем месяце
                    if (Сторно["Признак"] == 1 && !ОбработанСчет && Сторно["Сумма"] < 0) {
                        let текпоз = мСчетов.push( Сторно.slice( 0 ) ) - 1;
                        мСчетов[текпоз]["Сумма"] = -мСчетов[Сторно]["Сумма"];
                        мСчетов[текпоз]["КоэфНДС"] = (100) / (this.СтавкаНДС + 100);
                        мСчетов[текпоз]["Сумма2"] = (мСчетов[текпоз]["Сумма"] * мСчетов[текпоз]["КоэфНДС"]).toFixed( 2 );

                    }
                }
            } else if (Сторно["Признак"] == 3) {
                let ужеОбработал = false;
                for (let Платеж of мПлатежей) {
                    if (Платеж["Платеж"] == Сторно["Платеж"]) {
                        //индШаг = ВнестиДетализациюРасчетаСальдо( позТекДог, "ШАГ1", индШаг, мПлатежей[номПППлатеж, "Платеж"], -1, мСторно[номППСторно, "Сумма"] );

                        //добавляем сумму к платежу
                        Платеж["Сумма"] += Сторно["Сумма"];
                        ужеОбработал = true;
                    }
                }
                if (!ужеОбработал) {
                    мПлатежей.push( Сторно.slice( 0 ) );
                }
            } else { // освобожденный счет - добавим сумму к тому же счету, если он есть в сальдо, иначе - введем новый
                let ужеОбработал = false;
                for (let Счет of мСчетов) {
                    if (Счет["Счет"] == Сторно["Счет"]) {
                        //индШаг = ВнестиДетализациюРасчетаСальдо( позТекДог, "ШАГ1", индШаг, -1, мСчетов[номППСчет, "Счет"], мСторно[номППСторно, "Сумма"] );

                        // добавляем сумму к счету
                        Счет["Сумма"] += Сторно["Сумма"];
                        Счет["Сумма2"] = (Счет["Сумма"] * Счет["КоэфНДС"]).toFixed( 2 );
                        ужеОбработал = true;
                    }
                }
                if (!ужеОбработал) {
                    // индексы в массивах счетов, платежей, сторно не пересекаются, поэтому ставим такой индекс
                    let инд = мСчетов.push( Сторно.slice( 0 ) ) - 1;
                    мСчетов[инд]["КоэфНДС"] = (100) / (this.СтавкаНДС + 100);
                    мСчетов[инд]["Сумма2"] = (мСчетов[инд]["Сумма"] * мСчетов[инд]["КоэфНДС"] ).toFixed( 2 );
                }
            }
        }
    }

    _ОбработкаПлатежей( МесяцРасчета, мПлатежей, мСчетов ) {
        // стоит параметр на договоре параметра нет и константа<2 если константа или параметр 2 то сюда не идем
        if (this.ВариантРасчета < 2) {
            for (let текПлатеж of мПлатежей) {
                // проверить, осталось ли еще деньги в платеже
                if (текПлатеж["Сумма"] !== 0) {
                    // документы, которые надо проталкивать не трогая
                    if (текПлатеж["Разрешение"] === 0) {
                        // перебрать счета и погасить во вторую очередь все оставшиеся счета
                        // (без ссылок на определенные платежи),
                        // но пропустить не разрешенные к оплате.
                        // сортировка по датам и приоритетам уже учтена в запросе!
                        for (let Счет of мСчетов) {
                            if (Счет["Сумма"] !== 0) {
                                // если вариант расчета сальдо = 0, то гасим по старинке не взирая на периоды
                                // если вариант расчета сальдо = 1, то делаем зачет для просроченной кредиторки и для платежей без назначения
                                // пример есть платеж с поступивший в январе с назначением март. он будет висеть в кредите пока не появится реализация марта
                                // если реализации марта не будет либо она будет меньше чем сумма платежа, то в апреле мы им погасим самые старые долги
                                //стоит параметр на договоре
                                //константа 0 и параметра нет
                                if (текПлатеж["Сумма"] !== 0 && Счет["Разрешение"] === 0 && Счет["Аналитика"] == текПлатеж["Аналитика"] &&
                                    ( this.ВариантРасчета < 2 && ( текПлатеж["ПлатежПо"] < МесяцРасчета || (текПлатеж["ПлатежС"] == new Date( '1900-01-01' ) && текПлатеж["ПлатежПо"] == new Date( '2045-05-09' ))))) {
                                    let суммаОстатка = Счет["Сумма"] - текПлатеж["Сумма"];
                                    // победил счет
                                    let Сумма2, суммаПлатежа;
                                    if (суммаОстатка > 0) {
                                        суммаПлатежа = текПлатеж["Сумма"]; // сумма платежа равна платежу
                                        Сумма2 = ( суммаОстатка * Счет["КоэфНДС"]).toFixed( 2 );
                                        Счет["Сумма"] = суммаОстатка;
                                        Счет["Сумма2"] = Сумма2;
                                        текПлатеж["Сумма"] = 0;
                                    }
                                    // победил платеж
                                    else {
                                        суммаПлатежа = Счет["Сумма"]; // сумма платежа равна счету
                                        Сумма2 = 0;
                                        Счет["Сумма"] = 0; // т.е. здесь обнуление в пользу платежа
                                        Счет["Сумма2"] = Сумма2;
                                        текПлатеж["Сумма"] = -суммаОстатка;
                                    }

                                    // платеж рассчитывамого месяца появился
                                    // раньше фактуры, значит обработать сумму оплаты как авансовый платеж
                                    if (текПлатеж["ДатаДокумента"] >= МесяцРасчета && Счет["ДатаДокумента"] >= текПлатеж["ДатаДокумента"]) {
                                        let инд = текПлатеж["Платеж"];
                                        if (!this.мСписокАвансов[инд]) this.мСписокАвансов[инд] = {};
                                        this.мСписокАвансов[инд]["Дата"] = текПлатеж["ДатаДокумента"];
                                        this.мСписокАвансов[инд]["Сумма"] += суммаПлатежа;
                                    }
                                    // поуменьшать этот же счет в других "именных" платежах
                                    // (иначе может не правильно сформироваеться итоговый массив)
                                    for (let Счет2 of мСчетов) {
                                        if (Счет != Счет2 && Счет["Счет"] == Счет2["Счет"]) {
                                            Счет2["Сумма"] = Счет["Сумма"];
                                            Счет2["Сумма2"] = Сумма2;
                                        }
                                    }
                                    this.мСписокДокументов.push( {
                                        "Счет": мСчетов[Счет]["Счет"],
                                        "Платеж": текПлатеж["Платеж"],
                                        "Сумма": суммаПлатежа,
                                        "Признак": мСчетов[Счет]["Признак"]
                                    } );
                                }
                                else {
                                    Счет["Сумма2"] = (Счет["Сумма"] * Счет["КоэфНДС"] ).toFixed( 2 );
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    _ОбработкаПлатежейЗаПериод( МесяцРасчета, мПлатежей, мСчетов ) {
        var индШаг = 0;
        for (let Платеж of мПлатежей) {
            // проверить, осталось ли еще деньги в платеже
            if (Платеж["Сумма"] !== 0) {
                // документы, которые надо проталкивать не трогая
                if (Платеж["Разрешение"] === 0) {
                    // перебрать счета и погасить во вторую очередь все оставшиеся счета
                    // (без ссылок на определенные платежи),
                    // но пропустить не разрешенные к оплате.
                    // сортировка по датам и приоритетам уже учтена в запросе!

                    for (let Счет of мСчетов) {
                        if (Счет["Сумма"] !== 0) {
                            let суммаПлатежа;
                            let Сумма2;
                            if (Платеж["Сумма"] !== 0 && Счет["Разрешение"] === 0 &&
                                Счет["Аналитика"] == Платеж["Аналитика"] &&
                                Счет["ДатаДокумента"] >= Платеж["ПлатежС"] && Платеж["ПлатежС"] != new Date( '1900-01-01' ) &&
                                Счет["ДатаДокумента"] <= Платеж["ПлатежПо"].ПоследнееЧисло() && Платеж["ПлатежПо"] != new Date( '2045-05-09' )) {
                                var суммаОстатка = Счет["Сумма"] - Платеж["Сумма"];
                                // победил счет
                                if (суммаОстатка > 0) {
                                    суммаПлатежа = Платеж["Сумма"]; // сумма платежа равна платежу
                                    Сумма2 = ( суммаОстатка * Счет["КоэфНДС"] ).toFixed( 2 );
                                    Счет["Сумма"] = суммаОстатка;
                                    Счет["Сумма2"] = Сумма2;
                                    Платеж["Сумма"] = 0;
                                }
                                // победил платеж
                                else {
                                    суммаПлатежа = Счет["Сумма"]; // сумма платежа равна счету
                                    Сумма2 = 0;
                                    Счет["Сумма"] = 0; // т.е. здесь обнуление в пользу платежа
                                    Счет["Сумма2"] = Сумма2;
                                    Платеж["Сумма"] = -суммаОстатка;
                                }

                                // платеж рассчитывамого месяца появился
                                // раньше фактуры, значит обработать сумму оплаты как авансовый платеж
                                if (Платеж["ДатаДокумента"] >= МесяцРасчета &&
                                    Счет["ДатаДокумента"] >= Платеж["ДатаДокумента"]) {
                                    let инд = Платеж["Платеж"];
                                    if (!this.мСписокАвансов[инд]) this.мСписокАвансов[инд] = {};
                                    this.мСписокАвансов[инд]["Дата"] = Платеж["ДатаДокумента"];
                                    this.мСписокАвансов[инд]["Сумма"] += суммаПлатежа;
                                }

                                // поуменьшать этот же счет в других "именных" платежах
                                // (иначе может не правильно сформироваеться итоговый массив)
                                for (let Счет2 of мСчетов) {
                                    if (Счет != Счет2 && Счет["Счет"] == Счет2["Счет"]) {
                                        Счет2["Сумма"] = Счет["Сумма"];
                                        Счет2["Сумма2"] = Сумма2;
                                    }
                                }
                                this.мСписокДокументов.push( {
                                    "Счет": Счет["Счет"],
                                    "Платеж": Платеж["Платеж"],
                                    "Сумма": суммаПлатежа,
                                    "Признак": Счет["Признак"]
                                } );
                            }
                            else {
                                Счет["Сумма2"] = ( Счет["Сумма"] * Счет["КоэфНДС"] ).toFixed( 2 );
                            }
                        }
                    }
                }
            }
        }
    }

    _ОбработкаПлатежейПоДокументам( МесяцРасчета, мПлатежей, мСчетов ) {
        var индШаг = 0;
        for (let Платеж of мПлатежей) {
            // игнорируем платежи с нулевой суммой
            if (Платеж["Сумма"] !== 0) {
                // документы, которые надо проталкивать не трогая
                if (Платеж["Разрешение"] == 0) {
                    // перебрать счета и погасить в первую очередь ссылающиеся на текущий платеж
                    // предполагается, что сумма платежа НЕ МЕНЬШЕ суммы составлющих его платежей по указанным счетам!
                    for (let Счет of мСчетов) {
                        if (Счет["ПоПлатежу"] == Платеж["Платеж"] && Счет["Сумма"] !== 0) {
                            if (Платеж["Сумма"] !== 0) {
                                var СуммаПодлежащаяОплате = Math.min( Счет["СуммаПлатежа"], Счет["Сумма"] );
                                var СуммаОплаты = Math.min( СуммаПодлежащаяОплате, Платеж["Сумма"] );
                                // платеж рассчитывамого месяца появился
                                // раньше фактуры, значит обработать сумму оплаты как авансовый платеж
                                if (Платеж["ДатаДокумента"] >= МесяцРасчета && Счет["ДатаДокумента"] > Платеж["ДатаДокумента"]) {
                                    let инд = текПлатеж["Платеж"];
                                    if (!this.мСписокАвансов[инд]) this.мСписокАвансов[инд] = {};
                                    this.мСписокАвансов[инд]["Дата"] = Платеж["ДатаДокумента"];
                                    this.мСписокАвансов[инд]["Сумма"] += СуммаОплаты;
                                }
                                this.мСписокДокументов.push( {
                                    "Счет": Счет["Счет"],
                                    "Платеж": Платеж["Платеж"],
                                    "Сумма": СуммаОплаты,
                                    "Признак": Счет["Признак"]
                                } );
                                Платеж["Сумма"] -= СуммаОплаты;
                                Счет["Сумма"] -= СуммаОплаты;
                                // переплата по счету: счет обнулить, остаток платежа вернуть в платеж
                                var Сумма2 = 0;
                                if (Счет["Сумма"] > 0) {
                                    Сумма2 = ( Счет["Сумма"] * Счет["КоэфНДС"]).toFixed( 2 );
                                }
                                Счет["Сумма2"] = Сумма2;

                                // поуменьшать этот же счет в других "именных" платежах
                                // (иначе может не правильно сформироваеться итоговый массив)
                                for (let Счет2 of мСчетов) {
                                    if (Счет != Счет2 && Счет["Счет"] == Счет2["Счет"]) {
                                        Счет2["Сумма"] -= СуммаОплаты;
                                        Счет2["Сумма2"] = Сумма2;
                                        if (Счет2["Сумма"] < 0) {
                                            Счет2["Сумма"] = Счет2["Сумма2"] = 0;
                                        }
                                    }
                                }
                            }
                            else {
                                Счет["Сумма2"] = ( Счет["Сумма"] * Счет["КоэфНДС"] ).toFixed( 2 );
                            }
                        }
                    }
                }
            }
        }
    }

    _ОбработкаОтрицательныхПлатежей( МесяцРасчета, мОтрицательныхПлатежей ) {
        var индШаг = 0;
        // шаг первый - если в отрицательном платеже не указан период оплаты, то погасим текущие платежи
        for (let ОтрПлатеж of мОтрицательныхПлатежей) {
            for (let Платеж of мПлатежей) {
                if (Платеж["Сумма"] !== 0) {
                    // подходит по аналитике и попадает в текущий период
                    if (ОтрПлатеж["Сумма"] !== 0 &&
                        Платеж["Аналитика"] == ОтрПлатеж["Аналитика"] && Платеж["ДатаДокумента"] >= ОтрПлатеж["ПлатежС"] && Платеж["ДатаДокумента"] <= ОтрПлатеж["ПлатежПо"].ПоследнееЧисло()) {
                        let суммаОстатка = Платеж["Сумма"] - ОтрПлатеж["Сумма"];
                        // победил обычный платеж
                        if (суммаОстатка > 0) {
                            Платеж["Сумма"] -= ОтрПлатеж["Сумма"];
                            ОтрПлатеж["Сумма"] = 0;
                            // уменьшаем платежи текущего периода
                            //индШаг = ВнестиДетализациюРасчетаСальдо( позТекДог, "ШАГ3", индШаг, мПлатежей[номППТекПлатеж, "Платеж"], списокДокументов.Счет, -списокДокументов.Сумма );
                        } else {
                            // победил отрицательный платеж
                            Платеж["Сумма"] = 0; //платеж целиком съелся
                            ОтрПлатеж["Сумма"] = -суммаОстатка;
                            // уменьшаем платежи текущего периода
                            //индШаг = ВнестиДетализациюРасчетаСальдо( позТекДог, "ШАГ3", индШаг, мПлатежей[номППТекПлатеж, "Платеж"], списокДокументов.Счет, -суммаОстатка );

                        }
                    }
                }
            }
        }

        // шаг второй - вытаскиваем фактуры за указанный период
        // мы их потом допишем в мСчетов
        var мОбрСчетов = [];
        var мСумСчетов = [];
        for (let ОтрПлатеж of мОтрицательныхПлатежей) {
            if (ОтрПлатеж["Сумма"] !== 0 && ОтрПлатеж["ПлатежПо"] != new Date( '2045-05-09' )) {
                з_фактур.УстановитьПараметры( this.НомерЗаписи, ОтрПлатеж["ПлатежС"], Мин( ОтрПлатеж["ПлатежПо"], ОтрПлатеж["ДатаДокумента"] ), ОтрПлатеж["Аналитика"] );
                while (з_фактур.Следующий()) {
                    if (з_фактур["Сумма"] !== 0) {
                        let СуществующаяСумма = 0;
                        for (let Счет of мСчетов) {
                            if (Счет["Счет"] == з_фактур["row_id"]) {
                                СуществующаяСумма = мСчетов[Счет]["Сумма"];
                            }
                        }

                        // сумма сальдо по документу не может превышать сумму самого документа
                        let СуммаСчета = з_фактур["Сумма"] - (мСумСчетов[з_фактур["row_id"]] ? мСумСчетов[з_фактур["row_id"]] : 0) - СуществующаяСумма;

                        if (СуммаСчета > 0 && ОтрПлатеж["Сумма"] !== 0) {
                            let суммаОстатка = СуммаСчета - ОтрПлатеж["Сумма"];
                            //докручиваем счету всю сумма
                            if (суммаОстатка > 0) {
                                мОбрСчетов[з_фактур["row_id"]]["Сумма"] += ОтрПлатеж["Сумма"];
                                мОбрСчетов[з_фактур["row_id"]]["Сумма2"] += Деньги( ОтрПлатеж["Сумма"] * з_фактур["Сумма2"] / з_фактур["Сумма"] );
                                ОтрПлатеж["Сумма"] = 0;
                                мСумСчетов[з_фактур["row_id"]] += ОтрПлатеж["Сумма"];
                                // вытаскиваем счета на сумму отрицательного платежа
                                // индШаг = ВнестиДетализациюРасчетаСальдо( позТекДог, "ШАГ3", индШаг, списокДокументов.Платеж, з_фактур.row_id, списокДокументов.Сумма );

                            } else {
                                // победил отрицательный платеж
                                мОбрСчетов[з_фактур["row_id"]]["Сумма"] += СуммаСчета; //фактуры не хватило
                                мОбрСчетов[з_фактур["row_id"]]["Сумма2"] += Деньги( СуммаСчета * з_фактур["Сумма2"] / з_фактур["Сумма"] );
                                ОтрПлатеж["Сумма"] -= СуммаСчета; // уменьшаем сумму
                                мСумСчетов[з_фактур["row_id"]] += СуммаСчета;// больше этот счет не трогаем
                                // вытаскиваем счета на сумму отрицательного платежа
                                //индШаг = ВнестиДетализациюРасчетаСальдо( позТекДог, "ШАГ3", индШаг, списокДокументов.Платеж, з_фактур.row_id, СуммаСчета );
                            }
                            мОбрСчетов[з_фактур["row_id"]]["key"] = з_фактур["row_id"] + "_" + з_фактур["Дата"] < МесяцРасчета ? "1" : "2";
                            мОбрСчетов[з_фактур["row_id"]]["ДатаДокумента"] = з_фактур["Дата"];
                            мОбрСчетов[з_фактур["row_id"]]["Месяц"] = з_фактур["РасчМесяц"];
                            мОбрСчетов[з_фактур["row_id"]]["n п/п"] = -1;
                            мОбрСчетов[з_фактур["row_id"]]["rid"] = this.НомерЗаписи;
                            мОбрСчетов[з_фактур["row_id"]]["Аналитика"] = з_фактур["Аналитика"];
                            мОбрСчетов[з_фактур["row_id"]]["Виды-Задолженности"] = -1;
                            мОбрСчетов[з_фактур["row_id"]]["КоэфНДС"] = 1;
                            мОбрСчетов[з_фактур["row_id"]]["Платеж"] = -1;
                            мОбрСчетов[з_фактур["row_id"]]["ПлатежПо"] = new Date( '2045-05-09' );
                            мОбрСчетов[з_фактур["row_id"]]["ПлатежС"] = new Date( '1900-01-01' );
                            мОбрСчетов[з_фактур["row_id"]]["ПоПлатежу"] = -1;
                            мОбрСчетов[з_фактур["row_id"]]["Признак"] = 1;
                            мОбрСчетов[з_фактур["row_id"]]["Приоритет"] = 100;
                            мОбрСчетов[з_фактур["row_id"]]["Разрешение"] = 0;
                            мОбрСчетов[з_фактур["row_id"]]["КоэфНДС"] = -1;
                            мОбрСчетов[з_фактур["row_id"]]["СуммаПлатежа"] = 0;
                            мОбрСчетов[з_фактур["row_id"]]["Счет"] = з_фактур["row_id"];
                        }
                    }
                }
            }
        }

        //шаг третий
        //будем гасить все платежи текущего периода,несмотря на период корректировки
        for (let ОтрПлатеж of мОтрицательныхПлатежей) {
            for (let Платеж of мПлатежей) {
                if (Платеж["Сумма"] !== 0) {
                    // подходит по аналитике и попадает в текущий период
                    if (ОтрПлатеж["Сумма"] !== 0 && Платеж["Аналитика"] == ОтрПлатеж["Аналитика"]) {
                        let суммаОстатка = Платеж["Сумма"] - ОтрПлатеж["Сумма"];
                        if (суммаОстатка > 0) {// победил обычный платеж
                            Платеж["Сумма"] -= ОтрПлатеж["Сумма"];
                            ОтрПлатеж["Сумма"] = 0;
                            //уменьшаем платежи текущего периода
                            //индШаг = ВнестиДетализациюРасчетаСальдо( позТекДог, "ШАГ3", индШаг, мПлатежей[номППТекПлатеж, "Платеж"], списокДокументов.Счет, -списокДокументов.Сумма );

                        } else { // победил отрицательный платеж
                            Платеж["Сумма"] = 0; // платеж целиком съелся
                            ОтрПлатеж["Сумма"] = -суммаОстатка;
                            // уменьшаем платежи текущего периода
                            //индШаг = ВнестиДетализациюРасчетаСальдо( позТекДог, "ШАГ3", индШаг, мПлатежей[номППТекПлатеж, "Платеж"], списокДокументов.Счет, -суммаОстатка );
                        }
                    }
                }
            }
        }

        // шаг четвертый - вытаскиваем все фактуры подряд
        for (let ОтрПлатеж of мОтрицательныхПлатежей) {
            if (ОтрПлатеж["Сумма"] !== 0) {
                з_фактур.УстановитьПараметры( this.НомерЗаписи, new Date( '1900-01-01' ), ОтрПлатеж["ДатаДокумента"], ОтрПлатеж["Аналитика"] );
                while (з_фактур.Следующий()) {
                    if (з_фактур["Сумма"] !== 0) {
                        let СуществующаяСумма = 0;
                        for (let Счет of мСчетов) {
                            if (Счет["Счет"] == з_фактур["row_id"]) {
                                СуществующаяСумма = Счет["Сумма"];
                            }
                        }
                        // сумма сальдо по документу не может превышать сумму самого документа
                        let СуммаСчета = з_фактур["Сумма"] - (мСумСчетов[з_фактур["row_id"]] ? мСумСчетов[з_фактур.row_id] : 0) - СуществующаяСумма;
                        if (СуммаСчета > 0) {
                            let суммаОстатка = СуммаСчета - ОтрПлатеж["Сумма"];
                            // докручиваем счету всю сумма
                            if (суммаОстатка > 0) {
                                мОбрСчетов[з_фактур["row_id"]]["Сумма"] += ОтрПлатеж["Сумма"];
                                мОбрСчетов[з_фактур["row_id"]]["Сумма2"] += (ОтрПлатеж["Сумма"] * з_фактур["Сумма2"] / з_фактур["Сумма"]).toFixed( 2 );
                                ОтрПлатеж["Сумма"] = 0;
                                мСумСчетов[з_фактур["row_id"]] += ОтрПлатеж["Сумма"];
                                // вытаскиваем счета на сумму отрицательного платежа
                                //индШаг = ВнестиДетализациюРасчетаСальдо( позТекДог, "ШАГ3", индШаг, списокДокументов.Платеж, з_фактур.row_id, списокДокументов.Сумма );

                            } else { // победил отрицательный платеж
                                мОбрСчетов[з_фактур["row_id"]]["Сумма"] += СуммаСчета; // фактуры не хватило
                                мОбрСчетов[з_фактур["row_id"]]["Сумма2"] += (СуммаСчета * з_фактур["Сумма2"] / з_фактур["Сумма"]).toFixed( 2 );
                                ОтрПлатеж["Сумма"] -= СуммаСчета; // уменьшаем сумму
                                мСумСчетов[з_фактур["row_id"]] += СуммаСчета;// больше этот счет не трогаем
                                // вытаскиваем счета на сумму отрицательного платежа
                                //индШаг = ВнестиДетализациюРасчетаСальдо( позТекДог, "ШАГ3", индШаг, списокДокументов.Платеж, з_фактур.row_id, СуммаСчета );
                            }
                            мОбрСчетов[з_фактур["row_id"]]["key"] = з_фактур["row_id"] + "_" + з_фактур["Дата"] < МесяцРасчета ? "1" : "2";
                            мОбрСчетов[з_фактур["row_id"]]["ДатаДокумента"] = з_фактур["Дата"];
                            мОбрСчетов[з_фактур["row_id"]]["Месяц"] = з_фактур["РасчМесяц"];
                            мОбрСчетов[з_фактур["row_id"]]["n п/п"] = -1;
                            мОбрСчетов[з_фактур["row_id"]]["rid"] = this.НомерЗаписи;
                            мОбрСчетов[з_фактур["row_id"]]["Аналитика"] = з_фактур["Аналитика"];
                            мОбрСчетов[з_фактур["row_id"]]["Виды-Задолженности"] = -1;
                            мОбрСчетов[з_фактур["row_id"]]["КоэфНДС"] = 1;
                            мОбрСчетов[з_фактур["row_id"]]["Платеж"] = -1;
                            мОбрСчетов[з_фактур["row_id"]]["ПлатежПо"] = new Date( '2045-05-09' );
                            мОбрСчетов[з_фактур["row_id"]]["ПлатежС"] = new Date( '1900-01-01' );
                            мОбрСчетов[з_фактур["row_id"]]["ПоПлатежу"] = -1;
                            мОбрСчетов[з_фактур["row_id"]]["Признак"] = 1;
                            мОбрСчетов[з_фактур["row_id"]]["Приоритет"] = 100;
                            мОбрСчетов[з_фактур["row_id"]]["Разрешение"] = 0;
                            мОбрСчетов[з_фактур["row_id"]]["КоэфНДС"] = -1;
                            мОбрСчетов[з_фактур["row_id"]]["СуммаПлатежа"] = 0;
                            мОбрСчетов[з_фактур["row_id"]]["Счет"] = з_фактур["row_id"];
                        }
                    }
                }
            }
        }

        // добавим в мСчетов все вытащенные нами фактуры, точнее их суммы
        for (let ОбрСчет of мОбрСчетов) {
            if (ОбрСчет["Сумма"] != 0) {
                var ЕстьСчет = false;
                for (let Счет of мСчетов) {
                    if (Счет["Счет"] == ОбрСчет["Счет"]) {
                        Счет["Сумма"] += ОбрСчет["Сумма"];
                        Счет["Сумма2"] += ОбрСчет["Сумма2"];
                        ЕстьСчет = true;
                    }
                }
                if (!ЕстьСчет) {
                    мСчетов.push( мОбрСчетов[ОбрСчет] );
                }
            }
        }

        // и наконец в мПлатежей допишем остатки отрицательных платежей
        // как и раньше они будут висеть в сальдо как фактуры
        for (let ОтрПлатеж of мОтрицательныхПлатежей) {
            if (ОтрПлатеж["Сумма"] != 0) {
                let текПоз = мПлатежей.push( ОтрПлатеж ) - 1;
                мПлатежей[текПоз]["Сумма"] = -мПлатежей[текПоз]["Сумма"];
            }
        }
    }

    _ОбработкаОтрицательныхФактур( мОтрицательныхФактур, мСчетов, мПлатежей ) {
        var мИдОтрицательныхКорСф = [];
        // ШАГ 1 собираем данные по отрицательным фактурам
        // Перебор счетов
        for (let ОтрСчет of мОтрицательныхФактур) {
            let пСчет = ОтрСчет["Счет"];
            // ищем родителя
            this.з_осн_фактура.УстановитьПараметры( пСчет );
            // это кор.фактура со знаком "-"
            if (this.з_осн_фактура.Следующий()) {
                // заносим родителя
                мИдОтрицательныхКорСф[пСчет] = [];
                мИдОтрицательныхКорСф[пСчет].push( this.з_осн_фактура["row_id"] );
                // перебираем кор. фактуры с более ранней датой чем наша
                this.з_кор_фактуры.УстановитьПараметры( ОтрСчет["ДатаДокумента"], this.з_осн_фактура["row_id"] );
                while (this.з_кор_фактуры.Следующий())
                    мИдОтрицательныхКорСф[пСчет].push( this.з_кор_фактуры["row_id"] );
            }
        }
        var индШаг = 0;
        // ШАГ 2 кор.фактуры - гасим родителя и старших братьев
        for (let ОтрСчет of мОтрицательныхФактур) {
            let пСчет = ОтрСчет["Счет"];
            if (мИдОтрицательныхКорСф[пСчет]) { // кор.фактура
                // этот документ еще не обработан
                if (ОтрСчет["Сумма"] != 0) {
                    // это те счета, которые стоит погасить в первую очередь
                    for (let индСвСчет of мИдОтрицательныхКорСф) {
                        let пДок = мИдОтрицательныхКорСф[пСчет][индСвСчет];
                        //найдем данный счет
                        //перебираем все счета
                        for (let Счет of мСчетов) {
                            //это счет нам подходит
                            if (Счет["Счет"] == пДок) {
                                // если сумма 0 значит уже обработан
                                if (Счет["Сумма"] != 0) {
                                    // гасим счет
                                    if (Счет["Разрешение"] == 0 && Счет["Аналитика"] == ОтрСчет["Аналитика"]) {
                                        let суммаОстатка = Счет["Сумма"] - ОтрСчет["Сумма"];
                                        let Сумма2 = 0;
                                        // победил счет
                                        if (суммаОстатка > 0) {
                                            // сумма платежа равна платежу
                                            let суммаПлатежа = ОтрСчет["Сумма"];
                                            Сумма2 = ( суммаОстатка * Счет["КоэфНДС"] ).toFixed( 2 );
                                            Счет["Сумма"] = суммаОстатка;
                                            Счет["Сумма2"] = сумма2;
                                            ОтрСчет["Сумма"] = 0;
                                            // гасим фактуру отрицательной фактурой
                                            //индШаг = ВнестиДетализациюРасчетаСальдо( позТекДог, "ШАГ2", индШаг, списокДокументов.Счет, мСчетов[номППСчета, "Счет"], суммаПлатежа );
                                        } else { // победил платеж
                                            let суммаПлатежа = Счет["Сумма"]; // сумма платежа равна счету
                                            Счет["Сумма"] = 0; // т.е. здесь обнуление в пользу платежа
                                            Счет["Сумма2"] = 0;
                                            ОтрСчет["Сумма"] = -суммаОстатка;
                                            // гасим фактуру отрицательной фактурой
                                            //индШаг = ВнестиДетализациюРасчетаСальдо( позТекДог, "ШАГ2", индШаг, списокДокументов.Счет, мСчетов[номППСчета, "Счет"], суммаПлатежа );
                                        }
                                        // поуменьшать этот же счет в других "именных" платежах
                                        // (иначе может не правильно сформироваеться итоговый массив)
                                        for (let Счет2 of мСчетов) {
                                            if (Счет != Счет2 && Счет["Счет"] == Счет2["Счет"]) {
                                                Счет2["Сумма"] = Счет["Сумма"];
                                                Счет2["Сумма2"] = Сумма2;
                                            }
                                        }
                                        this.мСписокДокументов.push( {
                                            "Счет": Счет["Счет"],
                                            "Платеж": ОтрСчет["Платеж"],
                                            "Сумма": суммаПлатежа,
                                            "Признак": Счет["Признак"]
                                        } );
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        // ШАГ 3 все что осталось
        // это наш отрицательный счет
        for (let ОтрСчет of мОтрицательныхФактур) {
            // этот документ еще не обработан
            if (ОтрСчет["Сумма"] != 0) {
                for (let Счет of мСчетов) {
                    // если сумма 0 значит уже обработан
                    if (Счет["Сумма"] != 0) {
                        // гасим счет
                        if (Счет["Разрешение"] == 0 && Счет["Аналитика"] == ОтрСчет["Аналитика"]) {
                            let суммаПлатежа = 0;
                            let суммаОстатка = Счет["Сумма"] - ОтрСчет["Сумма"];
                            // победил счет
                            if (суммаОстатка > 0) {
                                суммаПлатежа = ОтрСчет["Сумма"]; // сумма платежа равна платежу
                                let Сумма2 = ( суммаОстатка * Счет["КоэфНДС"] ).toFixed( 2 );
                                Счет["Сумма"] = суммаОстатка;
                                Счет["Сумма2"] = Сумма2;
                                ОтрСчет["Сумма"] = 0;
                                // гасим фактуру отрицательной фактурой
                                //индШаг = ВнестиДетализациюРасчетаСальдо( позТекДог, "ШАГ2", индШаг, списокДокументов.Счет, мСчетов[номППСчета, "Счет"], суммаПлатежа );

                            } else { //  победил платеж
                                суммаПлатежа = Счет["Сумма"]; // сумма платежа равна счету
                                let Сумма2 = 0;
                                Счет["Сумма"] = 0; // т.е. здесь обнуление в пользу платежа
                                Счет["Сумма2"] = Сумма2;
                                ОтрСчет["Сумма"] = -суммаОстатка;
                                // гасим фактуру отрицательной фактурой
                                //индШаг = ВнестиДетализациюРасчетаСальдо( позТекДог, "ШАГ2", индШаг, списокДокументов.Счет, мСчетов[номППСчета, "Счет"], суммаПлатежа );
                            }
                            // поуменьшать этот же счет в других "именных" платежах
                            // (иначе может не правильно сформироваеться итоговый массив)
                            for (let Счет2 of мСчетов) {
                                if (Счет != Счет2 && Счет["Счет"] == Счет2["Счет"]) {
                                    Счет2["Сумма"] = Счет["Сумма"];
                                    Счет2["Сумма2"] = Счет["Сумма2"];
                                }
                            }
                            this.мСписокДокументов.push( {
                                "Счет": Счет["Счет"],
                                "Платеж": ОтрСчет["Платеж"],
                                "Сумма": суммаПлатежа,
                                "Признак": Счет["Признак"]
                            } )
                        }
                    }
                }
            }
        }
        // todo зачем в конец ? var НПП = 1000;
        // ШАГ 4 скидываем остатки в мСчетов
        // это наш отрицательный счет
        for (let ОтрСчет of мОтрицательныхФактур) {
            let текИнд = мПлатежей.push( ОтрСчет ) - 1;
            мПлатежей[текИнд]["Платеж"] = мПлатежей[текИнд]["Счет"];
            мПлатежей[текИнд]["Счет"] = -1;
            мПлатежей[текИнд]["Сумма2"] = 0;
        }
    }

    _ОчиститьСальдо( МесяцРасчета, СохранятьСальдо ) {
        if (СохранятьСальдо && (this.РазрешенРасчетЗакрытогоПериода || МесяцРасчета >= ОткрытыйМесяц() ) && this.НомерЗаписи > 0) {
            var cmd = Command( `DELETE FROM ~Сальдо договора~ WHERE [Месяц]=:1 AND [Сальдо-Договор] = :2`, 10, "p1,D,p2,S" );
            cmd.Выполнить( МесяцРасчета, this.НомерЗаписи );
            cmd.Завершить();
            return true;
        }
        return false;
    }

    _ПолучитьПараметрДоговорора( ИмяПараметра, МесяцРасчета ) {
        var ТочноеЗначение = '';
        if (arguments.length > 2)
            ТочноеЗначение = ' and sv.Значение = ' + arguments[2];
        var з_пар = Query( `SELECT top 1 sv.Значение FROM ~Свойства~ sv
                            WHERE sv.[Параметры-Договор] = :1 and sv.[Виды-Параметры]= :2 and :3 between sv.ДатНач and ДатКнц` + ТочноеЗначение, 100, "p1,S,p2,S,p3,D" );
        з_пар.УстановитьПараметры( this.НомерЗаписи, ДанныеПараметра( ИмяПараметра ), МесяцРасчета );
        return з_пар.Следующий() ? з_пар["Значение"] : 0;
    }

    /**
     * @private
     */
    _ПодготовкаЗапросов() {
        // извлекаем входящее сальдо (из Сальдо договора за предыдущий месяц),
        //счета-фактуры и платежи за текущий месяц (анализ по приоритету сальдо и датам)
        this.зСписокДокументов = `;DECLARE @StartDate datetime;
                  DECLARE @EndDate   datetime;
                  DECLARE @PrevDate   datetime;
                  SET @StartDate =:1;
                  SET @EndDate   =:2;
                  SET @PrevDate  =:3;

/*
   по умолчанию приоритет == 100, чтобы можно было вставлять еще меньшие приоритеты,
   избежав отрицательных значений!
   однако для платежей по определенным счетам приоритет выставляется в -100,
   чтобы продвинуть их при сортировке в начало списка
   при разрешении равном нулю документ не участвует в расчете
   и сразу переносится в сальдо
*/
                  WITH

                  SALDO AS
                  (
                        /* Здесь DISTINCT нужен, чтобы объединить записи сальдо счетов-фактур,
                           на которые есть ссылки извне периода расчета (в таблице Связи документов).
                           Если же выберутся записи по связям из периода расчета и вне его,
                           то дублирование будет отсеяно за счет алгоритма расчета,
                           в котором суммы счетов (являющихся копиями одного счета)
                           уменьшаются параллельно.
                           Для сальдо по платежам дублирований возникать не будет.
                         */
                     SELECT DISTINCT
                            -1 AS [N п/п],
                            saldo.[Счет-Сальдо] AS [Счет],
                            saldo.[Платеж-Сальдо] AS [Платеж],
                            saldo.[Месяц], saldo.[ДатаДокумента],
                            saldo.[Сальдо-Договор] AS RID,
                              /* проверить не пришел ли через входящее сальдо платеж */
                            CASE WHEN saldo.[Платеж-Сальдо] <> -1 THEN -saldo.[Сумма] ELSE saldo.[Сумма] END AS [Сумма],
                              /* для платежей Сумма2 всегда 0 */
                            saldo.[Сумма2],
                              /* посчитать коэф-т отношения суммы без НДС к общей сумме для счетов (понадобится в исходящем сальдо) */
                            CASE WHEN saldo.[Платеж-Сальдо] <> -1
                                 THEN 0
                                 ELSE CASE WHEN truebill.[Сумма] = 0
                                          THEN 0
                                          ELSE truebill.[Сумма2] / truebill.[Сумма]
                                      END
                            END AS [КоэфНДС],
                            CONVERT(VARCHAR, SALDO.ROW_ID) + '_1' AS [key],
                              /* разобраться с приоритетами и разрешениями, выставленными на входящее сальдо */
                            ISNULL( tod.[Приоритет оплаты], 100 ) AS [Приоритет],
                            ISNULL( tod.[Разрешение], 0 ) AS [Разрешение],
                            ISNULL( saldo.[Виды-Задолженности], -1 ) AS [Виды-Задолженности],
                              /* проверить не пришел ли через входящее сальдо платеж */
                            CASE WHEN saldo.[Платеж-Сальдо] <> -1 THEN 3 ELSE 1 END AS [Признак],
                              /* проверять есть ли у входящих счетов ссылки на платежи в рассчитываемом месяце */
                            CASE WHEN bill.row_id is null THEN -1 ELSE ISNULL(ld.[Связка2],-1) END AS [ПоПлатежу],
                            CASE WHEN bill.row_id is null THEN 0 ELSE ISNULL(ld.[Сумма],0) END AS [СуммаПлатежа],
                            CASE WHEN pay.Аналитика is null THEN ISNULL(truebill.Аналитика,'') ELSE ISNULL(pay.Аналитика,'') END AS [Аналитика],
                            CASE WHEN pay.ПлатежС is null THEN ISNULL(truebill.ПлатежС,'') ELSE ISNULL(pay.ПлатежС,'') END AS [ПлатежС],
                            CASE WHEN pay.ПлатежПо is null THEN ISNULL(truebill.ПлатежПо,'20450509') ELSE ISNULL(pay.ПлатежПо,'20450509') END AS [ПлатежПо]


                     FROM ~Сальдо договора~  saldo
                     INNER JOIN #SaldoDog sd on sd.ROW_ID = saldo.[Сальдо-Договор]
                        LEFT JOIN ~Связи документов~  ld ON ld.[Связка1]=saldo.[Счет-Сальдо] AND saldo.[Счет-Сальдо]<>-1
                           /* здесь LEFT JOIN, чтобы получать записи сальдо без связанных документов */
             /* вытаскиваем платежи связанные с фактурами, если есть выписка, то по дате выписки, иначе по дате платежа */
                        LEFT JOIN (SELECT doc.row_id
                                     FROM ~Документ~  doc
                                LEFT JOIN ~Документ~  vyp on vyp.ROW_ID = doc.[Платеж-Выписка]
                                    WHERE doc.[Документы-Договор] IN (SELECT ROW_ID FROM #SaldoDog)  and
                                         ( doc.[Платеж-Выписка] != -1 and vyp.Дата BETWEEN @StartDate AND @EndDate OR
                                          (doc.[Платеж-Выписка]  = -1 and doc.Дата BETWEEN @StartDate AND @EndDate) )
                                   ) bill ON ld.[Связка2] = bill.row_id
                           /* виды задолженности во входящем сальдо влияют на приоритет в расчете */
                        LEFT JOIN ~Виды задолженности~  tod ON tod.row_id = saldo.[Виды-Задолженности]
                           /* для сальдо по счетам надо получить из связанного счета Сумму и Сумму2, чтобы посчитать коэф-т для расчета Суммы2 в исходящем сальдо */
                        LEFT JOIN ~Документ~  truebill ON truebill.row_id=saldo.[Счет-Сальдо] AND saldo.[Счет-Сальдо]<>-1
                        LEFT JOIN ~Документ~  pay ON pay.row_id=saldo.[Платеж-Сальдо] AND saldo.[Платеж-Сальдо]<>-1
                     WHERE saldo.[Месяц]=@PrevDate
                  ),
                  BILLS AS
                  (  /* здесь DISTINCT, чтобы объединить ссылки на счет из документов не в периоде расчета
                        (например, в будущем времени, хотя такого быть не должно!)
                      */
                     SELECT DISTINCT
                            -1 AS [N п/п],
                            bill.row_id AS [Счет],
                            -1 AS [Платеж],
                            @StartDate AS [Месяц], bill.[Дата] AS [ДатаДокумента],
                            bill.[Документы-Договор] AS RID,
                            bill.[Сумма],
                            bill.[Сумма2],
                            CASE WHEN bill.[Сумма] = 0 THEN 0 ELSE bill.[Сумма2] / bill.[Сумма] END AS [КоэфНДС],
                            CONVERT(VARCHAR, bill.ROW_ID) + '_2' AS [key],
                            100 AS [Приоритет],
                            0 AS [Разрешение],
                            -1 AS [Виды-Задолженности],
                            2 AS [Признак],
                            CASE WHEN pay.row_id is null THEN -1 ELSE ISNULL(ld.[Связка2],-1) END AS [ПоПлатежу],
                            CASE WHEN pay.row_id is null THEN 0 ELSE ISNULL(ld.[Сумма],0) END AS [СуммаПлатежа],
                            bill.[Аналитика],
                            ISNULL(bill.[ПлатежС],'') ПлатежС,
                            ISNULL(bill.[ПлатежПо],'20450509') ПлатежПо
                     FROM ~Документ~  bill
                     INNER JOIN #SaldoDog sd on sd.ROW_ID = bill.[Документы-Договор]

                        LEFT JOIN ~Связи документов~  ld ON ld.[Связка1]=bill.ROW_ID
             /* вытаскиваем платежи связанные с фактурами, если есть выписка, то по дате выписки, иначе по дате платежа */
                        LEFT JOIN (SELECT doc.row_id
                                     FROM ~Документ~  doc
                                LEFT JOIN ~Документ~  vyp on vyp.ROW_ID = doc.[Платеж-Выписка]
                                    WHERE doc.[Документы-Договор] IN (SELECT ROW_ID FROM #SaldoDog)  and
                                         ( doc.[Платеж-Выписка] != -1 and vyp.Дата BETWEEN @StartDate AND @EndDate OR
                                          (doc.[Платеж-Выписка]  = -1 and doc.Дата BETWEEN @StartDate AND @EndDate) )
                                   ) pay ON ld.[Связка2]=pay.row_id
                     WHERE bill.[Тип документа] in (35) AND bill.[Дата] BETWEEN @StartDate AND @EndDate
                  ),
                  PAYS AS
                  (  /* здесь нужен DISTINCT, чтобы отсечь связанные счета */
                     SELECT DISTINCT
                            -1 AS [N п/п],
                            -1 AS [Счет],
                            pay.row_id  AS [Платеж],
                            @StartDate AS [Месяц],
                            coalesce(vyp.Дата, pay.Дата) AS ДатаДокумента,
                            pay.[Документы-Договор] AS RID,
                            pay.[Сумма],
                            0 AS [Сумма2],
                            0 AS [КоэфНДС],
                            CONVERT(VARCHAR, pay.ROW_ID) + '_3' AS [key],
                            /*CASE WHEN  ld.ROW_ID <> -1 THEN -100 ELSE 100 END AS [Приоритет],*/
                            100 as [Приоритет],
                            0 AS [Разрешение],
                            -1 AS [Виды-Задолженности],
                            3 AS [Признак],
                            -1 AS [ПоПлатежу],
                            0 AS [СуммаПлатежа],
                            pay.[Аналитика],
                            ISNULL(pay.[ПлатежС],'') ПлатежС,
                            ISNULL(pay.[ПлатежПо],'20450509') ПлатежПо
                     FROM ~Документ~  pay
                     INNER JOIN #SaldoDog sd on sd.ROW_ID = pay.[Документы-Договор]

                        LEFT JOIN ~Связи документов~  ld ON ld.[Связка2]=pay.ROW_ID
                        LEFT JOIN ~Документ~  vyp on vyp.ROW_ID=pay.[Платеж-Выписка] and pay.[Тип документа]=21
                     WHERE pay.[Тип документа] in (11,21,23) AND
                           (vyp.Дата BETWEEN @StartDate AND @EndDate OR
                               (vyp.ROW_ID is null and pay.Дата BETWEEN @StartDate AND @EndDate)
                           )
                  ),
                  REVS AS
                  (
                     SELECT ld.[N п/п],
                            CASE WHEN doc."Тип документа" in (11,21,23) THEN -1 ELSE doc.ROW_ID END AS "Счет",
                            CASE WHEN doc."Тип документа" in (11,21,23) THEN doc.ROW_ID ELSE -1 END AS "Платеж",
                            @StartDate AS "Месяц",
                            doc.[Дата] AS [ДатаДокумента],
                            rev.[Документы-Договор] AS RID,
                            /* ld.[Сумма] - это сумма сторно по документу */
                            ld.[Сумма],
                            /* получить Сумма2 и КоэфНДС только для счетов */
                            CASE WHEN doc.[Тип документа] in (11,21,23) THEN 0 ELSE doc.[Сумма2] END AS [Сумма2],
                            CASE WHEN doc.[Тип документа] in (11,21,23)
                              THEN 0
                              ELSE
                                 CASE WHEN doc.[Сумма] = 0 THEN 0 ELSE doc.[Сумма2] / doc.[Сумма] END
                              END AS [КоэфНДС],
                            CONVERT(VARCHAR, doc.ROW_ID) + '_4' AS "key",
                            100 AS "Приоритет",
                            0 AS "Разрешение",
                            -1 AS "Виды-Задолженности",
                            CASE WHEN doc.[Тип документа] in (11,21,23) THEN 3 ELSE 1 END AS [Признак],
                            -1 AS "ПоПлатежу",
                            0 AS "СуммаПлатежа",
                            doc.[Аналитика],
                            ISNULL(doc.[ПлатежС],'') ПлатежС,
                            ISNULL(doc.[ПлатежПо],'20450509') ПлатежПо
                     FROM ~Документ~  rev
                     INNER JOIN #SaldoDog sd on sd.ROW_ID = rev.[Документы-Договор]
                        INNER JOIN ~Связи документов~  ld ON ld.[Связка2]=rev.ROW_ID
                        LEFT JOIN ~Документ~  doc ON ld.[Связка1]=doc.row_id
                     WHERE rev.[Тип документа] = 91 AND rev.[Дата] BETWEEN @StartDate AND @EndDate
                  )
                 SELECT * FROM (
                     SELECT * FROM SALDO
                     UNION ALL
                     SELECT * FROM BILLS
                     UNION ALL
                     SELECT * FROM PAYS
                     UNION ALL
                     SELECT * FROM REVS
                  ) ALLES
                 ORDER BY  [RID], [Приоритет] , case when ПлатежС='' then '20450509' else ПлатежС end, [ДатаДокумента], [key]`;
        this.з_осн_фактура = Query( `select sv.Связка1 as row_id, doc.Дата
                                from ~Связи документов~ sv
                                join ~Документ~ doc on doc.row_id = sv.Связка1
                                                         and doc.[тип документа] = 35
                                where sv.Связка2 =:1 and (sv.Флаги & 128) > 0`, 1, "doc,S" );

        // поиск ранее выставленных кор.фактур
        this.з_кор_фактуры = Query( `select sv.Связка2 as row_id, doc.Дата
                               from ~Связи документов~ sv
                               join ~Документ~ doc on doc.row_id = sv.Связка2
                                                        and doc.[тип документа] = 35
                                                        and doc.Сумма>0
                                                        and doc.Дата<:1
                               where sv.Связка1 =:2 and (sv.Флаги & 128) > 0
                               order by doc.Дата desc`, 1, "p1,D,p2,S" );
        //поиск документов в указанном периоде
        this.з_фактур = Query( `Select row_id, сумма, сумма2, дата, расчМесяц, Аналитика
                           from ~документ~
                           where [документы-договор]=:1 and дата between :2 and :3 and аналитика=:4 and
                                 [тип документа]=35
                           order by Дата desc`, 100, "p1,S,p2,D,p3,D,p4,A" );

    }

    /**
     * Обороты договора
     * @param {Date} МесяцРасчета
     * @returns {{Дебет: number, Кредит: number, СторноДебет: number, СторноКредит: number}} Объект с полями Дебет,Кредит,СтроноДебет,СторноКредит
     */
    ИтоговыеОборотыДоговора( МесяцРасчета ) {
        var Обороты = {"Дебет": 0, "Кредит": 0, "СторноДебет": 0, "СторноКредит": 0};
        let з_док = Query( `Select SUM(case when [Тип документа] in (35,28) then Сумма else 0 end) as Дебет
                                                ,SUM(case when [Тип документа] in (23,21) then Сумма else 0 end) as Кредит
                                                ,SUM(case when ([Тип документа] in (91) and ВидСчета in (0,4)) then -Сумма else 0 end) as СторноДебет
                                                ,SUM(case when ([Тип документа] in (91) and ВидСчета in (1,2,3,5)) then -Сумма else 0 end) as СторноКредит
                                          from ~Документ~
                                          Where [Документы-Договор] =:1 and [Дата] BETWEEN :2 AND :3
                                 `, 1000, "p1,S,p2,D,p3,D" );
        з_док.УстановитьПараметры( this.НомерЗаписи, МесяцРасчета, МесяцРасчета.ПоследнееЧисло() );
        if (з_док.Следующий()) {
            Обороты.Дебет += з_док.Дебет + з_док.СторноДебет;
            Обороты.Кредит += з_док.Кредит + з_док.СторноКредит;
            Обороты.СторноДебет += з_док.СторноДебет;
            Обороты.СторноКредит += з_док.СторноКредит;
        }
        return Обороты;
    }

    ИтоговоеСальдоДоговора( МесяцРасчета ) {
        if (this.НомерЗаписи > 0) {
            var запросСуммы = Query( `;DECLARE @StartDate datetime;
                                      DECLARE @EndDate   datetime;
                                      DECLARE @rid int;
                     SET @StartDate = :1;
                     SET @EndDate   = :2;
                     SET @rid       = :3;

                     SELECT SUM([Сумма]) AS [Сумма]
                     FROM(
                        SELECT SUM([Сумма]) AS [Сумма] FROM ~Сальдо договора~ Where [Сальдо-Договор]=@rid AND [Месяц]=@StartDate

                        UNION ALL

                        SELECT sum(d1.[Сумма]) AS [Сумма] FROM ~Документ~ d1
                        WHERE d1.[Документы-Договор]=@rid AND d1.[Тип документа]=1 AND
                              d1.[Дата] BETWEEN @StartDate AND @EndDate AND
                              NOT EXISTS (SELECT ROW_ID FROM ~Документ~ d2
                                          WHERE d2.[Документы-Договор]=@rid AND d2.[Тип документа]=35 AND
                                                d2.[Дата] BETWEEN d1.[Дата] AND @EndDate)) Q`, 10, "DB,D,DE,D,DOC,S" );
            запросСуммы.УстановитьПараметры( МесяцРасчета, МесяцРасчета.ПоследнееЧисло(), this.НомерЗаписи );
            return запросСуммы.Следующий() > 0 ? запросСуммы.Сумма : 0;
        }
        return 0;
    }

    ПолучитьСуммуСальдо( МесяцРасчета ) {
        if (this.НомерЗаписи > 0) {
            var запросСуммы = Query( `Select SUM(Сумма) Сумма from ~Сальдо договора~
                                          where [Сальдо-Договор]=:1 and [Месяц]=:2`, 10, "p1,S,p2,D" );
            запросСуммы.УстановитьПараметры( this.НомерЗаписи, МесяцРасчета );
            return запросСуммы.Следующий() > 0 ? запросСуммы.Сумма : 0;
        }
        return 0;
    }

    /**
     * @Deprecated Не пользоватся - возможно будет выпилен
     * @Private
     */
    _ЗаполнитьИерархию( мСписокДоговоров ) {
        var Поле = "row_id";
        var ЗначенияПоля;
        if (typeof мСписокДоговоров == "number") {
            if (мСписокДоговоров <= 0) {
                Поле = "[Папки]";
                ЗначенияПоля = -10;
            }
            else ЗначенияПоля = мСписокДоговоров;
        }
        else
            ЗначенияПоля = мСписокДоговоров.toCommaString();

        var cmd = Command( ` TRUNCATE TABLE #SaldoDog;
                             WITH Parent AS
                              (
                                 SELECT ROW_ID, [Папки],[Папки_ADD]
                                 FROM ~Договор~
                                 WHERE ` + Поле + ` in (` + ЗначенияПоля + `)
                                 UNION ALL
                                 SELECT Child.ROW_ID, Child.[Папки], Child.[Папки_ADD]
                                 FROM ~Договор~ Child
                                 INNER JOIN Parent on Parent.ROW_ID = Child.[Папки]
                              )
                         INSERT INTO #SaldoDog ( ROW_ID )
                         SELECT distinct Parent.ROW_ID
                         FROM Parent
                         WHERE Parent.Папки_ADD=1`, 1, "" );
        cmd.Выполнить();
        cmd.Завершить();
    }
}
