/**
 * Created by Константин on 10.07.2015.
 */
"use strict";

/**
 * from email_hdl
 * @extends БазоваяВыборка
 * @class класс Электронные_сообщения - обработчик Выборки 'Электронные сообщения' браузера электронной почты
 */
class Электронные_сообщения extends БазоваяВыборка {
    constructor() {
        super( arguments[0] ? arguments[0] : 'Электронные сообщения', arguments[1] ? arguments[1] : 'Электронная почта' );
        this.ЕстьВложение = Query( "SELECT row_id FROM ~Сообщения Вложения~ WHERE [Вложение-Заголовок]=:1 AND Тип=0",
            1, "head,S" );
        //this.зПризнаки = Query( "SELECT Признаки FROM ~Сообщения Заголовок~ WHERE ROW_ID=:1", 1, "id,S" );
    }
    Расчет(){ //+
        if( ЭтоУзел(this.Запись) ){
            this.Запись.Обработано = 0;
            this.Запись.Блокировать = 0;
            return 0;
        }
        this.Запись.Обработано =  this.Запись.Признаки & 2 ? 2 : 1;
        this.Запись.Блокировать = this.Запись.Признаки & 64 ? 1 : 2;
        var сегодня = new Date();
        if( this.Запись.ДатаСоздания.equalsWithoutTime(сегодня) ) {
            this.Запись.Отб_создано = this.Запись.Создано.substr(this.Запись.Создано.indexOf(' ') + 1);
        } else {
            this.Запись.Отб_создано = this.Запись.Создано;
        }
        if( this.Запись.ДатаПолучения.equalsWithoutTime(сегодня) ) {
            this.Запись.Отб_получено = this.Запись.Получено.substr(this.Запись.Получено.indexOf(' ') + 1);
        } else {
            this.Запись.Отб_получено = this.Запись.Получено;
        }
    }
    Цвет(){ //+
        if( ЭтоУзел(this.Запись) ) return this.ЦветЗаписи(0);
        // полученное письмо отметим жирным шрифтом
        if( this.Запись.Признаки == 0 & this.Запись['Папка>Вид'] == 10 & this.Запись.ДатаПолучения == new Date() ) {
            return "Шрифт*Пустой,Ж";
        } else if( this.Запись['Организация-Сообщения'] == -1 & (this.Запись.Признаки & 256) == 0 )
            return this.ЦветЗаписи('темно-зеленый');
        return this.ЦветЗаписи(0);
    }
    Картинка(){ //+
        if( ЭтоУзел(this.Запись) ){
            return "Состояние,1;Блокировать,12;Вложение,0;Обработано,12;";
        }
        var рез = "";
        var признакиСообщения = this.Запись.Признаки;
        // Обрабатываем состояние сообщения
        if( признакиСообщения == 0 ){         // непрочитано
            рез += "Состояние,0;";
        } else if( признакиСообщения & 32 ) { // Ответ
            рез += "Состояние,8;";
        } else if( признакиСообщения & 16 ) { // Переслано
            рез += "Состояние,3;";
        } else if( признакиСообщения & 8 ) {  // Отправлено - простое письмо (прочитанное)
            рез += "Состояние,6;";
        } else if( признакиСообщения & 4 ) {  // Перенаправлено
            рез += "Состояние,7;";
        } else if( признакиСообщения & 1 ) {  // прочитано
            рез += "Состояние,6;";
        }
        // обрабатываем состояние блокировки сообщения
        if( признакиСообщения & 64 ) рез += "Блокировать,13;";

        // обрабатываем наличие вложения сообщения
        this.ЕстьВложение.УстановитьПараметры( НомерЗаписи(this.Запись) );
        if( this.ЕстьВложение.Следующий() ) рез += "Вложение,2;";

        // проверяем признак обработки сообщения
        if( признакиСообщения & 2 ) рез += "Обработано,11;";
        return рез;
    }
    Инициализация(){
        if( this.Запись.Папка == -10 && !ЭтоУзел(this.Запись) ){
            var ящик = this.ВыбратьЯщик( true );
            if( !ящик ) {
                return 1;
            } else {
                this.Запись.Папка = ящик.НомерЗаписи;
            }
        }
    }
    Выбор_диалога(){ //+
        if( ЭтоУзел(this.Запись) ) {
            if( this.Запись.Папка == -10 ) return "Электронный ящик";
            return "ЭлектроннаяПочта Папка";
        }
        var сообщение = new кЭлСообщение( this.Запись.Папка );
        сообщение.ПрочитатьЯщик();
        if( НомерЗаписи(this.Запись) == -1 ){
            if( сообщение.Ящик.ЭтоHtml() ) return "ЭлектронноеСообщение Создание HTML";
            return "ЭлектронноеСообщение Создание";
        }
        var видПапки = сообщение.ТипСообщения();
        if( видПапки == 11 ){ // только для исходящего сообщения разрешаем его изменение
            if( сообщение.Ящик.ЭтоHtml() ) return "ЭлектронноеСообщение Изменение HTML";
            return "ЭлектронноеСообщение Изменение";
        }
        return "ЭлектронноеСообщение";
    }
    Открытие(){ //+
        //if( НомерЗаписи(this.Запись) == -1 ) return 1;

        // блокируем редактирование служебных папок
        if( this.Запись['Папка>Папка'] == -10 && кЭлЯщик.ЭтоСлужебнаяПапка(this.Запись.ОтКого) ) return 1;
    }
    Удаление(){
        // не удаляем из браузер ящик и его служебные папки
        if( this.Запись.Вид == 9 || кЭлЯщик.ЭтоСлужебнаяПапка(this.Запись.Вид) ) return 1;
    }
    Перемещение(){
        var сообщение = new кЭлСообщение( this.Запись.Папка );
        if( сообщение.ТипСообщения() == 13 ){ // при перемещении в корзину устанавливаем признак письма "Удалено"
            this.Запись.Признаки |= 512;
        } else { // при восстановлении письма из корзины сбрасываем этот признак
            this.Запись.Признаки &= ~512;
        }
    }
    Копирование(){
        if( this.Запись.Папка = -10 && this.Запись.Вид == 9 ) {
            var транспорт = new БазовыйОбъект( "Сообщения Транспорт" );
            транспорт.ПрочитатьИзКонтекста({ 'Тип' : this.Запись['Сообщение-Транспорт>Тип'],
                'Название' : this.Запись['Сообщение-Транспорт>Название'],
                'ВхСервер' : this.Запись['Сообщение-Транспорт>ВхСервер'],
                'ВхПароль' : this.Запись['Сообщение-Транспорт>ВхПароль'],
                'ИсхСервер' : this.Запись['Сообщение-Транспорт>ИсхСервер'],
                'ВхПорт' : this.Запись['Сообщение-Транспорт>ВхПорт'],
                'ИсхПорт' : this.Запись['Сообщение-Транспорт>ИсхПорт'],
                'ВхЛогин' : this.Запись['Сообщение-Транспорт>ВхЛогин'],
                'ИсхЛогин' : this.Запись['Сообщение-Транспорт>ИсхЛогин'],
                'ИсхПароль' : this.Запись['Сообщение-Транспорт>ИсхПароль'],
                'ТрПризнаки' : this.Запись['Сообщение-Транспорт>ТрПризнаки'],
                'ОтОрганизация' : this.Запись['Сообщение-Транспорт>ОтОрганизация'],
                'ОтФио' : this.Запись['Сообщение-Транспорт>ОтФио'],
                'ОтЭлАдрес' : this.Запись['Сообщение-Транспорт>ОтЭлАдрес'],
                'Шифр' : this.Запись['Сообщение-Транспорт>Шифр']
            });
            this.Запись['Сообщение-Транспорт'] = транспорт.Внести();
        }
    }

    /**
     * установить/сбросить признак сообщения 'Заблокировано'
     * @returns {number} 1 значит, что событие обработано
     */
    КП9(){ //+
        var записи = this.ПолучитьВыделенныеЗаписи( false );
        var сообщение = new кЭлСообщение();
        for( let нз of записи ){
            сообщение.Прочитать( нз );
            if( сообщение.Объект.Признаки & 64 ) {
                сообщение.СброситьПризнак( "Заблокировано" );
            } else {
                сообщение.УстановитьПризнак( "Заблокировано" );
            }
            ОбновитьЗапись( this.ИмяОкна, нз );
        }
        return 1;
    }
    /**
     * установить/сбросить признак сообщения 'Обработано'
     * @returns {number} 1 значит, что событие обработано
     */
    КП8(){ //+
        var записи = this.ПолучитьВыделенныеЗаписи( false );
        var сообщение = new кЭлСообщение();
        for( let нз of записи ){
            сообщение.Прочитать( нз );
            if( сообщение.Объект.Признаки & 2 ) {
                сообщение.СброситьПризнак( "Обработано" );
            } else {
                сообщение.УстановитьПризнак( "Обработано" );
            }
            ОбновитьЗапись( this.ИмяОкна, нз );
        }
        return 1;
    }

    /**
     * сохранить письмо в файл по шаблону "Сохранение" в ящике
     * @returns {number} 1 значит, что событие обработано
     */
    КП7(){ //+
        if( НомерЗаписи(this.Запись) != -1 && !ЭтоУзел(this.Запись) ){
            var файл = ВыбратьФайл( "Сохранить письмо в файл...", "*.txt,Текстовые файлы (*.txt)", 1, "txt" );
            if( файл ){
                var сообщение = new кЭлСообщение( this.Запись );
                сообщение.ПрочитатьЯщик();
                var шаблон = new кЭлШаблон( "Сохранение", сообщение.Ящик.ИдТранспорт, сообщение.Ящик.ЭтоHtml() );
                шаблон.Прочитать();
                var оФайл = СоздатьФайл( файл );
                ЗаписатьФайл( оФайл, шаблон.Разобрать(сообщение, this.Запись.Тема, this.Запись.Кому) );
                ЗакрытьФайл( оФайл );
                ВсплывающееОкно( 'Сообщение сохранено в файле "' + файл + '"' );
            } else Сообщить( "Отменено пользователем." );
        }
        return 1;
    }

    /**
     * сохраняет исходный текст текущего письма в выбранный файл
     * @returns {number} 1 значит, что событие обработано
     */
    КП6(){ //+
        var сообщение = new кЭлСообщение( this.Запись );
        if( !ЭтоУзел(this.Запись) && сообщение.НомерЗаписи != -1 ){
            var файл = ВыбратьФайл( "Сохранить исходный текст письма...", "*.eml,Файлы почты (*.eml)", 1, "eml" );
            if( файл ){
                var текст = сообщение.ИсходныйТекст();
                if( текст ){
                    var оФайл = СоздатьФайл( файл );
                    ЗаписатьФайл( оФайл, текст );
                    ЗакрытьФайл( оФайл );
                    ВсплывающееОкно( 'Исходный текст сохранен в файле "' + файл + '"' );
                }
            } else Сообщить( "Отменено пользователем." );
        }
        return 1;
    }

    /**
     * отправить ответ на сообщение
     * @returns {number} 1 значит, что событие обработано
     */
    КП3(){ //+
        if( !ЭтоУзел(this.Запись) ) new кЭлСообщение( this.Запись ).Ответить( "Ответ" );
        return 1;
    }
    /**
     * перенаправить сообщение
     * @returns {number} 1 значит, что событие обработано
     */
    КП2(){ //+
        if( !ЭтоУзел(this.Запись) ) new кЭлСообщение( this.Запись ).Ответить( "Перенаправить" );
        return 1;
    }
    /**
     * переслать сообщение
     * @returns {number} 1 значит, что событие обработано
     */
    КП1(){ //+
        if( !ЭтоУзел(this.Запись) ) new кЭлСообщение( this.Запись ).Ответить( "Переслать" );
        return 1;
    }

    /**
     * создает меню с имеющимися почтовыми ящиками для выбора
     * @param выбрать - если true, то позволяет выбрать ящик, если false - возвращает текущий ящик
     * @returns {кЭлЯщик} - выбранный ящик или null, если не было выбрано ящика
     */
    ВыбратьЯщик( выбрать ){
        var ящик = null;
        if( выбрать ){
            var зЯщики = Query( 'SELECT ROW_ID, ОтКого FROM ~Сообщения Заголовок~ WHERE Папка=-10 AND [Папка_ADD]=0 AND Вид=9 ' +
                'ORDER BY ОтКого', 100 );
            зЯщики.УстановитьПараметры();
            var ящики = '', мЯщики = [], i = 0;
            while( зЯщики.Следующий() ){
                if( ящики ) ящики += '\n';
                ящики += зЯщики.ОтКого;
                мЯщики[i++] = зЯщики.ROW_ID;
            }
            var выбор = Меню( ящики );
            if( выбор > 0 ) ящик = new кЭлЯщик( мЯщики[выбор-1] );
        } else {
            var позиция = ПозицияКурсора( "Электронная почта", "Электронные сообщения", "ф" );
            var сообщение = new кЭлСообщение( позиция );
            if( сообщение.ПрочитатьЯщик() ) ящик = сообщение.Ящик;
        }
        return ящик;
    }

    /**
     * создает новое сообщение ящика для отправки
     * @param выбрать - если true, то позволяет выбрать ящик, если false - создает сообщение в текущем ящике
     */
    СоздатьСообщениеЯщик( выбрать ){ //+
        var ящик = this.ВыбратьЯщик( выбрать );
        if( ящик ) new кЭлСообщение( ящик.НомерЗаписи ).Ответить( 'Создание' );
    }
    /**
     * создать сообщение для отправки в текущем ящике - там где стоит курсор
     */
    СоздатьСообщение(){ //+
        this.СоздатьСообщениеЯщик( false );
    }
    /**
     * создать сообщение для отправки в выбранном ящике
     */
    СоздатьСообщениеДоп(){ //+
        this.СоздатьСообщениеЯщик( true );
    }

    /**
     * получает новые сообщения почтового ящика с сервера
     * @param выбрать - если true, то позволяет выбрать ящик, если false - получает сообщения текущего ящика
     */
    ПолучитьСообщенияЯщик( выбрать ){ //+
        var ящик = this.ВыбратьЯщик( выбрать );
        if( ящик ){
            СоздатьОкноСостояния( "ЭлектроннаяПочта Состояние",
                "Сообщение", "Соединение с сервером " + ящик.Транспорт.Объект.ВхСервер + " / POP3" );
            if( ящик.УстановитьПочту(false) ) {
                УстановитьПоляОкнаСостояния( "Сообщение1", "Соединение установлено." );
                УдалитьОкноСостояния();
                if( ящик.Соединить() ){
                    var диспетчер = СоздатьДиалог( "ЭлектроннаяПочта Получить" );
                    диспетчер.Обработчик.Ящик = ящик;
                    диспетчер.Выполнить();
                    //УдалитьПеременную( диспетчер );
                }
            }
        }
    }

    /**
     * получает сообщения текущего ящика - там где стоит курсор
     */
    ПолучитьСообщения(){ //+
        this.ПолучитьСообщенияЯщик( false );
    }
    /**
     * получает сообщения выбранного ящика
     */
    ПолучитьСообщенияДоп(){ //+
        this.ПолучитьСообщенияЯщик( true );
    }

    /**
     * отпраляет исходящие сообщения ящика
     * @param выбрать - если true, то позволяет выбрать ящик, если false - отправлят сообщения текущего ящика
     */
    ОтправитьСообщенияЯщик( выбрать ){ //+
        var ящик = this.ВыбратьЯщик( выбрать );
        if( ящик ) {
            СоздатьОкноСостояния( "ЭлектроннаяПочта Состояние", "Сообщение", "Соединение с " + ящик.Название + "..." );
            ящик.ОтправитьСообщения();
            УдалитьОкноСостояния();
        }
    }

    /**
     * отправить исходящие сообщения текущего ящика - там где стоит курсор
     */
    ОтправитьСообщения(){ //+
        this.ОтправитьСообщенияЯщик( false );
    }
    /**
     * отправить исходящие сообщения выбранного ящика
     */
    ОтправитьСообщенияДоп(){ //+
        this.ОтправитьСообщенияЯщик( true );
    }
}

/**
 * @class КладрДиалог - Общая часть обработчиков диалогов, использующих данные кладра
 * @extends БазовыйДиалог
 */
class КладрДиалог extends БазовыйДиалог {
    constructor() {
        super( arguments[0] );

        this.ЗапросГорода = Query( "SELECT Кладр, Сокращение + ' ' + Название [Название] FROM ~Города~ WHERE ROW_ID=:1", 1, "S,S" );
        this.ЭлСтрана = null;
        this.ЭлОбласть = null;
        this.ЭлРайон = null;
        this.ЭлГород = null;
        this.ЭлУлица = null;

        this.ИмяПоляСтрана = '';
        this.ИмяПоляОбласть = '';
        this.ИмяПоляРайон = '';
        this.ИмяПоляГород = '';
        this.ИмяПоляУлица = '';
    }

    /**
     * устанавливает запрос в комбобокс страны и посылает команду установить запросы в остальные элементы
     * вызывать пссле определения имен комбобоксов и установки им значений
     */
    Инициализация(){
        super.Инициализация();
        if( this.ИмяПоляСтрана ) {
            this.ЭлСтрана = ComboBox( this.ИмяДиалога, this.ИмяПоляСтрана );
            this.ЭлСтрана.Фильтр( this.Запись[this.ИмяПоляСтрана] );
            this.УстановитьЗапросСтрана( this.ИмяПоляСтрана );
        }
        // посылаем команду "КП0", чтобы на нее набрать списки в другие комбобоксы
        // но при этом не трмозить на инициализации
        КомандаОкну( "USER_CMD0", this.ИмяДиалога );
    }
    КП0(){
        if( this.ИмяПоляОбласть ){
            this.ЭлОбласть = ComboBox( this.ИмяДиалога, this.ИмяПоляОбласть );
            this.ЭлОбласть.Фильтр( this.Запись[this.ИмяПоляОбласть] );
            this.УстановитьЗапросОбласть( this.ИмяПоляОбласть );
        }
        if( this.ИмяПоляРайон ){
            this.ЭлРайон = ComboBox( this.ИмяДиалога, this.ИмяПоляРайон );
            this.ЭлРайон.Фильтр( this.Запись[this.ИмяПоляРайон] );
            this.УстановитьЗапросРайон( this.ИмяПоляРайон );
        }
        if( this.ИмяПоляГород ){
            this.ЭлГород = ComboBox( this.ИмяДиалога, this.ИмяПоляГород );
            this.ЭлГород.Фильтр( this.Запись[this.ИмяПоляГород] );
            this.УстановитьЗапросГород( this.ИмяПоляГород );
        }
        if( this.ИмяПоляУлица ){
            this.ЭлУлица = ComboBox( this.ИмяДиалога, this.ИмяПоляУлица );
            this.ЭлУлица.Фильтр( this.Запись[this.ИмяПоляУлица] );
            //this.УстановитьЗапросУлица( this.ИмяПоляУлица );
        }
    }
    Изменение( поле ){
        switch( поле ){
            case "@РСтрана":
                // todo возможно надо написать присвоение элементам, не знаю как работает паспортный
                var ид = this.ЭлСтрана.Значение();
                if( ид == -1 && this.Запись['@РСтрана'] ) {
                    УстановитьЗапрос( this.ИмяДиалога, "@РОбласть", '' );
                    this.ЭлОбласть.Текст = "";
                    УстановитьЗапрос( this.ИмяДиалога, "@РРайон", '' );
                    this.ЭлРайон.Текст = "";
                    УстановитьЗапрос( this.ИмяДиалога, "@РГород", '' );
                    this.ЭлГород.Текст = "";
                } else {
                    УстановитьЗапросОбласть( "@РОбласть" );
                    this.ЭлОбласть.Текст = this.Запись['@РОбласть'];
                    this.Изменение( "@РОбласть" );
                }
                break;
            case "@РОбласть":
                УстановитьЗапросРайон( "@РРайон" );
                this.ЭлРайон.Текст = this.Запись['@РРайон']; // нет break!
            case "@РРайон":
                УстановитьЗапросГород( "@РГород" );
                this.ЭлГород.Текст = this.Запись['@РГород'];
                break;
            case "@РГород":
                var ид = this.ЭлГород.Значение();
                //РасшифроватьРождение();
                this.Запись['@РГРайон'] = "";
                break;
            case "@ПСтрана":
                var ид = this.ЭлСтрана.Значение();
                if( ид == -1 && this.Запись['@ПСтрана'] ){
                    УстановитьЗапрос( this.ИмяДиалога, "@ПОбласть", '' );
                    this.ЭлОбласть.Текст = "";
                    УстановитьЗапрос( this.ИмяДиалога, "@ПРайон", '' );
                    this.ЭлРайон.Текст = "";
                    УстановитьЗапрос( this.ИмяДиалога, "@ПГород", '' );
                    this.ЭлГород.Текст = "";
                } else {
                    this.УстановитьЗапросОбласть( "@ПОбласть" );
                    this.ЭлОбласть.Текст = this.Запись['@ПОбласть'];
                    this.Изменение( "@ПОбласть" );
                }
                break;
            case "@ПОбласть":
                this.УстановитьЗапросРайон( "@ПРайон" );
                this.ЭлРайон.Текст = this.Запись['@ПРайон'];
                this.УстановитьЗапросУлица("@П_Улица");
                this.ЭлУлица.Текст = this.Запись['@П_Улица']; // нет break!
            case "@ПРайон":
                this.УстановитьЗапросГород( "@ПГород" );
                this.ЭлГород.Текст = this.Запись['@ПГород'];
                break;
            case "@ПГород":
                //РасшифроватьПрибытие();
                this.УстановитьЗапросУлица( "@П_Улица" );
                this.ЭлУлица.Текст = this.Запись['@П_Улица'];
                break;
            case "@ВСтрана":
                var ид = this.ЭлСтрана.Значение();
                if( ид == -1 && this.Запись['@ВСтрана'] ){
                    УстановитьЗапрос( this.ИмяДиалога, "@ВОбласть", '' );
                    this.ЭлОбласть.Текст = "";
                    УстановитьЗапрос( this.ИмяДиалога, "@ВРайон", '' );
                    this.ЭлРайон.Текст = "";
                    УстановитьЗапрос( this.ИмяДиалога, "@ВГород", '' );
                    this.ЭлГород.Текст = "";
                } else {
                    this.УстановитьЗапросОбласть( "@ПОбласть" );
                    this.ЭлОбласть.Текст = this.Запись['@ПОбласть'];
                    this.Изменение( "@ВОбласть" );
                }
            case "@ВОбласть":
                this.УстановитьЗапросРайон( "@ВРайон" );
                this.ЭлРайон.Текст = this.Запись['@ВРайон'];
                this.УстановитьЗапросУлица("@ВУлица");
                this.ЭлУлица.Текст = this.Запись['@ВУлица']; // нет break!
            case "@ВРайон":
                this.УстановитьЗапросГород( "@ВГород" );
                this.ЭлГород.Текст = this.Запись['@ВГород'];
                break;
            case "@ВГород":
                //РасшифроватьВыбытие();
                this.УстановитьЗапросУлица( "@ВУлица" );
                this.ЭлУлица.Текст = this.Запись['@ВУлица'];
                break;
        }
    }
    Сохранение(){
        // возможно надо переприсвоить элемент города
        var ид = this.ЭлГород.Значение();
        var город = new БазовыйОбъект( "Города", ид );
        if( ид > 0 ) { // убираем  приписку с указанием области и района
            город.Прочитать();
            this.Запись[this.ИмяПоляГород] = (!город.Объект.Сокращение) ? город.Объект.Название : город.Объект.Название + " " + город.Объект.Сокращение;
        }
    }
    УстановитьИменаЭлементов( имяСтрана, имяОбласть, имяРайон, имяГород, имяУлица ){
        this.ИмяПоляСтрана = имяСтрана;
        this.ИмяПоляОбласть = имяОбласть;
        this.ИмяПоляРайон = имяРайон;
        this.ИмяПоляГород = имяГород;
        this.ИмяПоляУлица = имяУлица;
    }
    УстановитьЗапросСтрана( имяПоля ){
        УстановитьЗапрос( this.ИмяДиалога, имяПоля,
            "SELECT ROW_ID, Название, '' [n1], '' [До_после], '' Сокращение \
             FROM ~Города~ \
             WHERE Города = -10 ORDER BY Название" );
    }
    УстановитьЗапросОбласть( имяПоля ){
        УстановитьЗапрос( this.ИмяДиалога, имяПоля,
            "SELECT ROW_ID, Название + ' ' + Сокращение  as Название, '' [n1], '' [До_после], '' Сокращение \
             FROM ~Города~ \
             WHERE SubString( Кладр, 3, 10 )='0000000000' AND Сокращение<>'' AND LEN(Кладр) = 13" )
    }
    УстановитьЗапросРайон( имяПоля ){
        /*switch( имяПоля ){
            case "@РРайон":
                this.ИмяПоляОбласть = "@РОбласть";
                break;
            case "@ПРайон":
                this.ИмяПоляОбласть = "@ПОбласть";
                break;
            case "@ВРайон":
                this.ИмяПоляОбласть = "@ВОбласть";
                break;
        }*/
        //var элОбласть = ComboBox( this.ИмяДиалога, this.ИмяПоляОбласть );
        var идОбласть = this.ЭлОбласть.Значение();
        var область = this.Запись[this.ИмяПоляОбласть];
        if( идОбласть == -1 && область ) {
            УстановитьЗапрос( this.ИмяДиалога, имяПоля, '' );
        } else {
            this.ЗапросГорода.УстановитьПараметры( идОбласть );
            var допУсловиеРегион = "";
            if( this.ЗапросГорода.Следующий() )
                допУсловиеРегион = "AND substring(Кладр, 1, 2)='" + this.ЗапросГорода.Кладр.substr(0, 2) + "'";

            УстановитьЗапрос( this.ИмяДиалога, имяПоля,
                "SELECT gor.ROW_ID, gor.Название + ' ' + Сокращение As Название, '' [n1], '' [До_после], '' Сокращение \
                 FROM ~Города~ gor \
                 WHERE substring(Кладр, 3, 3)<>'000' AND  gor.Название<>'' AND \
                       substring(Кладр, 6, 8)='00000000' AND LEN(Кладр)=13 " + допУсловиеРегион +
                 " ORDER BY Название" );
        }
    }
    УстановитьЗапросГород( имяПоля ){
        /*switch( имяПоля ){
            case "@РГород":
                this.ИмяПоляРайон = "@РРайон";
                this.ИмяПоляОбласть = "@РОбласть";
                break;
            case "@ПГород":
                this.ИмяПоляРайон = "@ПРайон";
                this.ИмяПоляОбласть = "@ПОбласть";
                break;
            case "@ВГород":
                this.ИмяПоляРайон = "@ВРайон";
                this.ИмяПоляОбласть = "@ВОбласть";
                break;
        }*/
        //var элРайон = ComboBox( this.ИмяДиалога, this.ИмяПоляРайон );
        var идРайон = this.ЭлРайон.Значение();
        var район = this.Запись[this.ИмяПоляРайон];
        if( идРайон == -1 && район ) {
            УстановитьЗапрос( this.ИмяДиалога, имяПоля, '' );
        } else {
            this.ЗапросГорода.УстановитьПараметры( идРайон );
            var допУсловиеРегион = '', допУсловиеРайон = '';
            if( this.ЗапросГорода.Следующий() )
                допУсловиеРайон = "AND substring(gor.Кладр, 3, 3)='" + this.ЗапросГорода.Кладр.substr( 2, 3 ) + "'";

            //var элОбласть = ComboBox( this.ИмяДиалога, this.ИмяПоляОбласть );
            this.ЗапросГорода.УстановитьПараметры( this.ЭлОбласть.Значение() );
            if( this.ЗапросГорода.Следующий() )
                допУсловиеРегион = "AND substring(gor.Кладр, 1, 2)='" + this.ЗапросГорода.Кладр.substr( 0, 2 ) + "'";
            var запрос = "SELECT gor.ROW_ID, gor.Название + ' ' + gor.Сокращение + ' ( ' + gorO.Сокращение + ' ' + gorO.Название + ' ' + gorR. Сокращение + ' ' + gorR.Название  +')' \
                                as Название, '' [n1], '' [До_после], '' Сокращение \
                          FROM ~Города~ gor \
                               JOIN ~Города~ gorR ON gorR.Row_ID = gor.[Города] \
                               JOIN ~Города~ gorO ON gorO.Row_ID = gorR.[Города] \
                          WHERE (substring(gor.Кладр, 6, 3)<>'000' OR substring(gor.Кладр, 9, 3)<>'000') AND \
                                substring(gor.Кладр, 12, 2)='00' AND LEN(gor.Кладр)=13 " + допУсловиеРегион + допУсловиеРайон;
            if( допУсловиеРайон || допУсловиеРегион ) {
                УстановитьЗапрос( this.ИмяДиалога, имяПоля, запрос + 'ORDER BY Название' );
            } else { // todo че за хрень тут написана??
                УстановитьДополнительныйЗапрос( this.ИмяДиалога, имяПоля, запрос + " AND substring(gor.Название, 1, 3)=" );
            }
        }
    }
    УстановитьЗапросУлица( имяПоля ) {
        /*switch( имяПоля ){
            case "@ВУлица":
                this.ИмяПоляГород = "@ВГород";
                this.ИмяПоляОбласть = "@ВОбласть";
                this.ИмяПоляРайон = "@ВРайон";
                break;
            case "@П_Улица":
                this.ИмяПоляГород = "@ПГород";
                this.ИмяПоляОбласть = "@ПОбласть";
                this.ИмяПоляРайон = "@ПРайон";
                break;
        }*/
        //var элемент = ComboBox( this.ИмяДиалога, this.ИмяПоляГород );
        var идЭлемент = this.ЭлГород.Значение();
        if( идЭлемент == -1 ) {
            //элемент = ComboBox( this.ИмяДиалога, this.ИмяПоляОбласть );
            идЭлемент = this.ЭлОбласть.Значение();
        }
        var город = this.Запись[this.ИмяПоляГород];
        if( идЭлемент == -1 && город ) {
            УстановитьЗапрос( this.ИмяДиалога, имяПоля, '' );
        } else {
            var допУсловие = "";
            var район = this.Запись[this.ИмяПоляРайон];
            if( !район ) {
                this.ЗапросГорода.УстановитьПараметры( идЭлемент );
                if( this.ЗапросГорода.Следующий() )
                    допУсловие = "OR substring(Кладр, 1, 11)='" + this.ЗапросГорода.Кладр.substr( 0, 11 ) + "'";
            }
            УстановитьЗапрос( this.ИмяДиалога, имяПоля,
                "SELECT ROW_ID, Название + ' ' +  Сокращение as Название, '' [n1], '' [До_после], '' Сокращение \
                 FROM ~Города~ \
                 WHERE (Города=" + идЭлемент + допУсловие + ") AND LEN(Кладр)>13 Order by Название" );
        }
    }
}