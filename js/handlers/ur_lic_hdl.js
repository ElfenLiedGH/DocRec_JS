'use strict';
/**
 * @module Обработчики ЮрЛ
 */

class Договор___параметры {

    Инициализация(){
        this.Запись["ДатНач"] = РабМес();
        this.Запись["ДатКнц"] = new Date(2045,5,9);
    }

    Выбор_диалога(){
        if( ЕстьДиалог(this.Запись["Наименование"]) )
        return this.Запись["Наименование"];
    }
    Расчет(){
        this.Запись["Строка"] = ПараметрСтрокой( this.Запись["Название"], this.Запись["Значение"] );
    }

    Сохранение() {
        КоррекцияДатЗаписей(this.Запись, "Виды-Параметры;Счет-Параметры;Объекты-Параметры;Документ-Параметры;Структура-Параметры;Организация-Параметры;Параметры-Договор");
    }

}
class ДоговорОО extends БазовыйДиалог {
    Инициализация() {
        super.Инициализация();
        if (this.НоваяЗапись) {
            this.НомерЗаписи = Сохранить(this.Запись);
        }
        this.Договор = new кДоговор(this.НомерЗаписи);

        if (this.НоваяЗапись) {
            var Диапазон = this.Договор.ПолучитьДиапазонСвободныхНомеров();
            return "Номер";
        } else {
            var стрТаблиц = 'Все';
            var таблицы = Query(`SELECT distinct ИмяТаблицы FROM ~Журнал изменений~ WHERE [Журнал-Договор] = :1`, 1, "ID,S");
            таблицы.УстановитьПараметры(this.НомерЗаписи);
            while (таблицы.Следующий()) {
                стрТаблиц += таблицы.ИмяТаблицы !== "" ? "\n" + кЖурналИзменений.Таблица2Название(таблицы.ИмяТаблицы) : "";
            }
            УстановитьСписокЗначений(this.Источник.Диалог.Имя, "@Таблицы", стрТаблиц);
            this.Запись["@ДатНачЖур"] = ОткрытыйМесяц().СледующийМесяц(-1);
            this.Запись["@ДатКнцЖур"] = new Date("2045-05-09");
            УстановитьПараметрыФильтра(this.Источник.Диалог.Имя, "Лицевые договора", ОткрытыйМесяц().toSQLString() + "  between ISNULL(t1.[ДатНач],'20000101') and ISNULL( t1.[ДатКнц],'20450509')");
            УстановитьПараметрыФильтра0(this.Источник.Диалог.Имя, "Договор - связанные документы (счета)", " t1.[Тип документа] in (1,4,35,28) ");
            УстановитьПараметрыФильтра0(this.Источник.Диалог.Имя, "Договор - связанные документы (платежи)", " t1.[Тип документа] in (21,23) ");
            УстановитьПараметрыФильтра0(this.Источник.Диалог.Имя, "Договор - журнал", " t1.Дата between :2 and :3", "D,D", this.Запись["@ДатНачЖур"], this.Запись["@ДатКнцЖур"]);
            УстановитьПараметрыФильтра0(this.Источник.Диалог.Имя, "Договор - журнал документ", " t1.Дата between :2 and :3 ", "D,D", this.Запись["@ДатНачЖур"], this.Запись["@ДатКнцЖур"]);
            if (this.Запись.Окончание <= ОткрытыйМесяц()) {
                this.Источник.Диалог.Запрещен = 1;
                if (ЕстьСвойство(this.Источник.Элементы, "Ввод показаний"))
                    this.Источник.Элементы["Ввод показаний"].Запрещен = 1;
            }
        }
    }

    Изменение(Поле) {
        super.Изменение(Поле);
        switch (Поле) {
            case "Номер":
                if (!this.Договор.ПроверитьСвободныйНомер(this.Запись.Номер)) {
                    ВсплывающееОкно("Такой номер уже существует !", this.Источник.Диалог.Имя, "Номер");
                    this.Запись.Номер = this.СтароеЗначение;
                    return "Номер";
                }
                break;
            case "@ДатНачЖур":
            case "@ДатКнцЖур":
            case "@Таблицы":
                // TODO this.Запись["@Таблицы"] при смене возращает индекс элемента, переделать надобно....
                if (this.Запись["@Таблицы"] == "Все") {
                    УстановитьПараметрыФильтра(this.Источник.Диалог.Имя, "Договор - журнал", " t1.Дата between :2 and :3", "D,D", this.Запись["@ДатНачЖур"], this.Запись["@ДатКнцЖур"])
                } else {
                    УстановитьПараметрыФильтра(this.Источник.Диалог.Имя, "Договор - журнал", " t1.Дата between :2 and :3 and t1.ИмяТаблицы like :4 ", "D,D,A", this.Запись["@ДатНачЖур"], this.Запись["@ДатКнцЖур"], this.Запись["@Таблицы"]);
                }
                УстановитьПараметрыФильтра(this.Источник.Диалог.Имя, "Договор - журнал документ", " t1.Дата between :2 and :3 ", "D,D", this.Запись["@ДатНачЖур"], this.Запись["@ДатКнцЖур"]);
                break;
        }
    }

    Сохранение() {
    }

    ОткрытиеВкладки(Вкладка) {
        super.ОткрытиеВкладки(Вкладка);
        switch (Вкладка) {
            case "Расчет":
                this.ВывестиРасчет();
                break;
        }
    }

    Месяц() {
        if (this.АктивнаяВкладка == "Расчет") {
            this.ВывестиРасчет();
        }
    }

    /**
     * Кнопка удаления документов реализации договора
     */
    КП3() {
        let вСчета = new БазоваяВыборка("Договор - связанные документы (счета)", "Доки");
        вСчета.ПолучитьВыборку();
        let мДок = вСчета.ПолучитьВыделенныеЗаписи();
        // если нечего удалять или не согласны - выходим
        // TODO удаление доков реализации нужно оформить методом класса договора и при невозможности возвращать код ошибки
        if (!мДок.length || !ДаНет("Вы действительно хотите удалить все выделенные документы ?")) return;
        let зДок = Query(`select row_id,[Окончания срок],РасчМесяц,Аналитика,[Документы-Договор],Дата from ~документ~ where row_id=:1`, 10, "p1,S");
        let зВКнигах = Query("select top 1 row_id from ~Книга продаж содержание~ where [Ссылка2] = :1", 10, "sf,S");
        for (let нзСчет of мДок) {
            зДок.УстановитьПараметры(нзСчет);
            if (зДок.Следующий()) {
                if (!зДок["Окончания срок"].isEmpty()) {
                    Сообщить("Документы связанные с коррекцией можно удалить только через Расчетный отдел->Корректировка документов!");
                    return;
                }
                if (зДок.РасчМесяц < ОткрытыйМесяц()) {
                    Сообщить("Месяц закрыт. Удаление невозможно !");
                    return;
                }
                зВКнигах.УстановитьПараметры(нзСчет);
                if (зВКнигах.Следующий()) {
                    Сообщить("Удаление счет-фактуры невозможно, т.к. она входит в книгу продаж!");
                    return;
                }
                // TODO дальше удаляем с учётом вида реализации
            }
        }
    }

    /**
     * Кнопка расчета договора */
    КП4() {
        if (this.НомерЗаписи > 0 && РабМес() >= ОткрытыйМесяц()) {
            Договор.Рассчитать();
            this.ВывестиРасчет();
        }
    }

    ВывестиРасчет() {
        var мДанныеНачислений = this.Договор.ДанныеРасчетаДоговора(РабМес());
    }
}

class Договор___связанные_документы_счета {
    Выбор_диалога() {
        if (Задача() == "АРМ кассира") return 0;
        switch (Number(this.Запись["Тип документа"])) {
            case 28:
                return "Входящая платежка";
            case 1:
            case 35:
            default:
                return "Исходящий счет";
        }
    }

    Расчет() {
        this.Запись["@ТипДокумента"] = кДокумент.Тип2НазваниеКратко(ПрочитатьПолеСвязи(this.Запись, "Тип документа"));
    }
}

class Договор___сальдо extends БазовыйДиалог {
    Инициализация() {
        super.Инициализация();
        this.СальдоД = new СальдоДоговора(this.НомерЗаписи, 1);
        this.ВывестиСальдо();
    }

    ВывестиСальдо() {
        if (РабМес() >= ОткрытыйМесяц()) {
            this.СальдоД.Рассчитать(РабМес(), 1);
        }
        // TODO по идее нет смысла доставать обороты и сальдо после расчета договора, они уже должны быть в контексте
        this.Запись["@Сумма"] = this.СальдоД.ИтоговоеСальдоДоговора(РабМес());
        this.Запись["@ВходСальдо"] = this.СальдоД.ПолучитьСуммуСальдо(РабМес().СледующийМесяц(-1));
        this.Запись["@ИсхСальдо"] = this.СальдоД.ПолучитьСуммуСальдо(РабМес());
        let ИОбороты = this.СальдоД.ИтоговыеОборотыДоговора(РабМес());
        this.Запись["@Дебет"] = ИОбороты.Дебет;
        this.Запись["@Кредит"] = ИОбороты.Кредит;

        let зОбороты = Query(`;DECLARE @StartDate datetime;
                               DECLARE @EndDate   datetime;
                               SET @StartDate = :1;
                               SET @EndDate   = :2;
                               SELECT doc.row_id,doc.Сумма,doc.Сумма2,doc.[Тип документа],doc.Дата, doc.Номер, doc.Тема,doc.Аналитика,doc.ВидСчета
                               FROM ~Документ~ doc
                               LEFT JOIN ~Документ~  vyp on vyp.ROW_ID = doc.[Платеж-Выписка]
                               WHERE doc.[Тип документа] in (1, 28, 35, 3, 11, 16, 21, 23, 91) and doc.[Документы-Договор] = :3 and
                                     ((doc.[Платеж-Выписка] != -1 and vyp.Дата BETWEEN @StartDate AND @EndDate) or
                                     (doc.[Платеж-Выписка]  = -1 and doc.Дата BETWEEN @StartDate AND @EndDate))`, 1000, "dat1,D,dat2,D,dog,S");

        this.вОбороты = new БазоваяВыборка("@Договор - связанные документы (сальдо)");
        this.вОбороты.ПолучитьВыборку();
        this.вОбороты.Очистить();
        зОбороты.УстановитьПараметры(РабМес(), РабМес().ПоследнееЧисло(), this.НомерЗаписи);
        while (зОбороты.Следующий()) {
            let оборот = зОбороты.toJSObject();
            оборот.Вид = кДокумент.Тип2НазваниеКратко(оборот["Тип документа"]);
            оборот["Документы-Договор"] = оборот["row_id"];
            оборот.Тип = оборот["Тип документа"];
            this.вОбороты.Внести(оборот);
        }
    }

    Месяц() {
        this.ВывестиСальдо();
    }
}


class Договор___сальдо_входящее {
    //noinspection JSMethodCanBeStatic
    Инициализация() {
        return 1;
    }

    //noinspection JSMethodCanBeStatic
    Удаление() {
        return 1;
    }

    Расчет() {
        this.Запись["@Вид"] = кДокумент.Тип2НазваниеКратко(this.Запись['Платеж-Сальдо'] != -1 ? this.Запись['Платеж-Сальдо>Тип документа'] : this.Запись['Счет-Сальдо>Тип документа']);
        this.Запись["@Дата"] = this.Запись['Платеж-Сальдо'] != -1 ? this.Запись['Платеж-Сальдо>Дата'] : this.Запись['ДатаДокумента'];
        this.Запись["@Номер"] = this.Запись['Платеж-Сальдо'] != -1 ? this.Запись['Платеж-Сальдо>Номер'] : this.Запись['Счет-Сальдо>Номер'];
        this.Запись["@Получатель"] = this.Запись['Платеж-Сальдо'] != -1 ? this.Запись['Платеж-Сальдо>Лицо1>Название'] : this.Запись["Название"];
        this.Запись['@Сумма'] = this.Запись['Платеж-Сальдо'] != -1 ? this.Запись['Платеж-Сальдо>Сумма'] : this.Запись['Счет-Сальдо>Сумма'];
        this.Запись['Аналитика'] = this.Запись['Платеж-Сальдо'] != -1 ? this.Запись['Платеж-Сальдо>Аналитика'] : this.Запись['Счет-Сальдо>Аналитика'];
    }
}


class Договор___сальдо_исходящее extends Договор___сальдо_входящее {
}


class _Договор___связанные_документы_сальдо {

    Выбор_диалога() {
        switch (this.Запись.Тип) {
            case 1:
            case 35:
                return "Исходящий счет";
            case 28:
                return "Входящая платежка";
            case 21:
                return "Входящая платежка";
            case 23:
                return "Приходный ордер";
            case 91:
            {
                if ('Документы-Договор' > 0) {
                    let оДок = Выборка("Сторнирование фактур/оплат");
                    ПрочитатьЗаписьТаблицы(оДок, 'Документы-Договор');
                    оДок.Редактировать("&Сторнирование фактур/оплат (создание)");
                }
            }
        }
    }
}

/**
 *  Обработчик диалога печати комплектов документов
 */
class Диалог_печати_комплекта {
    Модальность() {
        let Комплекты = КомплектДокументов.ПолучитьВариантыКомплектов();
        let Вариант = ComboBox("Диалог печати комплекта", "@Вариант");
        Вариант.СписокСКлючами(Комплекты.Ключи, Комплекты.Комплекты);
        this.Запись["@Вариант"] = Комплекты.Комплекты[0];
        this.Запись["Месяц"] = РабМес();
        let Руки = [];
        let ГлБухи = [];
        if (this.Подписи[1])
            for (let Подписант of this.Подписи[1]) Руки.push(Подписант.ФИО);
        if (this.Подписи[2])
            for (let Подписант of this.Подписи[2]) ГлБухи.push(Подписант.ФИО);
        this.Руководитель = ComboBox("Диалог печати комплекта", "@Руководитель");
        this.Руководитель.УстановитьСписокСтрок(Руки.toString(), ",");
        this.кГлБухи = ComboBox("Диалог печати комплекта", "@ГлавБух");
        this.кГлБухи.УстановитьСписокСтрок(ГлБухи.toString(), ",");
        this.Запись["@Руководитель"] = Руки[0];
        this.Запись["@ГлавБух"] = ГлБухи[0];
        let ФлагиАктСверки = ПрочитатьКонстанту(РабМес(), "АКТСВЕРКИ").split(";");
        this.Запись["Флаги"] = ФлагиАктСверки[0];
        this.ЗаполнитьСписокДокументов(Комплекты.Ключи[0]);
    }

    Изменение() {
        this.ЗаполнитьСписокДокументов(ЗначениеВыпадающегоСписка("Диалог печати комплекта", "@Вариант"));
    }

    Сохранение() {
        this.ключРук = this.Руководитель.Значение();
        this.ключГлБух = this.кГлБухи.Значение();
    }

    // TODO добавить обработку по акту сверки
    ЗаполнитьСписокДокументов(Вариант) {
        let дг = Сетка("Диалог печати комплекта", "Настройка комплекта");
        дг.УдалитьЗаписи();
        дг.Сброс();
        let мСписок = КомплектДокументов.ПолучитьСписокДокументовДляКомплекта(Вариант);
        for (let Документ of мСписок) {
            let мПараметры = Документ.split(",");
            дг["@Печать"] = 1;
            let текДокумент = мПараметры[0];
            дг["@Документ"] = текДокумент;
            дг["@Кол_во"] = мПараметры[1];
            дг["@Тип"] = 0;
            if (текДокумент.toUpperCase().indexOf("ОТГРУЗКА:") + 1)
                дг["@Тип"] = 35;
            if (текДокумент.toUpperCase().indexOf("СЧЕТ :") + 1)
                дг["@Тип"] = 1;
            if (текДокумент.toUpperCase().indexOf("СЧЕТ-ФАКТУРА НА АВАНС :") + 1)
                дг["@Тип"] = 4;
            if (текДокумент.toUpperCase().indexOf("ДОГОВОР(ОО)") + 1)
                дг["@Тип"] = 999;

            if (дг["@Тип"] != 0)
                дг.Внести(-1, 0, 0, 1);

        }
        Перерисовать("Диалог печати комплекта", "Настройка комплекта");
    }
}

class ДоговорыОО extends БазоваяВыборка {
    constructor() {
        super("Договоры(ОО)", "Договоры(ОО)");
    }

    // TODO Переименовать в нормальный метод когда будет возможность его вызвать
    КП1() {
        КомплектДокументов.НапечататьКомплектыДокументов(this.ПолучитьВыделенныеЗаписи());
    }
}

class Входящая_платежка extends БазовыйДиалог {
    Инициализация() {
        super.Инициализация();
        var СтараяАналитика = "";
        var Дата, РасчМесяц;
        this.Запись["@нзДог"] = this.Запись['Документы-Договор'];
        var оВып = View("Выписка","Выписка").Обработчик.Запись;
        this.Запись["@Номер"] = this.Запись['Документы-Договор>Номер'];
        this.Запись["@ТемаДог"] = this.Запись['Документы-Договор>Тема'];
        if (НомерЗаписи(this.Запись) == -1) // новая запись
        {
            if (НомерЗаписи(оВып) >= 0) {
                this.Запись.Дата = оВып.Дата;
                this.Запись.РасчМесяц = оВып.РасчМесяц;
                //this.Запись['Окончания срок'] = оВып.Дата;
                this.Запись['Наш р/с-Платежи'] = 'оВып.Наш р/с-Платежи';
            }
            else {
                this.Запись.Дата = new Date();
                this.Запись.РасчМесяц = ОткрытыйМесяц();
                //'Окончания срок' = ТекДат();
            }
        }
        else {
            if (this.Запись["Платеж-Выписка"] >= 0) // платеж в выписке
            {
                if (НомерЗаписи(оВып) < 0)                         // выписки на экране нет
                {
                    this.ЗапретитьЭлементы("@НашРасчСчет1", "@РасчСчет1", "Сумма");
                }
            }
            if (this.Запись["Дата"] < ОткрытыйМесяц())
                this.Источник.Диалог.Запрещен = 1;


            this.Запись["@СтараяАналитика"] = Аналитика;
        }
        //this.Запись["@стрАналитика"] = НазваниеКлассификатора(Аналитика, 116);

    }

    Изменение(Поле) {
        super.Изменение();
        switch (Поле) {
            case "Документы-Договор":
            case "@НомерДоговора":
            case "@Номер":
            {
                пСвязи = 0;
                var вСвязи = ПолучитьКоллекцию("Входящая платежка", "Входящая платежка - связи");
                while (ПолучитьЗаписьВыборки(вСвязи, пСвязи))
                    пСвязи++;
                if (пСвязи) {
                    if (ДаНет("Платеж имеет документы, в кол-ве: " + ( пСвязи ) + ", при смене договора связи будут удалены.\nПродолжить?")) {
                        if (Поле == "@Номер") {
                            // TODO
                            //   'Документы-Договор' = ВыполнитьПоискДоговора(@Номер);
                        }
                        this.Запись["@нзДог"] = this.Запись['Документы-Договор'];
                        var кУдалитьСвязи = Command(`DELETE FROM ~Связи документов~ WHERE ROW_ID = :1`, 5, "rID,S");
                        var пСвязи = 0;
                        while (ПолучитьЗаписьВыборки(вСвязи, пСвязи++))
                            кУдалитьСвязи.Выполнить(НомерЗаписи(вСвязи));
                        кУдалитьСвязи.Завершить();
                        ПеренабратьВыборку(вСвязи);
                    }
                    else {
                        this.Запись['Документы-Договор'] = this.Запись["@нзДог"];
                        Сообщить("Смена договора отменена");
                    }
                }
                else {

                    if (Поле == "@Номер") {
                        this.Запись['Документы-Договор'] = ВыполнитьПоискДоговора(this.Запись["@Номер"]);
                    }

                }

                this.Запись["Лицо1"] = this.Запись['Документы-Договор>Плательщик'];
                this.Запись["Лицо2"] = this.Запись['Документы-Договор>Грузополучатель'];
                //УстановитьПолеСвязи( '.', "Документы-Договор",'Документы-Договор' );
                this.Запись["@НомерДоговора"] = this.Запись['Документы-Договор>Номер'];
                this.Запись["@Номер"] = this.Запись['Документы-Договор>Номер'];
                this.Запись["@ТемаДог"] = this.Запись['Документы-Договор>Тема'];
                // TODO
                if (this.Запись['Документы-Договор'] > 0) {
                    /*
                     var текМес = ОткрытыйМесяц();
                     while( текМес <= СледующийМесяц(Дата,0) )
                     {
                     СальдоДоговора( текМес,'Документы-Договор', 1 );
                     текМес = СледующийМесяц( текМес,1 );
                     }

                     */
                    //@НеоплаченныеСчета = СтрокаНеоплСчетов('Документы-Договор', СледующийМесяц(Дата,0) )
                }

                Перерисовать();
                return "Сумма";

            }
            case "Сумма":
            {
                // требование. то считаем сумму без ндс автоматически
                if (ПрочитатьПолеСвязи(this.Запись, "Тип документа") == 28) {
                    var ставкаНДС = ПрочитатьКонстанту(this.Запись.РасчМесяц, "НДС");
                    ставкаНДС = (100 + Number(ставкаНДС)) / 100;
                    this.Запись.Сумма2 = Деньги(Сумма / СтавкаНДС);
                    СохранитьЗапись(this.Запись);
                }
                break;
            }
            case "@Аналитика":
            case "Аналитика":
            {
                this.Запись["@стрАналитика"] = НазваниеКлассификатора(Аналитика, 116);
                break;
            }

            case "Связка2":
            {
                var зСумОплПоДОк = query(`select sum([Сумма]) [Сумма] from ~Связи документов~
                                            where [Связка2] = :1
                                          `, 10, "Doc,S");
                зСумОплПоДОк.УстановитьПараметры(НомерЗаписи('.'));
                if (зСумОплПоДОк.Следующий())
                    if (зСумОплПоДОк.Сумма > Сумма)
                        this.Запись.Сумма = зСумОплПоДОк.Сумма;
            }
        }

    }
}