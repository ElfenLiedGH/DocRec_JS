/**
 * Created by Константин on 20.04.2015.
 */
"use strict";

/**
 * @extends БазоваяВыборка
 * @class класс Электронная_почта - обработчик Выборки 'Электронная почта' дерева электронной почты
 */
class Электронная_почта extends БазоваяВыборка {
    constructor(){
        super('Электронная почта', 'Электронная почта');
        this.Сохранить = false;
        /**
         * запрос количества сообщений в папке
         */
        this.зКоличество = Query('SELECT count(*) cnt FROM ~Сообщения Заголовок~ ' +
            'WHERE Папка=:1 AND Папка_ADD = 1', 1, 'id,S');
        /**
         * запрос количества непрочитанных сообщений в папке
         */
        this.зНовых = Query( 'SELECT count(*) cnt FROM ~Сообщения Заголовок~ ' +
            'WHERE Папка=:1 AND Папка_ADD = 1 AND Признаки=0', 1, 'id,S');
        /**
         *  запрос общего количества сообщений в папке
         */
        this.зВсего = Query( ';WITH DownHier AS( ' +
            '   SELECT ROW_ID, Папка ' +
            '   FROM ~Сообщения Заголовок~ WHERE ROW_ID = :1 ' +
            '   UNION ALL ' +
            '   SELECT child.row_id, child.Папка ' +
            '   FROM ~Сообщения Заголовок~ child ' +
            '        JOIN DownHier parent ON parent.ROW_ID=child.Папка ' +
            '   WHERE child.Папка_ADD = 0 ' +
            ') SELECT count(*) cnt ' +
            '  FROM ~Сообщения Заголовок~ head ' +
            '       JOIN DownHier hier ON head.Папка=hier.row_id ' +
            '  WHERE Папка_ADD=1', 1, 'id,S' );

        this.РежимСоздания = 0;
    }
    Расчет(){
        var номерЗаписи = НомерЗаписи( this.Запись );
        if( номерЗаписи == -1 ) {
            this.Запись.Новых = this.Запись.Всего = 0;
        } else if( this.Запись.Папка == -10 ){
            this.зВсего.УстановитьПараметры( номерЗаписи );
            this.зНовых.УстановитьПараметры( new кЭлЯщик( this.Запись ).Входящие );
            this.Запись.Всего = this.зВсего.Следующий() ? this.зВсего.cnt : 0;
            this.Запись.Новых = this.зНовых.Следующий() ? this.зНовых.cnt : 0;
        } else {
            this.зНовых.УстановитьПараметры( номерЗаписи );
            this.зКоличество.УстановитьПараметры( номерЗаписи );
            this.Запись.Новых = this.зНовых.Следующий() ? this.зНовых.cnt : 0;
            this.Запись.Всего = this.зКоличество.Следующий() ? this.зКоличество.cnt : 0;
        }
    }
    Цвет(){
        if( this.Запись.Новых > 0 ) return 'Шрифт*System,Ж';
        return "*" + БазоваяВыборка._Цвет( 0 );
    }
    Выбор_диалога(){
        if( this.Запись.Папка == -10 ) return 'Электронный ящик';

        return 'ЭлектроннаяПочта Папка';
    }
    Открытие(){
        // блокируем редактирование служебных папок
        if( this.Запись['Папка>Папка'] == -10 && кЭлЯщик.ЭтоСлужебнаяПапка(this.Запись.ОтКого) ) return 1;
    }
    Начало(){
        СоздатьКаталог( "CLIENT:EMail\\" );
        УдалитьФайл( "CLIENT:EMail\\*" );
    }
    Фокус(){
        //Сообщить( НомерЗаписи(this.Запись) );
        ПерейтиВРаздел( this.ИмяОкна, "Электронные сообщения", НомерЗаписи(this.Запись) );
        if( this.Запись['Папка'] != -10 ) УбратьЗаписьВПанели( "Электронная почта" );
    }
    Удаление(){
        if( this.Запись['Папка'] == -10 ){
            if( !ДаНет("Вы действительно хотите удалить почтовый ящик " + this.Запись.ОтКого + "?") ) return 1;
        } else {
            if( кЭлЯщик.ЭтоСлужебнаяПапка(this.Запись.ОтКого) ){
                Сообщить( "Эту папку удалить невозможно" );
                return 1;
            }
            if( !ДаНет("Вы действительно хотите удалить папку " + this.Запись.ОтКого + " и все сообщения в ней?" ) ){
                return 1;
            }
        }
    }
    Инициализация(){
        var выбор = this.РежимСоздания;
        if( выбор == 0 ) выбор = Меню( "Создать ящик\nСоздать папку\nНаписать письмо" );
        var позиция = ПозицияКурсора( this.ИмяОкна, this.ИмяВыборки, "ф" )
        if( позиция == -1 && (выбор == 2 || выбор == 3) ) {
            Сообщить( 'Не выбран ящик', 'OK,ERROR_TITLE' );
            this.РежимСоздания = 0;
            return 1;
        }
        switch( выбор ){
            case 0: return 1;
            case 1: // создаем ящик
                this.Запись.Папка = -10;
                this.Запись.Папка_Узел = 1;
                break;
            case 2: // создаем папку
                this.Запись.Папка_Узел = 1;
                break;
            case 3: // создаем новое письмо
                var сообщение = new кЭлСообщение( позиция );
                if( сообщение.ПрочитатьЯщик() ) сообщение.Ответить( 'Создание' );
                this.РежимСоздания = 0;
                return 1;
        }
        this.РежимСоздания = 0;
        this.Сохранить = true;
    }
    Сохранение(){
        if( this.Сохранить ) СохранитьЗапись( this.Запись );
    }
    Меню(){ //+
        if( this.Запись.Папка != -10 ) {
            var мМеню = ПолучитьОписаниеРесурса( 'ЭлектроннаяПочта Папка', 2 ).toJSObject();
            if( this.Запись.Вид == 13 ) { // Корзина
                delete мМеню['104']; // удаляем Переименовать
                delete мМеню['105']; // удаляем Удалить
            } else if( кЭлЯщик.ЭтоСлужебнаяПапка(this.Запись.Вид) ) {
                delete мМеню['104']; // удаляем Переименовать
                delete мМеню['105']; // удаляем Удалить
                delete мМеню['106']; // удаляем Очистить корзину
            } else {
                delete мМеню['106']; // удаляем Очистить корзину
            }
            return мМеню;
        }
    }
    СоздатьЯщик(){ //+
        this.РежимСоздания = 1;
        Команда( 'CREATE_REC' );
    }
    СоздатьПапку(){ //+
        this.РежимСоздания = 2;
        Команда( 'CREATE_REC' );
    }
    СоздатьСообщение(){ //+
        this.РежимСоздания = 3;
        Команда( 'CREATE_REC' );
    }
    ОчиститьКорзину(){ //+
        // так как меню можно вызвать только с корзины, то ее и возьмем
        if( this.Запись.Вид != 13 ) return;
        var корзина = НомерЗаписи( this.Запись );
            // удалим сначала вложения сообщений в корзине
        var кОчистить = Command( 'DELETE FROM ~Сообщения Вложения~ WHERE [Вложение-Заголовок] IN( ' +
            'SELECT ROW_ID FROM ~Сообщения Заголовок~ WHERE [Папка]=:1 AND [Папка_ADD]=1);' +
            ' /* удаляем и сами сообщения*/ ' +
            'DELETE FROM ~Сообщения Заголовок~ WHERE [Папка]=:1 AND Папка_ADD=1', 10, "id1,S,id2,S" );
        кОчистить.Выполнить( корзина, корзина );
        кОчистить.Завершить();
        ПеренабратьВыборку( "Электронные сообщения" );
    }
    ПолучитьСообщения(){ //+
        var ящик = new кЭлЯщик( НомерЗаписи(this.Запись) );
        if( ящик.НомерЗаписи != -1 ){
            СоздатьОкноСостояния( "ЭлектроннаяПочта Состояние",
                "Сообщение", "Соединение с сервером " + ящик.Транспорт.Объект.ВхСервер + " / POP3" );
            if( ящик.УстановитьПочту(false) ) {
                УстановитьПоляОкнаСостояния( "Сообщение1", "Соединение установлено." );
                УдалитьОкноСостояния();
                if( ящик.Соединить() ){
                    var диспетчер = СоздатьДиалог( "ЭлектроннаяПочта Получить" );
                    диспетчер.Обработчик.Ящик = ящик;
                    диспетчер.Выполнить();
                }
            }
        }
    }
    ОтправитьСообщения(){ //+
        var ящик = new кЭлЯщик( НомерЗаписи(this.Запись) );
        if( ящик.НомерЗаписи != -1 ) {
            СоздатьОкноСостояния( "ЭлектроннаяПочта Состояние", "Сообщение", "Соединение с " + ящик.Название + "..." );
            ящик.ОтправитьСообщения();
            УдалитьОкноСостояния();
        }
    }
    Обновить(){
        Сообщить( 0 );
        ОбновитьЗапись( this.ИмяВыборки );
    }
}

/**
 * @extends БазовыйДиалог
 * @class класс ЭлектронноеСообщение - обработчик окна диалога 'ЭлектронноеСообщение' Выборки 'Электронные сообщения'
 */
class ЭлектронноеСообщение extends БазовыйДиалог {
    constructor() {
        super( 'ЭлектронноеСообщение' );
        this.Сообщение = undefined;
        this.Корень = -10;
        this.ЭлДата = undefined;
        this.ЭлНазваниеОрганизации = undefined;
    }
    Инициализация(){ //+
        this.Сообщение = new кЭлСообщение( this.Запись );
        this.ИмяДиалогаДляПанели = this.Запись.Признаки & 8 ? "Исходящее: " + this.Запись.Кому : "Входящее: " + this.Запись.ОтКого;
        this.Запись['@Тело'] = this.Сообщение.ПолучитьТекст( "plain", -10 );
        if( this.Сообщение.ПолучитьТекст( "html", -10 ) ){
            var элHtml = View( "Тело сообщение", "HTML" );
            элHtml.Скрытый = false;
            this.Запись['@ТелоHTML'] = this.Сообщение.ПрочитатьHtml( 0 );
        }

           // посмотрим иерархию сообщения
        var естьИерархия = Query( 'SELECT TOP 1 owner.ROW_ID FROM ~Сообщения Вложения~ owner ' +
            '   JOIN ~Сообщения Вложения~ child ON owner.ROW_ID=child.Письмо ' +
            'WHERE owner.[Вложение-Заголовок]=:1 AND owner.Письмо=:2 AND owner.Тип > 2 AND child.Тип > 2' , 1, "head,S,owner,S" );
        естьИерархия.УстановитьПараметры( this.Сообщение.НомерЗаписи, this.Корень );
        if( естьИерархия.Следующий() ){
            var элИерархия = View( this.ИмяДиалога, "Иерархия" );
            элИерархия.Скрытый = 0;
            this.Корень = естьИерархия.ROW_ID;
        }

        this.ЭлДата = View( this.ИмяДиалога, 'Дата' );
        if( this.Запись.Отправлено ) {
            this.Запись['@нДата'] = this.Запись.Отправлено;
        } else if( this.Запись.Получено ) { // если есть дата получения, то выведем её
            this.ЭлДата.Текст = "Получено:";
            this.Запись['@нДата'] = this.Запись.Получено;
        } else {
            this.ЭлДата.Текст = "Создано:";
            this.Запись['@нДата'] = this.Запись.Создано;
        }
        if( !this.Запись.ОтКого ){
            var элОтветить = View( this.ИмяДиалога, "Ответить" );
            элОтветить.Запрещен = true;
        }

        if( this.Сообщение.ЕстьВложение() ) {
            var элВложение = View( this.ИмяДиалога, "Вложение-Заголовок" );
            элВложение.Скрытый = false;
        }
        this.ЭлНазваниеОрганизации = View( this.ИмяДиалога, "Организация-Сообщения>Название" );
        if( this.Запись.Признаки & 256 ){
            this.Запись['@Нет_организации'] = 1;
            this.ЭлНазваниеОрганизации.Запрещен = true;
        } else {
                // наберем возможные связки на организацию для Выбора, находясь во Входящих
            if( this.Запись['Организация-Сообщения'] == -1 && this.Сообщение.ТипСообщения() == 10 )
                this.Запись['Организация-Сообщения'] = this.Сообщение.УстановитьОрганизацию(this.Запись.ОтКого, false);
        }
    }
    Закрытие(){ //+
        if( !(this.Запись.Признаки & 1) ){
            this.Сообщение.УстановитьПризнак("Прочитано");
            ОбновитьЗапись();
        }
    }
    Сохранение(){ //+
        // todo при сохранении сообщения обновить панель просмотра (может измениться организация)
        var нетОрганизации = ПрочитатьПолеСвязи( this.Запись, "@Нет_организации" );
        if( нетОрганизации ) {// стоит галка "письмо без организации" - создавать новый контакт не будем
            this.Сообщение.УстановитьПризнак("Нет организации");
            this.Запись['Организация-Сообщения'] = -1;
        } else {
            this.Сообщение.СброситьПризнак( "Нет организации" );
        }
        //КомандаОкну( 4221, 'ЭлектронноеСообщение Предпросмотр' );
    }
    Изменение( поле ){ //+
        switch( поле ){
            case "@Нет_организации":{
                if( ПрочитатьПолеСвязи(this.Запись, "@Нет_организации") ) {
                    this.ЭлНазваниеОрганизации.Запрещен = true;
                } else {
                    this.ЭлНазваниеОрганизации.Запрещен = false;
                }
            }
        }
    }

    /**
     * отображает цепочку вложенных писем
     */
    КП0(){ //+
        if( this.Корень != -10 ){
            // откроем диалог "сообщение" для вложенного письма
            var длг = СоздатьДиалог( "ЭлектронноеСообщение Иерархия" );
            длг.ОтКого = this.Запись.ОтКого;
            длг.Кому = this.Запись.Кому;
            длг.Тема = this.Запись.Тема;
            длг['@нДата'] = this.Запись['@нДата'];
            длг.Обработчик.зДата = this.ЭлДата.Заголовок;
            длг.Обработчик.Корень = this.Корень;
            длг.Обработчик.Позиция = this.Сообщение.НомерЗаписи;
            длг.Выполнить();
            //Удалитьvarенную( длг );
        }
        return 1;
    }
    Ответить(){ //+
        this.Сообщение.Ответить( "Ответ" );
    }
    Перенаправить(){ //+
        this.Сообщение.Ответить( "Перенаправить" );
    }
    Переслать(){ //+
        this.Сообщение.Ответить( "Переслать" );
    }
}

/**
 * @extends БазовыйДиалог
 * @class класс ЭлектронноеСообщение_Иерархия - обработчик окна диалога 'ЭлектронноеСообщение Иерархия'
 */
class ЭлектронноеСообщение_Иерархия extends БазовыйДиалог {
    constructor() {
        super( 'ЭлектронноеСообщение Иерархия' );
        this.Сообщение = undefined;
    }
    Модальность(){ //+
        this.Сообщение = new кЭлСообщение( this.Позиция );
        this.Запись['@Тело'] = this.Сообщение.ПолучитьТекст( "plain", this.Корень );
        if( this.Сообщение.ПолучитьТекст("html", this.Корень) ){
            var элHtml = View( "Тело сообщение", "HTML" );
            элHtml.Скрытый = false;
            // todo пропадает текстовая вкладка
            // Лобкова Наталия Владимировна <Nataliya@yrsk.ru> 2012-08-17 10:28:21
            //var элТело = TabControl( this.ИмяДиалога, "Тело сообщение" );
            //элТело.ОткрытьСтраницу( 0 );
            this.Запись['@ТелоHTML'] = this.Сообщение.ПрочитатьHtml( 0 );
        }

        // посмотрим иерархию сообщения
        var естьИерархия = Query( 'SELECT TOP 1 owner.ROW_ID FROM ~Сообщения Вложения~ owner ' +
            '   JOIN ~Сообщения Вложения~ child ON owner.ROW_ID=child.Письмо ' +
            'WHERE owner.[Вложение-Заголовок]=:1 AND owner.Письмо=:2 AND owner.Тип > 2 AND child.Тип > 2' , 1, "head,S,owner,S" );
        естьИерархия.УстановитьПараметры( this.Сообщение.НомерЗаписи, this.Корень );
        if( естьИерархия.Следующий() ){
            var элИерархия = View( this.ИмяДиалога, "Иерархия" );
            элИерархия.Скрытый = 0;
            this.Корень = естьИерархия.ROW_ID;
        }
        var элДата = View( this.ИмяДиалога, "Дата" );
        элДата.Заголовок = this.зДата;

        УстановитьПараметрыФильтра0( this.ИмяДиалога, "Вложение", "t1.Письмо=:1 AND t1.Тип=0", "S", this.Корень );
        if( this.Сообщение.ЕстьВложение() ){
            var элВложение = View( this.ИмяДиалога, "Вложение-Заголовок" );
            элВложение.Скрытый = 0;
        }
    }

    /**
     * показать вложенное сообщение
     */
    КП0(){ // todo не знаю пока как лучше переделать
        /*имяД = Диалог == "СообщениеВл" ? "СообщениеВл_Копия" : "СообщениеВл";
        к_иер = Query( `SELECT ROW_ID FROM ~Сообщения Вложения~
                        WHERE письмо=:1 AND Сообщение=1 AND [Вложение-Заголовок]=:2`, 1, "id,S,head,S" );
        к_иер.УстановитьПараметры( .Корень_иер, .нЗ );
        Если( к_иер.Следующий() )
        {
            Перем длг = СоздатьДиалог( имяД );
            ЗаписатьВОбработчикДиалога( имяД, пОтКого, .ОтКого );
            ЗаписатьВОбработчикДиалога( имяД, пКому, .Кому );
            ЗаписатьВОбработчикДиалога( имяД, пТема, .Тема );
            ЗаписатьВОбработчикДиалога( имяД, нДата, .@нДата );
            ЗаписатьВОбработчикДиалога( имяД, зДата, .зДата );
            ЗаписатьВОбработчикДиалога( имяД, нЗ, .нЗ );
            ЗаписатьВОбработчикДиалога( имяД, Корень_иер, .Корень_иер );
            ВыполнитьДиалог( длг );
            УдалитьПеременную( длг );
        }*/
    }
}

/**
 * @extends БазовыйДиалог
 * @class класс ЭлектронноеСообщение - обработчик окна диалога 'ЭлектронноеСообщение' Выборки 'Электронные_сообщения'
 */
class ЭлектронноеСообщение_Предпросмотр extends БазовыйДиалог {
    constructor() {
        super( 'ЭлектронноеСообщение Предпросмотр' );
        this.Сообщение = undefined;
    }
    Инициализация(){ //+
        super.Инициализация();
        var элМетка = View( "Электронная почта", "Нет загруженных писем" );
        var элПросмотр = View( "Электронная почта", "Сообщение - просмотр" );
        if( !this.НоваяЗапись && !ЭтоУзел(this.Запись) ){
            элМетка.Скрытый = true;
            элПросмотр.Скрытый = false;
            this.Сообщение = new кЭлСообщение( this.Запись );
            this.Запись['@Тело'] = this.Сообщение.ПолучитьТекст( "plain", -10 );
            var элХтмл = View( this.ИмяДиалога, "HTML" );
            if( this.Сообщение.ПолучитьТекст("html", -10) ){
                элХтмл.Скрытый = false;
                this.Запись['@ТелоHTML'] = this.Сообщение.ПрочитатьHtml( 0 );
            } else элХтмл.Скрытый = true;

            var элДата = View( this.ИмяДиалога, 'Дата' );
            // todo при отправке письма (ответа на заявку) не проставляется дата 'Отправлено'
            if( this.Запись.Отправлено ) {
                элДата.Текст = "Отправлено:";
                this.Запись['@нДата'] = this.Запись.Отправлено;
            } else if( this.Запись.Получено ) {
                элДата.Текст = "Получено:";
                this.Запись['@нДата'] = this.Запись.Получено;
            } else {
                элДата.Текст = "Создано:";
                this.Запись['@нДата'] = this.Запись.Создано;
            }
                  // посморим, есть ли вложения у сообщения
            var элВложение = View( this.ИмяДиалога, "Вложение-Заголовок" );
            if( this.Сообщение.ЕстьВложение() ) {
                элВложение.Скрытый = false;
            } else {
                элВложение.Скрытый = true;
            }
            Перерисовать( this.ИмяДиалога, "Вложение-Заголовок" );
            if( !(this.Запись.Признаки & 1) ){
                this.Сообщение.УстановитьПризнак( "Прочитано" );
                // todo обновление дерева электронной почты
                ОбновитьЗапись( "Электронная почта", this.Запись.Папка );
                //if( '.Папка>Папка' != -10 )
                //ОбновитьДерево( "Электронная почта", "Структура почты", '.Папка>Папка' );
                //ОбновитьДерево( "Электронная почта", "Структура почты", '.Папка' );
                ОбновитьЗапись( "Электронные сообщения", this.Сообщение.НомерЗаписи );
            }
        } else {
            элМетка.Скрытый = false;
            элПросмотр.Скрытый = true;
            this.Запись.ОтКого = this.Запись['@нДата'] = this.Запись.Кому = this.Запись.Тема
                = this.Запись['@Тело'] = this.Запись['@ТелоHTML'] = "";
            this.Запись['Организация-Сообщения'] = -1;
        }
    }
}

/**
 * @extends БазовыйДиалог
 * @class класс Электронный_ящик - обработчик окна диалога 'Электронный_ящик' редактирования ящика в дереве/браузере почты
 */
class Электронный_ящик extends БазовыйДиалог {
    constructor() {
        super( 'Электронный ящик' );
        this.Ящик = undefined;
        this.ИзмененИсходящийПароль = false;
        this.ИзмененВходящийПароль = false;
        this.ИзмененШаблонПисьмо = false;
        this.ИзмененШаблонОтвет = false;
        this.ИзмененШаблонПересылка = false;
        this.ИзмененШаблонСохранение = false;
        this.ИзмененШаблонЗаявка = false;
        this.ЭлПрофиль = undefined;
        this.ЭлИсхСервер = undefined;
        this.ЭлИсхЛогин = undefined;
        this.ЭлИсхПароль = undefined;
    }

    Инициализация() { //+
        super.Инициализация();
        this.Ящик = new кЭлЯщик( this.Запись );

        if( this.НоваяЗапись ) this.Запись.Тип = 0;

        this.Запись['@ИсхПароль'] = this.Запись.ИсхПароль;
        this.Запись['@ВхПароль'] = this.Запись.ВхПароль;

        // if выбран Mapi протокол, инициализируем комбобокс существующих профилей
        if( this.Запись.Тип == 2 || this.Запись.Тип == 1 ) {
            if( this.Ящик.УстановитьПочту(true) ) {
                var стр_проф = this.Ящик.ЭлПочта.ПрофилиMapi();
                УстановитьСписокЗначений( this.ИмяДиалога, "@Профиль", стр_проф );
                this.Запись['@Профиль'] = this.Запись.ИсхСервер;
            }
        }

        // присваем признаки
        var признаки = ПрочитатьПолеСвязи( this.Запись, "ТрПризнаки" );
        if( признаки & 1 ) { // составлять сообщение как HTML
            this.Запись['@Составление'] = 1;
        } else { // составлять сообщение как Текст
            this.Запись['@Составление'] = 0;
        }
        if( !this.НоваяЗапись ) this.ПрочитатьШаблоны( признаки & 1 );

        // как отправлять HTML
        if( признаки & 2 ) {
            this.Запись['@ОтправкаHTML'] = 0;
        } else if( признаки & 4 ) { // Отправлять сообщения в HTML
            this.Запись['@ОтправкаHTML'] = 1;
        } else if( признаки & 8 ) { // Отправлять сообщение в виде как простого текста, так и HTML
            this.Запись['@ОтправкаHTML'] = 2;
        }
        this.ЭлПрофиль = View( "Транспорт", "@Профиль" );
        this.ЭлИсхСервер = View( "Транспорт", "@ИсхСервер" );
        this.ЭлИсхЛогин = View( "Транспорт", "@ИсхЛогин" );
        this.ЭлИсхПароль = View( "Транспорт", "@ИсхПарольМ" );
    }

    ОткрытиеВкладки( вкладка ) {
        switch( вкладка ) {
            case "Транспорт":
                var элМапи = View( "Транспорт", "Mapi" );
                var элСтандарт = View( "Транспорт", "Стандарт" );
                if( this.Запись.Тип == 0 ) {// if почтовый ящик настроен на стандартный протокол
                    элМапи.Скрытый = true;
                    элСтандарт.Скрытый = false;
                    this.Запись['@Протокол'] = "Протокол: POP3";
                } else { // почтовый ящик настроен на Mapi протокол
                    элМапи.Скрытый = false;
                    элСтандарт.Скрытый = true;
                    СкрытьФлаги( "Транспорт", "@Специальные настройки", "*" );
                    СкрытьФлаги( "Транспорт", "@СущПрофиль", "*" );
                    if( this.Запись.Тип == 1 ) { // специальные настройки
                        this.Запись['@Специальные настройки'] = 0;
                        this.Запись['@СущПрофиль'] = 1;
                        this.ЭлПрофиль.Запрещен = true;
                    } else {
                        this.Запись['@Специальные настройки'] = 1;
                        this.Запись['@СущПрофиль'] = 0;
                        элИсхСервер.Запрещен = true;
                        элИсхЛогин.Запрещен = true;
                        элИсхПароль.Запрещен = true;
                    }
                    this.Запись['@Протокол'] = "Протокол: MAPI";
                }
                break;

        }
    }

    Сохранение() { //+
        if( this.ИзмененИсходящийПароль || this.ИзмененВходящийПароль ) {
            var шифр = СоздатьКлючШифр();
            if( this.ИзмененВходящийПароль ) {
                this.Запись.ВхПароль = ЗашифроватьПароль( this.Запись['@ВхПароль'], шифр );
            } else {
                this.Запись.ВхПароль = ЗашифроватьПароль( this.Запись['@ВхПароль'], шифр, this.Запись.Шифр );
            }
            if( this.ИзмененИсходящийПароль ) {
                this.Запись.ИсхПароль = ЗашифроватьПароль( this.Запись['@ИсхПароль'], шифр );
            } else {
                this.Запись.ИсхПароль = ЗашифроватьПароль( this.Запись['@ИсхПароль'], шифр, this.Запись.Шифр );
            }
            this.Запись.Шифр = шифр;
        }
        if( this.Запись.Тип == 2 ) {
            this.Запись.ИсхСервер = this.Запись['@Профиль'];
        }
        var признаки = 0, этоHtml = false;
        if( (этоHtml = ПрочитатьПолеСвязи( this.Запись, "@Составление" )) > 0 ) признаки |= 1;

        var отправка = ПрочитатьПолеСвязи( this.Запись, "@ОтправкаHTML" );
        if( отправка == 0 ) {
            признаки |= 2;
        } else if( отправка == 1 ) {
            признаки |= 4;
        } else if( отправка == 2 ) {
            признаки |= 8;
        }
        this.Запись.ТрПризнаки = признаки;
        this.Ящик.ИдТранспорт = СохранитьЗапись( this.Запись, "Сообщения Транспорт" );
        this.Запись['Сообщение-Транспорт'] = this.Ящик.ИдТранспорт;
        if( this.НоваяЗапись ) {// при создании нового ящика добавим в него служебные папки
            this.Ящик.НомерЗаписи = СохранитьЗапись( this.Запись );
            this.Ящик.СоздатьПапки();
            this.Запись.Вид = 9;
        }
        this.Запись.ОтКого = this.Запись.Название;

        if( this.ИзмененШаблонПисьмо ) this.СохранитьШаблон( "Письмо", this.Запись['@ШаблонПисьмо'], этоHtml );
        if( this.ИзмененШаблонОтвет ) this.СохранитьШаблон( "Ответ", this.Запись['@ШаблонОтвет'], этоHtml );
        if( this.ИзмененШаблонПересылка ) this.СохранитьШаблон( "Пересылка", this.Запись['@ШаблонПересылка'], этоHtml );
        if( this.ИзмененШаблонСохранение ) this.СохранитьШаблон( "Сохранение", this.Запись['@ШаблонСохранение'], этоHtml );
        if( this.ИзмененШаблонЗаявка ) this.СохранитьШаблонСообщения( "ОтветЗаявка", this.Запись['@ШаблонОтветДО'], этоHtml );
    }

    Изменение( поле ) {
        switch( поле ) {
            case "@ИсхПароль":
                this.ИзмененИсходящийПароль = true;
                break;
            case "@ВхПароль":
                this.ИзмененВходящийПароль = true;
                break;
            case "@Специальные настройки":
                this.Запись['@СущПрофиль'] = 1; // сбросим флаг с Существующего профиля
                this.ЭлПрофиль.Запрещен = true;
                this.ЭлИсхСервер.Запрещен = false;
                this.ЭлИсхЛогин.Запрещен = false;
                this.ЭлИсхПароль.Запрещен = false;
                this.Запись.Тип = 1;
                break;
            case "@СущПрофиль":
                this.Запись['@Специальные настройки'] = 1; // сбросим флаг с Специальных настроек
                this.ЭлПрофиль.Запрещен = false;
                this.ЭлИсхСервер.Запрещен = true;
                this.ЭлИсхЛогин.Запрещен = true;
                this.ЭлИсхПароль.Запрещен = true;
                this.Запись.Тип = 2;
                break;
            case "@Составление":
                var этоHtml = ПрочитатьПолеСвязи( this.Запись, "@Составление" );
                if( this.ИзмененШаблонПисьмо ) this.СохранитьШаблон( "Письмо", this.Запись['@ШаблонПисьмо'], !этоHtml );
                if( this.ИзмененШаблонОтвет ) this.СохранитьШаблон( "Ответ", this.Запись['@ШаблонОтвет'], !этоHtml );
                if( this.ИзмененШаблонПересылка ) this.СохранитьШаблон( "Пересылка", this.Запись['@ШаблонПересылка'], !этоHtml );
                if( this.ИзмененШаблонСохранение ) this.СохранитьШаблон( "Сохранение", this.Запись['@ШаблонСохранение'], !этоHtml );
                if( this.ИзмененШаблонЗаявка ) this.СохранитьШаблон( "ОтветЗаявка", this.Запись['@ШаблонОтветДО'], !этоHtml );
                this.ИзмененШаблонПисьмо = this.ИзмененШаблонОтвет = this.ИзмененШаблонПересылка =
                    this.ИзмененШаблонСохранение = this.ИзмененШаблонЗаявка = false;
                this.ПрочитатьШаблоны( этоHtml );
                break;
            case "@ШаблонПисьмо":
                this.ИзмененШаблонПисьмо = true;
                break;
            case "@ШаблонОтвет":
                this.ИзмененШаблонОтвет = true;
                break;
            case "@ШаблонПересылка":
                this.ИзмененШаблонПересылка = true;
                break;
            case "@ШаблонСохранение":
                this.ИзмененШаблонСохранение = true;
                break;
            case "@ШаблонОтветДО":
                this.ИзмененШаблонЗаявка = true;
                break;
        }
    }

    ПрочитатьШаблоны( этоHtml ) {
        var зШаблон = Query( 'SELECT ШаблонТекст, ШаблонHTML, Название FROM ~Сообщения Шаблон~ WHERE [Транспорт-Шаблон]=:1', 10, "id,S" );
        зШаблон.УстановитьПараметры( this.Ящик.ИдТранспорт );
        while( зШаблон.Следующий() ) {
            switch( зШаблон.Название ) {
                case "Письмо":
                    this.Запись['@ШаблонПисьмо'] = этоHtml ? зШаблон.ШаблонHTML : зШаблон.ШаблонТекст;
                    break;
                case "Ответ":
                    this.Запись['@ШаблонОтвет'] = этоHtml ? зШаблон.ШаблонHTML : зШаблон.ШаблонТекст;
                    break;
                case "Пересылка":
                    this.Запись['@ШаблонПересылка'] = этоHtml ? зШаблон.ШаблонHTML : зШаблон.ШаблонТекст;
                    break;
                case "Сохранение":
                    this.Запись['@ШаблонСохранение'] = этоHtml ? зШаблон.ШаблонHTML : зШаблон.ШаблонТекст;
                    break;
                case "ОтветЗаявка":
                    this.Запись['@ШаблонОтветДО'] = этоHtml ? зШаблон.ШаблонHTML : зШаблон.ШаблонТекст;
                    break;
            }
        }
    }

    СохранитьШаблон( имяШаблона, текст, этоHtml ) {
        var шаблонЯщика = new кЭлШаблон( имяШаблона, this.Ящик.ИдТранспорт, этоHtml );
        if( шаблонЯщика.Прочитать() ) {
            шаблонЯщика.Сохранить( текст );
        }
    }

    ВставитьМакросПисьмо(){ //+
        var макрос = ЭлектронноеСообщение_Шаблон.ПолучитьМакрос();
        if( макрос ) {
            var позКурсор = ПолучитьПозициюРедактора( this.ИмяДиалога, '@ШаблонПисьмо' );
            var текст = this.Запись['@ШаблонПисьмо'];
            this.Запись['@ШаблонПисьмо'] = текст.substring( 0, позКурсор ) + макрос + текст.substring( позКурсор );
            this.ИзмененШаблонПисьмо = true;
        }
    }

    ВставитьМакросОтвет(){ //+
        var макрос = ЭлектронноеСообщение_Шаблон.ПолучитьМакрос();
        if( макрос ) {
            var позКурсор = ПолучитьПозициюРедактора( this.ИмяДиалога, '@ШаблонОтвет' );
            var текст = this.Запись['@ШаблонОтвет'];
            this.Запись['@ШаблонОтвет'] = текст.substring( 0, позКурсор ) + макрос + текст.substring( позКурсор );
            this.ИзмененШаблонОтвет = true;
        }
    }

    ВставитьМакросПересылка(){ //+
        var макрос = ЭлектронноеСообщение_Шаблон.ПолучитьМакрос();
        if( макрос ) {
            var позКурсор = ПолучитьПозициюРедактора( this.ИмяДиалога, '@ШаблонПересылка' );
            var текст = this.Запись['@ШаблонПересылка'];
            this.Запись['@ШаблонПересылка'] = текст.substring( 0, позКурсор ) + макрос + текст.substring( позКурсор );
            this.ИзмененШаблонПересылка = true;
        }
    }

    ВставитьМакросСохранение(){ //+
        var макрос = ЭлектронноеСообщение_Шаблон.ПолучитьМакрос();
        if( макрос ) {
            var позКурсор = ПолучитьПозициюРедактора( this.ИмяДиалога, '@ШаблонСохранение' );
            var текст = this.Запись['@ШаблонСохранение'];
            this.Запись['@ШаблонСохранение'] = текст.substring( 0, позКурсор ) + макрос + текст.substring( позКурсор );
            this.ИзмененШаблонСохранение = true;
        }
    }

    ВставитьМакросЗаявка(){ //+
        var макрос = ЭлектронноеСообщение_Шаблон.ПолучитьМакрос();
        if( макрос ) {
            var позКурсор = ПолучитьПозициюРедактора( this.ИмяДиалога, '@ШаблонЗаявка' );
            var текст = this.Запись['@ШаблонЗаявка'];
            this.Запись['@ШаблонЗаявка'] = текст.substring( 0, позКурсор ) + макрос + текст.substring( позКурсор );
            this.ИзмененШаблонЗаявка = true;
        }
    }
}

/**
 * @extends БазовыйДиалог
 * @class класс ЭлектронноеСообщение_Организация - обработчик окна диалога 'ЭлектронноеСообщение_Организация' для Выбора
 * организации для электронного сообщения по адресу отправителя
 */
class ЭлектронноеСообщение_Организация extends БазовыйДиалог {
    constructor(){
        super( 'ЭлектронноеСообщение Организация' );
        this.Организация = -1;
    }
    Сохранение(){
        var вОрганизации = ПолучитьВыборку( "ЭлСообщение Организация" );
        var выбор = ПозицияКурсора( this.ИмяДиалога, "ЭлСообщение Организация", "Ф" );
        ПрочитатьЗаписьТаблицы( вОрганизации, выбор );
        this.Организация = вОрганизации.Орг;
        УстановитьЗаголовокЭлемента( this.Диалог, "Организация-Сообщения>Название", вОрганизации.Название );
    }
}
/**
 * @extends БазоваяВыборка
 * @class класс ЭлектронноеВложение - обработчик Выборки 'ЭлектронноеВложение' для отображения вложения эл. сообщения
 */
class ЭлектронноеВложение extends БазоваяВыборка {
    constructor() {
        super( 'ЭлектронноеВложение' );
        this.зРазмер = Query( "SELECT DATALENGTH(Образ) Размер FROM ~Сообщения Вложения~ WHERE ROW_ID=:1", 1, "id,S" );
    }
    Инициализация(){
        this.ИмяОкна = this.Источник.Окно.Имя;
        if( this.ИмяОкна.indexOf("ЭлектронноеСообщение Создание") != -1 ||
            this.ИмяОкна.indexOf("ЭлектронноеСообщение Изменение") != -1 ){

            var мФайлы = ВыбратьФайл( "Открыть файл...", "", 2, "*.*, All Files" );
            var вложение = new кЭлВложение( this.Позиция, 'сообщение' );
            var прикреплено = 0;
            for( let i in мФайлы ){
                var аттрибутыФ = АтрибутыФайла( мФайлы[i] );
                if( аттрибутыФ.Размер > 0 ) {
                    вложение.ДобавитьФайл( мФайлы[i] );
                    прикреплено++;
                }
            }
            if( прикреплено > 0 ) ПеренабратьВыборку( this.ИмяВыборки );
        }
        return 1;
    }
    Открытие(){
        var вложение = new кЭлВложение( -1, 'сообщение' );
        вложение.Установить( НомерЗаписи(this.Запись), this.Запись.ИмяФайла );
            // открываем файл вложения на клиенте
        if( this.Запись.ИмяФайла ) { // здесь храниться имя файла с путем
            if( вложение.НомерЗаписи == -1 ) {
                Запустить( '"' + вложение.ИмяФайлаСохранение() + '"' );
            } else { // открываем файл вложения на клиенте, предварительно загрузив его из базы
                СоздатьКаталог( "Report" );
                var имяФайла = вложение.ОткрытьФайл( "CLIENT:Report\\" );
                if( имяФайла ) {
                    Запустить( '"' + имяФайла + '"' );
                } else {
                    ВсплывающееОкно( "Невозможно открыть файл " + имяФайла, this.Источник.Окно.Имя );
                }
            }
        }
        return 1;
    }
    Удаление(){
        this.ИмяОкна = this.Источник.Окно.Имя;
        if( this.ИмяОкна.indexOf("ЭлектронноеСообщение Создание") == -1 &&
            this.ИмяОкна.indexOf("ЭлектронноеСообщение Изменение") == -1 ) return 1;
    }
    Расчет(){
        this.зРазмер.УстановитьПараметры( НомерЗаписи(this.Запись) );
        this.Запись.Размер = this.зРазмер.Следующий() ? this.зРазмер.Размер / 1024 : 0;
    }

    /**
     * открывает файл вложения программой просмотра по умолчанию
     */
    КП1(){ // открыть файл вложения
        return this.Открытие();
    }

    /**
     * сохраняет файл вложения в выбранный каталог на диске по имени файла
     */
    КП2(){ // сохранить файл на диск
        var путь = ВыбратьКаталог( "Сохранить файл", КаталогВнешнихФайлов() );
        if( путь ){
            путь += "\\";
            this.ИмяОкна = this.Источник.Окно.Имя;
            var мЗаписи = this.ПолучитьВыделенныеЗаписи( false );
            var вложение = new кЭлВложение( -1, 'сообщение' );
            for( let номерЗаписи of мЗаписи ){
                вложение.Установить( номерЗаписи );
                var имяФайла = вложение.ОткрытьФайл( путь );
                if( имяФайла ) {
                    ВсплывающееОкно( "Файл сохранен в " + путь + имяФайла, this.Источник.Окно.Имя );
                } else {
                    ВсплывающееОкно( "Невозможно сохранить файл " + имяФайла, this.Источник.Окно.Имя );
                }
            }
        }
    }
}

/**
 * @extends БазовыйДиалог
 * @class класс ЭлектронноеСообщение_Создание - обработчик окна диалога 'ЭлектронноеСообщение Создание' Выборки 'Электронные сообщения'
 */
class ЭлектронноеСообщение_Создание extends БазовыйДиалог {
    constructor() {
        super( 'ЭлектронноеСообщение Создание' );
        /**
         * оригинальное сообщение, с которого пришла операция ответа, или объект для отправки электронного сообщения
         * @type {кЭлСообщение}
         */
        this.Сообщение = undefined;
        this.Исходящее = false;
        this.Организация = -1;
        this.ИзмененТекст = false;
        this.ВнешнийТекст = '';
        this.ИмяШаблона = '';
        this.НадоОбновить = false;
        // для документооборота
        this.Заявка = -1;
        this.Задание = -1;
    }
    Инициализация(){ //+
        super.Инициализация();
        if( this.Запись.Позиция <= 0 ){
            this.Запись.Позиция = this.Запись.Папка;
        }
        this.Сообщение = new кЭлСообщение( this.Запись.Позиция );
        this.Сообщение.ПрочитатьЯщик();
        if( Задача() == 'Документооборот'){
            this.Задание = this.Запись.Задание;
            this.Заявка  = this.Запись['Заявка-Почта'];
            this.ВнешнийТекст = this.Запись.ТелоСообщения;
        }

        if( this.Сообщение.Ящик.Название ) {
            УстановитьЗаголовок( this.ИмяДиалога, "Редактирование письма - " + this.Сообщение.Ящик.Название );
            this.ИмяДиалогаДляПанели = "Новое сообщение - " + this.Сообщение.Ящик.Название;
        }

        var текстШаблон = '';
        switch( this.Запись.Операция ){
            case "Переслать":
                this.ИмяШаблона = "Пересылка";
                  // запишем тему письма
                if( this.Запись.Тема.toLowerCase().indexOf('fwd:') != 0 ) {
                    this.Запись.Тема = "Fwd: " + this.Запись.Тема;
                }
                this.Сообщение.КопироватьВложение( СохранитьЗапись(this.Запись), -10 );
                break;
            case "Перенаправить":
                this.ИмяШаблона = "Перенаправить";
                break;
            case "Ответ": // быстрый ответ на сообщение
                this.ИмяШаблона = "Ответ";
                this.Организация = this.Запись['Организация-Сообщения'];
                if( this.Запись.Тема.toLowerCase().indexOf('re:') != 0 ) {
                    this.Запись.Тема = "Re: " + this.Запись.Тема;
                }
                break;
            case "ДОборот":
                this.ИмяШаблона = "ОтветЗаявка";
                break;
            default :
                this.ИмяШаблона = "Письмо";
                this.Запись.Позиция = -1;
        }
        var шаблон = new кЭлШаблон( this.ИмяШаблона, this.Сообщение.Ящик.ИдТранспорт, this.Сообщение.Ящик.ЭтоHtml() );
        if( шаблон.Прочитать() ) {
            if( this.Запись.Операция == "Перенаправить" ) {
                if( !this.Сообщение.Ящик.ЭтоHtml() ) {
                    текстШаблон = шаблон.ШаблонТекст( this.Сообщение );
                } else {
                    текстШаблон = шаблон.ШаблонHtml( this.Сообщение );
                }
            } else {
                текстШаблон = шаблон.Разобрать( this.Сообщение, this.Запись.Тема, this.Запись.Кому, this.Задание,
                    this.Заявка, this.ВнешнийТекст );
            }
            this.Запись['@Редактор письма'] = текстШаблон;
        }
            // посылаем команду "КП0", чтобы на нее набрать списки в другие строки адресов(Копия, Скрытая копия)
            // но при этом не трмозить на инициализации
        КомандаОкну( "USER_CMD0", this.ИмяДиалога );
    }
    /**
     * устанавливаем текст запроса полям Коия и СкрытаяКопия
     */
    КП0(){ //+
        var стрЗапрос = "SELECT CASE " +
            "   WHEN PATINDEX('%<%', email1)<>0 " +
            "      THEN LTRIM(RTRIM(SUBSTRING(email1, 0, PATINDEX('%<%', email1)))) " +
            "   WHEN фио<>'' " +
            "      THEN фио " +
            "   ELSE Название END + CASE " +
            "   WHEN фио<>'' " +
            "      THEN ' - ' + Название " +
            "   ELSE '' END + CASE " +
            "   WHEN PATINDEX('%<%', email1)<>0 " +
            "      THEN SUBSTRING(email, PATINDEX('%<%', email),len(email)) " +
            "   WHEN PATINDEX('%;%', email)<>0 " +
            "      THEN '<' +SUBSTRING( email, 0, PATINDEX('%;%', email)) + '>' + SUBSTRING( email, PATINDEX('%;%', email), LEN(email)) " +
            "   ELSE '<' + email + '>' END as Название, '' as n1, Организация [ROW_ID] " +
            "FROM (SELECT Название, '' as фио, email, CASE " +
            "        WHEN PATINDEX('%;%', email)<>0 " +
            "           THEN SUBSTRING(email, 0, PATINDEX('%;%', email)) " +
            "        ELSE email END as email1, ROW_ID as Организация " +
            "      FROM ~Организации~ " +
            "      WHERE email IS NOT NULL AND email <> '' " +
            "      UNION ALL " +
            "      SELECT org.Название, man.ФИО, man.email, CASE " +
            "         WHEN PATINDEX('%;%', man.email)<>0 " +
            "            THEN SUBSTRING(man.email, 0, PATINDEX('%;%', man.email)) " +
            "         ELSE man.email END as email1, man.[Организация-Частные лица] [Организация] " +
            "      FROM ~Частные лица~ man " +
            "         JOIN ~Организации~ org ON man.[Организация-Частные лица]=org.ROW_ID " +
            "      WHERE man.email IS NOT NULL AND man.email <> '') s1 " +
            "ORDER BY Название";
        УстановитьЗапрос( this.ИмяДиалога, "Копия", стрЗапрос );
        УстановитьЗапрос( this.ИмяДиалога, "СкрытаяКопия", стрЗапрос );

        return 1;
    }

    /**
     * создать и сохранить письмо в папке "Исходящие"
     */
    КП4(){
        this.Исходящее = 1;
        var вернуть = this.ПроверкаДанных();
        if( вернуть ) return вернуть;

        this.Запись['Папка'] = this.Сообщение.Ящик.Исходящие;
        this.Запись.Приоритет = 0;
        this.Запись['Организация-Сообщения'] = this.Организация;
        this.Запись.Признаки = 2;
            // УстановитьПризнакПисьма "Заблокировано";
        if( ПрочитатьПолеСвязи(this.Запись, "@Черновик") ) this.Запись.Признаки += 64;
        this.Запись.ОтКого = this.Сообщение.УстановитьОтправителя();
        switch( this.Запись.Операция ){
            case "Переслать":
                this.Запись.Признаки += 16;
                this.Сообщение.УстановитьПризнак( "Переслано" );
                break;
            case "Перенаправить":
                this.Запись.Признаки += 4;
                this.Сообщение.УстановитьПризнак( "Перенаправлено" );
                break;
            case "Ответ":
                this.Запись.Признаки += 32;
                this.Сообщение.УстановитьПризнак( "Ответ" );
                break;
        }
        this.Сообщение.НомерЗаписи = НомерЗаписи( this.Запись );
        if( this.Сообщение.НомерЗаписи == -1 )
            this.Сообщение.НомерЗаписи = СохранитьЗапись( this.Запись );
        this.Сообщение.СохранитьТекст( this.Запись['@Редактор письма'] );
        this.НадоОбновить = true;

        this.ЗакрытьСохранение();
        return 1;
    }

    /**
     * вставка быстрого шаблона в тело сообщения
     */
    КП5(){ //+
        var мЗаписи = ВыборВОкне( "ЭлектронноеСообщение Шаблоны" );
        var выбор = -1;
        for( let нз in мЗаписи ) {
            выбор = Number( нз );
            break;
        }

        var шаблон = new кЭлШаблон( '', this.Сообщение.Ящик.ИдТранспорт, this.Сообщение.Ящик.ЭтоHtml() );
        if( !шаблон.Прочитать(выбор) ) return 1;
            // разбираем быстрый шаблон
        var текстШаблона = шаблон.Разобрать( this.Сообщение, this.Запись.Тема, this.Запись.Кому, this.Задание,
            this.Заявка, this.ВнешнийТекст );
        if( текстШаблона ){
            // todo убрать когда появиться наследник для Html
            //if( this.ИмяДиалога == "ЭлектронноеСообщение Создание" ){
            if( this.ИмяДиалога.indexOf('html') == -1 ){
                var позКурсор = ПолучитьПозициюРедактора( this.ИмяДиалога, "@Редактор письма" );
                var стрНач = this.Запись['@Редактор письма'].substr( 0, позКурсор );
                var стрКнц = this.Запись['@Редактор письма'].substr( позКурсор );
                // вставляем полученную строку в текущую позицию редактора
                this.Запись['@Редактор письма'] = стрНач +  текстШаблона +  стрКнц;
            } else {
                var элРедактор = HtmlEditor( this.ИмяДиалога, "@Редактор письма" );
                элРедактор.ВставитьHTML( текстШаблона );
            }
        }
        this.ИзмененТекст = true;
        return 1;
    }

    /**
     * изменяем ящик для отправки сообщения
     */
    КП7(){
        var мЗаписи = ВыборВОкне( "Электронные ящики" );
        var выбор = -1;
        for( let нз in мЗаписи ) {
            выбор = Number(нз);
            break;
        }
        var ящик = new кЭлЯщик( выбор );
        УстановитьЗаголовок( this.ИмяДиалога, "Редактирование письма - " + ящик.Название );
        return 1;
    }

    /**
     * отправка сообщения, ответа на сообщение или пересылка
     */
    Сохранение(){ //+
        // при сохранении письма в исходящие этот обработчик не нужен
        if( this.Исходящее ) return "";
        var поле = this.ПроверкаДанных();
        if( поле ) return поле;
        this.Сообщение.Прочитать( this.Запись );
        if( this.Сообщение.НомерЗаписи == -1 ) this.Сообщение.НомерЗаписи = this.Сохранить();

        var plain = undefined, html = undefined;
        if( this.Сообщение.Ящик.ЭтоHtml() ){ // формируем письмо в формате html
            if( this.Сообщение.Ящик.СоставлениеТекст() ) plain = HTMLВТекст( this.Запись['@Редактор письма'], 144 );
            if( this.Сообщение.Ящик.СоставлениеHtml() ) html = this.Сообщение.УстановитьContentID( this.Запись['@Редактор письма'] );
        } else {
            plain = this.Запись['@Редактор письма'];
        }
        if( !this.Сообщение.СоздатьСообщение(plain, html) ){
            Сообщить( 'Некорректные настройки почтового ящика', 'OK,ERROR_TITLE' );
            return 'Кому';
        }
        // добавим к сообщению его вложения
        var мВложения = this.Сообщение.ПолучитьВложение( -10, this.Сообщение.Ящик.КаталогХранилище );
        for( let вложение of мВложения ){
            if( !вложение.ИмяФайла ){
                Сообщить( "Не удалось распаковать из поля файл\n " + зВложения.ИмяФайла, 'OK,ERROR_TITLE' );
                return 'Кому';
            }
            this.Сообщение.Ящик.ЭлПочта.ДобавитьВложение( вложение.ИмяФайла, вложение.ContentId );
        }

        СоздатьОкноСостояния( "ЭлектроннаяПочта Состояние", "Сообщение", "Соединение с ..."  );
            // добавляем ко вложению тела писем, входящих в иерархию этого письма при пересылке письма
        //var отправлено = this.Сообщение.Ящик.ЭлПочта.ОтправитьПисьмо();
        var отправлено = true; // пока без отправки
        if( отправлено ) { // при удачной отправке письма положим его в папку отправленные
            УстановитьПоляОкнаСостояния( "Сообщение1", "Сохранение сообщения..." );
            this.Сообщение.СохранитьТекст( this.Запись['@Редактор письма'] );
            this.Запись.Папка = this.Сообщение.Ящик.Отправленные;
            this.Запись.Приоритет = this.Сообщение.Ящик.ЭлПочта.Приоритет;
            this.Запись['Организация-Сообщения'] = this.Организация;
            this.Запись.Признаки = 10; // признак отправленного письма
            this.Запись.ОтКого = this.Сообщение.Ящик.ЭлПочта.ОтКого;

            switch( this.Запись.Операция ){
                case "Переслать":
                    this.Запись.Признаки += 16;
                    new кЭлСообщение(this.Запись.Позиция).УстановитьПризнак( "Переслано" );
                    break;
                case "Перенаправить":
                    this.Запись.Признаки += 4;
                    new кЭлСообщение(this.Запись.Позиция).УстановитьПризнак( "Перенаправлено" );
                    break;
                case "Ответ":
                    this.Запись.Признаки += 32;
                    new кЭлСообщение(this.Запись.Позиция).УстановитьПризнак( "Ответ" );
                    break;
                case "Создание": // при немодальном создании диалога запись требует сохранения
                    this.Сохранить();
                    break;
            }
            //КомандаОкну( 4186, "Электронная почта" ); // команда перенабрать Выборку (Перенабрать Выборку работает не как нужно!)
        }

        УдалитьОкноСостояния();
        this.НадоОбновить = true;
        if( !отправлено ) return "Кому";
    }
    Отмена(){ //+
        if( !this.Исходящее && ДаНет("Вы действительно хотите отменить отправку письма?") == 0 ){
            return "Кому";
        }
        if( this.Операция == "Переслать" ) УдалитьЗапись( this.Запись );
    }
    Изменение( поле ){
        switch( поле ){
            case "@Черновик":
                var элОтправить = View( this.ИмяДиалога, "&Отправить" );
                if( ПрочитатьПолеСвязи(this.Запись, "@Черновик") ) {
                    элОтправить.Запрещен = true;
                } else {
                    элОтправить.Запрещен = false;
                }
                break;
            case "Кому": //+
            case "Тема": //+
                if( поле == "Кому" ) this.Организация = ЗначениеВыпадающегоСписка( this.ИмяДиалога, "Кому" );
                if( !this.ИзмененТекст && this.ИмяШаблона ){
                    var шаблон = new кЭлШаблон( this.ИмяШаблона, this.Сообщение.Ящик.ИдТранспорт, this.Сообщение.Ящик.ЭтоHtml() );
                    if( шаблон.Прочитать() ) {
                        var текстШаблон = шаблон.Разобрать( new кЭлСообщение( this.Позиция ), this.Запись.Тема, this.Запись.Кому, this.Задание,
                            this.Заявка, this.ВнешнийТекст );
                        this.Запись['@Редактор письма'] = текстШаблон;
                    }
                }
                break;
            case "@Организация-Сообщения":
            case "@Представитель-Сообщения":
                var обАдрес;
                if( поле == "@Организация-Сообщения" ) {
                    обАдрес = this.Сообщение.АдресаОрганизаций( this.Запись['@Организация-Сообщения'] );
                } else {
                    обАдрес = this.Сообщение.АдресаПредставителей( this.Запись['@Представитель-Сообщения'] );
                }
                if( !this.Запись.Кому ) {
                    this.Организация = обАдрес.Организация;
                } else {
                    this.Запись.Кому += ";";
                }
                this.Запись.Кому += обАдрес.Адреса;
                break;
            case "@Связь1":
            case "@Связь2":
                var обАдрес;
                if( поле == "@Связь1" ) {
                    обАдрес = this.Сообщение.АдресаОрганизаций( this.Запись['@Связь1'] );
                } else {
                    обАдрес = this.Сообщение.АдресаПредставителей( this.Запись['@Связь2'] );
                }
                if( this.Запись.Копия ) this.Запись.Копия += ";";

                this.Запись.Копия += обАдрес.Адреса;
                break;
            case "@Связь3":
            case "@Связь4":
                var обАдрес;
                if( поле == "@Связь3" ) {
                    обАдрес = this.Сообщение.АдресаОрганизаций( this.Запись['@Связь3'] );
                } else {
                    обАдрес = this.Сообщение.АдресаПредставителей( this.Запись['@Связь4'] );
                }
                if( this.Запись.СкрытаяКопия ) this.Запись.СкрытаяКопия += ";";

                this.Запись.СкрытаяКопия += обАдрес.Адреса;
                break;
            case "@Редактор письма":
                this.ИзмененТекст = true;
                break;
        }
    }
    Модифицирована(){
        if( this.НадоОбновить ){
            this.Сообщение.УстановитьДату( 'Создано,Получено,Отправлено' );
            // перенабираем выборку, чтобы письма убрались в свои папки
            ПеренабратьВыборку( 'Электронные сообщения' );
        }
    }
    ПроверкаДанных(){
        if( !this.Запись.Кому ){
            ВсплывающееОкно( "Не указано ни одного адресата письма", this.ИмяДиалога, "@Кому" );
            return "Кому";
        }
        if( !this.Запись.Тема ){
            if( !ДаНет("Тема письма пустая. Продолжить " + (!this.Исходящее ? "отправку?" : "сохранение?")) ) return "Тема";
        }
        if( !this.Запись['@Редактор письма'] ){
            if( !ДаНет("Текст письма пустой. Продолжить " + (!this.Исходящее ? "отправку?" : "сохранение?")) ) return "@Редактор письма";
        }
        return '';
    }
}

/**
 * @extends БазоваяВыборка
 * @class класс Электронные_шаблоны - обработчик Выборки 'Электронные шаблоны' окна 'ЭлектронноеСообщение Шаблоны'
 */
class Электронные_шаблоны extends БазоваяВыборка {
    constructor() {
        super( 'Электронные шаблоны', 'ЭлектронноеСообщение Шаблоны' );
    }
    Фильтр(){
        var мФильтр = {};
        мФильтр["Запрос"] = " t1.Название not in ('Письмо', 'Ответ', 'Пересылка', 'Сохранение', 'ОтветЗаявка') ";
        return мФильтр;
    }
}

/**
 * @extends БазовыйДиалог
 * @class класс ЭлектронноеСообщение_Шаблон - обработчик окна диалога 'ЭлектронноеСообщение Шаблон' шаблонов электронной почты
 */
class ЭлектронноеСообщение_Шаблон extends БазовыйДиалог {
    constructor() {
        super( 'ЭлектронноеСообщение Шаблон' );
        /**
         * шаблон html для отслеживания его изменения
         * @type {string}
         */
        this.ШаблонHtml = '';
    }
    Инициализация(){
        if( this.Запись.ТрПризнаки & 1 ) {// для шаблона привязанного к ящику с составлением html, сразу покажем шаблон html
            this.Запись['@ТипШаблона'] = 1;
            this.Запись['@Шаблон'] = this.Запись.ШаблонHTML;
        } else {
            this.Запись['@ТипШаблона'] = 0;
            this.Запись['@Шаблон'] = this.Запись.ШаблонТекст;
        }
        this.ШаблонHtml = this.Запись.ШаблонHTML;
        super.Инициализация();
    }
    Сохранение(){
        switch( this.Запись.Название.toLowerCase() ) { // проверяем имя шаблона
            case "письмо":
            case "ответ":
            case "пересылка":
            case "сохранение":
            case "ответзаявка":
                ВсплывающееОкно( "Недопустимое имя шаблона", this.ИмяДиалога, "Название" );
                return "Название";
        }
        var шаблон = new кЭлШаблон( this.Запись.Название, this.Запись['Транспорт-Шаблон'], this.Запись['@ТипШаблона'] != "Текстовый шаблон" );
        if( this.НоваяЗапись ) { // при сохранении нового шаблона проверяем, нет ли такого уже
            if( шаблон.Существует() ){
                ВсплывающееОкно( "Такое имя шаблона уже есть в базе. Введите другое название шаблона", this.ИмяДиалога, "Название" );
                return "Название";
            }
        }
        шаблон.Прочитать( this.НомерЗаписи );
        if( this.Запись['@ТипШаблона'] == "Текстовый шаблон" ) {
            this.Запись.ШаблонТекст = this.Запись['@Шаблон'];
        } else {
            this.Запись.ШаблонHTML = this.Запись['@Шаблон'];
        }
        if( this.ШаблонHtml != this.Запись.ШаблонHTML ){
            this.Запись.ШаблонHTML = ОбработатьHtml( this.Запись.ШаблонHTML );
        }
    }
    Изменение( поле ){
        switch( поле ){
            case "@ТипШаблона":
                if( this.Запись['@ТипШаблона'] == "Текстовый шаблон" ){
                    this.Запись.ШаблонHTML = this.Запись['@Шаблон'];
                    this.Запись['@Шаблон'] = this.Запись.ШаблонТекст;
                } else {
                    this.Запись.ШаблонТекст = this.Запись['@Шаблон'];
                    this.Запись['@Шаблон'] = this.Запись.ШаблонHTML;
                }
        }
    }
    static ПолучитьМакрос(){
        var ii = 0, мМакросы = [];
        мМакросы[ii++] = "Текст@ %CURSOR (Задать начальную позицию курсора в редакторе)";
        мМакросы[ii++] = "Текст@ %TEXT (Текст ориг. письма)";
        мМакросы[ii++] = "Текст@ %HTML (HTML Текст ориг. письма)";
        мМакросы[ii++] = "Текст@ %QUOTES (Текст ориг. письма как цитата)";
        мМакросы[ii++] = "Текст@ %DATE (Настоящая дата полностью)";
        мМакросы[ii++] = "Текст@ %DATESHORT (Настоящая дата коротко)";
        мМакросы[ii++] = "Текст@ %TIME (Настоящее время коротко)";
        мМакросы[ii++] = "Текст@ %TIMELONG (Настоящее время полностью)";
        мМакросы[ii++] = "Текст@ %DOW (Настоящий день недели)";
        мМакросы[ii++] = "Текст@ %ODATE (Дата ориг. письма полностью)";
        мМакросы[ii++] = "Текст@ %ODATESHORT (Дата ориг. письма коротко)";
        мМакросы[ii++] = "Текст@ %OTIME (Время ориг. письма коротко)";
        мМакросы[ii++] = "Текст@ %OTIMELONG (Время ориг. письма полностью)";
        мМакросы[ii++] = "Текст@ %ODOW (День недели ориг. письма )";
        мМакросы[ii++] = "Текст@ %SUBJ (Тема настоящего письма)";
        мМакросы[ii++] = "Текст@ %OSUBJ (Тема ориг. письма)";
        мМакросы[ii++] = "Информация об отправителе@ %FROMNAME (Имя и фамилия отправителя)";
        мМакросы[ii++] = "Информация об отправителе@ %FROMFNAME (Имя отправителя)";
        мМакросы[ii++] = "Информация об отправителе@ %FROMLNAME (Фамилия отправителя)";
        мМакросы[ii++] = "Информация об отправителе@ %REPLYNAME (Имя и фамилия из обратного адреса)";
        мМакросы[ii++] = "Информация об отправителе@ %REPLYFNAME (Имя из обратного адреса)";
        мМакросы[ii++] = "Информация об отправителе@ %REPLYLNAME (Фамилия из обратного адреса)";
        мМакросы[ii++] = "Информация об отправителе@ %FROMADDR (E-mail адрес отправителя)";
        мМакросы[ii++] = "Информация об отправителе@ %REPLYADDR (Обратный e-mail адрес отправителя)";
        мМакросы[ii++] = "Информация об отправителе@ %OFROMNAME (Имя и фамилия отправителя ориг. письма)";
        мМакросы[ii++] = "Информация об отправителе@ %OFROMFNAME (Имя отправителя ориг. письма)";
        мМакросы[ii++] = "Информация об отправителе@ %OFROMLNAME (Фамилия отправителя ориг. письма)";
        мМакросы[ii++] = "Информация об отправителе@ %OFROMADDR (E-mail адрес отправителя ориг. письма)";
        мМакросы[ii++] = "Информация о получателе@ %TONAME (Имя и фамилия адресата)";
        мМакросы[ii++] = "Информация о получателе@ %TOFNAME (Имя адресата)";
        мМакросы[ii++] = "Информация о получателе@ %TOLNAME (Фамилия адресата)";
        мМакросы[ii++] = "Информация о получателе@ %TOADDR (E-mail адрес получателя)";
        мМакросы[ii++] = "Информация о получателе@ %OTONAME (Имя и фамилия адресата ориг. письма)";
        мМакросы[ii++] = "Информация о получателе@ %OTOFNAME (Имя адресата ориг. письма)";
        мМакросы[ii++] = "Информация о получателе@ %OTOLNAME (Фамилия адресата ориг. письма)";
        мМакросы[ii++] = "Информация о получателе@ %OTOADDR (E-mail адрес получателя ориг. письма)";
        мМакросы[ii++] = "Разное@ %ACCOUNTNAME (Имя текущего ящика)";
        мМакросы[ii++] = "Разное@ %ATTACHMENTS (Список прикрепленных файлов)";
        мМакросы[ii++] = "Разное@ %OATTACHMENTS (Список прикрепленных файлов ориг. письма)";
        мМакросы[ii++] = "Разное@ %USERNAME (ФИО пользователя)";
        мМакросы[ii++] = "Разное@ %TEXTCARD (Текст заявки)";
        мМакросы[ii++] = "Разное@ %TEXTTASK (Текст задания)";
        мМакросы[ii++] = "Разное@ %QTEXTCARD (Текст заявки как цитата)";
        мМакросы[ii++] = "Разное@ %QTEXTTASK (Текст задания как цитата)";
        мМакросы[ii++] = "Разное@ %MESSAGE (Комментарий к заданию)";
        мМакросы[ii++] = "Разное@ %IMAGE (Картинка)";

        var рез = ВыборВарианта3( "", мМакросы );
        var тШаблон = '';
        if( рез ){
            if( рез.indexOf("IMAGE") != -1 ){
                // todo только для html - передать в параметрах
                тШаблон = ВыбратьФайл( "Выберите изображение...", "*.bmp,BMP(*.bmp);*.png,PNG(*.png);*.jpeg,JPEG(*.jpeg);*.jpg,JPG(*.jpg);", 0 );
                if( тШаблон ){
                    тШаблон = тШаблон.substr( 8 );
                    тШаблон = '%IMAGE src="file:///' + тШаблон + '"';
                }
            } else {
                тШаблон = рез.substring( рез.indexOf('%'), рез.indexOf(' (') );
            }
            /*var позКурсор = ПолучитьПозициюРедактора( ИмяТекущегоОкна(), имяРедактора );
            var значение = стрШаблон.substring( 0, позКурсор ) + тШаблон + стрШаблон.substring( позКурсор );
            switch( имяРедактора ){
                case "@ШаблонПисьмо":
                    '@ШаблонПисьмо' = значение;
                    break;
                case "@ШаблонОтвет":
                    '@ШаблонОтвет' = значение;
                    break;
                case "@ШаблонПересылка":
                    '@ШаблонПересылка' = значение;
                    break;
                case "@ШаблонСохранение":
                    '@ШаблонСохранение' = значение;
                    break;
                case "@ШаблонОтветДО":
                    '@ШаблонОтветДО' = значение;
                    break;
                case "@Шаблон":
                    '@Шаблон' = значение;
                    break;
                case "Шаблон":
                    'Шаблон' = значение;
                    break;
            }*/
        }
        return тШаблон;
    }

    /**
     * вставляет макрос в текст шаблона
     */
    ВставитьМакрос(){
        var макрос = ЭлектронноеСообщение_Шаблон.ПолучитьМакрос();
        if( макрос ) {
            var позКурсор = ПолучитьПозициюРедактора( this.ИмяДиалога, '@Шаблон' );
            var текст = this.Запись['@Шаблон'];
            this.Запись['@Шаблон'] = текст.substring( 0, позКурсор ) + макрос + текст.substring( позКурсор );
        }
    }
}

/**
 * @extends ЭлектронноеСообщение_Создание
 * @class класс ЭлектронноеСообщение_Изменение - обработчик окна диалога 'ЭлектронноеСообщение Изменение' электронной почты
 */
class ЭлектронноеСообщение_Изменение extends ЭлектронноеСообщение_Создание {
    constructor() {
        super();
        this.ИмяДиалога = 'ЭлектронноеСообщение Изменение';
        this.Корень = -10;
    }
    Инициализация(){ //+
        this.НомерЗаписи = НомерЗаписи( this.Запись );
        this.ИмяДиалогаДляПанели = "Исходящее: " + this.Запись.Кому;
        this.Сообщение = new кЭлСообщение( this.Запись );
        this.Сообщение.ПрочитатьЯщик();

        if( this.Сообщение.Ящик.Название ) {
            УстановитьЗаголовок( this.ИмяДиалога, "Редактирование письма - " + this.Сообщение.Ящик.Название );
        }
        if( this.Сообщение.Ящик.ЭтоHtml() ){
            if( this.Сообщение.ПолучитьТекст("html", -10) ) {
                this.Запись['@Редактор письма'] = this.Сообщение.ПрочитатьHtml( 0 );
            }
        }
        if( !this.Запись['@Редактор письма'] ){
            this.Запись['@Редактор письма'] = this.Сообщение.ПолучитьТекст( "plain", -10 );
        }

        // посмотрим иерархию сообщения
        var естьИерархия = Query( 'SELECT TOP 1 owner.ROW_ID FROM ~Сообщения Вложения~ owner ' +
            '   JOIN ~Сообщения Вложения~ child ON owner.ROW_ID=child.Письмо ' +
            'WHERE owner.[Вложение-Заголовок]=:1 AND owner.Письмо=:2 AND owner.Тип > 2 AND child.Тип > 2' , 1, "head,S,owner,S" );
        естьИерархия.УстановитьПараметры( this.Сообщение.НомерЗаписи, this.Корень );
        if( естьИерархия.Следующий() ){
            var элИерархия = View( this.ИмяДиалога, "Иерархия" );
            элИерархия.Скрытый = 0;
            this.Корень = естьИерархия.ROW_ID;
        }

        if( this.Запись.Отправлено ) {
            this.Запись['@нДата'] = this.Запись.Отправлено;
        } else if( this.Запись.Получено ) { // if есть дата получения, то выведем её
            this.Запись.зДата = "Получено:";
            var элДата = View( this.ИмяДиалога, 'Дата' );
            элДата.Текст = "Получено:";
            this.Запись['@нДата'] = this.Запись.Получено;
        }
        if( !this.Запись.ОтКого ) {
            var элОтветить = View( this.ИмяДиалога, "Ответить" );
            элОтветить.Запрещен = true;
        }
        this.Организация = this.Запись['Организация-Сообщения'];
            // посылаем команду "КП3" чтобы на нее набрать списки в другие строки адресов(Копия, Скрытая копия)
        КомандаОкну( 'USER_CMD3', this.ИмяДиалога );
    }

    /**
     * отображает цепочку вложенных писем(образовыввается цепочка при пересылке)
     */
    КП0(){ //+
        if( this.Корень != -10 ){
            // откроем диалог "сообщение" для вложенного письма
            var длг = СоздатьДиалог( "ЭлектронноеСообщение Иерархия" );
            длг.ОтКого = this.Запись.ОтКого;
            длг.Кому = this.Запись.Кому;
            длг.Тема = this.Запись.Тема;
            длг['@нДата'] = this.Запись['@нДата'];
            длг.Обработчик.зДата = this.ЭлДата.Заголовок;
            длг.Обработчик.Корень = this.Корень;
            длг.Обработчик.Позиция = this.Сообщение.НомерЗаписи;
            длг.Выполнить();
        }
    }

    /**
     * устанавливаем текст запроса полям Копия и СкрытаяКопия
     */
    КП3(){ //+
        return super.КП0();
    }

    /**
     * вставка быстрого шаблона в тело сообщения
     */
    КП4(){ //+
        return super.КП5()
    }

    /**
     * отправить письмо
     */
    КП5(){ //+
        var поле = super.Сохранение();
        if( поле ) return поле;

        Команда( 15 ); // сохраняем отправленное сообщение в базу и закрываем окно
    }
    КП7(){}
    Сохранение(){ //+
        this.Запись['Организация-Сообщения'] = this.Организация;
        this.Сообщение.СохранитьТекст( this.Запись['@Редактор письма'] );
    }
    Отмена(){}
    Закрытие(){ //+ // при закрытии окна обновим состояние сообщения
        if( !(this.Запись.Признаки & 1) ){
            this.Сообщение.УстановитьПризнак( "Прочитано" );
            // todo обновление дерева электронной почты
            ОбновитьЗапись();
        }
    }
    Изменение( поле ){ //+
        switch( поле ){
            case 'Кому':
                this.Организация = ЗначениеВыпадающегоСписка( this.ИмяДиалога, "Кому" );
                break;
            default :
                super.Изменение( поле );
        }
    }
    Ответить(){ //+
        this.Сообщение.Ответить( "Ответ" );
    }
    Перенаправить(){ //+
        this.Сообщение.Ответить( "Перенаправить" );
    }
    Переслать(){ //+
        this.Сообщение.Ответить( "Переслать" );
    }
}

/**
 * @extends БазоваяВыборка
 * @class класс Электронные_ящики - обработчик Выборки 'Электронные ящики' окна 'Электронные ящики'
 */
class Электронные_ящики extends БазоваяВыборка {
    constructor() {
        super('Электронные ящики', 'Электронные ящики');
    }
    Фильтр(){ //+
        var мФильтр = {};
        мФильтр.Запрос = "t1.[Папка]=-10 AND t1.[Папка_ADD]=0";
            // будем отображать толлько доступные пользователю ящики
        var мЯщики = ДоступныеКорниВыборки( "Электронная почта", "Сообщения заголовок", "Папка", "ОтКого" );
        var стрЯщики = ``;
        for( let i in мЯщики ){
            стрЯщики += "," + мЯщики[i];
        }
        if( стрЯщики && стрЯщики != ",-10" ){
            стрЯщики = стрЯщики.substr(1);
            мФильтр.Запрос += " AND ROW_ID IN(" + стрЯщики + ")";
        }
        return мФильтр;
    }
}

/**
 * @extends БазовыйДиалог
 * @class класс ЭлектроннаяПочта_Получить - обработчик окна диалога 'ЭлектроннаяПочта Получить' получения сообщений с сервера
 */
class ЭлектроннаяПочта_Получить extends БазовыйДиалог {
    constructor() {
        super( 'ЭлектроннаяПочта Получить' );
        /**
         * объект электронного ящика для получения сообщений с сервера, записывается в обработчик из вне
         * @type {кЭлЯщик}
         */
        this.Ящик = undefined;
        /**
         * объект датагрида для набора имеющихся на почтовом сервере сообщений
         * @type {Сетка}
         */
        this.Диспетчер = undefined;
        this.ФлагПолучить = false;
        this.ФлагУдалить = false;
    }
    Модальность(){ //+
        if( !this.Ящик ) return '';

        if( this.Ящик.Название ) {
            УстановитьЗаголовок( this.ИмяДиалога, "Диспетчер писем - " + this.Ящик.Название );
        }

        var мИндексы = this.Ящик.ЭлПочта.ИндексыПочты();
        this.Диспетчер = Сетка( this.ИмяДиалога, "Диспетчер" );
        this.Диспетчер.УдалитьЗаписи();
        this.Диспетчер.ДопустимыеФункции( "+вставка" );
        for( let i in мИндексы ) { // инициализируем диспетчер
            ВывестиСтатус( "Формирую заголовок " + мИндексы[i] + "/" + Размер( мИндексы ) );
            this.Диспетчер.Номер = мИндексы[i];
            this.Диспетчер.Получить = 1;
            this.Диспетчер.Удаление = 1;
            this.Диспетчер.Размер = this.Ящик.ЭлПочта.РазмерПисьма( мИндексы[i] );
            this.Диспетчер.ОтКого = this.Ящик.ЭлПочта.ОтправительПисьма( мИндексы[i] );
            this.Диспетчер.Кому = this.Ящик.ЭлПочта.ПолучательПисьма( мИндексы[i] );
            this.Диспетчер.Тема = this.Ящик.ЭлПочта.ТемаПисьма( мИндексы[i] );
            this.Диспетчер.Написано = this.Ящик.ЭлПочта.ДатаСоздания( мИндексы[i] );
            this.Диспетчер.Внести( -1, 1, 0, -1 );
        }
    }
    Сохранение(){
        // todo синхронизация состояния и экзешника
        var лп = 0;
        //var количество = this.Ящик.ЭлПочта.КоличествоПисем();
        var колвоПолучить = 0, колвоУдалить = 0;
        while( this.Диспетчер.Запись(лп++) ){
            if( ПрочитатьПолеСвязи(this.Диспетчер, "Получить") ) колвоПолучить++;
            if( ПрочитатьПолеСвязи(this.Диспетчер, "Удаление") ) колвоУдалить++;
        }
        лп = 0;
        var текПолучение = 1, текУдаление = 1;
        СоздатьОкноСостояния( "ЭлектроннаяПочта Состояние", "Сообщение", "Получение письма [1 / " + колвоПолучить + "]"  );
        while( лп = this.Диспетчер.МодифицированнаяЗапись(лп) ){
            if( !this.Ящик.ЭлПочта.ЕстьСоединение() ) {
                Сообщить( "Соединение с сервером было разорвано", 'OK,ERROR_TITLE' );
                break;
            }
            var естьОшибка = false;
               // Смотрим галку получить
            if( ПрочитатьПолеСвязи(this.Диспетчер, "Получить") ) {
                УстановитьПоляОкнаСостояния( "Сообщение", "Получаю сообщение [" + текПолучение++ + " / " + колвоПолучить + "]" );
                естьОшибка = !this.СохранитьСообщение( this.Диспетчер.Номер, this.Диспетчер.ОтКого, this.Диспетчер.Кому,
                    this.Диспетчер.Тема, this.Диспетчер.Написано );
            }
               // Смотрим галку удалить
            if( ПрочитатьПолеСвязи(this.Диспетчер, "Удаление") ) {// Удаляем письмо с сервера
                УстановитьПоляОкнаСостояния( "Сообщение", "Удаляю сообщение [" + текУдаление++ + " / " + колвоУдалить + "]" );
                if( естьОшибка ) {
                    if( ДаНет( "При получении сообщения [" + (текПолучение - 1) + " / " + колвоПолучить + "]" + " возникла ошибка. Всё равно удалить?" ) ) {
                        this.Ящик.ЭлПочта.УдалитьПисьмо( this.Диспетчер.Номер );
                    }
                } else {
                    this.Ящик.ЭлПочта.УдалитьПисьмо( this.Диспетчер.Номер );
                }
            }
        }
        // todo обновление дерева
        //ОбновитьДерево( "Электронная почта", "Структура почты", ящик );
        УдалитьОкноСостояния();
        //УдалитьПеременную( дг );
        ПеренабратьВыборку( "Электронные сообщения" );
    }

    /**
     * установить/снять флаг Получить во всех записях Диспетчера
     */
    КП0(){
        var лп = 0;
        while( this.Диспетчер.Запись(лп) ) {
            this.Диспетчер.ЗаменитьПоля( лп++, "Получить", this.ФлагПолучить ? 1 : 0 );
        }
        if( this.ФлагПолучить ) {
            this.ФлагПолучить = false;
        } else {
            this.ФлагПолучить = true;
        }
        Перерисовать( this.ИмяДиалога, "Диспетчер" );
    }

    /**
     * установить/снять флаг Удалить во всех записях Диспетчера
     */
    КП2(){
        var лп = 0;
        while( this.Диспетчер.Запись(лп) )
            this.Диспетчер.ЗаменитьПоля( лп++, "Удаление", this.ФлагУдалить ? 1 : 0 );
        if( this.ФлагУдалить ) {
            this.ФлагУдалить = false;
        } else {
            this.ФлагУдалить = true;
        }
        Перерисовать( this.ИмяДиалога, "Диспетчер" );
    }
    Закрытие(){ //+
        if( this.Ящик ) this.Ящик.ЭлПочта.ЗакрытьСоединение();
    }

    /**
     * получает сообщение с сервера и сохраняет его в базу в папке Входящие
     * @param номер - номер сообщения на сервере
     * @param отправитель - отправитель сообщения
     * @param адресат - адресат сообщения
     * @param тема - тема сообщения
     * @param написано - дата написания сообщения
     * @returns {boolean} - true, если удалось соххранить сообщение в базе, и false в противном случае
     */
    СохранитьСообщение( номер, отправитель, адресат, тема, написано ){ //+
        this.Ящик.ЭлПочта.КопияПисьма( номер );
        this.Ящик.ЭлПочта.СкрытаяКопияПисьма( номер );

        var мВложение = this.Ящик.ЭлПочта.ПолучитьВложение( номер );
        // в массиве должна быть хотя бы одна запись - запись исх. текста сообщения, если ее нет - значит ничего не принялось
        if( Размер(мВложение) == 0 ) return false;

        УстановитьПоляОкнаСостояния( "Сообщение1", "Сохранение сообщения..." );
        // создаем само сообщение
        var сообщение = new кЭлСообщение();
        var запись = {
            'Организация-Сообщения' : сообщение.УстановитьОрганизацию(отправитель, true),
            'Папка' : this.Ящик.Входящие,
            'ОтКого' : отправитель,
            'Кому' : адресат,
            'Копия' : this.Ящик.ЭлПочта.Копия,
            'СкрытаяКопия' : this.Ящик.ЭлПочта.СкрытаяКопия,
            'Тема' : тема,
            'Приоритет' : this.Ящик.ЭлПочта.Приоритет,
            'Вид' : 1,
            'Признаки' : 0};
        сообщение.ПрочитатьИзКонтекста( запись );
        if( !сообщение.Внести() ) return false;

        // если передана пустая дата создания письма, то поставим текущую дату в создано
        if( !написано ) написано = new Date().format( 'yyyy-MM-dd HH:mm:ss' );
        сообщение.УстановитьДату( 'Получено' );
        var cmd = Command( 'UPDATE ~Сообщения Заголовок~ SET Создано = :1, ДатаСоздания = CONVERT(datetime, :2, 20) ' +
            'WHERE ROW_ID=:3', 1, "dc,A,datc,A,id,S" );
        cmd.Выполнить( написано, написано, сообщение.НомерЗаписи );
        cmd.Завершить();
        // сохраняем вложения сообщения
        var вложение = new кЭлВложение( сообщение.НомерЗаписи, 'сообщение' );
        for( let i in мВложение ){
            var типВложения = 0;
            if( мВложение[i].Файл ) {
                типВложения = 0; // это вложение
            } else if( мВложение[i].Индекс < 0 ) {// это исходный текст письма
                типВложения = 2;
            } else if( мВложение[i].Тип.toLowerCase() == 'plain' ) {
                типВложения = 3; // текстовая часть тела письма
            } else {
                типВложения = 4; // html часть тела письма
            }
            вложение.Установить( -1, мВложение[i].Файл, типВложения, мВложение[i].Вложение, мВложение[i].Ссылка );
            мВложение[i].Позиция = вложение.Внести();
        }
        // обновим поле иерархии во вложении
        var upd = Command( 'UPDATE ~Сообщения Вложения~ SET Письмо=:1 ' +
            'WHERE ROW_ID=:2', 1, "p1,S,p2,S" );
        for( let i in мВложение ) {
            var письмо;
            if( мВложение[i].Индекс > 0 ){
                for( let j in мВложение ){
                    // найдем позицию тела будующего письма-владельца
                    if( мВложение[i].Индекс - 1 == мВложение[j].Индекс && !мВложение[j].Файл )
                    письмо = мВложение[j].Позиция;
                }
                upd.Выполнить( письмо, мВложение[i].Позиция );
                upd.Завершить();
            }
        }
        return true;
    }
}

/**
 * @extends БазовыйДиалог
 * @class класс ЭлектроннаяПочта_Архивировать - обработчик окна диалога 'ЭлектроннаяПочта Архивировать' архивирования писем ящика
 */
class ЭлектроннаяПочта_Архивировать extends БазовыйДиалог {
    constructor() {
        super( 'ЭлектроннаяПочта Архивировать' );
    }
    Инициализация(){ //+
        var зЯщики = Query( 'SELECT Count(*) cnt FROM ~Сообщения Заголовок~ ' +
            'WHERE Папка=-10 AND [Папка_ADD]=0', 100 );
        if( зЯщики.Следующий() && зЯщики.cnt == 0 ){
            ЗапретитьОкно();
            Сообщить( "Нет ящиков для архивации. Сначала создайте почтовый ящик." );
            return "";
        }
        var текПоз = ПозицияКурсора( "Электронная почта", "Электронные сообщения", "Ф" );
        var сообщение = new кЭлСообщение( текПоз );
        сообщение.ПрочитатьЯщик();
            // устанавливаем ящик по умолчанию - ящик, в котором находимся
        УстановитьЗначениеВыпадающегоСписка( this.ИмяДиалога, "ЯщикН", сообщение.Ящик.Название );
            // устанавливаем относительное имя текущей папки
        var зИерархии = Query( ';WITH Parent AS( ' +
            '   SELECT ROW_ID, Папка, 0 as level, ОтКого, Папка_ADD FROM ~Сообщения Заголовок~ WHERE ROW_ID=:1 ' +
            '   UNION ALL ' +
            '   SELECT head.ROW_ID, head.Папка, level+1 as level, head.ОтКого, head.Папка_ADD ' +
            '   FROM ~Сообщения Заголовок~ head ' +
            '      JOIN Parent ON parent.папка=head.row_id ' +
            ') SELECT ОтКого FROM Parent WHERE Папка<>-10 AND [Папка_ADD]=0 ORDER BY Level DESC', 1, "id,S" );
        зИерархии.УстановитьПараметры( текПоз );
        while( зИерархии.Следующий() ) this.Запись.ПапкаНазн += "\\" + зИерархии.ОтКого;
        this.Запись.ПапкаНазн = this.Запись.ПапкаНазн.substr( 1 );
            // устанавливаем да "с" "по" - предыдущий от рабочео месяца
        this.Запись.ДатаС = РабМес().СледующийМесяц(-1);
        this.Запись.ДатаПо = this.Запись.ДатаС.ПоследнееЧисло();
        this.Запись.ВидПапки = 1;
        return "ПапкаНазн";
    }
    КП0(){ //+
        var длг = СоздатьДиалог( "ЭлектроннаяПочта Выбрать папку" );
        if( длг.Выполнить() ){
            var поз = длг['@ВыбПапка'].indexOf( '\\' );
            if( поз > 0 ) {
                this.Запись.ПапкаНазн = длг['@ВыбПапка'].substr( поз + 1 );
            } else {
                this.Запись.ПапкаНазн = "";
            }
        }
        return 1;
    }
    Сохранение(){ //+
        var видПапки = ПрочитатьПолеСвязи( this.Запись, "ВидПапки" );
        if( видПапки <= 0 ){
            ВсплывающееОкно( "Необходимо выбрать папку источника!", this.ИмяДиалога, "ВидПапки" );
            return "ВидПапки";
        }
        var мПапки = this.Запись.ПапкаНазн.split( '\\' );
        var папка, корень = ЗначениеВыпадающегоСписка( this.ИмяДиалога, "ЯщикН" );
        var зПапки = Query( 'SELECT ROW_ID, [Сообщение-Транспорт] FROM ~Сообщения Заголовок~ ' +
            'WHERE ОтКого like :1 AND Папка=:2 AND Папка_ADD=0', 1, "name,A,root,S" );
        var обПапка = new БазовыйОбъект( "Сообщения Заголовок" );
            // создаем последовательно папки, которых не хватает
        for( let папка of мПапки ){
            if( папка.trim() ){
                зПапки.УстановитьПараметры( папка, корень );
                if( зПапки.Следующий() ) {
                    корень = зПапки.ROW_ID;
                } else {
                    обПапка.ПрочитатьИзКонтекста( {'ОтКого' : папка,
                        'Папка' : корень,
                        'Вид' : 0,
                        'Папка_Узел' : 1} );
                    корень = обПапка.Внести();
                }
            }
        }
        var стрУсловия = "";
        if( видПапки & 1 ) стрУсловия = "10"; // входящие
        if( видПапки & 2 ) { // отправленные
            if( стрУсловия ) стрУсловия += ",";
            стрУсловия += "12";
        }
        var зПапкиИсточника = BufferedReader( "SELECT ROW_ID FROM ~Сообщения Заголовок~ WHERE Папка=:1 AND Вид IN(" + стрУсловия + ")", 10, "id,S" );
        зПапкиИсточника.УстановитьПараметры( ЗначениеВыпадающегоСписка(this.ИмяДиалога, "ЯщикН") );
        стрУсловия = "";
        while( зПапкиИсточника.Следующий() ) стрУсловия += "," + зПапкиИсточника.ROW_ID;
        if( !стрУсловия ){
            Сообщить( "В ящике не существует папки для Отправленных или Входящих сообщений", 'OK,ERROR_TITLE' );
            return "";
        } else {
            стрУсловия = стрУсловия.substr( 1 );
        }
        var кПеренос = Command( ';WITH Parent AS( ' +
            '   SELECT ROW_ID [id], Папка, ДатаСоздания, [Папка_ADD] FROM ~Сообщения Заголовок~ ' +
            '   WHERE ROW_ID IN(' + стрУсловия + ') ' +
            '   UNION ALL ' +
            '   SELECT child.ROW_ID [id], child.Папка, child.ДатаСоздания, child.[Папка_ADD] ' +
            '   FROM ~Сообщения Заголовок~ child ' +
            '        JOIN Parent ON child.Папка= Parent.id ' +
            ') UPDATE ~Сообщения Заголовок~ ' +
            ' SET Папка = :1 ' +
            ' FROM Parent ' +
            ' WHERE ROW_ID=Parent.id AND Parent.[ДатаСоздания] BETWEEN :2 AND :3 AND Parent.[Папка_ADD]=1', 1, "cat,S,ds,D,de,D" );
        кПеренос.Выполнить( корень, this.Запись.ДатаС, this.Запись.ДатаПо );
        кПеренос.Завершить();
        ПеренабратьВыборку( "Электронные сообщения" );
    }
    static СписокЭлЯщиков(){
        var мЯщиков = [];
        var зЯщики = Query( 'SELECT ROW_ID, ОтКого ' +
            'FROM ~Сообщения Заголовок~ ' +
            'WHERE Папка=-10 AND [Папка_ADD]=0 ' +
            'ORDER BY ОтКого', 100 );
        while( зЯщики.Следующий() ){
            мЯщиков.push( {'ROW_ID' : зЯщики.ROW_ID,
            'Название' : зЯщики.ОтКого} );
        }
        return мЯщиков;
    }
}

/**
 * @extends БазовыйДиалог
 * @class класс ЭлектроннаяПочта_Выбрать_папку - обработчик окна диалога 'ЭлектроннаяПочта Выбрать папку' выбора папки в ящике
 */
class ЭлектроннаяПочта_Выбрать_папку extends БазовыйДиалог {
    constructor() {
        super( 'ЭлектроннаяПочта Выбрать папку' );
    }
    Сохранение(){ //+
        var оУзел = ВыделенныйУзел( this.ИмяДиалога, "Дерево папок" );
        this.Запись['@ВыбПапка'] = оУзел.Данные.ПолноеИмя;
    }
}

/**
 *  @extends БазовоеДерево
 *  @class класс Дерево_папок - обработчик дерева, отобдражающее папки в ящике
 */
class Дерево_папок extends БазовоеДерево {
    constructor(){
        super( 'Дерево папок', '', 0, 0 );
        this.ЭлПапка = undefined;
        this.Иерархия = [];
    }
    Инициализация(){ //+
        super.Инициализация();
        var зИерархия = Query( ';WITH Parent AS( ' +
            '   SELECT ROW_ID, Папка, 0 as level FROM ~Сообщения Заголовок~ WHERE ROW_ID=:1 ' +
            '   UNION ALL ' +
            '   SELECT head.ROW_ID, head.Папка, level+1 as level ' +
            '   FROM ~Сообщения Заголовок~ head ' +
            '        JOIN Parent ON parent.папка=head.row_id ' +
            ') SELECT ROW_ID FROM Parent ORDER BY Level DESC', 1, "id,S" );
        зИерархия.УстановитьПараметры( ПозицияКурсора("Электронная почта", "Электронные сообщения", "Ф") );
        while( зИерархия.Следующий() ) this.Иерархия[зИерархия.ROW_ID] = зИерархия.ROW_ID;

        var зПапки = Query( 'SELECT ROW_ID, Папка, ОтКого, [Сообщение-Транспорт] ' +
            'FROM ~Сообщения Заголовок~ ' +
            'WHERE Папка=:1 AND [Папка_ADD]=0 ' +
            'ORDER BY ОтКого', 100, "owner,S" );
        зПапки.УстановитьПараметры( -10 );
        while( зПапки.Следующий() ){
            let раскрытый = this.Иерархия.hasOwnProperty( зПапки.ROW_ID ) == true;
            let данныеУзла = { 'Родитель' : зПапки.Папка,
            'ПолноеИмя' : зПапки.ОтКого,
            'Транспорт' : зПапки['Сообщение-Транспорт'] };
            this.ДеревоОбъектов.Добавить( this, зПапки.ROW_ID, данныеУзла, зПапки.ОтКого, "", раскрытый );
        }
        this.ЭлПапка = View( this.Источник.Окно.Имя, "@ВыбПапка" );
        return this.ДеревоОбъектов;
    }
    ЗаполнитьУровень( узел ){ //+
        var текУзел = super.ЗаполнитьУровень( узел );

        var зПапки = Query( 'SELECT ROW_ID, Папка, ОтКого, [Сообщение-Транспорт] ' +
            'FROM ~Сообщения Заголовок~ ' +
            'WHERE Папка = :1 AND [Папка_ADD]=0 ' +
            'ORDER BY ОтКого', 100, "owner,S" );
        зПапки.УстановитьПараметры( узел.ID );
        while( зПапки.Следующий() ){
            let раскрытый = this.Иерархия.hasOwnProperty( зПапки.ROW_ID ) == true;
            let данныеУзла = { 'Родитель' : зПапки.Папка,
                'ПолноеИмя' : узел.Данные.ПолноеИмя + "\\" + зПапки.ОтКого,
                'Транспорт' : зПапки['Сообщение-Транспорт'] };
            текУзел.Добавить( this, зПапки.ROW_ID, данныеУзла, зПапки.ОтКого, "", раскрытый );
        }
        return текУзел;
    }
    Выделение( узел ){ //+
        if( this.ЭлПапка ) this.ЭлПапка.Текст = узел.Данные.ПолноеИмя;
    }
    Создание( узел ){ //+
        var оПапка = new БазовыйОбъект( "Сообщения Заголовок" );
        оПапка.ПрочитатьИзКонтекста( {'Папка' : узел.ID,
        'Папка_Узел' : 1,
        'Сообщение-Транспорт' : узел.Данные.Транспорт} );
        if( оПапка.Объект.Редактировать("ЭлектроннаяПочта Папка") ){
            let данныеУзла = { 'Родитель' : узел.ID,
                'ПолноеИмя' : узел.Данные.ПолноеИмя + "\\" + оПапка.Объект.ОтКого,
                'Транспорт' : узел.Данные.Транспорт };

            узел.Данные.Потомки[узел.ЧислоПотомков] = new УзелДерева( оПапка.Внести(), оПапка.Объект.ОтКого, "",
                0, 0, "1_1.png", "1_2.png", данныеУзла );
            узел.ЧислоПотомков += 1;
            return узел;
        }
    }
}

/**
 * @extends БазовыйДиалог
 * @class класс ЭлектроннаяПочта_Переместить - обработчик окна диалога 'ЭлектроннаяПочта Переместить' перемещения сообщения
 */
class ЭлектроннаяПочта_Переместить extends БазовыйДиалог {
    constructor() {
        super( 'ЭлектроннаяПочта Переместить' );
    }
    Сохранение(){ //+
        // перемещаем выделенные письма в выбранную папку
        var оУзел = ВыделенныйУзел( this.ИмяДиалога, "Дерево папок" );
        if( !оУзел ){
            ВсплывающееОкно( "Необходимо выбрать папку!", this.ИмяДиалога, "Дерево папок" );
            return "Дерево папок";
        }
        var стрИд = '';
        var вСообщения = new БазоваяВыборка( "Электронные сообщения", "Электронная почта" );
        var мЗаписи = вСообщения.ПолучитьВыделенныеЗаписи( false );
        for( let номЗап of мЗаписи ) стрИд += "," + номЗап;

        if( стрИд ){
            стрИд = стрИд.substr( 1 );
            var кПеремещение = Command( "UPDATE ~Сообщения заголовок~ SET Папка=:1 WHERE row_id IN(" + стрИд + ")", 1, "own,S" );
            кПеремещение.Выполнить( оУзел.ID );
            кПеремещение.Завершить();
            вСообщения.Перенабрать();
        }
    }
}

/**
 * @extends БазовыйДиалог
 * @class класс АутентификацияИсходящая - обработчик окна диалога 'АутентификацияИсходящая'
 */
class АутентификацияИсходящая extends БазовыйДиалог {
    constructor() {
        super( 'АутентификацияИсходящая' );
        this.ЭлПодключение = undefined;
    }
    Инициализация(){ //+
        this.ЭлПодключение = View( this.ИмяДиалога, "@Подключение" );
        if( this.Запись.ИсхПодключение ){
            this.Запись['@Аутентификация'] = 1;
            this.ЭлПодключение.Запрещен = false;
            switch( this.Запись.ИсхПодключение ){
                case "LOGIN":
                    this.Запись['@Подключение'] = 0;
                    break;
                case "PLAIN":
                    this.Запись['@Подключение'] = 1;
                    break;
                case "CRAM-MD5":
                    this.Запись['@Подключение'] = 2;
                    break;
                case "DIGEST-MD5":
                    this.Запись['@Подключение'] = 3;
                    break;
            }
        } else {
            this.Запись['@Аутентификация'] = 0;
            this.ЭлПодключение.Запрещен = true;
        }
    }
    Изменение( поле ){ //+
        switch( поле ){
            case "@Аутентификация":
                if( ПрочитатьПолеСвязи(this.Запись, "@Аутентификация") ) {
                    this.ЭлПодключение.Запрещен = false;
                } else {
                    this.ЭлПодключение.Запрещен = true;
                }
                break;
        }
    }
    Сохранение(){ //+
        if( ПрочитатьПолеСвязи(this.Запись, "@Аутентификация") ){
            if( this.Запись['@Подключение'] == "Обычная" ) {
                this.Запись.ИсхПодключение = "LOGIN";
            } else {
                this.Запись.ИсхПодключение = this.Запись['@Подключение'];
            }
        } else {
            this.Запись.ИсхПодключение = "";
        }
    }
}

/**
 * @extends БазовыйДиалог
 * @class класс АутентификацияВходящая - обработчик окна диалога 'АутентификацияВходящая'
 */
class АутентификацияВходящая extends БазовыйДиалог {
    constructor() {
        super( 'АутентификацияВходящая' );
        this.ЭлПодключение = undefined;
    }
    Инициализация(){ //+
        this.ЭлПодключение = View( this.ИмяДиалога, "@Подключение" );
        if( this.Запись.ВхПодключение ){
            this.Запись['@Аутентификация'] = 1;
            this.ЭлПодключение.Запрещен = false;
            this.Запись['@Подключение'] = 0;
            if( this.Запись.ВхПодключение == "APOP" ) this.Запись['@Подключение'] = 1;
        } else {
            this.Запись['@Аутентификация'] = 0;
            this.ЭлПодключение.Запрещен = true;
        }
    }
    Изменение( поле ){ //+
        switch( поле ){
            case "@Аутентификация":
                if( ПрочитатьПолеСвязи(this.Запись, "@Аутентификация") ) {
                    this.ЭлПодключение.Запрещен = false;
                } else {
                    this.ЭлПодключение.Запрещен = true;
                }
                break;
        }
    }
    Сохранение(){ //+
        if( ПрочитатьПолеСвязи(this.Запись, "@Аутентификация") ){
            if( this.Запись['@Подключение'] == "Обычная" ) {
                this.Запись.ВхПодключение = "LOGIN";
            } else {
                this.Запись.ВхПодключение = "APOP";
            }
        } else {
            this.Запись.ВхПодключение = "";
        }
    }
}

/**
 * @extends БазовыйДиалог
 * @class класс ЭлектроннаяПочта_Протокол - обработчик окна диалога 'ЭлектроннаяПочта Протокол' смены почтового протокола
 */
class ЭлектроннаяПочта_Протокол extends БазовыйДиалог {
    constructor() {
        super( 'ЭлектроннаяПочта Протокол' );
    }
    Инициализация(){ //+
        if( this.Запись.Тип == 0 ) {
            this.Запись['@Тип протокола'] = this.Запись.Тип;
        } else {
            this.Запись['@Тип протокола'] = 1;
        }
    }
    Сохранение(){ //+
        var элМапи = View( "Транспорт", "Mapi" );
        var элСтандарт = View( "Транспорт", "Стандарт" );
        if( ПрочитатьПолеСвязи(this.Запись, "@Тип протокола") == 0 ) { // выбран протокол Pop3
            // отобразим соответствующую панель настроек
            элМапи.Скрытый = true;
            элСтандарт.Скрытый = false;
            this.Запись['@Протокол'] = "Протокол: POP3";
            //this.Запись.ИсхСервер = "";
            this.Запись.Тип = 0;
        } else {                         // выбран протокол Mapi
            // отобразим соответствующую панель настроек
            элМапи.Скрытый = false;
            элСтандарт.Скрытый = true;
            СкрытьФлаги( "Транспорт", "@Специальные настройки", "*" );
            СкрытьФлаги( "Транспорт", "@СущПрофиль", "*" );
            this.Запись['@Специальные настройки'] = 1;
            this.Запись['@СущПрофиль'] = 0;
            this.Запись['@Протокол'] = "Протокол: MAPI";
            var элИсхСервер = View( "Транспорт", "@ИсхСервер" );
            var элИсхЛогин = View( "Транспорт", "@ИсхЛогин" );
            var элИсхПароль = View( "Транспорт", "@ИсхПарольМ" );
            var элПрофиль = ComboBox( "Электронный ящик", "@Профиль" );
            элИсхСервер.Запрещен = true;
            элИсхЛогин.Запрещен = true;
            элИсхПароль.Запрещен = true;
            элПрофиль.Запрещен = false;
               // инициализируем существующие профили
            this.Ящик = new кЭлЯщик( this.Запись );

            if( this.Ящик.УстановитьПочту(true) ) {
                var стр_проф = this.Ящик.ЭлПочта.ПрофилиMapi();
                элПрофиль.УстановитьСписокСтрок( стр_проф, '\n' );
            }
            this.Запись.Тип = 2;
        }
    }
}

/**
 * @extends БазовыйДиалог
 * @class класс ЭлектронноеСообщение_Исходник - обработчик окна диалога 'ЭлектронноеСообщение Исходник' для отображения исходного текста сообщения
 */
class ЭлектронноеСообщение_Исходник extends БазовыйДиалог {
    constructor() {
        super( 'ЭлектронноеСообщение Исходник' );
    }
    Инициализация(){
        var длгСообщение = View( "ЭлектронноеСообщение", "ЭлектронноеСообщение" );
        this.Запись.Source = длгСообщение.Обработчик.Сообщение.ИсходныйТекст();
    }
}

/**
 * @extends БазоваяВыборка
 * @class класс ЭлСообщение_Организация - обработчик Выборки 'ЭлСообщение Организация' для отображения организаций,
 * которых можно привязать к сообщению через email
 */
class ЭлСообщение_Организация extends БазоваяВыборка {
    constructor() {
        super( 'ЭлСообщение Организация', 'ЭлектронноеСообщение Организация' );
    }
    Открытие(){
        КомандаОкну( "OK", this.ИмяОкна );
        return 1;
    }
}