'use strict';

class кЭлектронныеАдреса {
    constructor( названиеОрганизации, фиоЛица ) {
        /**
         * название организации для отображения в диалоге редактирования
         * @type {string}
         */
        this.Название = названиеОрганизации;
        /**
         * ФИО частного лица организации, обязательно указать для редактировнаия адреса частного лица
         * @type {string}
         */
        this.ФиоЛица = фиоЛица;
        /**
         * итоговая строка электронных адресов после редактирования
         * @type {string}
         */
        this.СписокАдресов = null;
    }

    /**
     * вызывает диалог редактирования и формирует список адресов для поля email
     * @param списокАдресов - строка эл. адресов для редактирования
     * @returns {boolean} - true, если редактирование было произведено, false - в противном случае
     */
    Выполнить( списокАдресов ){
        var результат = false;
        // создаем диалог для редактирования адресов
        var дАдреса = СоздатьДиалог( "Электронные адреса" );
        this.УстановитьНазвание( дАдреса );
        дАдреса.Обработчик.СписокАдресов = списокАдресов;
        дАдреса.Обработчик.ЭтоОрганизация = ( this.ФиоЛица == undefined );
        if( дАдреса.Выполнить() ) {
            var адреса = ПолучитьВыборку( "@Электронные адреса" );
            var рез = '';
            while( Следующий(адреса, "") ){
                if( this.ПолучитьНазвание(дАдреса) == адреса.Название ) {
                    рез += ";" + адреса.Адрес;
                } else {
                    рез += ";" + адреса.Название + " <" + адреса.Адрес + ">";
                }
            }
            this.СписокАдресов = рез.substr( 1 );
            результат = true;
            адреса = null;
        }
        дАдреса = null;
        return результат;
    }
    УстановитьНазвание( дАдреса ){
        дАдреса['@Организация'] = this.Название;
        if( this.ФиоЛица ) дАдреса['@Лицо'] = this.ФиоЛица;
        //дАдреса.@Лицо = this.Фио.УпаковатьФио( this.Запись['@Фамилия'], this.Запись['@Имя'], this.Запись['@Отчество'] );
    }
    ПолучитьНазвание( дАдреса ){
        if( this.ФиоЛица ) return дАдреса['@Лицо'].replace( /<>;/g, '"' );

        return дАдреса['@Организация'].replace( /<>;/g, '"' );
    }
}

/**
 * @class класс Электронные_адреса - обработчик окна диалога 'Электронные адреса'
 * @extends БазовыйДиалог
 */
class Электронные_адреса extends БазовыйДиалог {
    constructor() {
        super( 'Электронные адреса' );
        /**
         * список адресов через ';', которые необходимо набрать в выборку внутри диалога
         * @type {string}
         */
        this.СписокАдресов = '';
        /**
         * редактирование организации
         * @type {boolean}
         */
        this.ЭтоОрганизация = true;
    }
    Инициализация(){
        return "@Электронные адреса";
    }
    Модальность(){
        var вАдреса = new БазоваяВыборка( "@Электронные адреса" );
        вАдреса.ПолучитьВыборку();
        вАдреса.Очистить();
        var данные = [];
        var мАдреса = this.СписокАдресов.split( ';' );
        for( let адрес of мАдреса ){
            if( !адрес ) continue;

            var поз = адрес.search( /<[A-Za-z0-9_@\.\- ]+>/i );
            var название = '', email = '';
            if( поз != -1 ){
                название = адрес.substr( 0, поз ).trim();
                email = адрес.substring( поз + 1, адрес.indexOf( '>', поз + 1 ) )
            } else {
                название = this.ЭтоОрганизация ? this.Запись['@Организация'] : this.Запись['@Лицо'];
                email = адрес;
            }
            данные.push( {
                'Адрес': email.trim(),
                'Название': название.trim()
            } );
        }
        вАдреса.Заполнить( данные );
        if( this.ЭтоОрганизация ) this.СкрытьЭлементы( '@Лицо,ФИО:' );
        УстановитьЗаголовок( this.ИмяДиалога, "Электронные адреса - " + (this.ЭтоОрганизация ? this.Запись['@Организация'] : this.Запись['@Лицо']) );
    }
}

/**
 * @class класс Электронный_адрес - обработчик окна диалога 'Электронный адрес'
 * @extends БазовыйДиалог
 */
class Электронный_адрес extends БазовыйДиалог {
    constructor() {
        super( 'Электронный адрес' );
    }
    Инициализация(){
        super.Инициализация();
        if( this.НоваяЗапись ){
            var запись = this.Источник.Группа.Обработчик.Запись;
            if( !запись['@Лицо'] ) { // редактируем адрес организации
                this.Запись.Название = запись['@Организация'];
            } else {
                this.Запись.Название = запись['@Лицо'];
            }
        }
        this.Сохранение();
    }
    Сохранение(){
        this.Запись.Название = this.Запись.Название.replace( /<>;/g, '"' );
    }
}

/**
 * пока без выбора ящика для отправки сообщений - будет позднее, когда реализована почта
 * @class класс Маршрут - обработчик окна диалога Маршрут справочника маршруты
 * @extends БазовыйДиалог
 */
class Маршрут extends БазовыйДиалог {
    constructor() {
        super('Маршрут');
        /**
         * массив переход фазы - для обработчика выборки Фазы переходы, заполняется в событии КП0
         * @type {Array}
         */
        this.ПереходыФазы = [];
    }

    /**
     * добавить выделенные катагории фаз перед текущей
     */
    КП0() {
        if ( this.НоваяЗапись ) this.НомерЗаписи = СохранитьЗапись(this.Запись);
        this.ВыбратьФазыИзСписка(false);
    }

    /**
     * добавить выделенные катагории фаз в конец списка
     */
    КП1() {
        if ( this.НоваяЗапись ) this.НомерЗаписи = СохранитьЗапись(this.Запись);
        this.ВыбратьФазыИзСписка(true);
    }

    Сохранение() {
        if ( !this.НоваяЗапись ) {
            while ( ПолучитьВыделение("Маршрут фазы") != -1 );

            var зПроверка = Query('SELECT cat.[Название], ph.ROW_ID, ph.[Номер] \
            FROM ~ДО фазы~ ph \
            JOIN ~ДО категории фаз~ cat ON cat.ROW_ID = ph.[Фаза-Категория] \
            WHERE ph.[Маршрут-Фазы] = :1 AND ph.[Автовыполнение] <> 0 AND ph.[СледующийНомер] = 0', 50, "path,S");
            зПроверка.УстановитьПараметры(this.НомерЗаписи);
            var незаполнено = 0;
            while ( зПроверка.Следующий() ) {
                незаполнено++;
                ОтметитьЗаписьВыборки("Маршрут фазы", зПроверка.ROW_ID);
            }
            if ( незаполнено ) {
                var стрНезаполнено = незаполнено.toString();
                var последнаяЦифра = стрНезаполнено.charAt(стрНезаполнено.length - 1);
                if ( последнаяЦифра == "1" && незаполнено != 11 ) стрНезаполнено += "-ой задаче"; else if ( последнаяЦифра == "2" && незаполнено != 12 ) стрНезаполнено += "-м задачам"; else if ( (последнаяЦифра == "3" || последнаяЦифра == "4") && !(незаполнено == 13 || незаполнено == 14) )
                    стрНезаполнено += "-м задачам"; else
                    стрНезаполнено += "-и задачам";

                Перерисовать("Маршрут");
                if ( ДаНет("Не выставлены переходы по " + стрНезаполнено + ".\nВернуться и выбрать?") )
                    return "Маршрут фазы";
            }
        }
    }

    /**
     * увеличивает все номера фаз маршрута на 1 после стоящей фазы под курсором
     * @param сМаксНомером
     */
    ВыбратьФазыИзСписка( сМаксНомером ) {
        //var вКатегории  = ПолучитьВыборку( "@Категории задач" );
        var нз = ПолучитьВыделение("Маршрут", "@Категории задач");
        if ( нз == -1 ) нз = ПозицияКурсора("@Категории задач", "Ф");

        if ( нз != -1 ) {
            var максНомер = 1;
            var позкур = ПозицияКурсора("Маршрут фазы", "Ф");

            if ( позкур != -1 && !сМаксНомером ) {
                var вФазы = ПолучитьВыборку("Маршрут фазы");
                ПрочитатьЗаписьТаблицы(вФазы, позкур);
                максНомер = вФазы.Номер;
            } else {
                var зСписокФаз = Query('SELECT ISNULL( MAX([Номер]), 0 ) [МаксНомер] \
               FROM ~ДО Фазы~ WHERE [Маршрут-Фазы]=:1', 1, "Path,S");
                зСписокФаз.УстановитьПараметры(this.НомерЗаписи);
                if ( зСписокФаз.Следующий() ) максНомер = зСписокФаз.максНомер + 1;
            }

            var оФазы = Объект("ДО Фазы");
            var колво = 0;
            var зПередвинуть = Command('UPDATE ~ДО Фазы~ \
            SET [Номер] = [Номер] + 1 \
            WHERE [Маршрут-Фазы] = :1 AND [Номер] >= :2', 1, "Path,S,NewNum,S");

            var зСледНом = Command('UPDATE ~ДО Фазы~ \
            SET [СледующийНомер] = [СледующийНомер] + 1 \
            WHERE [Маршрут-Фазы] = :1 AND [СледующийНомер] > 0 AND [СледующийНомер] >= :2', 1, "Path,S,NewNum,S");

            var зФаза = Query("SELECT [Автовыполнение] FROM ~ДО категории фаз~ WHERE ROW_ID=:1", 1, "id,S");

            while ( нз != -1 ) {
                зПередвинуть.Выполнить(this.НомерЗаписи, максНомер);
                зПередвинуть.Завершить();
                зСледНом.Выполнить(this.НомерЗаписи, максНомер);
                зСледНом.Завершить();

                зФаза.УстановитьПараметры(нз);
                if ( зФаза.Следующий() ) оФазы.Автовыполнение = зФаза.Автовыполнение;

                оФазы['Маршрут-Фазы'] = this.НомерЗаписи;
                оФазы['Фаза-Категория'] = нз;
                //оФазы['Исполнитель по умолчанию'] = НомерЗаписи( Пользователь() );
                оФазы.Номер = максНомер;
                оФазы.Папки = -10;
                ВнестиЗапись(оФазы);
                колво++;
                максНомер++;
                нз = ПолучитьВыделение("Маршрут", "@Категории задач");
            }
            ПеренабратьВыборку("Маршрут фазы");
        }
    }
}
/**
 * @class класс Маршрут_фазы - обработчик выборки 'Маршрут фазы' диалога Маршрут
 * @extends БазоваяВыборка
 */
class Маршрут_фазы extends БазоваяВыборка {
    constructor() {
        super('Маршрут фазы', 'Маршрут');
    }

    Цвет() {
        switch ( (this.Запись.Номер % 4) ) {
            case 0:
                return this.ЦветЗаписи(19);
            case 1:
                return this.ЦветЗаписи(8);
            case 2:
                return "*0.64.128";
            case 3:
                return "*64.128.128";
        }
    }

    Инициализация() {
        return -1;
    }

    Удаление() {
        var зПроверка = Query('SELECT TOP 1 * FROM ~ДО Фазы~ \
         WHERE [Маршрут-Фазы] = :1 AND [СледующийНомер] = :2 AND [СледующийНомер] <> 0', 1, "Path,S,NextNum,S");
        зПроверка.УстановитьПараметры(ПрочитатьПолеСвязи(this.Запись, "Маршрут-Фазы"), this.Запись.Номер);
        if ( зПроверка.Следующий() ) {
            if ( ДаНет("На задание есть переходы.\nВсе равно УДАЛЯТЬ?") ) {
                var зСледНомУвел = Command('UPDATE ~ДО Фазы~ \
               SET [СледующийНомер] = :1 \
               WHERE [Маршрут-Фазы] = :2 AND [СледующийНомер] = :3', 1, "newnum,S,Path,S,NextNum,S");
                зСледНомУвел.Выполнить(0, ПрочитатьПолеСвязи(this.Запись, "Маршрут-Фазы"), this.Запись.Номер);
                зСледНомУвел.Завершить();
                ПеренабратьВыборку("Маршрут фазы");
            } else return -1;
        }
    }
}

/**
 * @class класс Фаза - обработчик окна диалога Фаза справочника маршруты
 * @extends БазовыйДиалог
 */
class Фаза extends БазовыйДиалог {
    constructor() {
        super('Фаза');
    }

    Инициализация() {
        this.ВыборПолейФазы("Автовыполнение");
        this.ВыборПолейФазы("Предыдущий исполнитель");
        if ( !this.Запись['Автоматическое завершение'] ) {
            this.ЗапретитьЭлементыГруппы( "ОсновныеПараметры", 'Авт_зав_дней,@Переход,@ПереходУспех,Авт_переход' );
        } else {
            this.РазрешитьЭлементыГруппы( "ОсновныеПараметры", 'Авт_зав_дней,@Переход,@ПереходУспех,Авт_переход' );
        }

    }

    Изменение( поле ) {
        this.ВыборПолейФазы(поле);
        if ( поле == "Автоматическое завершение" ) {
            if ( !this.Запись['Автоматическое завершение'] ) {
                this.ЗапретитьЭлементыГруппы( "ОсновныеПараметры", 'Авт_зав_дней,@Переход,@ПереходУспех,Авт_переход' );
            } else {
                this.РазрешитьЭлементыГруппы( "ОсновныеПараметры", 'Авт_зав_дней,@Переход,@ПереходУспех,Авт_переход' );
            }
        }
    }

    Сохранение() {
        if ( ПрочитатьПолеСвязи(this.Запись, "Папки") == -1 ) this.Запись['Папки'] = -10;
    }

    ВыборПолейФазы( Поле ) {
        switch ( Поле ) {
            case "Предыдущий исполнитель":
                if ( this.Запись['Предыдущий исполнитель'] == 1 ){
                    this.ЗапретитьЭлементыГруппы( "ДополнительныеПараметры", "@Исполнитель,@Группа" );
                }else{
                    this.РазрешитьЭлементыГруппы( "ДополнительныеПараметры", "@Исполнитель,@Группа" );
                }
                break;
            case "Автовыполнение":
                if ( this.Запись['Автовыполнение'] ) {
                    this.ЗапретитьЭлементыГруппы( "ОсновныеПараметры", "Фаза-Вход");
                    this.РазрешитьЭлементыГруппы( "ОсновныеПараметры", "@Переход");
                    //this.Запись['Флаги'] = 0;
                } else {
                    this.РазрешитьЭлементыГруппы( "ОсновныеПараметры", "Фаза-Вход");
                    this.ЗапретитьЭлементыГруппы( "ОсновныеПараметры", "@Переход");
                    this.Запись['СледующийНомер'] = 0;
                }
                break;
        }
    }

    /**
     * формирует список возможных фаз для маршрута по row_id маршрута
     * @param маршрут - row_id маршрута для списка фаз
     * @param режим - если = 0, то возвращает в качестве ID номера фаз, если = 1, то ID = row_id afps
     * @returns {Объект} - объект для инициализациии кнопки связи выбора фазы
     */
    static ВыбратьСледующуюФазу( маршрут, режим ) {
        var мСтрок = new Array();
        var зСписокФаз = Query('SELECT ph.ROW_ID, ph.[Номер], list.[Название] \
         FROM ~ДО Фазы~ ph \
              LEFT JOIN ~ДО Категории фаз~ list ON list.ROW_ID = ph.[Фаза-Категория] \
         WHERE [Маршрут-Фазы]=:1 \
         ORDER BY [Номер]', 200, "Path,S");
        зСписокФаз.УстановитьПараметры(маршрут);
        while ( зСписокФаз.Следующий() ) {
            var мСтрока = {};
            мСтрока["TEXT"] = зСписокФаз.Номер + " " + зСписокФаз.Название;
            switch ( режим ) {
                case 0:
                    мСтрока["ID"] = зСписокФаз.Номер;
                    break
                case 1:
                    мСтрока["ID"] = зСписокФаз.ROW_ID;
                    break;
            }
            мСтрок.push( мСтрока );
        }
        return мСтрок;
    }
}
/**
 * @class класс Фазы_переходы - обработчик выборки 'Фазы переходы' диалога Фаза
 * @extends БазоваяВыборка
 */
class Фазы_переходы extends БазоваяВыборка {
    constructor() {
        super('Фазы переходы', 'Фаза');
    }

    /**
     * копирует выделенные переходы в массив для дальнейшей вставки
     * @returns {number} - если 1, то событие обработано
     */
    КП0() {
        this.Источник.Окно.Группа.Обработчик.ПереходыФазы = this.ПолучитьВыделенныеЗаписи( false );
        return 1;
    }

    /**
     * вставить скопированные переходы в новую фазу
     */
    КП1() {
        var мПереходы = this.Источник.Окно.Группа.Обработчик.ПереходыФазы;
        if ( мПереходы.length == 0 ) return 1;

        var фазаВход = НомерЗаписи( this.Источник.Окно.Обработчик.Запись );
        var доПереход = new БазовыйОбъект( "ДО переходы" );

        for ( let нз of мПереходы ) {
            доПереход.Прочитать( нз );
            доПереход.Объект['Фаза-Вход'] = фазаВход;
            доПереход.Внести();
        }
        this.Перенабрать();
        return 1;
    }
}

/**
 * @class класс ДО_переходы - обработчик окна диалога ДО переходы выборки Фазы переходы
 * @extends БазовыйДиалог
 */
class ДО_переход extends БазовыйДиалог {
    constructor() {
        super('ДО переходы');
    }

    Инициализация() {
        if ( this.НоваяЗапись ) {
            this.Запись['Статус завершения'] = 1;
            try {
                var тз = View("Фаза", "Фаза").Обработчик.Запись;
                this.Запись['Предыдущая фаза'] = НомерЗаписи(тз);
            }
            catch(er){

            }
        }
    }

    static ПолучитьСостоянияРаботы() {
        var мСостояниеЗаявки = ["в процессе", // работа по заявке ведутся
            "завершено успешно",              // работа завершена успешно переход на след.фазу
            "смена исполнителя",              // мы не будем исполнять завку, знаем кто будет
            "отказ от задания",               // мы не будем исполнять заявку и не знаем, кто будет
            "отмена задания"];                // заявку исполнять не нужно, отменяем работы
        return мСостояниеЗаявки;
    }
}

/**
 * @class класс Категории_задач - обработчик выборки 'Категории задач' окна "Категории задач"
 * @extends БазоваяВыборка
 */
class Категории_задач extends БазоваяВыборка {
    constructor() {
        super('Категории задач', 'Категории задач');
    }

    Цвет() {
        return this.ЦветЗаписи(this.Запись.Цвет);
    }
}

/**
 * @extends БазоваяВыборка
 * @class класс Константы - обработчик выборки 'Константы' окна "Константы"
 */
class Константы extends БазоваяВыборка {
    constructor(){
        super('Константы', 'Константы');
    }
    Выбор_диалога(){
        if( this.Запись.Имя == "ЦВТЕКСТЗАДАНИЯ" || this.Запись.Имя == "ЦВФОНЗАДАНИЯ" )
            return "Константа цвет";
        return "";
    }
}

/**
 * @extends БазовыйДиалог
 * @class класс Константа_цвет - обработчик окна диалога 'Константа цвет' справочника 'Константы'
 */
class Константа_цвет extends БазовыйДиалог {
    constructor(){
        super('Константа цвет');
    }
    Инициализация(){
        super.Инициализация();
        var мЦвета = ["белый", "черный", "темно-синий", "темно-зеленый", "темно-красный", "фиолетовый",
            "коричневый", "светло-серый", "темно-серый", "синий", "светло-зеленый", "голубой", "красный",
            "розовый", "желтый", "бирюзовый"];

        var элЗначение = ComboBox( this.ИмяДиалога, "@Значение" );
        элЗначение.Список = мЦвета;
        элЗначение.Текст = this.Запись['@Значение'] = this.Запись.Значение;
    }
    Сохранение(){
        this.Запись.Значение = this.Запись['@Значение'];
    }
    Модифицирована(){
        var зИстория = Query( 'SELECT ROW_ID ' +
        'FROM ~История констант~ ' +
        'WHERE [Константа-История] = :1 AND Дата = :2', 10, "rID,S,Date,D" );
        var ид = -1;
        зИстория.УстановитьПараметры( this.НомерЗаписи, new Date() );
        while( зИстория.Следующий() ){
            ид = зИстория.ROW_ID;
        }

        if( ид == -1 ){
            var оИстория = new БазовыйОбъект( "История констант", -1 );
            оИстория.ПрочитатьИзКонтекста( {'Константа-История': this.НомерЗаписи,
                'Значение': this.Запись['@Значение'],
                'Дата': new Date()} );
            оИстория.Внести();
        } else {
            var кОбновитьИсторию = Command( 'UPDATE ~История констант~ SET Значение = :1 ' +
                'WHERE ROW_ID = :2', 1, "zn,A,rID,S" );
            кОбновитьИсторию.Выполнить( this.Запись['@Значение'], ид );
            кОбновитьИсторию.Завершить();
        }
    }
}/**
 * @class ДеревоДокументов
 * @extends БазовоеДерево
 */
class ДеревоДокументов extends БазовоеДерево {
    constructor(){
        super( "Мои документы - дерево", "", 0, 0 );
        /**
         * Фильтр выборки Карточки документов
         */
        this.Фильтр = null;
        this.МожноПрименить = false;
        this.ИдУзла = 0;
    }
    Инициализация(){
        super.Инициализация();
        this.Фильтр = this.Источник.Группа.Группа.Группа.Группа.Группа.Группа.Обработчик.ФильтрДокументы;
        this.Фильтр.УстановитьДеревоДокументов( this, 1, 2 );
        this.зПапки = Query( "SELECT ROW_ID FROM ~ДО карточки~ WHERE ROW_ID=:1", 1, "Ид,S" );
        this.Умолчания.Меню  = "Изменить раздел;Создать раздел;Удалить раздел";
        this.ДеревоОбъектов.Добавить( this, ++this.ИдУзла, {"оИд" : -2, 'Ид' : -10}, "Все документы", this.Умолчания.Меню, 1 );
        this.ДеревоОбъектов.Добавить( this, ++this.ИдУзла, {"оИд" : -3, 'Ид' : -10}, "Мои документы", "", 1 );
        return this.ДеревоОбъектов;
    }

    ЗаполнитьУровень( узел ){
        var допУсл = '';
        if( this.Фильтр.ПризнакиПапок.Скрытые == 0 ) допУсл += ' AND флаги <> 2 AND флаги <> 3';
        if( this.Фильтр.ПризнакиПапок.Завершенные == 0 ) допУсл += ' AND [Дата архива] IS NULL';

        //var пТекущийКорень = узел.Данные.Ид < 0 ? -10 : узел.Данные.Ид;
        switch( узел.Данные.оИд ) {
            case -2:
            case -3:
                var зСтруктураДокументы = Query( 'SELECT kart.row_id, kart.Примечание, dokat.[Иконка в дереве] \
                    FROM ~До карточки~ kart \
                        LEFT JOIN ~ДО категории карточек~ dokat ON dokat.Row_ID = kart.[Тип документа] \
                    WHERE Папки=:1 AND Папки_ADD=0' + допУсл +
                  ' ORDER BY kart.Номер', 100, "S,S" );
                var Иконка;
                зСтруктураДокументы.УстановитьПараметры( узел.Данные.Ид );
                while( зСтруктураДокументы.Следующий() ) {
                    Иконка = зСтруктураДокументы["Иконка в дереве"] ? зСтруктураДокументы["Иконка в дереве"] : undefined;
                    узел.Добавить( this, ++this.ИдУзла, {'оИд': узел.Данные.оИд, 'Ид': зСтруктураДокументы.ROW_ID},
                        зСтруктураДокументы.Примечание, this.Умолчания.Меню, 0, Иконка, Иконка );
                }
                break;
            case -11: // ??? на моем контроле
                var зСтруктураДокументы = Query( `SELECT kart.row_id, kart.Примечание
                                                FROM ~До карточки~ kart
                                                JOIN ~ДО контроль~ kontr ON kontr.[Контроль-Карточка] = kart.Row_ID
                                               WHERE kontr.[Контроль-Сотрудник] = :1
                                                 AND Папки = :2 AND Папки_ADD = 0 ` + допУсл +
                    ` ORDER BY kart.Номер `, 100, "Ид,S,root,S" );
                зСтруктураДокументы.УстановитьПараметры( НомерЗаписи( Пользователь() ), узел.Данные.Ид );
                while( зСтруктураДокументы.Следующий() ) {
                    узел.Добавить( this, this.УзлыДерева.length, {'оИд': узел.Данные.оИд, 'Ид' : зСтруктураДокументы.Row_ID}, зСтруктураДокументы.Примечание )
                }
                break;
            case -5: // Избранное
                var доп_усл1 = узел.Ид < 0 ? " AND Папки_ADD = 0" : "";
                var зСтруктураДокументы = Query( `SELECT row_id, Название, Папки_ADD
                                                    FROM ~До избранные документы~
                                                   WHERE Папки = :1 AND Владелец = :2` + доп_усл1, 100, "rID,S,rID,S" );
                зСтруктураДокументы.УстановитьПараметры( узел.Данные.Ид, НомерЗаписи( Пользователь() ) );
                while( зСтруктураДокументы.Следующий() ) {
                    var МенюУзла = !зСтруктураДокументы.Папки_ADD ? this.Умолчания.Меню : "Переименовать;Удалить";
                    узел.Добавить( this, this.УзлыДерева.length, {'оИд': узел.Данные.оИд, 'Ид' : зСтруктураДокументы.Row_ID },
                        зСтруктураДокументы.Название, МенюУзла, 0, !зСтруктураДокументы.Папки_ADD ? "1_1.png" : "ДоДокумент" );
                }
        }
        //Сообщить( "Заполнено: " + узел.Текст + "/" + узел.ID + "/" + узел.ЧислоПотомков );
        return узел;
    }
    Обновить( идУзел ){
        //this.ПолучитьУзел( идУзел ).Очистить( this );
        super.Обновить( идУзел );
    }
    Меню( узел ) {
        switch( узел["СобытиеМеню"] ){
            case "Изменить раздел":
                return this.Изменение( узел );
            case "Создать раздел":
                return this.Создание( узел );
            case "Удалить раздел":
                return this.Удаление( узел );
        }
    }
    Создание( узел ) {
        var имяДиалога = "ДО карточки Папка";
        var стрМеню = "", индекс = 1, мДОКат = [];
        var зТиповДок = BufferedReader( 'SELECT ROW_ID, Название, [Диалог создания], [Иконка в дереве] ' +
            'FROM ~ДО категории карточек~ WHERE [Создавать в дереве]=1', 100, "" );
        зТиповДок.УстановитьПараметры();
        while( зТиповДок.Следующий() ) {
            if (стрМеню) стрМеню += "\n";
            стрМеню += зТиповДок.Название;
            мДОКат[индекс++] = 0;
        }
        индекс = Меню( стрМеню );
        if( индекс <= 0 ) return 0;
        var текУзел = this.ПолучитьУзел( узел.ID );
        зТиповДок.Переместиться( индекс - 1 );
        var иконка = зТиповДок["Иконка в дереве"] ? зТиповДок["Иконка в дереве"] : undefined;
        if( зТиповДок["Диалог создания"] ) имяДиалога = зТиповДок["Диалог создания"];
        var доКарт = new БазовыйОбъект( "ДО карточки" );
        доКарт.ПрочитатьИзКонтекста( { 'Папки' : текУзел.Данные.Ид,
            'Папки_Узел' : 1,
            'Тип документа' : зТиповДок.ROW_ID });
        if( доКарт.Объект.Редактировать(имяДиалога) ) {
            var идПотомка = доКарт.Внести();
            текУзел.Добавить( this, ++this.ИдУзла, {'оИд' : текУзел.Данные.оИд, 'Ид' : идПотомка},
                доКарт.Объект.Примечание, this.Умолчания.Меню, 0, иконка, иконка );
            return текУзел;
        }
    }

    Изменение( узел ) {
        if( узел.Данные.Ид <= 0 ) return 0;

        var доКарт = new БазовыйОбъект( "ДО карточки", узел.Данные.Ид );
        доКарт.Прочитать();
        var зТиповДок = BufferedReader( 'SELECT ROW_ID, [Диалог создания] FROM ~ДО категории карточек~ ' +
            'WHERE ROW_ID=:1', 100, "id,S" );
        зТиповДок.УстановитьПараметры( доКарт.Объект["Тип документа"] );
        var имяДиалога = "ДО карточки Папка";
        if( зТиповДок.Следующий() ) имяДиалога = зТиповДок["Диалог создания"];

        if( доКарт.Объект.Редактировать(имяДиалога) ){
            доКарт.Сохранить();
            узел.Текст = доКарт.Объект.Примечание;
            return узел;
        }
    }
    Удаление( узел ){
        if( узел.Данные.Ид <= 0 ) return 0;
        if( ДаНет('Вы действительно хотите удалить "' + узел.Текст + '"?') && узел.Данные.Ид > 0 ) {
            new БазовыйОбъект( "ДО карточки", узел.Данные.Ид ).Удалить();
            return this.Удалить( узел );
        }
    }

    Выделение( узел ){
        if( !this.МожноПрименить ){ // для исключения повторного применения фильтра при инициализации окна
            this.МожноПрименить = true;
            return 0;
        }
        //var идд = узел.Данные.Ид < 0 ? -10 : узел.Данные.Ид;
        this.зПапки.УстановитьПараметры( узел.Данные.Ид );
        if( узел.Данные.Ид < 0 || this.зПапки.Следующий() ){
            ПерейтиВРаздел( this.ИмяОкна, "Карточки документов", узел.Данные.Ид );
        } else {  // если такой записи уже нет, то перенаберем верхний уровень
            this.Обновить( узел.ParentID );
        }
        // устанавливаем фильтр только у первого уровня листов дерева (с Ид < 0)
        if( узел.Данные.Ид < 0 ){
            this.Фильтр.УстановитьКорень( узел.Данные.Ид );
            this.Фильтр.УстановитьТипДокументов( узел.Данные.оИд );
            this.Фильтр.Применить();
        }
        //Перерисовать( ИмяОкна );
    }
    ОбновитьДанные( обновлятьДерево ){
        if( обновлятьДерево == 1 ){
            this.Обновить( -2 );
            this.Обновить( -3 );
        }
        var узел = ВыделенныйУзел( this.ИмяОкна, this.ИмяДерева );
        if( узел.Данные ){
            узел.Данные.ПрименитьФильтр = 1;
            this.Выделение( узел );
        }
        // TODO разобраться
        //ша( СинхронизироватьКарточкуДокумента() == 1 )
        //объект = View( "Дерево ДО", "Карточки документов" );
        //else
        var объект = View( "Дерево ДО", "Мои документы - дерево" );
        объект.УстановитьФокус();
    }
}
/**
 * @class ДеревоРабот
 * @extends БазовоеДерево
 */
class ДеревоРабот extends БазовоеДерево {
    constructor(){
        super( "Работы - дерево", "", 0, 0 );
        this.ЭтоТехПрисоединение = (Задача() == 'Технологическое присоединение');
        this.ФильтрЗадания = null;
        this.ФильтрРасписание = null;
        this.МожноПрименить = false;

        this.ЭлЗакладки = null;
        this.ЭлЗадания = null;
        this.ЭлПредпросмотр = null;
        this.ЭлРасписание = null;
    }
    Инициализация(){
        super.Инициализация();

        this.ФильтрЗадания = this.Источник.Группа.Группа.Группа.Группа.Группа.Обработчик.ФильтрЗадания;
        this.ФильтрРасписание = this.Источник.Группа.Группа.Группа.Группа.Группа.Обработчик.ФильтрРасписание;

        var Узел = this.ДеревоОбъектов.Добавить( this, 10, { "objectID" : -1 }, "Мои работы" );
        Узел.Раскрытый = 1;
        Узел.Добавить( this, 30, { "objectID" : 30 }, "Сегодня", "", 1 );
        Узел.Добавить( this, 40, { "objectID" : 40 }, "Все работы", "", 1 );
        Узел = this.ДеревоОбъектов.Добавить( this, 20, { "objectID" : -1 }, "Расписание" );
        return this.ДеревоОбъектов;
    }
    Выделение( УзелДерева ){
        if( !this.МожноПрименить ) {
            this.ЭлЗакладки = TabControl( "ПанельЗаданийСотрудника", "ЗакладкиДокументов" );
            this.ЭлЗадания = View( "ПанельЗаданийСотрудника", "Задания сотрудника" );
            this.ЭлПредпросмотр = View( "ПанельЗаданийСотрудника", "Задания - предпросмотр" );
            if( !this.ЭтоТехПрисоединение ) this.ЭлРасписание = View( "ПанельЗаданийСотрудника", "Расписание" );
        }
        var этоРасписание = УзелДерева.ID == 20;
        this.ЭлПредпросмотр.Скрытый = этоРасписание;
        if( this.ЭлЗакладки.ИндексСтраницы > 0 ) this.ЭлЗакладки.ОткрытьСтраницу( этоРасписание ? 2 : 1 );

        if( !this.МожноПрименить ){ // для исключения повторного применения фильтра при инициализации окна
            this.МожноПрименить = true;
            return 0;
        }

        if( !этоРасписание ){
            if( this.ЭлРасписание ) this.ЭлРасписание.Скрытый = true;
            this.ЭлЗадания.Скрытый = false;
            this.ФильтрЗадания.Применить();
        } else {
            if( this.ЭлРасписание ){
                ПеренабратьВыборку( "Расписание" );
                this.ЭлРасписание.Скрытый = false;
                //this.ФильтрРасписание.УстановитьТекст();
                this.ФильтрРасписание.Применить();
            }
            this.ЭлЗадания.Скрытый = true;
        }

        /*if( Закладки.ИндексСтраницы != 0 ){
            var оОрг = ComboBox( "ФильтрЗаданий", "ФильтрОрганизации" );
            оОрг.УстановитьФокус();
        }*/
        ПерейтиВРаздел( "Задания сотрудника", "Задания сотрудника", -10 );
    }
}
class ДО_карточки_Папка extends БазовыйДиалог{
    constructor(){
        super( "ДО карточки Папка" );
    }
    Инициализация(){
        super.Инициализация();
    }
    Изменение( Поле ){
        if( Поле == "Карточки-Категория" ){
            this.Запись["@МаршрутКарты"] = "";
            this.Запись["Карточки-Маршрут"] = -1;
        }
    }
    Сохранение(){
        if( this.НоваяЗапись ){
            var зИмени = BufferedReader( 'SELECT TOP 1 Примечание FROM ~ДО карточки~ WHERE Примечание=:1 AND Папки=:2', 1, "A,A,S,S" );
            зИмени.УстановитьПараметры( this.Запись.Примечание, this.Запись.Папки );
            if( зИмени.Следующий() ){
                Сообщить("Папка с таким именем уже существует в этом расположении");
                return "Примечание";
            }
        }
    }
}
/**
 * @class ФормаДО
 */
class ФормаДО {
    constructor(){
        // ссылки на объекты выборок Окна
        this.Выборки = [];
        // ссылки на деревья
        //this.Деревья = [];
        this.ФильтрДокументы = new кФильтрДокументы( "ФильтрДокументы", "Дерево ДО", "Карточки документов" );
        this.ФильтрЗадания = new кФильтрЗадания( "ФильтрЗаданий", "Дерево ДО", "Задания сотрудника" );
        this.ФильтрРасписание = new кФильтрРасписание( "ФильтрРасписание", "Дерево ДО", "Расписание" );
    }
    Инициализация( Объект ) {
        if (Объект.ИмяОбъекта == "ФормаДокументов") {
            var стр = 'КлючевыеФразы==да\n' +
                '"Признаки папок:","Организация:","Договор:","Заявка:","Исполнение:","Состояния / фазы:"==0,0,0;;Arial|8|3\n' +
                '"с:","до:","наш номер:","ст. номер:"==0,0,0;;Arial|8|0';
            Editor("ФормаДокументов", "ТекстФильтра").КлючевыеСлова(стр);
            View( "ФормаДокументов", "Мои документы - дерево" ).УстановитьФокус();
        } else if (Объект.ИмяОбъекта == "ФормаЗаданий") {
            var стр = 'КлючевыеФразы==да\n' +
                '"Организация:","Договор:","Заявка:","Исполнение:","Состояния / фазы:","Работа:"==0,0,0;;Arial|8|3\n' +
                '"с:","до:","наш номер:","ст. номер:","номер:"==0,0,0;;Arial|8|0';
            var элТекстФильтра = Editor("ФормаЗаданий", "ТекстФильтра");
            элТекстФильтра.КлючевыеСлова(стр);
            элТекстФильтра.УстановитьФокус(); // почему то без этой строчки не встает фокус в дерево
            View("ФормаЗаданий", "Работы - дерево").УстановитьФокус();
        }
    }

    // TODO чето не пашет.... :(
    Развертывание() {
Сообщить( "Развертывание" );
        var Ресурс = "";
        switch (Объект.ИмяОбъекта) {
            case "ИтемДокументов":
                Ресурс = "СтрФильтрДокументы";
                break;
            case "ИтемАналитикДокументов":
                Ресурс = 2;
                break;
        }
        if (Ресурс) {
            var ТекстФильтра = ФормаДО.ПолучитьТекстФильтра(Ресурс);
            var текстФильтра = View("ФормаЗаданий", "ТекстФильтра");
            текстФильтра.Текст = ТекстФильтра;
            // todo когда будет понятно зачем это
            this.Деревья["Мои документы - дерево"].ОбновитьДанные(0);
            var Закладки = TabControl("Документы", "ЗакладкиДокументов");
            if (Закладки.ИндексСтраницы != 0) {
                Закладки.ОткрытьСтраницу(индекс);
                var оОрг = ComboBox("ПанельФильтра" + индекс, "ФильтрОрганизации");
                оОрг.УстановитьФокус();
            }
        }
    }
    НажатиеКлавиши( Объект ) {
        var ИмяРесурсаДляФильтра = ФормаДО.ИмяТекущегоРесурсаФильтра();
        /*if (Объект.КодКлавиши == 13) {
            if( ИмяРесурсаДляФильтра == "ФильтрДокументы" ) {
                this.Деревья["Мои документы - дерево"].Фильтр.Применить();
            } else if( ИмяРесурсаДляФильтра == "ФильтрЗаданий" ) {
                this.Деревья["Работы - дерево"].ФильтрЗадания.Применить();
            } else if( ИмяРесурсаДляФильтра == "ФильтрРасписание" ) {
                this.Деревья["Работы - дерево"].ФильтрРасписание.Применить();
            }

        } else*/ if (Объект.Control == 1) {
            switch (Объект.КодКлавиши) {
                case 81: // Ctrl+Q
                    this.ПоказатьФильтр();
                    break;
                case 89: // Ctrl+Y
                    this.ОчиститьФильтр();
                    break;
            }
        }
    }

    /**
     * Применить фильтр на текущее окно
     */
    ПрименитьФильтр(){
        var ИмяРесурса = ФормаДО.ИмяТекущегоРесурсаФильтра();
        switch( ИмяРесурса ){
            case "ФильтрДокументы":
                this.ФильтрДокументы.Применить();
                this.ФильтрДокументы.Показать();
                break;
            case "ФильтрЗаданий":
                this.ФильтрЗадания.Применить();
                this.ФильтрЗадания.Показать();
                break;
            case "ФильтрРасписание":
                this.ФильтрРасписание.Применить();
                this.ФильтрРасписание.Показать();
                break;
        }
        return "";
    }
    ПоказатьФильтр(){
        var имяФильтра = ФормаДО.ИмяТекущегоРесурсаФильтра();
        if( имяФильтра == "ФильтрДокументы" ) {
            this.ФильтрДокументы.Показать();
        } else if( имяФильтра == "ФильтрЗаданий" ) {
            this.ФильтрЗадания.Показать();
        } else if( имяФильтра == "ФильтрРасписание" ) {
            this.ФильтрРасписание.Показать();
        }
    }
    ОчиститьФильтр(){
        var имяФильтра = ФормаДО.ИмяТекущегоРесурсаФильтра();
        if( имяФильтра == "ФильтрДокументы" ) {
            this.ФильтрДокументы.Очистить();
            this.ФильтрДокументы.УстановитьУмолчания();
            this.ФильтрДокументы.Применить();
        } else if( имяФильтра == "ФильтрЗаданий" ) {
            this.ФильтрЗадания.Очистить();
            this.ФильтрЗадания.УстановитьУмолчания();
            this.ФильтрЗадания.Применить();
        } else if( имяФильтра == "ФильтрРасписание" ) {
            this.ФильтрРасписание.Очистить();
            this.ФильтрРасписание.УстановитьУмолчания();
            this.ФильтрРасписание.Применить();
        }
    }
    /**
     * Опеределяет название формы для фильтра
     */
    static ИмяТекущегоРесурсаФильтра() {
        var таб = TabControl("Дерево ДО", "Панель документы");
        switch (таб.ИндексСтраницы) {
            case 0:
                return "ФильтрДокументы";
            case 1:
                var узел = ВыделенныйУзел("Дерево ДО", "Работы - дерево");
                if ( ЕстьСвойство( узел, "ID" ) && ( узел.ID == 10 || узел.ID == 30 || узел.ID == 40) ) {
                    return "ФильтрЗаданий";
                }
                else if (ЕстьСвойство( узел, "ID" ) && ( узел.ID == 20) ) {
                    return "ФильтрРасписание";
                }
        }
        //Сообщить("Надо дописать выбор")
    }
}
/**
 * Обработчик поля организации фильтра
 * @class ComboBoxColored_Организация
 */
class ДО_НастройкиФильтра {
    НажатиеКлавиши(Объект) {
        var ИмяРесурса = ФормаДО.ИмяТекущегоРесурсаФильтра();
        switch (Объект.ИмяОбъекта) {
            case "ФильтрОрганизации":
                if (Объект.КодКлавиши == 13) {
                    var оДоговор = ComboBox(ИмяРесурса, "ФильтрДоговоры");
                    var оОрг = ComboBox(ИмяРесурса, "ФильтрОрганизации");
                    оДоговор.Фильтр(оОрг.Текст);
                    break;
                }
            case "ФильтрДоговоры":
                if (Объект.КодКлавиши == 13) {
                    var оДоговор = ComboBox(ИмяРесурса, "ФильтрДоговоры");
                    var оОрг = ComboBox(ИмяРесурса, "ФильтрОрганизации");
                    var стр = оДоговор.Текст;
                    if (стр) {
                        var поз = стр.indexOf(" - ")
                        if (поз > 0) {
                            var стр = стр.substring(поз + 3);
                            if (оОрг.ИндексПоИмени(стр) == -1)стр = "";
                        } else {
                            стр = "";
                        }
                        оОрг.Текст = стр;
                    }
                }
                break;
            case "ФильтрИсполнителя":
                if (Объект.КодКлавиши == 13) {

                    if (ИмяРесурса == "ФильтрДокументы" || ИмяРесурса == "ФильтрДокументы") {
                        var список = ComboBox(ИмяРесурса, "ФильтрИсполнителя");
                        if (список.Текст) {
                            var фазы = ListBox(ИмяРесурса, "СписокСостояний");
                            фазы.Помечен[0] = 0;
                        }
                    } else if (ИмяРесурса == "ФильтрЗаданий") {
                        ПерейтиВРаздел("Задания сотрудника", "Задания сотрудника", -10);
                    }
                }
        }
        return Объект;
    }

    Фокус(Объект) {
        var ИмяРесурса = ФормаДО.ИмяТекущегоРесурсаФильтра();
        switch (Объект.ИмяОбъекта) {
            case "ФильтрНачалаПериода":
                var дН = View(ИмяРесурса, "ФильтрНачалаПериода");
                var дК = View(ИмяРесурса, "ФильтрКонцаПериода");
                if (дН.Текст && дК.Текст && дН.Текст.toDate() > дК.Текст.toDate()) {
                    дК.Текст = дН.Текст;

                }
                break;

            case "ФильтрНачалаПериода":
                var дН = View(ИмяРесурса, "ФильтрНачалаПериода");
                var дК = View(ИмяРесурса, "ФильтрКонцаПериода");
                if (дН.Текст && дК.Текст && дН.Текст.toDate() > дК.Текст.toDate()) {
                    дН.Текст = дК.Текст;
                }
                break;
        }
        return;
    }

    Пометка( Объект ){
        switch ( Объект.ИмяОбъекта ) {
            case "ИсполнительСвояОрг":
                var ИмяРесурса = ФормаДО.ИмяТекущегоРесурсаФильтра();
                var список = ComboBox(ИмяРесурса, "ФильтрИсполнителя");
                список.Запрещен = Объект.Помечен == 0 ? 1 : 0;
                if (Объект.Помечен == 0) список.Текст = "";
        }
    }
}
//class ComboBoxColored_


/**
 * @extends БазоваяВыборка
 * @class класс Карточки_документов - обработчик Выборки 'Карточки документов' окна 'Карточки документов'
 */
class Карточки_документов extends БазоваяВыборка{
    constructor(){
        super ( arguments[0] ? arguments[0] : "Карточки документов", "Карточки документов" );
        /**
         * текущая задача - Документооборот
         * @type {boolean}
         */
        this.ЭтоДо = (Задача() == 'Документооборот');
        /**
         * текущая задача - Технологическое присоединение
         * @type {boolean}
         */
        this.ЭтоТехПрисоединение = (Задача() == 'Технологическое присоединение');
        /**
         * текущая заявка, прочитанная по записи
         * @type {кЗаявка}
         */
        this.Заявка = new кЗаявка();
    }
    Начало(){
        this.зФайл = Query( `Select count(*) kol from ~ДО внешние документы~ where [Файл-Карточка] = :1`, 1, "S,S" );
        this.зСтатуса = Query(`SELECT TOP 1 dt.[Статус завершения] [Статус]
                            FROM ~ДО задания~ dt
                            WHERE dt.[Задание-Карточка] = :1 AND ТипИсполнителя IN(0,1)
                            ORDER BY dt.[Статус завершения]`,10, "doc,S" );
    }

    Инициализация(){
        this.Заявка.Прочитать( this.Запись );
        if( this.Заявка.НомерЗаписи == -1 && !ЭтоУзел( this.Запись ) )
            this.Запись["Карточки-категория"] = this.Запись["Папки>Карточки-категория"];
        this.Запись["Дата создания"]  = new Date();
        this.Запись["Время создания"]  = new Date();
        this.Запись["Завершить до"]   = this.Заявка.ЗавершитьДо();
        this.Запись["Автор"]          = НомерЗаписи( Пользователь() );
        // TODO засунуть в обработчик диалога или возможно метод класса заявки
        //if( ИмяТекущегоОкна() == "Задание по документам" ) // создаем дополнительную работу
        //{
        //    var зД = ПолучитьЗаписьДиалога( "Задание по документам" );
        //    if( Есть('зД.Задание-Карточка') )
        //    {
        //        '.Карточка-Договор' = 'зД.Карточка-Договор';
        //        '.Карточка-Организация' = 'зД.Карточка-Организация';
        //        '.Карточка-ПлОрганизация' = 'зД.Карточка-ПлОрганизация';
        //        '.Карточки-Категория' = 'зД.Карточки-Категория';
        //        '.Карточки-Маршрут' = 'зД.Карточки-Маршрут';
        //        '.Дополнительная работа' = 'зД.Задание-Карточка';
        //        '.Папки' = 'зД.Задание-Карточка>Папки';
        //    }
        //    Удалитьvarенную( зД );
        //}
    }
    Цвет(){
        this.зСтатуса.УстановитьПараметры( НомерЗаписи(this.Запись) );
        this.зСтатуса.Статус = 999;
        this.зСтатуса.Следующий();
        if( this.зСтатуса.Статус != 1 && this.Запись.РасчТипИсполнителя == 1 ) this.зСтатуса.Статус = 98;
        return Карточки_документов.ЦветЗадания( this.зСтатуса.Статус );
    }
    Выбор_диалога() {
        if( ЭтоУзел(this.Запись) ) return 0;
        if( НомерЗаписи(this.Запись) == -1 ) {
            // Проверяем указано ли на категории документа имя окон для создания заявки
            if (this.ЭтоТехПрисоединение) {
                if (this.Запись.Папки == -10) return "Мастер создания заявки техПрисоединения";
                if (this.Запись["Папки>Карточки-категория>Заявка-диалог создания"] != "") {
                    return this.Запись["Папки>Карточки-категория>Заявка-диалог создания"];
                }
            } else return "Карточка документа Создание";
        } else {
            // Проверяем указано ли на категории документа имя окон для создания заявки
            if (this.ЭтоТехПрисоединение && this.Запись["Карточки-категория>Заявка-диалог редактирования"] != "") {
                return this.Запись['Карточки-категория>Заявка-диалог редактирования'];
            }
        }
    }

    /**
     * дать возможность удалить карточку,
     * if на ней висят только задания без работ и подзаданий
     */
    Удаление() {
        this.Заявка.Прочитать( this.Запись );
        if ( this.Заявка.ЕстьНепустыеЗадания() ) {
            var удалениеЗаданий = Command( 'DELETE FROM ~ДО задания~ WHERE [Задание-Карточка]=:1', 1, "id,S" );
            удалениеЗаданий.Выполнить( this.Заявка.НомерЗаписи );
            удалениеЗаданий.Завершить();
        }
    }
    Поиск(){
        return "Карточки документов - поиск";
    }
    // При начальной инициализации опишем только параметры
    // далее всеравно все перенаберется деревом
    Фильтр() {
        var мФильтр = {};
        мФильтр.Запрос = this.Источник.Окно.Группа.Группа.Обработчик.ФильтрДокументы.ПолучитьУсловие( 0 );
        return мФильтр;
    }
    Картинка() {
        var папка = 0, рез = "";
        if (Узел(this.Запись, "Папки")) {
            рез = "Завершить до,1;";
            папка = 1;
        }
        if( !ЭтоУзел( this.Запись ) ) {
            if (this.Запись.РасчТипИсполнителя == 0) {
                рез += "РасчТипИсполнителя,4;";
            } else if (this.Запись.РасчТипИсполнителя == 1) {
                рез += "РасчТипИсполнителя,5;";
            }
        }
        this.зФайл.УстановитьПараметры(НомерЗаписи(this.Запись));
        this.зФайл.Следующий();
        if (this.зФайл.kol > 0) рез += "ПрикреплФайл,6;";

        // последнее задание:
        // 1 - завершено успешно
        // 2 - завершено с ошибкой
        // 4 - отказ от задания
        // 5 - прерванное задание
        // установка параметров происходит в событии цвет, в повторной не нуждаемся
        if (!папка && (this.зСтатуса.Статус == 1 || this.зСтатуса.Статус == 2 || this.зСтатуса.Статус == 4 || this.зСтатуса.Статус == 5)) { // серый цвет приоритета

            if (this.Запись.Приоритет == 0) рез += "Приоритет,10;";
            if (this.Запись.Приоритет == 1) рез += "Приоритет,11;";
            if (this.Запись.Приоритет == 2) рез += "Приоритет,12;";
        } else {
            if (this.Запись.Приоритет == 0) рез += "Приоритет,7;";
            if (this.Запись.Приоритет == 1) рез += "Приоритет,8;";
            if (this.Запись.Приоритет == 2) рез += "Приоритет,9;";
        }
        if (this.Запись["Карточка-Организация>УстановленСД"]) рез += "Карточка-Организация>Название,13;";
        return рез;
    }
    static ЦветЗадания( Статус ){
        // 'Статус завершения' принимает такие значения:
        switch( Статус ){
            case 0: return "*0.0.255"; break;  // 0 - в процессе
            case 1: return "*128.128.128"; break; // 1 - завершено успешно
            case 98: return "*33.171.255"; break; // исполнитель на чужой стороне
        }
        return "*0.0.0";
    }
}
/**
 * если возвращаем объект считается что событие требует дальнейшей обработки
 */
class КарточкиДокументов_Документы {
    constructor(){
        this.Инициализирован = false;
    }
    Инициализация( Объект ) {
        if( this.Инициализирован ) return 0;

        this.Инициализирован = true;
        var Закладки = TabControl("Документы", "ЗакладкиДокументов");
        Закладки.ВысотаЗаголовка(0);
            // для значений по умолчанию
        var фильтр = this.Источник.Группа.Группа.Группа.Обработчик.ФильтрДокументы;
        фильтр.ЗагрузитьВизуальныеЭлементы();
        фильтр.УстановитьУмолчания();
        фильтр.УстановитьТекст();
        return Объект;
    }
    Фокус( Объект ) {
        if( Объект.Фокус == 1 && Объект.ИмяОбъекта == "Карточки документов" ){
            var диалог = View( "ЗакладкиДокументов", "Документ - предпросмотр" );
            var об = ПолучитьВыборку( "Карточки документов" );
            if( ИмяТаблицы(об) != "" && ПолучитьЗаписьВыборки(об, 0) == 1 ) диалог.Скрытый = 0;
        }
        return "";
    }
}

class ЗаданияСотрудника_ПанельЗаданийСотрудника {
    Инициализация(Объект) {
        var Закладки = TabControl("ПанельЗаданийСотрудника", "ЗакладкиДокументов");
        Закладки.ВысотаЗаголовка(0);

        var фильтр = this.Источник.Группа.Группа.Группа.Обработчик.ФильтрЗадания;
        фильтр.ЗагрузитьВизуальныеЭлементы();
        фильтр.УстановитьУмолчания();
        фильтр.УстановитьТекст();
        фильтр = this.Источник.Группа.Группа.Группа.Обработчик.ФильтрРасписание;
        фильтр.ЗагрузитьВизуальныеЭлементы();
        фильтр.УстановитьУмолчания();
        фильтр.УстановитьТекст();
        //if( Задача() != "Технологическое присоединение"  )
        //    ДеревоДО_ФильтрПоУмолчанию( "ПанельФильтра4" );
        return Объект;
    }
}

/**
 * @class класс Контакт_организации - обработчик окна диалога 'ДО карточки Этап'
 * @extends БазовыйДиалог
 */
class кБыстрыйВыборДоговора extends БазовыйДиалог {
    constructor() {
        super( arguments[0] ? arguments[0] : 'ДО карточки Этап' );
        /**
         * ид организации, по которой необходимо построить список договоров для карточки
         * @type {number}
         */
        this.Организация = -1;
        /**
         * ид организации плательщика, по которой необходимо построить список договоров для карточки
         * @type {number}
         */
        this.ОрганизацияПлательщик = -1;
        this.СписокДоговоров = {'Ключи': [], 'Названия': []};
        this.ЭлДоговор = null;
        this.Договор = null;
    }
    Инициализация(){
        super.Инициализация();
        if( this.Договор == null ) return "";
        this.Организация = this.Запись['Карточка-Организация'];
        this.ОрганизацияПлательщик = this.Запись['Карточка-ПлОрганизация'];
        this.ЭлДоговор = ComboBox( this.ИмяДиалога, '@БыстрДогОрг' );
        this.СписокДоговоров = this.ПолучитьСписокДоговоров();
        this.ЭлДоговор.СписокСКлючами( this.СписокДоговоров.Ключи, this.СписокДоговоров.Названия );

        if( this.Договор && this.Договор.НомерЗаписи != -1 ){
            var номерДоговора = this.Договор.Объект.Номер + this.Договор.Объект.Тема + " " + this.Договор.Объект['Плательщик>Название'];
            this.Запись['@БыстрДогОрг'] = номерДоговора;
            this.ЭлДоговор.Фильтр( номерДоговора );
        }
    }

    ПолучитьСписокДоговоров(){
        var мДоговоры = { 'Ключи' : [], 'Названия' : [] };
        var стрОрганизаций = '';
        if( this.Организация != -1 ) стрОрганизаций = this.Организация.toString();

        if( this.ОрганизацияПлательщик != -1 ){
            if( стрОрганизаций ) стрОрганизаций += ',';
            стрОрганизаций += this.ОрганизацияПлательщик.toString();
        }
        if( стрОрганизаций ){
            var зДоговора = Query( "SELECT cont.ROW_ID, convert(varchar, Номер) + Тема + ' ' + Название Название " +
                "FROM ~Организации~ org" +
                "    JOIN ~Договор~ cont ON org.ROW_ID=cont.[Грузополучатель] " +
                "WHERE org.ROW_ID IN(" + стрОрганизаций + ") " +
                "AND ( (getdate() BETWEEN [Начало договора] AND [Окончание]) OR " +
                "    (getdate() >= [Начало договора] AND [Окончание] IS NULL) )", 10 );
            зДоговора.УстановитьПараметры();
        } else {
            зДоговора = Query( "SELECT cont.ROW_ID, convert(varchar, Номер) + Тема + ' ' + Название Название " +
                "FROM ~Организации~ org" +
                "    JOIN ~Договор~ cont ON org.ROW_ID=cont.[Грузополучатель] " +
                "WHERE ( (getdate() BETWEEN [Начало договора] AND [Окончание]) OR " +
                "    (getdate() >= [Начало договора] AND [Окончание] IS NULL) )", 10 );
            зДоговора.УстановитьПараметры();
        }
        while( зДоговора.Следующий() ){
            мДоговоры.Ключи.push( зДоговора.ROW_ID );
            мДоговоры.Названия.push( зДоговора.Название );
        }
        return мДоговоры;
    }
}

/**
 * @extends БазовыйДиалог
 * @class класс Карточка_документа - обработчик окна диалога 'Карточка документа' выборки 'Карточки документа'
 */
class Карточка_документа extends кБыстрыйВыборДоговора {
    constructor() {
        super( arguments[0] ? arguments[0] : 'Карточка документа' );
        /**
         * объект заявки документооборота
         * @type {кЗаявка}
         */
        this.Заявка = null;
        /**
         * объект для инициализации элемента выбора договора
         * @type {{Ключи: Array, Названия: Array}}
         */
        this.СписокДоговоров = { 'Ключи' : [], 'Названия' : [] };
        this.ИзмененДоговор = false;
        this.УстановленыКонтактыП = false;
        this.УстановленыПараметрыП = false;
    }
    Инициализация(){ //+
        this.ЗаполнитьЗаявку();
        if( !this.НоваяЗапись ){
            // Проверим если существуют работы, то маршут нельзя менять.
            if( this.Заявка.КоличествоРабот() > 0 ) {
                this.Источник.Элементы["Запустить в работу"].Скрытый = true;
                var элДопИнф = Group( this.ИмяДиалога, "Дополнительная информация" );
                элДопИнф.Элементы['@Тип'].Запрещен = true;
                элДопИнф.Элементы['@МаршрутКарты'].Запрещен = true;
            }
            var часыЗаявки = this.Заявка.ПолучитьЧасы();
            this.Запись['@Дата ввода'] = часыЗаявки.Дата;
            this.Запись['@ВВремениПоЗаданию'] = часыЗаявки.Отработано;
            this.Запись['@ВКОплатеПоЗаданию'] = часыЗаявки.КОплате;
                // смотрим текущую фазу заявки
            var стадияЗаявки = '';
            if( this.Заявка.УстановитьТекущуюФазу() )
                стадияЗаявки = " На стадии: " + this.Заявка.ТекущаяФаза.Название + " (" + this.Заявка.ТекущаяФаза.Исполнитель + ")";
            this.Запись['@HTMLTable'] = this.Заявка.ПолучитьИсториюHtml( -1, true );
        }
        this.Запись.Адресат = this.Организация > 0 ? this.Запись['Карточка-Организация>Название'] : "";
        this.Запись['@ОтправитьУведомление'] = 0;
        // нет такого поля сейчас
        /*var зПланЗаявки = Query( 'SELECT sum(w.[Срок исполнения]) [ПланРабот] ' +
            'FROM ~ДО задания~ w ' +
            'WHERE w.[Задание-Карточка]=:1 and w.[Статус завершения] IN (0,1)', 1, "Card,S" );
        зПланЗаявки.УстановитьПараметры( this.Заявка.НомерЗаписи );
        if( зПланЗаявки.Следующий() ) this.Запись["@ВсегоВремени"] = зПланЗаявки.ПланРабот;*/
        if( this.Запись["Карточки-Маршрут"] == -1 ){
            var мМаршрутов = Карточка_документа.МаршрутПоКатегории( this.Запись['Карточки-Категория'] );
            if( мМаршрутов.length > 0 ) this.Запись['Карточки-Маршрут'] = мМаршрутов[0].ID;
        }
        this.УстановитьЗаголовок( стадияЗаявки );
        if( !this.Запись['Автор>ФИО'] ) {
            this.Запись['@Авторз'] = this.Запись['Карточка-Представитель>ФИО'];
        } else {
            this.Запись['@Авторз'] = this.Запись['Автор>ФИО'];
        }

    }
    Изменение( поле ){
        switch( поле ) {
            case "@БыстрДогОрг": //+
                var нзДоговора = this.ЭлДоговор.Значение();
                if( нзДоговора != -1 ) {
                    this.Запись['Карточка-Договор'] = нзДоговора;
                    this.Заявка.Договор.Прочитать( нзДоговора );
                    if( this.Запись['Карточка-ПлОрганизация'] == -1 )
                        this.Запись['Карточка-Организация'] = this.Заявка.Договор.Объект.Плательщик;
                    this.Запись['Карточка-ПлОрганизация'] = this.Заявка.Договор.Объект.Плательщик;

                    this.Запись.Адресат = this.Запись['Карточка-Организация>Название'];
                    this.Запись.Номер = this.Заявка.НовыйНомер();
                    this.Запись['Завершить до'] = this.Заявка.ЗавершитьДо( this.Запись['@БыстрДогОрг'] );
                    this.УстановитьЗаголовок();
                    this.ИзмененДоговор = true;
                }
                break;
            case "Карточка-Организация":
                if( this.Запись['Карточка-ПлОрганизация'] == -1 ){
                    this.Запись['Карточка-ПлОрганизация'] = this.Запись['Карточка-Организация']
                    this.Заявка.Установить( -1 );
                    this.Заявка.Договор.Установить( -1 );
                    this.Запись['Карточка-Договор'] = -1;
                    this.Запись['@БыстрДогОрг'] = "";
                }
                break;
            case "Карточка-ПлОрганизация":
                this.ЭлДоговор.Фильтр( this.Запись['Карточка-ПлОрганизация>Название'] );
                this.Запись['@БыстрДогОрг'] = "";
                break;
            case "Карточки-Категория": // при выборе категории с более чем одним маршрутом, сразу установить первый маршрут
                var мМаршрутов = Карточка_документа.МаршрутПоКатегории( this.Запись['Карточки-Категория'] );
                if( мМаршрутов.length > 0 ) {
                    this.Запись['Карточки-Маршрут'] = мМаршрутов[0].ID;
                } else {
                    this.Запись['Карточки-Маршрут'] = -1;
                }
                break;
        }
    }
    ОткрытиеВкладки( вкладка ){
        switch( вкладка ){
            case "Расписание": //+
                var стр_усл = 't1.ROW_ID IN( SELECT hour.ROW_ID ' +
                    'FROM ~ДО задания~ task JOIN ~ДО часы~ hour ON hour.[Часы-Задание] = task.ROW_ID ' +
                    'WHERE task.[Задание-Карточка]=:1)';
                УстановитьПараметрыФильтра( this.ИмяДиалога, "@Часы по карточке фильтр", стр_усл, "S", this.Заявка.НомерЗаписи );
                break;
            case "История заявок по организации": //+
                УстановитьПараметрыФильтра( this.ИмяДиалога, "@Карточки документов История",
                    "t1.[Карточка-Организация] = :1", "S", this.Запись['Карточка-Организация'] );
                break;
            case "Контакты":
                if( this.УстановленыКонтактыП ) break;

                this.УстановленыКонтактыП = true;
                УстановитьПараметрыФильтра( this.ИмяДиалога, "@Контакты", Карточка_документа.ФильтрКонтактовПлательщика(),
                    "S", this.Заявка.НомерЗаписи );
                break;
            case "Параметры организации":
                if( this.УстановленыПараметрыП ) break;

                this.УстановленыПараметрыП = true;
                УстановитьПараметрыФильтра( this.ИмяДиалога, "@Организация Значения параметров", " t1.[Орг-Параметры]=:1 AND t1.Тип<>2", "S",
                    this.Заявка.Договор.Объект.Грузополучатель );
                break;
            case "Входящие":
                УстановитьПараметрыФильтра( "Почта-Входящие", "@Почта-Входящие",
                    " t1.[Организация-Сообщения]=:1 AND Папка_ADD = 1 AND Признаки &8 = 0 AND Признаки &512 = 0", "S", this.Запись['Карточка-Организация'] );
                break;
            case "Отправленные":
                УстановитьПараметрыФильтра( "Почта-Отправленные", "@Почта-Входящие",
                    " t1.[Организация-Сообщения]=:1 AND Папка_ADD = 1 AND Признаки &8 > 0 AND Признаки &512 = 0", "S", this.Запись['Карточка-Организация'] );
                break;
        }
    }

    /**
     * запустить заявку в работу
     */
    ЗапуститьВРаботу(){
        if( this.Запись['Карточка-Договор'] == -1 ){
            Сообщить( "Необходимо заполнить договор" );
            return "@БыстрДогОрг";
        }
        if( this.Запись['Карточка-Организация'] == -1 ) return "Адресат";
        if( this.НоваяЗапись ) {
            this.Заявка.ПрочитатьИзКонтекста( this.Запись );
            this.Заявка.Установить( this.Сохранить() );
        }

        var работа = new кРабота( 0, this.Заявка );
            // ищем фазу с минимальным номером на маршруте
        var зСтартоваяФаза = Query( 'SELECT TOP 1 ROW_ID FROM ~ДО Фазы~ ' +
            'WHERE [Маршрут-фазы]=:1 ' +
            'ORDER BY Номер', 1, "m1,S" );
        зСтартоваяФаза.УстановитьПараметры( this.Запись['Карточки-Маршрут'] );
        зСтартоваяФаза.Следующий();
        работа.Фаза = new кФаза( работа, зСтартоваяФаза.ROW_ID );
        if( работа.Завершить() ) this.ЗакрытьСохранение();
    }
    Сохранение(){
        if( this.Запись['Карточка-Договор'] == -1 ){
            Сообщить( "Необходимо заполнить договор" );
            return "@БыстрДогОрг";
        }
        if( this.Запись['Карточка-Организация'] == -1 ) return "Адресат";
        if( this.Заявка.Договор.Объект.Плательщик != this.Запись["Карточка-Организация"] && this.ИзмененДоговор ){
            if( ДаНет("Изменился плательщик, изменить заказчика?") ) this.Запись['Карточка-Организация'] = this.Заявка.Договор.Объект.Плательщик;
        }
    }
    static МаршрутПоКатегории( категория ){
        var мСтрок = [];
        var зСписокМаршутов = Query( 'SELECT path.ROW_ID, path.[Название] ' +
            'FROM ~ДО маршруты~ path ' +
            '     LEFT JOIN ~ДО наборы маршрутов~ list ON path.ROW_ID = list.[Набор-Маршрут] ' +
            'WHERE [Набор-Категория]=:1', 100, "Type,S" );
        зСписокМаршутов.УстановитьПараметры( категория );
        while( зСписокМаршутов.Следующий() ) {
            мСтрок.push( {
                "TEXT": зСписокМаршутов.Название,
                "ID": зСписокМаршутов.ROW_ID
            } );
        }
        return мСтрок;
    }
    УстановитьЗаголовок( стадияЗаявки ){
        if( !стадияЗаявки ) стадияЗаявки = '';
        УстановитьЗаголовок( this.ИмяДиалога, "Заявка №" + this.Запись.Номер +
            ( this.Запись.СтороннийНомер ? " (сторонний №" + this.Запись.СтороннийНомер + ")" : "" ) +
            " от: " + this.Запись['Дата создания'].format('rusDate') + " " + this.Запись['Время создания'].format('HH:mm') + стадияЗаявки );
    }

    static ФильтрКонтактовПлательщика(){
        return 't1.[Организация-Частные лица] = (SELECT org.ROW_ID ' +
            'FROM ~ДО карточки~ card ' +
            '   JOIN ~Договор~ cont ON cont.ROW_ID=card.[Карточка-Договор] ' +
            '   JOIN ~Организации~ org ON org.ROW_ID=cont.[Плательщик] ' +
            'WHERE card.ROW_ID = :1)';
    }

    ЗаполнитьЗаявку(){
        if( this.Заявка == null ) { // повторно не заполняем
            this.Заявка = new кЗаявка( this.Запись );
            this.Договор = this.Заявка.Договор;
            super.Инициализация();
        }
    }
}
/**
 * @extends БазоваяВыборка
 * @class класс Расписание - обработчик выборки Расписание
 */
class Расписание extends БазоваяВыборка {
    constructor(){
        super( 'Расписание' );
    }
    Цвет() {
        if (this.Запись.Аналитика1 % 4 >= 2)
            return this.ЦветЗаписи("Красный");
        return "*0.0.0";
    }
}
class Панель_Задания_сотрудника {
   Инициализация(){
            /*this.ФильтрЗадания = new кФормаДО_Фильтр("Главное окно", "Задания сотрудника", "ФильтрЗаданий");
            this.ФильтрЗадания.УстановитьТекстФильтра();
            this.ФильтрЗадания.Применить();*/
   }
}
/**
 * @extends БазоваяВыборка
 * @class класс Задания_сотрудника - обработчик выборки задания сотрудников
 */
class Задания_сотрудника extends БазоваяВыборка {
    constructor() {
        super("Задания сотрудника");
        /**
         * текущая задача - Документооборот
         * @type {boolean}
         */
        this.ЭтоДо = (Задача() == 'Документооборот');
        /**
         * текущая задача - Технологическое присоединение
         * @type {boolean}
         */
        this.ЭтоТехПрисоединение = (Задача() == 'Технологическое присоединение');

    }
    Цвет() {
        if (Узел(this.Запись, "Папки")) return "*0.0.0";
        var пЦветТекста = ПрочитатьКонстанту(new Date(), "ЦвТекстЗадания").toLowerCase();
        var пЦветФона = ПрочитатьКонстанту(new Date(), "ЦвФонЗадания").toLowerCase();
        if (!пЦветТекста) пЦветТекста = "черный";
        if (this.Запись["Задание-Исполнитель"] == -1) return "*33.171.255"; // исполнитель на чужой стороне
        return Карточки_документов.ЦветЗадания(this.Запись["Статус завершения"]);
    }

    Начало() {
        this.зФайл = Query(`Select count(*) kol from ~ДО внешние документы~ where [Файл-Карточка] = :1`, 1, "S,S");
        this.зТелЗвонок = Query(`SELECT TOP 1 card.ROW_ID
                               FROM ~ДО категории карточек~ kk
                                   JOIN ~ДО карточки~ card ON card.[Карточки-Категория]=kk.row_id
                                   JOIN ~ДО маршруты~ m ON card.[Карточки-Маршрут]=m.[row_id]
                                   JOIN ~Организации~ org ON card.[Карточка-Организация]=org.ROW_ID
                               WHERE kk.[Название] LIKE '%Источник заявки%' AND m.[Название] LIKE '%Разовые работы%'
                                     AND card.ROW_ID=:1`, 1, "id,S");

        this.зЗапросНомерДокумента = Query(`SELECT [Входящий номер], [Входящая дата], dm.Название
                                      FROM ~ДО задания~ dz
                                      JOIN ~ДО карточки~ dk ON dk.ROW_ID = dz.[Задание-Карточка]
                                 LEFT JOIN ~ДО маршруты~ dm ON dm.ROW_ID = dk.[Карточки-Маршрут]
                                      WHERE dz.ROW_ID = :1`, 1, "rID,S");
    }

    Картинка() {
        var рез = "ДО карточки.Номер,0;";
        var папка = 0;
        if (Узел(this.Запись, "Папки")) {
            рез = "ДО карточки.Номер,1;";
            папка = 1;
            // в завершенных заданиях не ставим картинку "просрочено"
        } else if (this.Запись["Завершить до"] < new Date() && this.Запись["Статус завершения"] != 1) {
            рез = "ДО карточки.Номер,2;";
        }
        this.зФайл.УстановитьПараметры( this.Запись["Задание-Карточка"]);
        this.зФайл.Следующий();
        if (this.зФайл.kol > 0 && !Узел(this.Запись, "Папки")) рез += "ПрикреплФайл,10;";
        // У завершенных заявок приоритет отображаем серым цветом
        if (!Узел(this.Запись, "Папки") && this.Запись["Статус завершения"]) {
            if (this.Запись.Приоритет == 0) рез += "@Приоритет,6;";
            if (this.Запись.Приоритет == 1) рез += "@Приоритет,7;";
            if (this.Запись.Приоритет == 2) рез += "@Приоритет,8;";
        } else {
            if (this.Запись.Приоритет == 0) рез += "@Приоритет,3;";
            if (this.Запись.Приоритет == 1) рез += "@Приоритет,4;";
            if (this.Запись.Приоритет == 2) рез += "@Приоритет,5;";
        }
        if (this.Запись.УстановленСД) рез += "Название,9;";
        return рез;
    }

    Расчет() {
        this.зТелЗвонок.УстановитьПараметры(ПрочитатьПолеСвязи(this.Запись, "Задание-Карточка"));
        this.Запись["@Примечание"] = this.зТелЗвонок.Следующий() ? this.Запись["Отметки"] : this.Запись["Задание-Карточка>Примечание"];
        this.ЗаполнитьРасчетныеПоляЗадания();
        if (ПрочитатьПолеСвязи(this.Запись, "Подзадания") != -1) {
            this.Запись["@Фаза"] = "Подзадание";
            this.Запись["@Примечание"] = this.Запись["Отметки"];
        } else {
            this.Запись["@Фаза"] = this.Запись["Задание-Фаза>Фаза-Категория>Название"];
        }
    }

    ЗаполнитьРасчетныеПоляЗадания() {
        this.Запись["Состояние"] = this.Запись["Статус завершения"];
        this.Запись["Выдано"] = this.Запись["Дата выдачи"];
        this.Запись["Принято"] = this.Запись["Дата принятия"];
        this.Запись["Завершено"] = this.Запись["Дата завершения"];
        this.Запись["@Номер документа"] = "";
        this.зЗапросНомерДокумента.УстановитьПараметры(НомерЗаписи(this.Запись));
        while (this.зЗапросНомерДокумента.Следующий()) {
            this.Запись["@Номер документа"] = this.зЗапросНомерДокумента["Входящий номер"];
            this.Запись["@Входящая дата"] = this.зЗапросНомерДокумента["Входящая Дата"];
            this.Запись["@Маршрут"] = this.зЗапросНомерДокумента["Название"];
        }
    }

    Инициализация() {
        if (Узел(this.Запись, "Папки")) {
            var мФильтр = ПолучитьЗначенияФильтра("Задания сотрудника", "Задания сотрудника");
            if (мФильтр["2"] > 0) УстановитьПолеСвязи(this.Запись, "Задание-Исполнитель", мФильтр["2"]);
        }
    }
    Удаление() {
        if (!Узел(this.Запись, "Папки")) {
            var зУдаление = Query(`SELECT TOP 1 * FROM ~ДО часы~
                                WHERE [Часы-Задание]=:1
                              `, 100, "ID,S");
            зУдаление.УстановитьПараметры(НомерЗаписи(this.Запись));
            return зУдаление.Следующий() ? -1 : "";
        }
    }

    Поиск() {
        return "Задания сотрудника - поиск";
    }
    Фильтр() {
        var мФильтр = {};
        // фильтр достаем из оработчика ФормаДО
        мФильтр.Запрос = this.Источник.Окно.Группа.Группа.Обработчик.ФильтрЗадания.ПолучитьУсловие( 0 );
        return мФильтр;
    }

    static ПоявиласьНоваяРабота() {
        var фраза = "";
        if (ДобавленоЗаписей == 1) {
            фраза = "Ура! Вам назначена новая работа.";
        } else if (ДобавленоЗаписей > 1) {
            фраза = "Ура! Вам назначены новые работы.";
        }
        if (фраза) ВсплывающееОкно(фраза);
        //if (ДобавленоЗаписей > 0 || УдаленоЗаписей > 0) return 1;
        return 0;
    }
}
/**
 * @extends Карточка_документа
 * @class класс Карточка_документа_Создание - обработчик окна диалога 'Карточка документа Создание' создания карточки документа
 */
class Карточка_документа_Создание extends Карточка_документа {
    constructor() {
        super( 'Карточка документа Создание' );
    }
    Инициализация() {
        this.ЗаполнитьЗаявку();
        if( this.НоваяЗапись ){ // создание новой заявки
            // устанавливаем дату завершения по договору
            this.Запись['Завершить до'] = this.Заявка.ЗавершитьДо( this.Запись['@БыстрДогОрг'] );
            if( this.Организация == -1 ) {
                this.Организация = this.Заявка.Договор.Объект.Плательщик;
                this.Запись['Карточка-Организация'] = this.Организация;
            }
            if( this.ОрганизацияПлательщик == -1 ){
                this.ОрганизацияПлательщик = this.Заявка.Договор.Объект.Плательщик;
                this.Запись['Карточка-ПлОрганизация'] = this.ОрганизацияПлательщик;
            }
            //this.Запись.Адресат = this.Запись['Карточка-Организация>Название'];
            this.Запись.Номер = this.Заявка.НовыйНомер();
            this.Запись.Приоритет = 1;
                // берем с иерархии параметры заявки при ее создании
            var зИерархии = BufferedReader( ';WITH Parent AS( ' +
            'SELECT row_id, Папки, 0 AS level, [Карточки-Категория], [Карточки-Маршрут], [Источник документа], ' +
            '       [Карточка-Договор], [Карточка-Организация], [Карточка-ПлОрганизация], ПланЧасов ' +
            'FROM ~ДО карточки~ WHERE ROW_ID=:1 ' +
            'UNION ALL ' +
            'SELECT card.row_id, card.Папки, Parent.level + 1 as level, card.[Карточки-Категория], card.[Карточки-Маршрут], ' +
            '       card.[Источник документа],card.[Карточка-Договор], card.[Карточка-Организация], card.[Карточка-ПлОрганизация], ' +
            '       card.ПланЧасов ' +
            'from ~ДО карточки~ card JOIN Parent on parent.Папки = card.ROW_ID ' +
            ') SELECT [Карточки-Категория], [Карточки-Маршрут], [Источник документа], ' +
            '       [Карточка-Договор], [Карточка-Организация], [Карточка-ПлОрганизация], ПланЧасов ' +
            'FROM Parent ORDER BY level', 50, "id,S" );
            зИерархии.УстановитьПараметры( this.Запись.Папки );
            while( зИерархии.Следующий() ){
                if( this.Запись['Карточки-Категория'] == -1 && зИерархии['Карточки-Категория'] > 0 )
                    this.Запись['Карточки-Категория'] = зИерархии['Карточки-Категория'];
                if( this.Запись['Карточки-Маршрут'] == -1 && зИерархии['Карточки-Маршрут'] > 0 )
                    this.Запись['Карточки-Маршрут'] = зИерархии['Карточки-Маршрут'];
                if( this.Запись['Источник документа'] == 0 && зИерархии['Источник документа'] > 0 )
                    this.Запись['Источник документа'] = зИерархии['Источник документа'];
                if( this.Запись['Карточка-Договор'] == -1 && зИерархии['Карточка-Договор'] > 0 )
                    this.Запись['Карточка-Договор'] = зИерархии['Карточка-Договор'];
                if( this.Запись['Карточка-Организация'] == -1 && зИерархии['Карточка-Организация'] > 0 )
                    this.Запись['Карточка-Организация'] = зИерархии['Карточка-Организация'];
                if( this.Запись['Карточка-ПлОрганизация'] == -1 && зИерархии['Карточка-ПлОрганизация'] > 0 )
                    this.Запись['Карточка-ПлОрганизация'] = зИерархии['Карточка-ПлОрганизация'];
                if( this.Запись.ПланЧасов == 0 && зИерархии.ПланЧасов > 0 )
                    this.Запись.ПланЧасов = зИерархии.ПланЧасов;
            }
            //this.Запись['Карточка-Организация'] = this.Организация;
            //this.Запись['Карточка-ПлОрганизация'] = this.ОрганизацияПлательщик;
            //this.УстановитьЗаголовок();
        }
        super.Инициализация();
    }
}
/**
 * Обработка фильтров главных выборок ДО
 * @Class кФильтрДо
 */
class кФильтрДо {
    constructor( имяРесурса, имяОкна, имяВыборки ){
        this.ИмяРесурса = имяРесурса;
        this.ИмяОкна = имяОкна;
        this.ИмяВыборки = имяВыборки;
        this.ТехПрисоединение = ( Задача() == "Технологическое присоединение" );
        this.Условие = '';

        this.ФОрганизация = { 'Наименование' : '', 'Код' : -1 };
        this.ФЧастныеЛица = { 'Наименование' : '', 'Код' : -1 };
        this.ФДоговор = { 'Наименование' : '', 'Код' : -1 };
        this.ФЗаявка = { 'НомерНаш' : '', 'НомерВнешний' : '', 'НачалоПериода' : '', 'КонецПериода' : '' };
        this.ФСотрудник = { 'Имя' : '', 'Код' : -1 };
        this.ФФазы = { 'КодМенеджеров' : -1, 'Выбранные' : '' };
        this.СписокФаз = [];
        this.ФИсполнение = { 'ЗавершитьДо' : '', 'Кто' : 'Свой' };

        this.ЭлОрганизация = null;
        this.ЭлДоговор = null;
        this.ЭлНомерЗаявки = null;
        this.ЭлНачалоПериода = null;
        this.ЭлКонецПериода = null;
        this.ЭлИсполнитель = null;
        this.Закладки = null;
        this.ЭлТекстФильтра = null;

        if( this.ТехПрисоединение ) {
            this.ЭлЧастныеЛица = null;
            this.ЭлЗаказчикФиз = null;
            this.ЭлЗаказчикЮр = null;
            this.ЭлЗаказчикВсе = null;
        }
    }
    ЗагрузитьВизуальныеЭлементы(){
        if( this.ЭлОрганизация ) return;

        this.ЭлОрганизация = ComboBox( this.ИмяРесурса, "ФильтрОрганизации" );
        this.ЭлДоговор = ComboBox( this.ИмяРесурса, "ФильтрДоговоры" );
        this.ЭлНомерЗаявки = View( this.ИмяРесурса, "ФильтрНомераЗаявки" );
        this.ЭлНачалоПериода = View( this.ИмяРесурса, "ФильтрНачалаПериода" );
        this.ЭлКонецПериода = View( this.ИмяРесурса, "ФильтрКонцаПериода" );
        this.ЭлИсполнитель = ComboBox( this.ИмяРесурса, "ФильтрИсполнителя" );

        if( this.ТехПрисоединение ) {
            this.ЭлЧастныеЛица = ComboBox( this.ИмяРесурса, "ФильтрЧастныеЛица" );
            this.ЭлЗаказчикФиз = RadioButton( this.ИмяРесурса, "ЗаказчикФиз" );
            this.ЭлЗаказчикЮр = RadioButton( this.ИмяРесурса, "ЗаказчикЮр" );
            this.ЭлЗаказчикВсе = RadioButton( this.ИмяРесурса, "ЗаказчикВсе" );
        }
    }
    ИндексЗакладкиФильтра(){
        return 1;
    }
    Показать(){
        if (this.Закладки.ИндексСтраницы) { // скрыть открытый ранее фильтр
            this.Закладки.ОткрытьСтраницу(0);
        } else { // открываем нужную вкладку фильтра в соответствии с типом фильтра
            this.Закладки.ОткрытьСтраницу( this.ИндексЗакладкиФильтра() );
            this.ЭлОрганизация.УстановитьФокус();
        }
    }
    УстановитьУмолчания(){
        var ДатНач = new Date( new Date().getFullYear(), 0, 1 );
        var ДатКнц = new Date( ДатНач.getFullYear(), 11, 31 );
        this.ЭлНачалоПериода.Текст = ДатНач.format( "rusDate" );
        this.ЭлКонецПериода.Текст = ДатКнц.format( "rusDate" );

        this.ЭлИсполнитель.Запрещен = false;
        if (this.ТехПрисоединение) {
            this.ЭлЧастныеЛица.Запрещен = true;
            this.ЭлОрганизация.Запрещен = true;
        }
    }

    ПрочитатьСостояние(){
        if (this.ЭлОрганизация.Текст) {
            this.ФОрганизация.Код = this.ЭлОрганизация.Значение();
            this.ФОрганизация.Наименование = this.ЭлОрганизация.Текст;
        } else {
            this.ФОрганизация.Код = -1;
        }

        if (this.ТехПрисоединение ) {
            if( this.ЭлЧастныеЛица.Текст ) {
                this.ФЧастныеЛица.Код = this.ЭлЧастныеЛица.Значение();
                this.ФЧастныеЛица.Наименование = this.ЭлЧастныеЛица.Текст;
            } else {
                this.ФЧастныеЛица.Код = -1;
            }
        }
        if (this.ЭлДоговор.Текст) {
            this.ФДоговор.Код = this.ЭлДоговор.Значение();
            this.ФДоговор.Наименование = this.ЭлДоговор.Текст;
        } else {
            this.ФДоговор.Код = -1;
        }
        this.ФЗаявка.НомерНаш = this.ЭлНомерЗаявки.Текст;
        this.ФЗаявка.НачалоПериода = this.ЭлНачалоПериода.Текст;
        this.ФЗаявка.КонецПериода = this.ЭлКонецПериода.Текст;

        if (this.ФИсполнение.Кто == "Свой") {
            if (this.ЭлИсполнитель.Текст) {
                this.ФСотрудник.Код = this.ЭлИсполнитель.Значение();
                this.ФСотрудник.Имя = this.ЭлИсполнитель.Текст;
            } else {
                this.ФСотрудник.Код = -1;
            }
        }
    }
    ПолучитьУсловие( режим ){
        this.ПрочитатьСостояние();
    }
    Применить(){
        this.ПолучитьУсловие();
        this.УстановитьТекст();
        return УстановитьПараметрыФильтра( this.ИмяОкна, this.ИмяВыборки, this.Условие );
    }
    Очистить(){
        this.ЭлОрганизация.Текст = "";
        if( this.ТехПрисоединение ) this.ЭлЧастныеЛица.Текст = "";
        this.ЭлДоговор.Текст = "";
        this.ЭлНомерЗаявки.Текст = "";
        this.ЭлНачалоПериода.Текст = "";
        this.ЭлКонецПериода.Текст = "";
        this.ЭлИсполнитель.Текст = "";

        if (this.ТехПрисоединение ) {
            this.ЭлЗаказчикФиз.Помечен = 0;
            this.ЭлЗаказчикЮр.Помечен = 0;
            this.ЭлЗаказчикВсе.Помечен = 0;
        }
    }

    ТекстИсполнение(){
        var текст = '';
        if( this.ФЗаявка.НомерНаш || this.ФЗаявка.НомерВнешний || this.ФЗаявка.НачалоПериода || this.ФЗаявка.КонецПериода ){
            текст += "Заявка:\n";
            if( this.ФЗаявка.НомерНаш ) текст += "    наш номер: " + this.ФЗаявка.НомерНаш + "\n";
            if( this.ФЗаявка.НомерВнешний ) текст += "    ст. номер: " + this.ФЗаявка.НомерВнешний + "\n";

            var стрДаты = "   ";
            if( this.ФЗаявка.НачалоПериода ) стрДаты += " с: " + this.ФЗаявка.НачалоПериода;
            if( this.ФЗаявка.КонецПериода ) стрДаты += " до: " + this.ФЗаявка.КонецПериода;
            if( стрДаты != "   " ) текст += стрДаты + "\n";
        }
        if( this.ФИсполнение.Кто != "Все" || this.ФИсполнение.ЗавершитьДо ) текст += "Исполнение:\n";

        if( this.ФИсполнение.Кто != "Все"  ) {
            текст += "    ";
            if( this.ФИсполнение.Кто == "Свой" ) {
                if( this.ФСотрудник.Код == -1 ) {
                    текст += "наша организация";
                } else {
                    текст += this.ФСотрудник.Имя;
                }
            } else {
                текст += "сотрудник заказчика";
            }
            текст += "\n";
        }
        if( this.ФИсполнение.ЗавершитьДо ) текст += "    до: " + this.ФИсполнение.ЗавершитьДо + "\n";

        if( this.ФФазы.Выбранные ) {
            текст += "Состояния / фазы:\n";
            var мСтр = this.ФФазы.Выбранные.split( ";" );
            for( let фаза of мСтр ) {
                текст = текст + "    " + фаза + "\n";
            }
        }
        return текст;
    }
    ТекстДополнение(){
        return '';
    }

    ПолучитьТекст() {
        this.ПрочитатьСостояние();
        var текст = '';
        if( this.ФОрганизация.Код != -1 ) текст += "Организация:\n    " + this.ФОрганизация.Наименование + "\n";

        if( this.ФДоговор.Код != -1 ) текст += "Договор:\n    " + this.ФДоговор.Наименование + "\n";

        текст += this.ТекстДополнение();
        текст += this.ТекстИсполнение();
        if( !текст ) текст = "Фильтр не установлен";
        return текст;
    }

    УстановитьТекст(){
        this.ЭлТекстФильтра.Текст = this.ПолучитьТекст();
    }
}

class кФильтрЗадания extends кФильтрДо {
    constructor( имяРесурса, имяОкна, имяВыборки ) {
        super( имяРесурса, имяОкна, имяВыборки );
        this.ЗагрузитьФазы( имяРесурса == "ФильтрЗаданий" ? true : false );

        this.ЭлСписокСостояний = null;
        this.ЭлЗавершитьДо = null;
        this.ЭлВнешнийНомер = null;
        this.Закладки = null;
    }
    ЗагрузитьВизуальныеЭлементы(){
        if( this.ЭлЗавершитьДо ) return;

        super.ЗагрузитьВизуальныеЭлементы();
        this.ЭлЗавершитьДо = View( this.ИмяРесурса, "ФильтрЗавершения" );
        this.ЭлСписокСостояний = ListBox( this.ИмяРесурса, "СписокСостояний" );
        this.ЭлВнешнийНомер = View( this.ИмяРесурса, "ФильтрВнешнегоНомера" );
        if( this.ИмяРесурса == "ФильтрЗаданий" ) {
            this.Закладки = TabControl( "ПанельЗаданийСотрудника", "ЗакладкиДокументов" );
            this.ЭлТекстФильтра = View( "ФормаЗаданий", "ТекстФильтра" );
        }
        this.Очистить();
    }
    ЗагрузитьФазы( дляЗаданий ){
        var запросСостояний = BufferedReader( 'SELECT Название, ROW_ID, Выражение, Тип, [Значение по умолчанию] FROM ~Фильтр состояний~ ' +
            'WHERE [Папки_ADD]=1 AND Тип=:1 ' +
            'ORDER BY нпп', 100, "S,S" );
        var запросФазСостояний = Query( 'SELECT kat.Название, faz.ROW_ID FROM ~Список фильтров состояний~ sp ' +
            '   JOIN ~ДО фазы~ faz ON sp.[Фильтр-Фаза] = faz.ROW_ID ' +
            '   JOIN ~ДО категории фаз~ kat ON faz.[Фаза-Категория] = kat.ROW_ID ' +
            'WHERE sp.[Список-Фильтр] = :1', 100, "S,S" );
        запросСостояний.УстановитьПараметры( дляЗаданий ? 1 : 0 );
        while( запросСостояний.Следующий() ) {
            var текст = запросСостояний.Название;
            this.СписокФаз[текст] = { 'Ид' : запросСостояний.ROW_ID,
                'Выражение' : запросСостояний.Выражение,
                'Тип' : запросСостояний.Тип,
                'Текст' : текст,
                'Значение' : запросСостояний["Значение по умолчанию"],
                'Фазы' : []
            };
            if( запросСостояний["Значение по умолчанию"] ) this.ФФазы.Выбранные += ";" + текст;
            this.ФФазы.Выбранные = this.ФФазы.Выбранные.substr( 1 );

            запросФазСостояний.УстановитьПараметры( запросСостояний.ROW_ID );
            while( запросФазСостояний.Следующий() ) {
                this.СписокФаз[текст].Фазы.push( { 'Ид' : запросФазСостояний.ROW_ID,
                    'Значение' : 1,
                    'Текст' : запросФазСостояний.Название
                });
            }
        }
    }
    ПрочитатьСостояние(){
        super.ПрочитатьСостояние();
        this.ФЗаявка.НомерВнешний = this.ЭлВнешнийНомер.Текст;
        if( this.ЭлЗавершитьДо.Текст ) this.ФИсполнение.ЗавершитьДо = this.ЭлЗавершитьДо.Текст;
        var индекс = 0, стр = '';
        for( let инд in this.СписокФаз ){
            if( !this.СписокФаз.hasOwnProperty(инд) ) continue;

            var пометка = this.ЭлСписокСостояний.Помечен[индекс++];
            this.СписокФаз[инд].Значение = пометка;
            if( пометка ) стр += ";" + this.СписокФаз[инд].Текст;
        }
        this.ФФазы.Выбранные = стр.substr( 1 );
        if( this.СписокФаз["Нераспределенные"] == 1 ) {
            this.ФФазы.КодМенеджеров = Number( this.ЭлИсполнитель.Значение("группа Менеджеры") );
        }
    }
    Очистить(){
        super.Очистить();
        this.ЭлЗавершитьДо.Текст = "";
        this.ЭлВнешнийНомер.Текст = '';
        var индекс = 0;
        while( индекс < this.ЭлСписокСостояний.Количество ) {
            this.ЭлСписокСостояний.Помечен[индекс++] = 0;
        }
    }
    УстановитьУмолчания(){
        super.УстановитьУмолчания();
        this.ЭлСписокСостояний.Очистить();
        this.ЭлИсполнитель.Текст = Пользователь().ФИО;
        var инд = 0;
        for( let имя in this.СписокФаз ){
            if( !this.СписокФаз.hasOwnProperty(имя) ) continue;
            this.ЭлСписокСостояний.Добавить( имя );
            this.ЭлСписокСостояний.Помечен[инд++] = this.СписокФаз[имя].Значение;
        }
    }
    ПолучитьУсловие( режим ){
        if( режим == 0 ) {
            this.ФСотрудник.Код = НомерЗаписи( Пользователь() );
            this.ФФазы.Выбранные = "В процессе работы";
        } else {
            this.ПрочитатьСостояние();
        }
        this.Условие = '';
        var допСтр = '', выражениеСтороннийИсполн = false;
        if( this.ФФазы.Выбранные ){
            this.ФФазы.Выбранные = '';
            for( let инд in this.СписокФаз ){
                if( !this.СписокФаз.hasOwnProperty(инд) || this.СписокФаз[инд].Значение == 0 ) continue;

                if( this.СписокФаз[инд].Выражение == "{на стороне клиента}" ) {
                    выражениеСтороннийИсполн = true;
                } else {
                    this.ФФазы.Выбранные += this.СписокФаз[инд].Выражение;
                }
            }
        }
        if( this.ФСотрудник.Код != -1 ){
            if( выражениеСтороннийИсполн ) this.Условие += "(";
            this.Условие += 't1.[Задание-Исполнитель] = ' + this.ФСотрудник.Код;
            if( выражениеСтороннийИсполн ) {
                this.Условие += ' OR( t1.ROW_ID IN ( ' +
                    '   SELECT ROW_ID FROM ~ДО задания~ zad ' +
                    '   WHERE zad.[Статус завершения] = 0 AND zad.[Задание-Представитель]<>-1 ' +
                    '       AND zad.[Задание-Карточка] IN ( ' +
                    '           SELECT zad2.[Задание-Карточка] FROM ~ДО задания~ zad2 ' +
                    '               JOIN ( SELECT MAX(ROW_ID) ROW_ID, zad3.[Задание-Карточка] FROM ~ДО задания~ zad3 ' +
                    '                      WHERE zad3.[Задание-Представитель] = -1 ' +
                    '                      GROUP BY zad3.[Задание-Карточка] ' +
                    '               ) poslZad ON poslZad.ROW_ID = zad2.ROW_ID ' +
                    '           WHERE zad2.[Задание-Исполнитель] = ' + this.ФСотрудник.Код + '))))';
            }
        }
        if( this.ФИсполнение.ЗавершитьДо ){
            this.Условие += ( !this.Условие ? '' : '\n  AND ' ) + "t1.[Завершить до] <= '" +
                this.ФИсполнение.ЗавершитьДо.toDate().format("yyyyMMdd") + "'";
        }
        if( this.ФФазы.Выбранные ){
            this.Условие += ( !this.Условие ? '' : '\n  AND ' ) + '(t1.[Папки_ADD] = 0 ' + this.ФФазы.Выбранные;
            if( выражениеСтороннийИсполн ) this.Условие += ' OR ( t1.[Статус завершения] = 0 AND t1.[Задание-Представитель]<>-1)';
            this.Условие += ')';
        }
        if( this.ФОрганизация.Код != -1 ){
            допСтр += '([Карточка-Организация] = ' + this.ФОрганизация.Код +
                ' OR [Карточка-ПлОрганизация] = ' + this.ФОрганизация.Код + ')';
        }
        else if( this.ФЧастныеЛица.Код != -1 ) {
            допСтр += ' [Заявка-Частное лицо] = ' + this.ФЧастныеЛица.Код;
        }
        if( this.ФДоговор.Код != -1 ){
            допСтр += ( !допСтр ? '' : ' AND ' ) + '([Карточка-Договор] = ' + this.ФДоговор.Код + ')';
        }
        if(this.ФЗаявка.НачалоПериода || this.ФЗаявка.КонецПериода ){
            допСтр += ( !допСтр ? '' : ' AND ' ) + '(';
            if( this.ФЗаявка.НачалоПериода ) {
                допСтр += "[Дата создания] <= '" + this.ФЗаявка.КонецПериода.toDate().format("yyyyMMdd") + "'";
            } else if( this.ФЗаявка.КонецПериода ) {
                допСтр += "[Дата создания] >= '" + this.ФЗаявка.НачалоПериода.toDate().format("yyyyMMdd") + "'";
            } else {
                допСтр += "[Дата создания] BETWEEN '" +
                    this.ФЗаявка.НачалоПериода.toDate().format("yyyyMMdd") + "' AND '" +
                    this.ФЗаявка.КонецПериода.toDate().format("yyyyMMdd") + "'";
            }
            допСтр += ')';
        }
        if( this.ФЗаявка.НомерНаш ) допСтр += ( !допСтр ? '' : ' AND ' ) + "[Номер] = '" + this.ФЗаявка.НомерНаш + "'";
        if( this.ФЗаявка.НомерВнешний )
            допСтр += ( !допСтр ? '' : ' AND ' ) + "[СтороннийНомер] = '" + this.ФЗаявка.НомерВнешний + "'";
        if( допСтр )
            this.Условие += ( !this.Условие ? '' : '\n  AND ' ) +
                "(t1.[Задание-Карточка] IN (SELECT ROW_ID FROM ~ДО карточки~ WHERE " + допСтр + ")" + ' OR t1.[Папки_ADD] = 0)';

        var узел = ВыделенныйУзел( "Дерево ДО", "Работы - дерево" );
        if( режим == 0 || узел.ID == 30 ){
            this.Условие += ( !this.Условие ? '' : '\n  AND ' ) +
                "(t1.[Дата выдачи] <= '" + new Date().format("yyyyMMdd") + "'" + " OR t1.[Папки_ADD] = 0)";
        }
        return this.Условие;
    }
}

class кФильтрДокументы extends кФильтрЗадания {
    constructor( имяРесурса, имяОкна, имяВыборки ) {
        super( имяРесурса, имяОкна, имяВыборки );
        this.ТипДокументов = -2; // все документы
        this.Корень = -10;
        this.ПризнакиПапок = { 'Скрытые' : 0, 'Завершенные' : 0, 'Развернуть' : 0 };

        this.ЭлПризнакиПапок = null;
        this.ЭлРазвернутьпапки = null;
        this.ЭлИсполнительЗаказчик = null;
        this.ЭлИсполнительНаш = null;
        this.ЭлИсполнительВсе = null;

        this.ДеревоДокументы = null;
        this.УзлыОбновления = [];
    }
    ЗагрузитьВизуальныеЭлементы(){
        if( this.ЭлЗавершитьДо ) return;

        this.ЭлПризнакиПапок = CheckBoxes( this.ИмяРесурса, "ПризнакиПапок" );
        this.ЭлРазвернутьпапки = CheckBoxes( this.ИмяРесурса, "Развернуть папки" );
        this.ЭлИсполнительЗаказчик = RadioButton( this.ИмяРесурса, "ИсполнительЗаказчик" );
        this.ЭлИсполнительНаш = RadioButton( this.ИмяРесурса, "ИсполнительСвояОрг" );
        this.ЭлИсполнительВсе = RadioButton( this.ИмяРесурса, "ИсполнительВсе" );
        this.Закладки = TabControl( "Документы", "ЗакладкиДокументов" );
        this.ЭлТекстФильтра = View( "ФормаДокументов", "ТекстФильтра" );
        super.ЗагрузитьВизуальныеЭлементы();
        this.Очистить();
    }
    УстановитьКорень( нзКорень ){
        this.Корень = нзКорень <= 0 ? -10 : нзКорень;
    }
    УстановитьТипДокументов( пТип ){
        this.ТипДокументов = пТип;
    }
    УстановитьДеревоДокументов( дерево ){
        this.ДеревоДокументы = дерево;
        for( let i = 1; i < arguments.length; i++ ) {
            this.УзлыОбновления.push( arguments[i] );
        }
    }
    ОбновитьДеревоДокументов(){
        if( this.ДеревоДокументы && ( (this.ПризнакиПапок.Скрытые != this.ЭлПризнакиПапок.Помечен[0]) ||
            (this.ПризнакиПапок.Завершенные != this.ЭлПризнакиПапок.Помечен[1])) ){
            for( let n of this.УзлыОбновления )
                this.ДеревоДокументы.Обновить( n );
        }
    }
    УстановитьУмолчания(){
        super.УстановитьУмолчания();
        this.ЭлИсполнитель.Запрещен = true;
        this.ЭлИсполнитель.Текст = "";
    }
    ПолучитьУсловие( режим ){
        if( режим == 0 ){
            var ДатНач = new Date( new Date().getFullYear(), 0, 1 );
            var ДатКнц = new Date( ДатНач.getFullYear(), 11, 31 );
            this.ФЗаявка.НачалоПериода = ДатНач.format( "rusDate" );
            this.ФЗаявка.КонецПериода = ДатКнц.format( "rusDate" );
        } else {
            this.ПрочитатьСостояние();
        }

        var пИдКатегория = -1;
        var стрзАвтор = '', стрзФильтрИзбранное = '', стрзКатегории = '', стрзДатаСоздания = '', стрзНомер = '';
        if( this.ТипДокументов == -1 || this.ТипДокументов == -3 ) стрзАвтор = ' AND Автор = ' + НомерЗаписи( Пользователь() ) + ' ';
        if( this.ТипДокументов == -20 ) стрзАвтор = ' AND Автор = -25 '; // Если  мы на рабочей области, все очистим
        if( this.ТипДокументов == -5 ){ // Это избранное - не работает пока, временно убираю кнопку избранного и на моем контроле
            стрзФильтрИзбранное = ' JOIN ~ДО избранные документы~ iz ON iz.[Избранное-Карточки] = dz.[Задание-Карточка] ';
            var оИзбранныеДокументы = new БазовыйОбъект( "ДО избранные документы" );
            оИзбранныеДокументы.Прочитать( this.Корень );
            if( ЭтоУзел(оИзбранныеДокументы.Объект) ) {
                стрзФильтрИзбранное += ' AND iz.Владелец = ' + НомерЗаписи(Пользователь()) +
                    ' AND iz.Папки = ' + this.Корень;
            } else {
                стрзФильтрИзбранное += ' AND iz.ROW_ID = ' + this.Корень;
            }
        }
        if( this.ТипДокументов == -33 || this.ТипДокументов == -11 ){ // отфильтруем задания на моем контроле -  не работает пока
            стрзФильтрИзбранное = ' AND t1.ROW_ID in ( SELECT [Контроль-Карточка] ' +
                'FROM ~ДО контроль~ WHERE [Контроль-Сотрудник] = ' + НомерЗаписи( Пользователь() ) + ')';
        }
        if( this.ФЗаявка.НачалоПериода || this.ФЗаявка.КонецПериода ){
            стрзДатаСоздания = ' AND (';
            if( !this.ФЗаявка.НачалоПериода ) {
                стрзДатаСоздания += "t1.[Дата создания] <= '" + this.ФЗаявка.КонецПериода + "'";
            }else if( !this.ФЗаявка.КонецПериода ) {
                стрзДатаСоздания += "t1.[Дата создания] >= '" + this.ФЗаявка.НачалоПериода + "'";
            } else {
                стрзДатаСоздания += "t1.[Дата создания] BETWEEN '" +
                    this.ФЗаявка.НачалоПериода.toDate().format("yyyyMMdd") + "' AND '" +
                    this.ФЗаявка.КонецПериода.toDate().format("yyyyMMdd") + "'";
            }
            стрзДатаСоздания += ")";
        }
        if( this.ФЗаявка.НомерНаш )
            стрзНомер += " AND t1.[Номер] = '" + this.ФЗаявка.НомерНаш + "'";
        if( this.ФЗаявка.НомерВнешний )
            стрзНомер += " AND t1.[СтороннийНомер] = '" + this.ФЗаявка.НомерВнешний + "'";
        var стрФазы = '', допФильтр = '', нераспрФильтр = '';
        // Добавляем фазы
        if( this.ФФазы.Выбранные ){
            for( let инд in this.СписокФаз ){
                if( !this.СписокФаз.hasOwnProperty(инд) ) continue;

                if( this.СписокФаз[инд].Значение == 1 ){ // стоит галка
                    if( this.СписокФаз[инд].Выражение ) { // фильтрация по выражению
                        нераспрФильтр += this.СписокФаз[инд].Выражение;
                    } else { // фильтрация по фазам
                        for( let фаза of this.СписокФаз[инд].Фазы ){
                            if( стрФазы ) стрФазы += ",";
                            стрФазы += фаза.Ид;
                        }
                    }
                }
            }
            if( стрФазы ) допФильтр = ' AND (dz.[Задание-Фаза] in (' + стрФазы + ')) ';
        }
        // Добавляем исполнителя
        if( this.ФИсполнение.Кто != "Все" ){
            допФильтр += ' AND dz.[ТипИсполнителя] = ';
            if( this.ФИсполнение.Кто == "Свой" ){
                допФильтр += '0';
                if( this.ФСотрудник.Код != -1 ) {
                    допФильтр += ' AND dz.[Задание-Исполнитель] = ' + this.ФСотрудник.Код;
                }
            } else {
                допФильтр += '1';
            }
        }
        this.Условие = '( ( Шаблон = 0 ' + стрзДатаСоздания + стрзАвтор + стрзНомер;
        if( this.ФФазы.Выбранные ) this.Условие += ' AND ' + (нераспрФильтр ? '(' : '');
        if( стрФазы ){
            this.Условие += 't1.ROW_ID IN ( SELECT [Задание-Карточка] ' +
                '   FROM ~ДО задания~ dz ' +
                '       JOIN ( SELECT [Задание-Карточка] as Zk,max( [Свой номер] ) as [Свой номер] ' +
                '           FROM ~ДО задания~ dz2 ' +
                '           GROUP BY [Задание-Карточка] ' +
                ') tbl ON tbl.Zk = dz.[Задание-Карточка] AND dz.[Свой номер] = tbl.[Свой номер] ' +
                    // Дополнительные фильтры
                стрзФильтрИзбранное + допФильтр + ')';
        }
        if( this.ФФазы.КодМенеджеров != -1 ){
            if( стрФазы ) this.Условие += ' OR ';
            this.Условие += 't1.ROW_ID IN ( SELECT [Задание-Карточка] ' +
                '       FROM ~ДО задания~ dz ' +
                '           JOIN ( SELECT [Задание-Карточка] as Zk,max( [Свой номер] ) as [Свой номер] ' +
                '                FROM ~ДО задания~ dz2 ' +
                '                GROUP BY [Задание-Карточка] ' +
                '       ) tbl ON tbl.Zk = dz.[Задание-Карточка] AND dz.[Свой номер] = tbl.[Свой номер] ' +
                '           AND dz.[ТипИсполнителя] = 0 AND dz.[Задание-Исполнитель] =' + this.ФФазы.КодМенеджеров + ')';
        }
        if( нераспрФильтр ){
            if( стрФазы ) this.Условие += ' OR ';
            this.Условие += нераспрФильтр;
        }
        this.Условие += ' AND t1.Папки_ADD = 1 )';

        if( this.ФОрганизация.Код != -1 ) {
            this.Условие += ' AND ([Карточка-Организация] = ' + this.ФОрганизация.Код +
                ' OR [Карточка-ПлОрганизация] = ' + this.ФОрганизация.Код + ')';
        }
        if( this.ФЧастныеЛица.Код != -1 ) {
            this.Условие += ' AND [Заявка-Частное лицо] = ' + this.ФЧастныеЛица.Код;
        }
        if( this.ФДоговор.Код != -1 ) {
            this.Условие += ' AND [Карточка-Договор] = ' + this.ФДоговор.Код;
        }
        if( this.ФИсполнение.ЗавершитьДо ) {
            this.Условие += " AND t1.[Завершить до] <= '" + this.ФИсполнение.ЗавершитьДо.toDate().format("yyyyMMdd") + "'";
        }
        // фильтр на завершенные и скрытые папки
        var допУсл = '';
        if( this.ПризнакиПапок.Завершенные == 0 ) допУсл = ' AND t1.[Дата архива] IS NULL';
        if( this.ПризнакиПапок.Скрытые == 0 ) допУсл += ' AND флаги <> 2 AND флаги <> 3';
        this.Условие += ' OR (t1.Папки_ADD = 0' + допУсл + '))';
        return this.Условие;
    }
    Применить(){
        this.ОбновитьДеревоДокументов();
        this.ПолучитьУсловие();
        this.УстановитьТекст();
            // восстанавливаем состояние иерархии в браузере на случай нажатия ctrl+A
        if( РазвернутаИерархия(this.ИмяОкна, this.ИмяВыборки) ) РазвернутьИерархию( this.ИмяОкна, this.ИмяВыборки, 0, 0 );
            // если необходимо, то разворачиваем иерархию
        if( this.ПризнакиПапок.Развернуть ) РазвернутьИерархию( this.ИмяОкна, this.ИмяВыборки, 0, 0 );
        return УстановитьПараметрыФильтра( this.ИмяОкна, this.ИмяВыборки, this.Условие );
    }
    ПрочитатьСостояние(){
        if( this.ЭлИсполнительНаш.Помечен == 1 ) {
            this.ФИсполнение.Кто = "Свой";
        } else if (this.ЭлИсполнительЗаказчик.Помечен == 1) {
            this.ФИсполнение.Кто = "Чужой";
        } else {
            this.ФИсполнение.Кто = "Все";
        }
        super.ПрочитатьСостояние();
        this.ПризнакиПапок.Скрытые = this.ЭлПризнакиПапок.Помечен[0];
        this.ПризнакиПапок.Завершенные = this.ЭлПризнакиПапок.Помечен[1];
        this.ПризнакиПапок.Развернуть = this.ЭлРазвернутьпапки.Помечен[0];
    }
    Очистить(){
        super.Очистить();

        this.ЭлИсполнительЗаказчик.Помечен = 0;
        this.ЭлИсполнительНаш.Помечен = 0;
        this.ЭлИсполнительВсе.Помечен = 1;
    }
    ТекстДополнение(){
        var текст = '';
        if( this.ПризнакиПапок.Скрытые != 0 || this.ПризнакиПапок.Завершенные != 0 ) текст += "Признаки папок:\n";

        if( this.ПризнакиПапок.Скрытые != 0 ) текст += "    Отображать скрытые папки\n";
        if( this.ПризнакиПапок.Завершенные != 0 ) текст += "    Отображать завершенные папки\n";
        return текст;
    }
}

class кФильтрРасписание extends кФильтрДо {
    constructor( имяРесурса, имяОкна, имяВыборки ){
        super( имяРесурса, имяОкна, имяВыборки );
        this.ВидРабот = { 'Вид' : -1, 'Категория' : '' };

        this.ЭлВидРабот = null;
    }
    ЗагрузитьВизуальныеЭлементы(){
        if( this.ЭлВидРабот ) return;

        super.ЗагрузитьВизуальныеЭлементы();
        this.ЭлВидРабот = ComboBox( this.ИмяРесурса, "ФильтрВидРабот" );
        this.Закладки = TabControl( "ПанельЗаданийСотрудника", "ЗакладкиДокументов" );
        this.ЭлТекстФильтра = View( "ФормаЗаданий", "ТекстФильтра" );
        this.Очистить();
    }
    УстановитьУмолчания(){
        super.УстановитьУмолчания();
        this.ЭлНачалоПериода.Текст = new Date().НачалоМесяца().format( "rusDate" );
        this.ЭлКонецПериода.Текст = new Date().ПоследнееЧисло().format( "rusDate" );
        this.ЭлИсполнитель.Текст = Пользователь().ФИО;

        // заносим пустую категорию для отображения всего расписания
        var мНазваний = [""], мКлючей = [-1];
        var зВидыРаб = Query( 'SELECT Категория, ROW_ID FROM ~ДО категории работ~ ' +
            'ORDER BY Категория', 100 );
        зВидыРаб.УстановитьПараметры();
        while (зВидыРаб.Следующий()) {
            мНазваний.push( зВидыРаб.Категория );
            мКлючей.push( зВидыРаб.ROW_ID );
        }
        this.ЭлВидРабот.СписокСКлючами( мКлючей, мНазваний );
        this.ЭлВидРабот.Текст = "";
    }
    ИндексЗакладкиФильтра(){
        return 2;
    }
    ПолучитьУсловие( режим ){
        if (режим == 0) {
            var дНачало = new Date().НачалоМесяца();
            var дКонец = дНачало.ПоследнееЧисло();
            this.ФСотрудник.Код = НомерЗаписи( Пользователь() );
            this.ФЗаявка.НачалоПериода = дНачало;
            this.ФЗаявка.КонецПериода = дКонец;
        } else {
            this.ПрочитатьСостояние();
        }
        this.Условие = '';
        var допСтр = '';
        if (this.ФЗаявка.НачалоПериода || this.ФЗаявка.КонецПериода) {
            this.Условие = '(';
            if (this.ФЗаявка.НачалоПериода && this.ФЗаявка.КонецПериода ) {
                this.Условие += "t1.[Дата ввода] BETWEEN '" +
                    this.ФЗаявка.НачалоПериода.toDate().format("yyyyMMdd") + "' AND '" +
                    this.ФЗаявка.КонецПериода.toDate().format("yyyyMMdd") + "'";
            } else if( this.ФЗаявка.НачалоПериода ) {
                this.Условие += "t1.[Дата ввода] <= '" + this.ФЗаявка.КонецПериода.toDate().format("yyyyMMdd") + "'";
            } else if (this.ФЗаявка.КонецПериода) {
                this.Условие += "t1.[Дата ввода] >= '" + this.ФЗаявка.НачалоПериода.toDate().format("yyyyMMdd") + "'";
            }
            this.Условие += ")";
        }
        if (this.ВидРабот.Вид != -1) {
            this.Условие += ( !this.Условие ? '' : ' AND ' ) + 't1.[Часы-Категория]=' + this.ВидРабот.Вид;
        }
        if (this.ФСотрудник.Код != -1 || this.ФОрганизация.Код != -1 ||
             this.ФДоговор.Код != -1 || this.ФЗаявка.НомерНаш) {
            this.Условие += ( !this.Условие ? '' : ' AND ' ) +
                't1.[Часы-Задание] IN (SELECT dz.ROW_ID FROM ~ДО задания~ dz WHERE ';
            if (this.ФСотрудник.Код != -1) {
                допСтр = 'dz.[Задание-Исполнитель] = ' + this.ФСотрудник.Код;
            }
            if (this.ФОрганизация.Код != -1 || this.ФДоговор.Код != -1 || this.ФЗаявка.НомерНаш) {
                допСтр += ( !допСтр ? '' : ' AND ' ) +
                    'dz.[Задание-Карточка] IN (SELECT dc.ROW_ID FROM ~ДО карточки~ dc WHERE ';
                this.Условие += допСтр;
                допСтр = '';
                if (this.ФОрганизация.Код != -1)
                    допСтр = '(dc.[Карточка-Организация] = ' + this.ФОрганизация.Код +
                        ' OR dc.[Карточка-ПлОрганизация] = ' + this.ФОрганизация.Код + ')';
                if (this.ФДоговор.Код != -1)
                    допСтр += ( !допСтр ? '' : ' AND ' ) + '(dc.[Карточка-Договор] = ' + this.ФДоговор.Код + ')';
                if (this.ФЗаявка.НомерНаш)
                    допСтр += ( !допСтр ? '' : ' AND ' ) + "dc.[Номер] = '" + this.ФЗаявка.НомерНаш + "'";
                допСтр = допСтр + `)`;
            }
            this.Условие += допСтр + ')';
        }
        return this.Условие;
    }
    ПрочитатьСостояние(){
        super.ПрочитатьСостояние();
        this.ВидРабот.Вид = this.ЭлВидРабот.Значение();
        this.ВидРабот.Категория = this.ЭлВидРабот.Текст;
    }
    Очистить(){
        super.Очистить();
        this.ЭлВидРабот.Текст = "";
    }
    ТекстИсполнение() {
        var текст = '';
        if( this.ФЗаявка.НомерНаш || this.ФЗаявка.НомерВнешний || this.ФЗаявка.КонецПериода ||
            this.ФСотрудник.Код != -1 || this.ВидРабот.Вид != -1 ) {
            текст += "Работа:\n";
            if( this.ФЗаявка.НомерНаш ) текст += "    номер: " + this.ФЗаявка.НомерНаш + "\n";

            var стрДаты = "   ";
            if( this.ФЗаявка.НачалоПериода ) стрДаты += " с: " + this.ФЗаявка.НачалоПериода;
            if( this.ФЗаявка.КонецПериода ) стрДаты += " до: " + this.ФЗаявка.КонецПериода;
            if( стрДаты != "   " ) текст += стрДаты + "\n";

            if( this.ФСотрудник.Код != -1 ) текст += "    " + this.ФСотрудник.Имя + "\n";
            if( this.ВидРабот.Вид != -1 ) текст += "    " + this.ВидРабот.Категория + "\n";
        }
        return текст;
    }
}
/**
 * Обработчик предпросмотра задания в нижней части окна
 * @class ЗаданияПредпросмотр
 * @extends БазовыйДиалог
 */
class ЗаданияПредпросмотр extends БазовыйДиалог{
    constructor(){
        super("Задания - предпросмотр");
    }
    Инициализация(){
        //var Работа = new кРабота( НомерЗаписи( this.Запись ) );
        var Работа = new кРабота( this.Запись );
        this.Запись["@HTMLTable"] = Работа.Заявка.ПолучитьИсториюHtml( Работа.НомерЗаписи, false );
        var зЗапросНомерДокумента = Query( `SELECT [Входящий номер], [Входящая дата], org.Название, Содержание, dk.Примечание, dk.Резолюция
                                   FROM ~ДО задания~ dz
                                   JOIN ~ДО карточки~ dk ON dk.ROW_ID = dz.[Задание-Карточка]
                                   LEFT JOIN ~Организации~ org ON org.Row_ID = dk.[Карточка-Организация]
                                   WHERE dz.ROW_ID = :1`, 1, "rID,S" );
        зЗапросНомерДокумента.УстановитьПараметры( НомерЗаписи( this.Запись ) );
        this.Запись["От кого текст"] = "";
        while( зЗапросНомерДокумента.Следующий() ){
            this.Запись["От кого текст"] = зЗапросНомерДокумента.Название;

            this.Запись["@ДО карточки Примечание"] = зЗапросНомерДокумента.Примечание;
        }
    }
    /*
    Выбор "Инициализация":
{
    нзКарта = ПрочитатьПолеСвязи( ., "Задание-Карточка" );
    оКарта = Объект( "ДО карточки" );
    ПрочитатьЗаписьТаблицы( оКарта, нзКарта );
    ЗагрузитьПоляИзЧасов( оКарта, 1 );
.@ВВремениПоЗаданию = оКарта.@ВВремениПоЗаданию;
.@ВКОплатеПоЗаданию = оКарта.@ВКОплатеПоЗаданию;
@ТекстЗаявки = оКарта.Примечание;
    НабратьФайлыКартоки( нзКарта );
    ЗаполнитьИсториюЗаявкиHTML( номерЗаписи('.'), нзКарта );

    зЗапросНомерДокумента =  query( `SELECT [Входящий номер], [Входящая дата], org.Название, Содержание, dk.Примечание, dk.Резолюция
                                   FROM ~ДО задания~ dz
                                   JOIN ~ДО карточки~ dk ON dk.ROW_ID = dz.[Задание-Карточка]
                                   LEFT JOIN ~Организации~ org ON org.Row_ID = dk.[Карточка-Организация]
                                   WHERE dz.ROW_ID = :1`, 1, "rID,S" );
    зЗапросНомерДокумента.УстановитьПараметры( НомерЗаписи( . ) );
        'От кого текст' = "";
    Пока( зЗапросНомерДокумента.Следующий() )
{
        '@ДО карточки Примечание' = зЗапросНомерДокумента.Примечание;
}
@Директория = ВернутьПутьКдокументуДО( 'Задание-Карточка>Папки' );
}
*/
}
/**
 * Обработчик окна работы с заявкой
 * @class Задание_по_документам
 * @extends БазовыйДиалог
 */
class Задание_по_документам extends БазовыйДиалог{
    constructor(){
        super( "Задание по документам" );
        this.Работа;
        this.УстановленыКонтактыП = false;
        this.УстановленыПараметрыП = false;
        // Файлы, выделенные в дополнении
        this.мДФайлы = [];
    }
    НабратьФайлыКартоки() {
        var вФайлы = new БазоваяВыборка("@Файлы карточки");
        вФайлы.ПолучитьВыборку();
        ОчиститьКоллекцию(вФайлы, "Т");
        var зФайлы = Query(`SELECT files.[Имя файла], files.[Короткое имя], files.[Примечание], files.[Файл-Категория], files.[Редактор],
                           files.ROW_ID, [Дата изменения], convert(varchar, files.[Время изменения],108) ВремяИзм, files.ИзмененияАвтор, docs.[Карточки-Категория]
                    FROM ~ДО внешние документы~ files
                         JOIN ~ДО карточки~ docs ON files.[Файл-карточка] = docs.ROW_ID
                         JOIN ~ДО Хранилище~ repo ON repo.[Хранилище-Файл] = files.ROW_ID
                    WHERE files.[Файл-Карточка] = :1 AND ([Новый файл] = -1 or [Новый файл] = -10)`, 100, "type,S");
        зФайлы.УстановитьПараметры(this.Работа.Заявка.НомерЗаписи);
        while (зФайлы.Следующий()) {
            вФайлы.Внести(зФайлы);
        }
        вФайлы.Перенабрать();
    }
    ПолучитьПутькДокументу() {
        var зНаборПутиДокумента = Query(`;WITH Parent AS(
                                          SELECT ROW_ID, Папки, Примечание
                                          FROM ~ДО карточки~
                                          WHERE ROW_ID=:1
                                          UNION ALL
                                          SELECT card.Row_id, card.Папки, card.Примечание + '\\' + Parent.Примечание as Примечание
                                          FROM ~ДО карточки~ card
                                               JOIN Parent ON parent.Папки=card.ROW_ID
                                       )
                                       SELECT Примечание FROM Parent WHERE Папки=-10`, 1, "rID,S");

        var пСтрПуть = '';
        зНаборПутиДокумента.УстановитьПараметры(this.НомерЗаписи);
        if (зНаборПутиДокумента.Следующий()) {
            пСтрПуть = зНаборПутиДокумента.Примечание;
        }
        if (пСтрПуть.length > 70) {
            пСтрПуть = пСтрПуть.substr(1, 33) + `...` + пСтрПуть.substr(пСтрПуть.length - 31);
        }
        return пСтрПуть;
    }
    
	get ИмяКнопкиЗавершения() {
		return "&Завершить";
	}
	
	Инициализация(){
        super.Инициализация();
        if( this.Запись["Статус завершения"] == 1 ){
			this.ЗапретитьЭлементы(this.ИмяКнопкиЗавершения);
        }
        this.Работа = new кРабота( this.Запись );
        this.Запись["@HTMLTable"] = this.Работа.Заявка.ПолучитьИсториюHtml( this.Работа.НомерЗаписи, false );

        var зЗапросНомерДокумента = Query( `SELECT [Входящий номер], [Входящая дата], org.Название, Содержание, dk.Примечание, dk.Резолюция
                                   FROM ~ДО задания~ dz
                                   JOIN ~ДО карточки~ dk ON dk.ROW_ID = dz.[Задание-Карточка]
                                   LEFT JOIN ~Организации~ org ON org.Row_ID = dk.[Карточка-Организация]
                                   WHERE dz.ROW_ID = :1`, 1, "rID,S" );
        зЗапросНомерДокумента.УстановитьПараметры( НомерЗаписи( this.Запись ) );
        this.Запись["От кого текст"] = "";
        this.ОтКого = "";
        this.Запись["@ДО карточки Примечание"] = this.Работа.Заявка.Объект.Примечание;
        while( зЗапросНомерДокумента.Следующий() ){
            this.Запись["От кого текст"] = зЗапросНомерДокумента.Название;
            this.ОтКого = зЗапросНомерДокумента.Название;
        }
        /*
         ЗагрузитьПоляИзЧасов( '.', 0 );
         нзКарта = ПрочитатьПолеСвязи( ., "Задание-Карточка" );
         оКарта = Объект( "ДО карточки" );
         ПрочитатьЗаписьТаблицы( оКарта, нзКарта );
         ЗагрузитьПоляИзЧасов( оКарта, 1 );

         .@ВВремениПоЗаданию = оКарта.@ВВремениПоЗаданию;
         .@ВКОплатеПоЗаданию = оКарта.@ВКОплатеПоЗаданию;

         @ТекстЗаявки = оКарта.Примечание;
         */

        //this.НабратьФайлыКартоки();

        УстановитьПараметрыФильтра( this.ИмяДиалога, "@Карточки документов",
            "t1.[Дополнительная работа] = :1 ", "S", this.Запись['Задание-Карточка'] );
        this.Автор = "";
        if( this.Запись['Задание-Карточка>Автор>ФИО'] == "" ) {
            this.Запись["@Авторз"] = " Автор задания: " + this.Запись['Задание-Карточка>Карточка-Представитель>ФИО'];
            this.Автор = " Автор задания: " + this.Запись['Задание-Карточка>Карточка-Представитель>ФИО'];
        }else {
            this.Запись["@Авторз"] = " Автор задания: " + this.Запись['Задание-Карточка>Автор>ФИО'];
            this.Автор = " Автор задания: " + this.Запись['Задание-Карточка>Автор>ФИО'];
        }

        if( this.Запись['Задание-Карточка>ЭлПочта'].trim() ) {
            this.Запись["@ЭлПочта"] = this.Запись['Задание-Карточка>ЭлПочта'].trim();
        } else if( Задача() == "Технологическое присоединение" ) {
            this.Запись["@ЭлПочта"] = this.Запись['Задание-Карточка>КлиентТип'] == "Частное лицо" ?
                this.Запись['Задание-Карточка>Заявка-Частное лицо>email'] : this.Запись['Задание-Карточка>Карточка-Организация>email'].trim();
        } else {
            this.Запись["@ЭлПочта"] = this.Запись['Задание-Карточка>Карточка-Организация>email'].trim();
        }
        var пЗаголовок = "";
        if( ПрочитатьПолеСвязи( this.Запись, "Подзадания" ) == -1 ){
            this.Запись["@НазваниеФазы"] = this.Запись['Задание-Фаза>Фаза-Категория>Название'];
            пЗаголовок = "Задание";
        } else {
            this.Запись["@НазваниеФазы"] = "Выполнение подзадания от " + this.Запись['Дата выдачи'].format("rusDate") + " " + this.Запись['Время выдачи'].format("rusDate");
            пЗаголовок = "Подзадание";
        }
        пЗаголовок += " по заявке №" + this.Работа.Заявка.Объект.Номер
            + ( this.Запись.СтороннийНомер != "" ? " (сторонний №" + this.Запись.СтороннийНомер +")" :"" )
            + " от: " + this.Запись['Дата создания'].format( "rusDate" ) + " "
            + this.Запись['Время создания'].format( "hh.mm" ) + " " + this.ОтКого + " " + this.Автор;
        var ИмяДиалогаДляПанели = пЗаголовок;
        this.Источник.Заголовок = пЗаголовок;
        this.Запись["@Директория"] = this.ПолучитьПутькДокументу();
        this.Запись["@Заказчик"]   = this.Запись['Задание-Карточка>Карточка-Организация'];
        this.Запись["@Плательщик"] = this.Запись['Задание-Карточка>Карточка-Договор>Плательщик'];
        // не даем редактировать задание, если это задание на другой стороне
        if( ПрочитатьПолеСвязи(this.Запись, "Задание-Исполнитель") < 0 ) {
            this.Источник.Запрещен = true;
        }
    }
    Модифицирована(){
        new кМессенджер( 2, this.Работа.Заявка, this.Работа ).Отправить( this.Запись['Задание-Исполнитель'] );
        //ОтправитьСообщениеИзДО( 2, '.', 'Задание-Исполнитель', "" );
    }
    ОткрытиеВкладки( Поле ){
        switch( Поле ) {
            case "История заявок по организации":
                УстановитьПараметрыФильтра(this.ИмяДиалога, "@Карточки документов История", "t1.[Карточка-Организация] = :1 ",
                    "S", this.Запись['Карточка-Организация']);
                break;
            case "Входящие":
                УстановитьПараметрыФильтра( "Почта-Входящие", "@Почта-Входящие",
                    " t1.[Организация-Сообщения]=:1 AND Папка_ADD = 1 AND Признаки &8 = 0 AND Признаки &512 = 0", "S", this.Запись['Карточка-Организация'] );
                break;
            case "Отправленные":
                УстановитьПараметрыФильтра( "Почта-Отправленные", "@Почта-Входящие",
                    " t1.[Организация-Сообщения]=:1 AND Папка_ADD = 1 AND Признаки &8 > 0 AND Признаки &512 = 0", "S", this.Запись['Карточка-Организация'] );
                break;
            case "Контакты":
                if( this.УстановленыКонтактыП ) break;

                this.УстановленыКонтактыП = true;
                УстановитьПараметрыФильтра( this.ИмяДиалога, "@Контакты", Карточка_документа.ФильтрКонтактовПлательщика(),
                    "S", this.Работа.Заявка.НомерЗаписи );

                if( this.Запись['Карточка-Организация'] != this.Работа.Заявка.Договор.Объект.Плательщик ) {
                    УстановитьПараметрыФильтра(this.ИмяДиалога, "@КонтактыЗак", $Карточка_документа.ФильтрКонтактовЗаказчика(),
                        "S", this.Запись['Карточка-Организация']);
                } else {
                    var свПанель = СворачивающиесяПанели( this.ИмяДиалога, "ПанКонтакты" );
                    свПанель.СвернутьПанель( "Контакты заказчика" );
                }
                break;
            case "Параметры организации":
                if( this.УстановленыПараметрыП ) break;

                this.УстановленыПараметрыП = true;
                УстановитьПараметрыФильтра( this.ИмяДиалога, "@Организация Значения параметров", " t1.[Орг-Параметры]=:1 AND t1.Тип<>2", "S",
                    this.Работа.Заявка.Договор.Объект.Грузополучатель );

                if( this.Запись['Карточка-Организация'] != this.Работа.Заявка.Договор.Объект.Плательщик ){
                    УстановитьПараметрыФильтра( this.ИмяДиалога, "@Организация Значения параметровЗак", " t1.[Орг-Параметры]=:1 AND t1.Тип<>2", "S",
                        this.Запись['Карточка-Организация'] );

                    var панельЗак = View( this.ИмяДиалога, "Параметры заказчика" );
                    var панельПл = View( this.ИмяДиалога, "Параметры плательщика" );
                    панельЗак.Заголовок = "Параметры заказчика: " + this.Запись['Карточка-Организация>Название'];
                    панельПл.Заголовок = "Параметры плательщика: " + this.Запись['Карточка-Договор>Плательщик>Название'];
                } else {
                    var свПанель = СворачивающиесяПанели( this.ИмяДиалога, "ПанПараметры" );
                    свПанель.СвернутьПанель( "Параметры заказчика" );
                    // чтобы отобразить пустую выборку
                    УстановитьПараметрыФильтра( this.ИмяДиалога, "@Организация - значения параметровЗак", " t1.[Орг-Параметры]=-100" );
                }
                break;

            case "Файла":
                this.НабратьФайлыКартоки();
                break;

            case "FTP":
                УстановитьПараметрыФильтра( this.ИмяДиалога, "@ДО FTP аккаунты", " t1.[Организация-FTP]=:1", "S",
                    ПрочитатьПолеСвязи( this.Запись, "Карточка-Организация") );
                break;

        }
    }
    ЗавершитьПодзадание(){
        if( this.Запись.Подзадание != -1 ){
            Сообщить( "В разработке" )
        }
    }
    ОтправитьОтвет(){
        this.Запись.Примечание = this.Запись['@ДО карточки Примечание'];
        this.Работа.ПрочитатьИзКонтекста( this.Запись );
        var ошибка = this.Работа.ОтправитьОтвет( false );
        if( ошибка ) Сообщить( ошибка );
    }
    //бработчик клика по чекбоксу выбора действия для файла уточнения заявки
    ВыбратьФайлДополнения(){
        /* массив Параметры:
         0 - row_id привязанного внешенго документа
         1 - состояние чекбокса - true, false
         2 - row_id задания-уточнения
         3 - имя выбранного файла
         */
        var ПараметрыСтек = arguments[0];
            if( ПараметрыСтек[1]) {
                this.мДФайлы[ПараметрыСтек[2]] = [];
                // TODO что тут с кодировкой??
                //this.мДФайлы[argumenst[2]][argumenst[0]] = Win2Dos(argumenst[3]);
                this.мДФайлы[ПараметрыСтек[2]][ПараметрыСтек[0]] = ПараметрыСтек[3];
            }else {
                delete this.мДФайлы[ПараметрыСтек[2]][ПараметрыСтек[0]];
            }
            return 1;

    }
    // Обработчик кнопки принятия действия над дополнением к заявке
    ДействиеНадДополнением() {
        // arguments[0] - row_id задания-уточнения
        var ПараметрыСтек = arguments[0];
        var ид_уточнения = ПараметрыСтек[0] ;
        var пВыбора = Меню("Принять\nНовая заявка\nОтклонить");
        if (!пВыбора) return "";
        // запрос только временных файлов уточнения
        var зВнДок = BufferedReader(`SELECT ROW_ID FROM ~ДО внешние документы~ WHERE [Файл-Задание]=:1 AND Признаки&1 = 1`, 100, "job,S");
        зВнДок.УстановитьПараметры(ид_уточнения);
        var размерВыбф = 0, стр_вндок = ``, стр_файлы = ``;
        if (this.мДФайлы[ид_уточнения]) {
            var размерВыбф = Размер(this.мДФайлы[ид_уточнения]);
            for (let Элемент in this.мДФайлы[ид_уточнения]) {
                if (!this.мДФайлы[ид_уточнения].hasOwnProperty(Элемент)) continue;
                стр_вндок += "," + Элемент;
                стр_файлы += "," + this.мДФайлы[ид_уточнения][Элемент];
            }
        }
        if (зВнДок.Следующий() && размерВыбф == 0) {
            Сообщить("Необходимо отметить файлы!");
            return "";
        }
        стр_вндок = стр_вндок.substr(2);
        стр_файлы = стр_файлы.substr(2);
        ;
        var тип_исп = 5, _примечание = "", сТекст = ``, сТекстHtml = ``;
        var ном_заявки = this.Запись['Задание-Карточка>Номер'] + this.Запись['Задание-Карточка>СтороннийНомер'] != "" ? " / " + this.Запись['Задание-Карточка>СтороннийНомер'] : "";
        var сТема = "Дополнения к заявке № " + ном_заявки + " от " + this.Запись['Задание-Карточка>Дата создания'] +
            " по договору " + this.Запись['Задание-Карточка>Карточка-Договор>Номер'] + "/" + this.Запись['Задание-Карточка>Карточка-Договор>Тема'];
        var зТекстДоп = BufferedReader(`SELECT Отметки, [Время выдачи], [Дата выдачи] FROM ~ДО задания~ WHERE ROW_ID=:1`, 1, "id,S");
        зТекстДоп.УстановитьПараметры(ид_уточнения);
        if (!зТекстДоп.Следующий()) зТекстДоп.Отметки = "";
        switch (пВыбора) {
            case 1: // принимаем дополнение к заявке
                var кПринять = Command(`UPDATE ~ДО карточки~ SET Примечание = Примечание + '\n\n' + :1 WHERE ROW_ID=:2`, 1, "text,A,card,S");
                кПринять.Выполнить(зТекстДоп.Отметки, ПрочитатьПолеСвязи(this.Запись, "Задание-Карточка"));
                кПринять.Завершить();
                _примечание = "Принято в текущую заявку. " + ФИО(Пользователь().ФИО) + (стр_файлы != "" ? ". Файлы:\n" + стр_файлы : "");
                if (размерВыбф == зВнДок.Количество()) тип_исп = 6;// закрывать уточнение будем только тогда когда все файлы исчерпаны
                this.Запись['@ДО карточки Примечание'] = this.Запись['Задание-Карточка>Примечание'] + "\n\n" + зТекстДоп.Отметки;
                Перерисовать(this.ИмяДиалога, "@ДО карточки Примечание");
                сТекст = `По заявке № ` + this.Запись['Задание-Карточка>Номер'] + " от " + this.Запись['Задание-Карточка>Дата создания'] +
                    ":\n\n" + зТекстДоп.Отметки + "\n\nпринято Исполнителем " + ФИО(Пользователь().ФИО);
                сТекстHtml = `<div>По заявке № ` + this.Запись['Задание-Карточка>Номер'] + " от " + this.Запись['Задание-Карточка>Дата создания'] +
                    ":</div><br><div>" + зТекстДоп.Отметки + "</div><br><div>принято Исполнителем " + ФИО(Пользователь().ФИО) + "</div>";
                if (стр_вндок) {
                    var кВнДок = Command("UPDATE ~ДО внешние документы~ SET Признаки = Признаки &~ 1 WHERE ROW_ID IN(" + стр_вндок + ")", 1);
                    кВнДок.Выполнить();
                    кВнДок.Завершить();
                }
                break;
            case 2:// создаем новую заявку с текстом дополнения
                var оКартаН = ПолучитьВыборку("Карточки документов");
                оКартаН['Карточка-Договор'] = this.Запись['Задание-Карточка>Карточка-Договор'];
                оКартаН['Карточка-Организация'] = this.Запись['Задание-Карточка>Карточка-Организация'];
                оКартаН['Карточка-ПлОрганизация'] = this.Запись['Задание-Карточка>Карточка-ПлОрганизация'];
                оКартаН['Карточки-Категория'] = this.Запись['Задание-Карточка>Карточки-Категория'];
                оКартаН['Карточки-Маршрут'] = this.Запись['Задание-Карточка>Карточки-Маршрут'];
                оКартаН['Автор'] = НомерЗаписи(Пользователь());
                оКартаН['Папки'] = this.Запись['Задание-Карточка>Папки'];
                оКартаН['Папки_Узел'] = 0;
                оКартаН['Дата создания'] = new Date();
                оКартаН['Время создания'] = new Date();
                оКартаН['Завершить до'] = new кЗаявка(оКартаН).ЗавершитьДо();
                оКартаН['Примечание'] = зТекстДоп.Отметки;
                оКартаН['ЭлПочта'] = this.Запись['Задание-Карточка>ЭлПочта'];
                if (оКартаН.Редактировать("Карточка документа Создание")) {
                    var позЗ = НомерЗаписи(оКартаН);
                    if (позЗ == -1) // если заявка не распределена, то вносим ее
                        позЗ = ВнестиЗапись(оКартаН);
                    if (размерВыбф == зВнДок.Количество()) тип_исп = 7;// закрывать уточнение будем только тогда когда все файлы исчерпаны
                    _примечание += "Принято. Создана новая заявка № " + оКартаН.Номер + ". " + ФИО(Пользователь().ФИО) +
                        (стр_файлы != "" ? ". Приняты новые файлы:\n" + стр_файлы : "");
                    сТекст = `По заявке № ` + this.Запись['Задание-Карточка>Номер'] + " от " + this.Запись['Задание-Карточка>Дата создания'] +
                        ":\n\n" + зТекстДоп.Отметки + "\n\nоформлено новой заявкой № " + оКартаН.Номер + " от " + this.Запись['оКартаН.Дата создания'];
                    сТекстHtml = `<div>По заявке № ` + this.Запись['Задание-Карточка>Номер'] + " от " + this.Запись['Задание-Карточка>Дата создания'] +
                        ":</div><br><div>" + зТекстДоп.Отметки + "</div><br><div>оформлено новой заявкой № " + оКартаН.Номер + " от " + оКартаН['Дата создания'] + "</div>";
                    if (стр_вндок) {
                        var кВнДок = Command("UPDATE ~ДО внешние документы~ SET [Файл-Карточка] = :1 WHERE ROW_ID IN(" + стр_вндок + ")", 1, "card,S");
                        кВнДок.Выполнить(позЗ);
                        кВнДок.Завершить();
                    }
                }
                break;
            case 3: // отклоняем дополнение
                // просим ввести комментарий, почему дополнеие отклонено
                var длгКоммент = СоздатьДиалог("Новый комментарий");
                if (длгКоммент.Выполнить()) {
                    _примечание += "Отклонено " + ФИО(Пользователь().ФИО) + " по причине:\n" + длгКоммент.Комментарий +
                        (стр_файлы != "" ? "\nФайлы:\n" + стр_файлы : "");
                    сТекст = `По заявке № ` + this.Запись['Задание-Карточка>Номер'] + " от " + this.Запись['Задание-Карточка>Дата создания'] +
                        ":\n\n" + зТекстДоп.Отметки + "\n\nотклонено Исполнителем " + ФИО(Пользователь().ФИО) + " по причине:\n" + длгКоммент.Комментарий;
                    сТекстHtml = `<div>По заявке № ` + this.Запись['Задание-Карточка>Номер'] + " от " + this.Запись['Задание-Карточка>Дата создания'] +
                        ":</div><br><div>" + зТекстДоп.Отметки + "</div><br><div>отклонено Исполнителем " + ФИО(Пользователь().ФИО) + " по причине:</div><div>" + длгКоммент.Комментарий + "</div>";
                    if (размерВыбф == зВнДок.Количество()) тип_исп = 8;// закрывать уточнение будем только тогда когда все файлы исчерпаны
                    if (стр_вндок) {
                        var кВнДок = Command(`UPDATE ~ДО внешние документы~ SET Примечание = :1, Признаки = Признаки &~ 1 WHERE ROW_ID IN(` + стр_вндок + `);`, 1, "komm,A");
                        кВнДок.Выполнить("Отклонено " + ФИО(Пользователь().ФИО) + ". Причину см. в истории заявки.");
                        кВнДок.Завершить();
                    }
                }
                break;
        }
        if (_примечание) {
            var кОтклонить = Command(`UPDATE ~ДО задания~
                                         SET ТипИсполнителя=:1, [Задание-Редактор]= :2, Примечание = Примечание + '\n' + :3
                                         WHERE ROW_ID=:4`, 1, "type,S,edit,S,prim,A,id,S");
            кОтклонить.Выполнить(тип_исп, НомерЗаписи(Пользователь()), _примечание, ид_уточнения);
            кОтклонить.Завершить();
            this.Запись["@HTMLTable"] = this.Работа.Заявка.ПолучитьИсториюHtml(this.Работа.НомерЗаписи, false);
            this.Перерисовать();
            delete this.мДФайлы[ид_уточнения];
        }
        if (сТекст != "") // письмо клиенту в любом случае надо отправить
        // отправить письмо Костя
        //ОтправитьУведомлениеКлиенту( '.Задание-Карточка>Карточки-Маршрут>Маршрут-Ящик', '.Задание-Карточка>Карточка-Организация', сТекст, "", сТема, "", 2 );
            return 1;
    }
    Завершить() {
        this.Сохранить();
        try {
            if (this.Работа.Завершить()) {
                new БазоваяВыборка("Задания сотрудника").Перенабрать();
                this.ЗакрытьСохранение();
            }
        }
        catch (er) {
            er.ОбработкаОшибки();
        }

    }
}

class ДО_ЗавершениеРаботы extends БазовыйДиалог{
    constructor(){
        super("ДО - Завершение работы");
    }

    Модальность(){
        this.НомерЗаписи = this.Работа.НомерЗаписи;
        this.Комментарий = "";
        // TODO проверить, не работает прототип
        //this.НабратьФайлыКартоки();
        this.ЗапретитьЭлементы("Завершить");
        // Для выбора представителей
        this.Организация = this.Работа.Заявка.Объект["Карточка-Организация"];
        this.ОрганизацияПлательщик = this.Работа.Заявка.Объект['Карточка-ПлОрганизация'];

        var дг = Сетка( this.ИмяДиалога, "Завершение работы - варианты" );
        if( this.Работа.Фаза.ВыбратьПредыдущуюФазуиИсполнителя ){
            var мПереход = this.Работа.ПолучитьДанныеПредыдущейФазы( 1 );
            дг["НомерФазыВыход"]      = мПереход["НомерФазыВыход"];

            дг["нзИсполнитель"]       = мПереход["нзИсполнитель"];
            дг["нзОрганизацияИсполн"] = мПереход["нзОрганизацияИсполн"];
            дг["СтатусЗавершения"]    = мПереход["СтатусЗавершения"];
            дг["Последний шаг"]       = мПереход["Последний шаг"];
            дг["Название"]            = мПереход["Название"];
            дг["ДополнительныеФлаги"] = мПереход["ДополнительныеФлаги"];
            дг["Предыдущая фаза"]     = мПереход["Предыдущая фаза"];
            дг["ФИО"]                 = мПереход["ФИО"];
            дг["Организация"]         = мПереход["Организация"];
            дг.Флаги = 1;
            дг.Название = "Вернуть на фазу " + "\"" + дг.Название + "\"";
            // переход не существует сделаем ему номер Row_ID
            дг.ДоступКЗаписи( дг.Внести(-1, 0, 0, 0), 2 );
            this.Источник.Элементы["Завершить"].Запрещен = false;
        }
        this.Переходы = this.Работа.Фаза.Переходы;
        for( let i in this.Переходы ){
            if( !this.Переходы.hasOwnProperty(i) ) continue;

            дг.Row_ID = this.Переходы[i].НомерЗаписи;
            дг.нзИсполнитель       = this.Переходы[i].Исполнитель.нзСотрудник;
            дг.нзОрганизацияИсполн = this.Переходы[i].Исполнитель.нзПредставитель;
            дг.ФИО                 = this.Переходы[i].Исполнитель.Сотрудник;
            дг.Организация         = this.Переходы[i].Исполнитель.Организация;
            дг.Флаги               = 0;
            дг.Название            = this.Переходы[i].Объект.Название;
            дг.НомерФазыВыход      = this.Переходы[i].Объект.Номер;
            дг.СтатусЗавершения    = this.Переходы[i].Объект["Статус завершения"];
            //this.Переходы[i].ПолучитьФазуВыход();
            дг["Последний шаг"]    = this.Переходы[i].ФазаВыход.Объект["Последний шаг"];
            дг.ДополнительныеФлаги = this.Переходы[i].Объект["ДополнительныеФлаги"];
            дг["Предыдущая фаза"]  = this.Переходы[i].Объект["Предыдущая фаза"];
            дг.ДоступКЗаписи( дг.Внести(-1, 0, 0, this.Переходы[i].НомерЗаписи), 2 );
        }
        дг.ЗапретитьСтолбцы("Название");


        УстановитьПараметрыФильтра0( this.ИмяДиалога, "Завершение задания - часы", "[Часы-Задание]=:1", "S", this.НомерЗаписи );


        var Организация = new кОрганизация( this.Работа.Заявка.Объект["Карточка-Организация"] );
        Организация.Прочитать();
        if( !Организация.Объект["email"] ) {
            this.ЗапретитьЭлементы("фОтпСообщение")
        } else {
            this.Запись.ЭлАдрес = Организация.Объект["email"];
        }
        // TODO добавить в заплатку
        //ЗаполнитьПоляПоВремениДоговора( 'оТекЗадание.Задание-Карточка>Карточка-Договор', 'оТекЗадание.Задание-Карточка>ПланЧасов' );
    }
    Изменение( поле ){
        this.Комментарий = this.Запись["@Комментарии"];
    }
    Инициализация(){
        super.Инициализация();
        var СеткаЗавершенияОбработчик = View( this.ИмяДиалога, "Завершение работы - варианты" ).Обработчик;
        СеткаЗавершенияОбработчик.ОбработчикОкна = this;
    }
    Сохранение(){
        if( this.Работа.Фаза.ОбязателенКомментарий && !this.Запись["@Комментарии"].trim() ){
            Сообщить( "Необходимо заполнить комментарий!" );
            return "@Комментарии";
        }
        // Поиск варианта завершения
        var дг = Сетка( this.ИмяДиалога, "Завершение работы - варианты" );
        var инд = 0;
        var операцияВыполнена = 0;
        while( инд < дг.ЧислоЗаписей() && !операцияВыполнена ){
            дг.Запись( инд );
            if( ПрочитатьПолеСвязи( дг, "Флаги" ) == 1 ){
                операцияВыполнена = 1;
                if( дг.нзИсполнитель == -1 && дг.нзОрганизацияИсполн == -1 && !дг["Последний шаг"] ){
                    Сообщить("Для завершения задания необходимо выбрать исполнителя");
                    return дг.нзИсполнитель;
                }
                this.Работа.Переход =this.Переходы[дг.ROW_ID];
                this.Работа.Переход.ПараметрыПерехода.нзИсполнитель = дг.нзИсполнитель;
                this.Работа.Переход.ПараметрыПерехода.нзОрганизацияИсполн = дг.нзОрганизацияИсполн;
                this.Работа.Переход.ПараметрыПерехода.ДатНач = дг.ДатНач;
                this.Работа.Переход.ПараметрыПерехода.ДатКнц = дг.ДатКнц;
                this.Работа.Переход.ПараметрыПерехода.ДатАвтоЗав = дг.ДатАвтоЗав;
                this.Работа.Переход.ПараметрыПерехода.Комментарий = this.Запись["@Комментарии"].trim();
                this.Работа.Переход.ПараметрыПерехода.фОтпСообщение = this.Запись.фОтпСообщение;
            }
            инд++;
        }
        return "";
    }
    Отмена(){
        if( this.Запись["@Комментарии"].trim() ){
            if( !ДаНет("Комментарий к фазе не пуст. Закрыть диалог?") ) {
                return "@Комментарии";
            }
        }
    }

}
//ДО_ЗавершениеРаботы.prototype.НабратьФайлыКарточки = Задание_по_документам.prototype.НабратьФайлыКартоки;
/**
 * Обработчик выборки дата грид в окне завершения работы
 * @class ДО_Завершение_работы_варианты
 */
class ДО_Завершение_работы_варианты extends БазоваяВыборка {
    constructor() {
        super("Завершение работы - варианты");
    }
    ПрименитьИзменения( Событие, Строка) {
        var пСтолбец = -1;
        var дг = Сетка(this.ОбработчикОкна.ИмяДиалога, this.ИмяВыборки);
        дг.Запись(Строка);
        var ТекСтрока = [];
        ТекСтрока.ROW_ID = дг.ROW_ID;
        ТекСтрока.ДатНач = дг.ДатНач;
        ТекСтрока.нзИсполнитель = дг.нзИсполнитель;
        ТекСтрока.нзОрганизацияИсполн = дг.нзОрганизацияИсполн;
        var значениеФлага = ПрочитатьПолеСвязи(ТекСтрока, "Флаги");
        if (!значениеФлага) {
            this.ОбработчикОкна.ЗапретитьЭлементы("Завершить");
        } else {
            this.ОбработчикОкна.РазрешитьЭлементы("Завершить");
        }
        var инд = 0;
        var имяПоляВозвр = "";
        while (инд < дг.ЧислоЗаписей()) {
            дг.Запись(инд);
            if (дг.Row_ID == ТекСтрока.ROW_ID) {
                дг.Флаги = ( ПрочитатьПолеСвязи(дг, "Флаги") | 1 );
                var Переход = this.ОбработчикОкна.Работа.Фаза.Переходы[ТекСтрока.ROW_ID];
                var НужноВводитьИсполнителя = 0;
                var РазрешенВводДат = 0;
                if (Переход.МожноУказатьПериодРаботы) {
                    дг.РазрешитьСтолбцы("ДатНач");
                    дг.РазрешитьСтолбцы("ДатКнц");
                    РазрешенВводДат = 1;
                    if (ПрочитатьПолеСвязи(дг, "Флаги") == 1 && ТекСтрока.ДатНач < new Date(1990, 0, 1)) {
                        ТекСтрока.ДатНач = new Date();
                    }
                } else {
                    дг.ЗапретитьСтолбцы("ДатНач");
                    дг.ЗапретитьСтолбцы("ДатКнц");
                }
                /* // TODO надо сделать нормально!!

                 # Не запрещаем менять исполнителя со своей стороны, даже если он проставляется с предыдущей фазы,
                 # за исключением случаев перехода:
                 # 293         - "Завершить без выполнения",
                 # 115, 292    - "Отправить на распределение менеджерам",
                 # 52, 145     - "Вернуть исполнителю для доработки",
                 # 11, 91, 197 - "Закрыть задание",
                 # 108         - "Передать заявку в работу",
                 # 305, 306    - "Завершить",
                 # 112, 113    - "Завершение без выполнения (отказ клиента)".
                 */
                if (Переход.НомерЗаписи == 293 ||
                    Переход.НомерЗаписи == 115 || Переход.НомерЗаписи == 292 ||
                    Переход.НомерЗаписи == 52 || Переход.НомерЗаписи == 145 ||
                    Переход.НомерЗаписи == 11 || Переход.НомерЗаписи == 91 || Переход.НомерЗаписи == 197 ||
                    Переход.НомерЗаписи == 108 ||
                    Переход.НомерЗаписи == 305 || Переход.НомерЗаписи == 306 ||
                    Переход.НомерЗаписи == 112 || Переход.НомерЗаписи == 113) {
                    дг.ЗапретитьСтолбцы("нзИсполнитель");
                } else {
                    дг.РазрешитьСтолбцы("нзИсполнитель");
                    if (РазрешенВводДат) {
                        var имяПоляВозвр = (ТекСтрока.нзИсполнитель == -1) ? "нзИсполнитель" : "ДатНач";
                    } else {
                        var имяПоляВозвр = (ТекСтрока.нзИсполнитель == -1) ? "нзИсполнитель" : "";
                    }
                    НужноВводитьИсполнителя = 1;
                }
                if (!Переход.ИсполнительИзНашейОрганизации && Переход.ТребуетИсполнителя) {
                    дг.РазрешитьСтолбцы("нзОрганизацияИсполн");
                    дг.ЗапретитьСтолбцы("нзИсполнитель");
                    if (РазрешенВводДат) {
                        имяПоляВозвр = (ТекСтрока.нзОрганизацияИсполн == -1) ? "нзОрганизацияИсполн" : "ДатНач";
                    } else {
                        имяПоляВозвр = (ТекСтрока.нзОрганизацияИсполн == -1) ? "нзОрганизацияИсполн" : "";
                    }
                    НужноВводитьИсполнителя = 1;
                } else {
                    дг.ЗапретитьСтолбцы("нзОрганизацияИсполн");
                }
                if (Переход.Фаза.Автозавершение) {
                    дг.РазрешитьСтолбцы("ДатАвтоЗав");
                }
                if (!НужноВводитьИсполнителя && РазрешенВводДат) {
                    имяПоляВозвр = "ДатНач";
                }
                if (!ПрочитатьПолеСвязи(дг, "флаги")) {
                    дг.ДоступКЗаписи(инд, 2);
                } else {
                    дг.ДоступКЗаписи(инд, 0);
                }

            } else {
                дг.Флаги = 0;
                дг.ДоступКЗаписи(инд, 2);
            }
            дг.Заменить(1, дг.Row_ID, инд);
            инд++;
        }
        this.ОбработчикОкна.Перерисовать();
        switch( имяПоляВозвр ){
            case "нзИсполнитель": пСтолбец = 2; break;
            case "нзОрганизацияИсполн": пСтолбец = 3; break;
            case "ДатНач": пСтолбец = 4; break;
        }
        if( пСтолбец != -1 )
            дг.ПереместитьКурсор( Строка, пСтолбец );
        return имяПоляВозвр;
    }
    Фокус() {
        if ( this.ТекущаяКолонка == 1 || this.ТекущаяКолонка == 0 ) {
            var Поле = this.ПрименитьИзменения( this.ТекущаяКолонка ? "Фокус" : "Флаг", this.ТекущаяСтрока);
        }
    }
}

/**
 * @class класс Карточка_документа_предпросмотр - обработчик окна диалога 'Карточка документа предпросмотр'
 * @extends БазовыйДиалог
 */
class Карточка_документа_Предпросмотр extends БазовыйДиалог{
    constructor() {
        super( 'Карточка документа Предпросмотр' );
    }
    Инициализация(){
        this.Источник.Элементы['ТекФазаФИО'].Заголовок = (this.Запись.ТекФаза ? 'Фаза: "' + this.Запись.ТекФаза + '"': "") +
            (this.Запись['РасчИсполнитель'] && this.Запись['РасчИсполнитель'] != "-" ? " Исполнитель: " + this.Запись['РасчИсполнитель'] : "");
        this.Источник.Элементы['Директория'].Заголовок = this.ПолныйПутьДокумента();
        this.Источник.Элементы['АвторДок'].Заголовок = this.Запись.ФИО ? this.Запись.ФИО : this.Запись['Карточка-Представитель>ФИО'];
    }
    ПолныйПутьДокумента(){
        var зПуть = Query( ';WITH Parent AS( ' +
            '   SELECT ROW_ID, Папки, Примечание ' +
            '   FROM ~ДО карточки~ WHERE ROW_ID=:1 ' +
            '   UNION ALL ' +
            "   SELECT card.Row_id, card.Папки, card.Примечание + '\\' + Parent.Примечание as Примечание " +
            "   FROM ~ДО карточки~ card JOIN Parent ON parent.Папки=card.ROW_ID " +
            ") SELECT Примечание FROM Parent WHERE Папки=-10", 1, "rID,S" );

        var путь = '';
        зПуть.УстановитьПараметры( this.Запись.Папки );
        if( зПуть.Следующий() ) путь = "\\" + зПуть.Примечание;

        if( путь.length > 70 ) путь =  путь.substr( 0, 33 ) + '\\...\\' + путь.substr( путь.length - 31 );
        return путь;
    }
}

/**
 * @class класс Карточка_документа_Задания - обработчик выборки 'Карточка документа Задания' заданий по заявке
 * @extends БазоваяВыборка
 */
class Карточка_документа_Задания extends БазоваяВыборка {
    constructor() {
        super( 'Карточка документа Задания' );
        this.ЗапросЧасов = Query( 'SELECT SUM(60*DATEPART(hour, [Время работы]) + DATEPART(minute, [Время работы])) [Часов], ' +
            '   SUM(60*DATEPART(hour, [Время к оплате]) + DATEPART(minute, [Время к оплате])) [КОплате] ' +
            'FROM ~ДО часы~ WHERE [Часы-Задание]=:1', 1, "id,S" );
    }
    Цвет(){
        var статусЗавершения = this.Запись["Статус завершения"];
        if( this.Запись.ТипИсполнителя == 1 && статусЗавершения != 1 ) статусЗавершения = 98;
        return Карточки_документов.ЦветЗадания( статусЗавершения );
    }
    Расчет(){
        this.Запись['@ФИО'] = (this.Запись['Задание-Исполнитель'] != -1 && this.Запись.ТипИсполнителя == 0) ?
            ФИО( this.Запись['Задание-Исполнитель>ФИО'] ) : ФИО( this.Запись['Задание-Представитель>ФИО'] );
        var мТелефон = this.Запись['Задание-Исполнитель>Телефон'].split( "#" );
        if( мТелефон.length > 0 ) this.Запись['@ВнутреннийТелефон'] = мТелефон[0];
        this.Запись['@Редактор'] = ФИО( this.Запись['Задание-Редактор>ФИО'] );
        this.Запись["Состояние"] = this.Запись["Статус завершения"];
        this.Запись["Выдано"] = this.Запись["Дата выдачи"];
        this.Запись["Принято"] = this.Запись["Дата принятия"];
        this.Запись["Завершено"] = this.Запись["Дата завершения"];
        this.ЗапросЧасов.УстановитьПараметры( НомерЗаписи(this.Запись) );
        if( this.ЗапросЧасов.Следующий() && this.ЗапросЧасов.Часов > 0 ){
            this.Запись.Часов   = Math.floor( this.ЗапросЧасов.Часов/60 ).ЧислоСВедущимиНулями(3) +
                ':' + (this.ЗапросЧасов.Часов%60).ЧислоСВедущимиНулями( 2 );
            this.Запись.КОплате = Math.floor( this.ЗапросЧасов.КОплате/60 ).ЧислоСВедущимиНулями(3) +
                ':' + (this.ЗапросЧасов.КОплате%60).ЧислоСВедущимиНулями( 2 );
        } else {
            this.Запись.Часов = this.Запись.КОплате = "";
        }
        if( this.Запись.Подзадания != -1 ) {
            this.Запись.РасчФаза = "Подзадание";
        } else {
            this.Запись.РасчФаза = this.Запись['Задание-Фаза>Фаза-Категория>Название'];
        }
    }
    Инициализация(){
        return -1;
    }
    Удаление(){
        this.ЗапросЧасов.УстановитьПараметры( НомерЗаписи(this.Запись) );
        return this.ЗапросЧасов.Следующий() ? -1 : 0;
    }
}

/**
 * @class класс Карточка_документа_Внешние_документы - обработчик выборки 'Карточка документа Внешние документы'
 * @extends БазоваяВыборка
 */
class Карточка_документа_Внешние_документы extends БазоваяВыборка {
    constructor() {
        super( arguments[0] ? arguments[0] : 'Карточка документа Внешние документы' );
        this.ЗапросРазмера = Query( "SELECT TOP 1 DATALENGTH(Образ) Размер FROM ~ДО Хранилище~ WHERE [Хранилище-Файл]=:1", 1, "doc,S" );
    }
    Фильтр(){
        var мФильтр = {'Запрос' : ' (t1.[Новый файл] = -1 OR t1.[Новый файл] = -10)'};
        return мФильтр;
    }
    Открытие(){
        this.ВыполнитьФайл();
        return 1;
    }
    Расчет(){
        this.ЗапросРазмера.УстановитьПараметры( НомерЗаписи(this.Запись) );
        this.Запись.Размер = this.ЗапросРазмера.Следующий() ? this.ЗапросРазмера.Размер : 0;
    }
    Инициализация(){
        //.пСтрТекОкно = ИмяТекущегоОкна();
        var мКатегорий = Карточка_документа_Внешние_документы.ВыбратьФайлПоКатегории( this.Запись["Карточки-Категория"] );
        //первый = 1;
        if( мКатегорий.length ) this.Запись["Файл-Категория"] = мКатегорий[0].ID;
    }
    Удаление(){
        /*var кУдаление = Command( "DELETE FROM ~ДО хранилище~ WHERE [Хранилище-Файл] = :1", 10, "id,S" );
        кУдаление.Выполнить( НомерЗаписи(this.Запись) );
        кУдаление.Завершить();*/
    }
    Выбор_диалога(){
        if( НомерЗаписи(this.Запись) == -1 ) return "Карточка документа Внешний документ";
    }

    /**
     * открыть внешний документ
     * @returns {Number}
     */
    КП1(){
        return this.Открытие();
    }

    /**
     * сохранить файл на диск
     */
    КП6(){
        var путь = ВыбратьКаталог( "Сохранить файл", "" );
        if( !путь ) return 1;

        путь += '\\';
        this.ИмяОкна = this.Источник.Окно.Имя;
        var мЗаписи = this.ПолучитьВыделенныеЗаписи( false );
        for( let нз of мЗаписи ){
            this.СохранитьФайл( путь, нз ); // '.Короткое имя'
        }
        return 1;
    }

    /**
     * выполянет файл на клиенте программой по умолчанию для типа файла, предварительно сохраняя его в каталог Report
     */
    ВыполнитьФайл(){
        var рез = 'отсутствует имя файла';
        var имяФайла = this.Запись['Короткое имя'];
        var нзФайл = НомерЗаписи( this.Запись );
        if( нзФайл != -1 && имяФайла ){
            имяФайла = имяФайла.replace( new RegExp('\\/\*\?"<>|:', 'g'), "_" );
            var зОбраза = Query( "SELECT TOP 1 [Образ] FROM ~ДО хранилище~ WHERE [Хранилище-Файл]=:1", 1, "own,S" );
            зОбраза.УстановитьПараметры( нзФайл );
            if( зОбраза.Следующий() ){
                СоздатьКаталог( "CLIENT:Report" );
                var путь = "CLIENT:Report\\" + имяФайла;
                if( !зОбраза.ДвоичноеПолеВФайл("Образ", путь) ) {
                    Запустить( '"' + путь + '"' );
                    рез = "";
                } else {
                    рез = "не удалось распаковать из поля";
                }
            }
        }
        if( рез && нзФайл != -1 ) ВсплывающееОкно( "Файл невозможно открыть! (Код ошибки " + рез + ")" );
    }
    СохранитьФайл( каталог, нзФайл ){
        var рез = 'файла нет в базе';
        var полноеИмя = '';
        if( нзФайл != -1  ){
            var зОбраза = Query( "SELECT TOP 1 [Образ], [Короткое имя] Имя FROM ~ДО хранилище~ rep " +
                "   JOIN ~ДО внешние документы~ vdoc ON rep.[Хранилище-Файл]=vdoc.ROW_ID " +
                "WHERE vdoc.ROW_ID=:1", 1, "own,S" );
            зОбраза.УстановитьПараметры( нзФайл );
            if( зОбраза.Следующий() ) {
                полноеИмя = каталог + зОбраза.Имя.replace( /[\\/*\?"<>|\:]+/g, '_' );
                рез = зОбраза.ДвоичноеПолеВФайл( "Образ", полноеИмя );
                if( !рез ) {
                    ВсплывающееОкно( "Файл сохранен в \n" + полноеИмя );
                } else {
                    рез = "не удалось распаковать из поля";
                }
            } else {
                рез = "не удалось извлечь из базы";
            }
        }
        if( рез ) ВсплывающееОкно( 'Файл невозможно сохранить! (Ошибка: "' + рез + '")' );
    }
    static ВыбратьФайлПоКатегории( категория ){
        var мСтрок = [];
        var зНаборКатегорий = Query( 'SELECT path.ROW_ID, path.[Название] ' +
            'FROM ~ДО категории файлов~ path ' +
            '     LEFT JOIN ~ДО наборы файлов~ list ON path.ROW_ID = list.[Файловый набор-Файл]' +
            'WHERE [Файловый набор-Категория]=:1', 100, "Type,S" );
        зНаборКатегорий.УстановитьПараметры( категория );
        while( зНаборКатегорий.Следующий() )
            мСтрок.push( {"TEXT" : зНаборКатегорий.Название,
                "ID" : зНаборКатегорий.ROW_ID} );
        return мСтрок;
    }
}
class Завершение_работы_Внешние_документы extends Карточка_документа_Внешние_документы{
    constructor() {
        super( "Завершение работы Внешние документы");
    }
    Инициализация(){
    super.Инициализация();
        this.Запись["Файл-Карточка"] = this.Источник.Окно.Обработчик.Работа.Заявка.НомерЗаписи;
    }
    Фильтр(){
        if( this.Источник.Окно.Группа.Обработчик.Работа ) {
            var мФильтр = {'Запрос': ' ([Файл-Карточка] = ' + this.Источник.Окно.Группа.Обработчик.Работа.Заявка.НомерЗаписи + ') '};
        }else{
            var мФильтр = {'Запрос': ' ([Файл-Карточка] = -2 ) '};
        }
        return мФильтр;
    }
}

/**
 * @class класс Карточка_документа_Внешний_документ - обработчик окна диалога 'Карточка документа Внешний документ'
 * @extends БазовыйДиалог
 */
class Карточка_документа_Внешний_документ extends БазовыйДиалог {
    constructor() {
        super( 'Карточка документа Внешний документ' );
    }
    Инициализация(){
        super.Инициализация();
        this.Запись['@Имя файла'] = this.Запись['Имя файла'];
    }
    Сохранение(){
        if( this.НоваяЗапись ) {
            var сегодня = new Date();
            this.Запись['Дата изменения'] = сегодня;
            this.Запись['Время изменения']= сегодня;
            this.Запись['ИзмененияАвтор'] = Пользователь().Имя;
            var нзФайл = СохранитьЗапись( this.Запись );
            this.Запись['Короткое Имя'] = ИзвлечьИмяФайла( this.Запись['Имя файла'] );

            //var хранилище = new БазовыйОбъект( "ДО хранилище" );
            var зОбраз = Query( "SELECT TOP 1 ROW_ID FROM ~ДО хранилище~ WHERE [Хранилище-Файл] = :1", 10, "id,S" );
            зОбраз.УстановитьПараметры( нзФайл );
            var комманд = null;
            if( зОбраз.Следующий() ) {
                var комманд = Command( "UPDATE ~ДО хранилище~ SET [Образ] = :1 WHERE ROW_ID = :2", 1, "image,F,id,S" );
                комманд.Выполнить( this.Запись['Имя файла'], зОбраз.ROW_ID );
            } else {
                Сообщить( this.Запись['Имя файла'] );
                var комманд = Command( "INSERT INTO ~ДО хранилище~ ([Образ], [Хранилище-Файл]) VALUES (:1, :2)", 1, "image,F,id,S" );
                комманд.Выполнить( this.Запись['Имя файла'], нзФайл );
            }
            комманд.Завершить();
            this.Запись['Имя файла'] = "";
        }
    }
}

/**
 * @class класс Расписание_заявки - обработчик выборки '@Часы по карточке фильтр'
 * @extends БазоваяВыборка
 */
class Расписание_заявки extends БазоваяВыборка {
    constructor() {
        super( '@Часы по карточке фильтр' );
    }
    Цвет(){
        // подкрашиваем записи расписания, которые уменьшают часы
        if( this.Запись["Перенос"]&1 == 1 ) return this.ЦветЗаписи( 'розовый' );
        return this.ЦветЗаписи( 0 );
    }
}

/**
 * @class класс _Карточки_документов_Дополнительные - обработчик выборки '@Карточки документов Дополнительные'
 * @extends Карточки_документов
 */
class Карточки_документов_Дополнительные extends Карточки_документов {
    constructor() {
        super( 'Карточки документов Дополнительные' );
    }
    Инициализация(){
        var запись = this.Источник.Окно.Обработчик.Запись;
        this.Запись['Дополнительная работа']  = this.Источник.Окно.Обработчик.Заявка.НомерЗаписи;
        this.Запись['Карточки-Аналитика']     = запись['Карточки-Аналитика'];
        this.Запись['Карточка-Договор']       = запись['Карточка-Договор'];
        this.Запись['Карточка-Организация']   = запись['Карточка-Организация'];
        this.Запись['Карточка-ПлОрганизация'] = запись['Карточка-ПлОрганизация'];
        this.Запись['Карточки-Категория']     = запись['Карточки-Категория'];
        this.Запись['Карточки-Маршрут']       = запись['Карточки-Маршрут'];
        this.Запись['Карточки-Аналитика']     = запись['Карточки-Аналитика'];
        this.Запись['Папки']                  = запись['Папки'];
        super.Инициализация();
    }
    Фильтр(){ return 0; }
}

/**
 * @class класс Карточка_документа_Дополнительная_работа - обработчик окна диалога 'Карточка документа Дополнительная работа'
 * @extends Карточка_документа
 */
class Карточка_документа_Дополнительная_работа extends Карточка_документа {
    constructor() {
        super( 'Карточка документа Дополнительная работа' );
    }
    Инициализация(){
        super.Инициализация();
        var запись = this.Источник.Группа.Обработчик.Запись;
        var заявка = null;
        switch( this.Источник.Группа.Имя ){
            case "Задание по документам": // todo если будет тут заявка, то ее можно просто взять
                заявка = new БазовыйОбъект( запись['Задание-Карточка'] );
                break;
            case "Карточка документа":
            case "Карточка документа Создание":
                заявка = this.Источник.Группа.Обработчик.Заявка;
                break;
        }
        if( this.НоваяЗапись && заявка.НомерЗаписи > 0 ){
            Сообщить( "не должны попасть сюда никак" );
            КопироватьПеременные( this.Запись, заявка.Объект, 32 );
            this.Запись['Примечание'] = "";
        }
    }
}

/**
 * @class класс ДО_контроль - обработчик выборки 'ДО контроль'
 * @extends БазоваяВыборка
 */
class ДО_контроль extends БазоваяВыборка {
    constructor() {
        super( 'ДО контроль' );
    }
    Расчет(){
        this.Запись['@ФИО'] = this.Запись['Контроль-Сотрудник'] != -1 ? this.Запись['Контроль-Сотрудник>ФИО'] : this.Запись['Контроль-Представитель>ФИО'];
    }
    // todo для удаления из До Аналитик
    Удаление(){}
    // todo для создания из До Аналитик
    Создана(){}
    // todo для замены из До Аналитик
    Замена(){}
}

/**
 * @class класс ДО_контрольДиалог - обработчик окна диалога 'ДО контроль'
 * @extends БазовыйДиалог
 */
class ДО_контрольДиалог extends БазовыйДиалог {
    constructor() {
        super( 'ДО контроль' );
        this.Организация = -1;
        this.ОрганизацияПлательщик = -1;
        this.ЭлСотрудник = null;
        this.ЭлПредставитель = null;
    }
    Инициализация(){
        var запись = this.Источник.Группа.Обработчик.Запись;
        this.Организация = запись['Карточка-Организация'];
        this.ОрганизацияПлательщик = запись['Карточка-ПлОрганизация'];
        this.ЭлСотрудник = this.Источник.Элементы["@Сотрудник"];
        this.ЭлПредставитель = this.Источник.Элементы["@Представитель"];
        if( this.Запись.ТипКонтроллера == 0 ){
            this.ЭлСотрудник.Скрытый = false;
            this.ЭлПредставитель.Скрытый = true;
        } else {
            this.ЭлСотрудник.Скрытый = true;
            this.ЭлПредставитель.Скрытый = false;
        }
    }
    Изменение( поле ){
        switch( поле ){
            case "ТипКонтроллера":
                if( this.Запись.ТипКонтроллера == 0 ){
                    this.Запись['Контроль-Представитель'] = -1;
                    this.ЭлСотрудник.Скрытый = false;
                    this.ЭлПредставитель.Скрытый = true;
                } else {
                    this.Запись['Контроль-Сотрудник'] = -1;
                    this.ЭлСотрудник.Скрытый = true;
                    this.ЭлПредставитель.Скрытый = false;
                }
                break;
        }
    }
}

/**
 * @class класс Исполнители_организации - обработчик выборки 'Исполнители_организации'
 * @extends БазоваяВыборка
 */
class Исполнители_организации extends БазоваяВыборка {
    constructor() {
        super( 'Исполнители организации' );
    }
    Фильтр(){
        // todo переписать, когда будет в фильте источник
        var текОкно = ИмяТекущегоОкна();
        var длгИсточник = View( текОкно, текОкно );
        if( длгИсточник.Обработчик.Организация && длгИсточник.Обработчик.ОрганизацияПлательщик ){
            var фильтр = {};
            фильтр.Запрос = ' [Организация-Частные лица] in( ' + длгИсточник.Обработчик.Организация + ',' + длгИсточник.Обработчик.ОрганизацияПлательщик + ') AND ' +
                't1.[ROW_ID] IN (SELECT [Пароль-Частные лица] FROM ~Пароли~)';
            return фильтр;
        }
    }
}

/**
 * @class класс _Карточки_документов_История - обработчик выборки '@Карточки документов История'
 * @extends Карточки_документов
 */
class _Карточки_документов_История extends Карточки_документов {
    constructor() {
        super( '@Карточки документов История' );
    }
    Фильтр(){ return 0; }
}

/**
 * @extends БазоваяВыборка
 * @class класс _Контакты - обработчик наборной выборки @Контакты
 */
class _Контакты extends БазоваяВыборка {
    constructor() {
        super( arguments[0] ? arguments[0] : '@Контакты' );
    }
    Инициализация(){
        Сообщить( this.Источник.Окно.Имя );
        this.Запись['Организация-Частные лица'] = this.Источник.Окно.Обработчик.Запись['Карточка-Договор>Плательщик'];
            /*'Организация-Частные лица' = задание == 1 ? 'запД.Задание-Карточка>Карточка-Организация' :
                'запД.Карточка-Организация';*/
    }
    Цвет(){
        if( this.Запись.Признаки == 1 ) return this.ЦветЗаписи( 'синий' );
        return this.ЦветЗаписи( "Черный" );
    }
}
/**
 * Обработчик окна ввода часов по заявке
 * @class ЗаданияПоДокументам_часы
 * @extends БазовыйДиалог
 */
class ЗаданияПоДокументам_часы extends БазовыйДиалог {
    constructor() {
        super( "Задания по документам - часы" );
        this.зВремени = Query( `SELECT sum(60*datepart(hour, h.[Время работы]) + datepart(minute, h.[Время работы]))/60 [ЧасыРаботы],
                                        sum(60*datepart(hour, h.[Время работы]) + datepart(minute, h.[Время работы]))%60 [МинутыРаботы]
                                   FROM ~ДО часы~ h
                             INNER JOIN ~ДО задания~ zad ON zad.[row_id]=h.[Часы-Задание]
                                  WHERE h.[Дата ввода]=:1 and zad.[Задание-Исполнитель]=(SELECT [Задание-Исполнитель] FROM ~ДО задания~ WHERE [row_id]=:2)
                                 `, 100, "Dat,D,Sotr,S" );
    }

    Инициализация() {
        super.Инициализация();
        this.элКатегория = ComboBox( this.ИмяДиалога, "@Категория" );
        if( НомерЗаписи( this.Запись ) == -1 ) {
            this.Запись["Дата ввода"] = new Date();
            var длгИсточник = View( ИмяТекущегоОкна(), ИмяТекущегоОкна() );
            if( длгИсточник.Обработчик.НомерЗаписи ) {
                this.Запись['Часы-Задание'] = длгИсточник.Обработчик.НомерЗаписи;
                // TODO не работает присвоение в бинарное поле...
                if( ЕстьСвойство( длгИсточник.Обработчик.Запись, "@Комментарии" ) ) {
                    this.Запись['Примечание'] = длгИсточник.Обработчик.Запись["@Комментарии"];
                }
                this.Перерисовать();
            }
        }
        if( НомерЗаписи( this.Запись ) == -1 && this.Запись['Часы-Категория>Категория'].indexOf( "Ошибки" ) > 0 ) {
            this.Запись["Часы-Категория"] = -1;
        } else {
            this.элКатегория.Текст = this.Запись["@Категория"] = this.Запись['Часы-Категория>Категория'];
        }
        if( !this.Запись['Время к оплате'] ) {
            this.Запись['Время к оплате'] = 0;
        }
        if( !this.Запись['Время работы'] ) {
            this.Запись['Время работы'] = 0;
        }

        this.зВремени.УстановитьПараметры( this.Запись['Дата ввода'], ПрочитатьПолеСвязи( this.Запись, "Часы-Задание" ) );
        this.Запись["@ОтрабВремя"] = this.зВремени.Следующий() ? this.зВремени.ЧасыРаботы + ":" + this.зВремени.МинутыРаботы : "00:00";

        this.НачВремяРаботы = this.Запись['Время работы'].isEmpty() ? 0 : this.Запись['Время работы'].ПолноеКоличествоЧасов();
        this.НачВремяКОплате = this.Запись['Время к оплате'].isEmpty() ? 0 : this.Запись['Время к оплате'].ПолноеКоличествоЧасов();
        this.НачДатаВвода = this.Запись['Дата ввода'];
    }

    Изменение( Поле ) {
        switch( Поле ) {
            case "Время работы":
                if( !this.Запись['Время к оплате'].isEmpty() ) {
                    if( this.Запись['@Категория'].substr( 1, 6 ) != "Ошибки" && this.Запись['@Категория'] != "Политика" )
                        this.Запись['Время к оплате'] = this.Запись['Время работы'];
                }
                break;
            case "Дата ввода":
                this.зВремени.УстановитьПараметры( '.Дата ввода', ПрочитатьПолеСвязи( '.', "Часы-Задание" ) );
                this.Запись["@ОтрабВремя"] = зВремени.Следующий() ? зВремени.ЧасыРаботы + ":" + зВремени.МинутыРаботы : 0;
                break;
        }
    }

    Сохранение() {
        if( this.элКатегория.ИндексЭлемента < 0 ) { // категория работы не выбрана
            Сообщить( "Необходимо выбрать категорию работы!" );
            return "@Категория";
        }
        this.Запись['Часы-Категория'] = this.элКатегория.Значение();
        var отрабВремя = this.Запись['Время работы'].ПолноеКоличествоЧасов() - this.НачВремяРаботы;
        var оплВремя = this.Запись['Время к оплате'].ПолноеКоличествоЧасов() - this.НачВремяКОплате;
        var естьДопВр = 0;
        var зОтрабВр = Query( `SELECT SUM(60*DATEPART(HOUR, h.[Время работы]) + DATEPART(MINUTE, h.[Время работы])) [ОтрабВремя],
                                         SUM(60*DATEPART(HOUR, h.[Время к оплате]) + DATEPART(MINUTE, h.[Время к оплате])) [ОплВремя]
                                  FROM ~ДО часы~ h JOIN ~ДО задания~ zad ON zad.[row_id]=h.[Часы-Задание]
                                  WHERE zad.[Задание-Исполнитель]=:1 and h.[Дата ввода]=:2`, 100, "Sotr,S,Date,D" );
        зОтрабВр.УстановитьПараметры( '.Часы-Задание>Задание-Исполнитель', 'Дата ввода' );
        if( !зОтрабВр.Следующий() ) {
            зОтрабВр.ОтрабВремя = 0;
            зОтрабВр.ОплВремя = 0;
        }
        if( this.Запись['Время к оплате'] > this.Запись['Время работы'] ) {
            Сообщить( "Время к оплате клиенту не может превышать отработанное" );
            return "Время к оплате";
        }
        if( this.Запись["@Категория"] == "Политика" ) {
            if( !ДаНет( "Вы уверены , что вид работ \"Политика\"?\nСогласовано с директором или менеджерами??" ) ) {
                return ( "Время работы" );
            }
        }
        if( зОтрабВр.ОтрабВремя + отрабВремя > 1440 || зОтрабВр.ОплВремя + оплВремя > 1440 ) {
            Сообщить( "Отработанное время в день не должно превышать 24 часа!" );
            return "Время работы";
        } else if( !new кРабочийКалендарь().ЭтоРабочийДень( this.Запись['Дата ввода'] ) ) { // в выходной день все часы выставляем как дополнительные
            if( ДаНет( "Работем в выходной день! Хотите выставить Отработанное время как дополнительные часы?" ) ) {
                естьДопВр = 2;
            } else {
                return "Время работы";
            }
        }
        this.Запись["Аналитика1"] = 0; // чтобы сбрасывалась старая аналитика, например при смене аккордных часов на обычные
        if( естьДопВр != 2 && зОтрабВр.ОтрабВремя + отрабВремя > 480 && this.Запись.Аналитика1 % 4 < 2 && отрабВремя > 0 ){ // время в день превышвет 8 часов, выставим как доп. время
            if( this.Запись["@Категория"] == "Профрост" || this.ТемаДог == "СК" ) { // на профрост не отмечаем аккордные часы
                Сообщить( "Отработанное время в день не должно превышать 8 часов" );
                return "Время работы";
            } else if( ДаНет( "Отработанное время в день превышает 8 часов. Хотите выставить его как дополнительные часы?" ) ) {
                естьДопВр = 1;
            } else {
                return "Время работы";
            }
        }
        if( естьДопВр ) { // отмечаем время как дополнительные часы// создаем запись с доп. часами
            if( естьДопВр == 1 && 480 - зОтрабВр.ОтрабВремя > 0 ) {
                this.Запись['Время к оплате'] = this.Запись['Время работы'] = (480 - зОтрабВр.ОтрабВремя + this.НачВремяРаботы) * 60;
                отрабВремя -= 480 - зОтрабВр.ОтрабВремя;
                оплВремя = отрабВремя;
                var оЧасы = Объект( "ДО часы" );
                УстановитьПолеСвязи( оЧасы, "Часы-Задание", ПрочитатьПолеСвязи( this.Запись, "Часы-Задание" ) );
                оЧасы["Дата ввода"] = 'Дата ввода';
                оЧасы["Время работы"] = отрабВремя * 60;
                оЧасы["Время к оплате"] = оплВремя * 60;
                оЧасы["Примечание"] = this.Запись['Примечание'];
                оЧасы["Комментарий"] = this.Запись['Комментарий'];
                оЧасы["Часы-Категория"] = this.Запись['Часы-Категория'];
                оЧасы["Аналитика1"] = this.Запись["Аналитика1"] + 2;//  признак дополнительных часов
                ВнестиЗапись( оЧасы );
            } else {
                if( this.Запись.Аналитика1 % 4 < 2 ) {
                    this.Запись.Аналитика1 += 2;
                }
            }
        }
        this.Сохранить();
        new БазоваяВыборка( "Задания по документам - часы" ).Перенабрать();
    }
}
/**
 * Обработчик выборок заполнения часов по заявке
 * @class вЗаданияПоДокументам_часы
 * @extends БазоваяВыборка
 */
class Задания_по_документам___часы extends БазоваяВыборка {
    constructor() {
        super('Задания по документам - часы');
    }

    Инициализация() {
		if( НомерЗаписи(this.Запись) == -1 ) {
            this.Запись['Дата ввода'] = new Date();
            var зКатегории = Query(`SELECT TOP 1 [Часы-Категория] Категория FROM ~ДО часы~
                                    WHERE [Часы-Задание]=:1
                                    ORDER BY [Дата ввода] desc`, 1, "Zad,S");
            зКатегории.УстановитьПараметры(НомерЗаписи(this.Запись));
            this.Запись['Часы-Категория'] = зКатегории.Следующий() ? зКатегории.Категория : -1;
        }
    }

    Модифицирована() {
        var длгЗадание = View( "Задание по документам", "Задание по документам" ).Обработчик.Запись;
        //ЗагрузитьПоляИзЧасов( длгЗадание, 0 );
        //УстановитьЗаголовокЭлемента( "Задание по документам", "@ВремениПоЗаданию", 'длгЗадание.@ВремениПоЗаданию' );
        //УстановитьЗаголовокЭлемента( "Задание по документам", "@КОплатеПоЗаданию", 'длгЗадание.@КОплатеПоЗаданию' );
        //ЗагрузитьПоляИзЧасов( длгЗадание, 1 );
        var оКарта = Объект("ДО карточки");
        ПрочитатьЗаписьТаблицы(оКарта, ПрочитатьПолеСвязи(длгЗадание, "Задание-Карточка"));
        //ЗагрузитьПоляИзЧасов( оКарта, 1 );
        //УстановитьЗаголовокЭлемента( "Задание по документам", "@ВВремениПоЗаданию", 'оКарта.@ВВремениПоЗаданию' );
        //УстановитьЗаголовокЭлемента( "Задание по документам", "@ВКОплатеПоЗаданию", 'оКарта.@ВКОплатеПоЗаданию' );
    }

    Цвет() {
        if (this.Запись.Аналитика1 % 4 >= 2) {
            return this.ЦветЗаписи("Красный");
        }
        return "*0.0.0";
    }
}
/**
 * @extends Электронные_сообщения
 * @class класс _Почта_Входящие - обработчик наборной выборки '@Почта-Входящие'
 */
class _Почта_Входящие extends Электронные_сообщения {
    constructor() {
        super( arguments[0] ? arguments[0] : '@Почта-Входящие' );
    }
    Инициализация(){ return 1; }
    Выбор_диалога(){ return ""; }
    /**
     * установить/сбросить признак сообщения 'Заблокировано'
     */
    КП9(){
        this.ИмяОкна = this.Источник.Окно.Имя;
        return super.КП9();
    }
    /**
     * установить/сбросить признак сообщения 'Обработано'
     */
    КП8(){
        this.ИмяОкна = this.Источник.Окно.Имя;
        return super.КП8();
    }
}
/**
 * Обработчик создания доп. работ
 * @class ЗаданияПоДокументам_вложенные
 * @extends БазовыйДиалог
 */
class ЗаданияПоДокументам_вложенные extends БазовыйДиалог {
    constructor() {
        super("Задания по документам - вложенные");
    }

    Инициализация() {
        super.Инициализация();
        if (this.НомерЗаписи != -1 && this.Запись['Задание-Редактор'] != НомерЗаписи(Пользователь())) {
            this.Запретить();
            //ЗагрузитьПоляИзЧасов( '.', 0 );
        } else {
            this.УстановитьЗаголовокЭлемента("&Выдать", "&Сохранить");
        }
        this.Запись._исп = ПрочитатьПолеСвязи(this.Запись, "Задание-Исполнитель");
        this.Запись._предс = ПрочитатьПолеСвязи(this.Запись, "Задание-Представитель");
        this.Запись._завершить = this.Запись['Завершить до'];
        //this.Запись._отметки = this.Запись["Отметки"];
        this.Запись._отметки = this.Запись.Отметки;
        this.Запись._типИсп = this.Запись["ТипИсполнителя"];
        this.Запись["@нзОрг"] = this.Запись['Задание-Карточка>Карточка-Организация'];
        this.Запись["@нзПлОрг"] = this.Запись['Задание-Карточка>Карточка-ПлОрганизация'];
        if (!this.Запись._типИсп) {
            this.ПоказатьЭлементы("@Исполнитель");
            this.СкрытьЭлементы("@Представитель");
        } else {
            this.СкрытьЭлементы("@Исполнитель");
            this.ПоказатьЭлементы("@Представитель");
        }
    }

    Изменение(Поле) {
        switch (Поле) {
            case "ТипИсполнителя":
                if (this.Запись.ТипИсполнителя == 0) {
                    this.Запись['Задание-Представитель'] = -1;
                    this.ПоказатьЭлементы("@Исполнитель")
                    this.СкрытьЭлементы("@Представитель");
                } else {
                    this.Запись['Задание-Исполнитель'] = -1;
                    this.СкрытьЭлементы("@Исполнитель");
                    this.ПоказатьЭлементы("@Представитель");
                }
                break;
        }
    }
    Сохранение() {
        if (this.Запись._исп != ПрочитатьПолеСвязи(this.Запись, "Задание-Исполнитель") || this.Запись._предс != ПрочитатьПолеСвязи(this.Запись, "Задание-Представитель") ||
            this.Запись._завершить != this.Запись['Завершить до'] || this.Запись._отметки != this.Запись.Отметки || this.Запись._типИсп != this.Запись.ТипИсполнителя) {
            this.Запись['Дата редактирования'] = new Date();
            this.Запись['Время редактирования'] = new Date();
            this.Запись['Задание-Редактор'] = НомерЗаписи(Пользователь());
        }
        // TODO
        //ОтправитьСообщениеИзДО( 5, '.', 0, '.Название' );
    }
}
/**
 * Обработчик выборки вложенные документы  в заявке сотрудника
 * @class Задания_по_документам___вложенные
 * @extends БазоваяВыборка
 */
class Задания_по_документам___вложенные extends БазоваяВыборка {
    constructor() {
        super("Задания по документам - вложенные", "Задания по документам - вложенные");
    }

    Цвет() {
        return Карточки_документов.ЦветЗадания(this.Запись["Статус завершения"]);
    }

    Расчет() {
        this.Запись['@ФИО'] = this.Запись['Задание-Исполнитель'] != -1 && this.Запись['ТипИсполнителя'] == 0
            ? this.Запись['Задание-Исполнитель>ФИО'] : this.Запись['Задание-Представитель>ФИО'] + " (" + this.Запись['Задание-Представитель>Организация-Частные лица>Название'] + ")";
        this.ЗаполнитьРасчетныеПоляЗадания();
    }

    Инициализация() {
        var оЗадание = Объект("ДО задания");
        ПрочитатьЗаписьТаблицы(оЗадание, ПрочитатьПолеСвязи( this.Запись, "Подзадания"));
        this.Запись['Папки'] = -10;
        this.Запись['Задание-Карточка'] = ПрочитатьПолеСвязи(оЗадание, "Задание-Карточка");
        this.Запись['Задание-Фаза'] = ПрочитатьПолеСвязи(оЗадание, "Задание-Фаза");
        this.Запись['Задание-Исполнитель'] = ПрочитатьПолеСвязи(оЗадание, "Задание-Исполнитель");
        if (оЗадание.ТипИсполнителя == 0) { // наш исполнитель
            this.Запись['Задание-Редактор'] = НомерЗаписи(Пользователь());
        }
        this.Запись['Дата выдачи'] = this.Запись['Дата редактирования'] = new Date();
        this.Запись['Время выдачи'] = this.Запись['Время редактирования'] = new Date();
        this.Запись['Дата принятия'] = this.Запись['Дата завершения'] = "00.00.0000";
        this.Запись['Время принятия'] = this.Запись['Время завершения'] = "00:00";
        this.Запись['Свой номер'] = оЗадание['Свой номер'];
        this.Запись['Предыдущий номер'] = оЗадание['Предыдущий номер'];
        this.Запись['Отметки'] = "Подзадача: " + оЗадание.Отметки + "\n";
        this.Запись['Срок исполнения'] = оЗадание['Срок исполнения'];
        this.Запись['Завершить до'] = оЗадание['Завершить до'];
    }
}
Задания_по_документам___вложенные.prototype.ЗаполнитьРасчетныеПоляЗадания = Задания_сотрудника.prototype.ЗаполнитьРасчетныеПоляЗадания;
Задания_по_документам___вложенные.prototype.Начало = Задания_сотрудника.prototype.Начало;

/**
 * @class класс ДО_карточки_Этап - обработчик окна диалога 'ДО карточки Этап'
 * @extends кБыстрыйВыборДоговора
 */
class ДО_карточки_Этап extends кБыстрыйВыборДоговора {
    constructor() {
        super( arguments[0] ? arguments[0] : 'ДО карточки Этап' );
    }
    Инициализация(){
        if( !arguments[0] )
            this.Договор = new кДоговор( this.Запись['Карточка-Договор'], true );
        super.Инициализация();
        this.Запись['@завершен'] = 0;
        if( !this.Запись['Дата архива'].isEmpty() ) {
            this.Запись['@завершен'] = 1;
            this.Запись['@Дата архива'] = "(" + this.Запись['Дата архива'].format('rusDate') + ")";
        }
        //мТекКонтр = СписокКонтролеров( НомерЗаписи('.') );
    }
    Изменение( поле ){
        switch( поле ){
            case "@завершен":
                if( this.Запись["@завершен"] == 1 ){
                    this.Запись['Дата архива'] = new Date();
                    this.Запись['@Дата архива'] = "(" + this.Запись['Дата архива'].format('rusDate') + ")";
                } else {
                    this.Запись['@Дата архива'] = "";
                    this.Запись['Дата архива'] = 0;
                }
                break;
            case "@БыстрДогОрг":
                var нзДоговора = this.ЭлДоговор.Значение();
                if( нзДоговора != -1 ) {
                    this.Запись['Аналитика-Договор'] = нзДоговора;
                    this.Запись['Карточка-Договор'] = нзДоговора;
                    this.Договор.Прочитать( нзДоговора );
                    this.Запись['Карточка-Организация'] = this.Договор.Объект.Плательщик;
                    this.Запись['Карточка-ПлОрганизация'] = this.Договор.Объект.Плательщик;

                    this.Запись.Адресат = this.Запись['Карточка-Организация>Название'];
                }
                break;
            case "Карточка-Организация":
            case "Карточка-ПлОрганизация":
                this.Запись["Карточка-Договор"] = -1;
                //this.Запись['@БыстрДогОрг'] = "";
                break;
        }
    }
}

/**
 * @class класс ДО_карточки_Проект - обработчик окна диалога 'ДО карточки Проект'
 * @extends ДО_карточки_Этап
 */
class ДО_карточки_Проект extends ДО_карточки_Этап {
    constructor() {
        super('ДО карточки Проект');
    }
    Инициализация(){
        super.Инициализация( true );
    }
}

/**
 * @extends КладрДиалог
 * @class Адрес_организации - обработчик окна диалога 'Адрес организации'
 */
class Адрес_организации extends КладрДиалог {
    constructor() {
        super( 'Адрес организации' );
    }
    Инициализация(){
        this.УстановитьИменаЭлементов( "@ПСтрана", "@ПОбласть", "@ПРайон", "@ПГород", "@П_Улица" );
        super.Инициализация();
        //this.ЭлУлица = this.Источник.Элементы[this.ИмяПоляУлица];
    }
    Сохранение(){
        var ид = this.ЭлГород.Значение();
        var город = new БазовыйОбъект( "Города", ид );
        if( ид > 0 ) { // убираем  приписку с указанием области и района
            город.Прочитать();
            this.Запись[this.ИмяПоляГород] = (!город.Объект.Сокращение) ? город.Объект.Название : город.Объект.Название + " " + город.Объект.Сокращение;
        }
        ид = this.ЭлУлица.Значение();
        if( ид > 0 ) { // убираем  приписку с указанием области и района
            город.Прочитать( ид );
            this.Запись[this.ИмяПоляУлица] = !город.Объект.Сокращение ? город.Объект.Название : ( город.Объект["До_После"] == 0 ? город.Объект.Сокращение + "." + город.Объект.Название : город.Объект.Название + " " + город.Объект.Сокращение );
        }
    }
}
/**
 * Обработчик выборки @ДО FTP аккаунты в карточки задания по заявки
 * @class ДО_FTP_аккаунты
 * @extends БазоваяВыборка
 */
class _ДО_FTP_аккаунты extends БазоваяВыборка{
    constructor(){
        super( "@ДО FTP аккаунты", "Задание по документам" );
        this.FTP;
    }
    Расчет(){
        this.Запись.Открыть = this.Запись.Показать = 1;
    }
    /**
     * Открыть папку FTP из позиции курсора
     */
    Выбор_диалога(){
        this.КП5();
        return 1;
    }
    ПоказатьСтрокуАдреса(){
        if( !this.FTP ) this.FTP = new кСтекFTP();
        this.FTP.Прочитать( ПозицияКурсора( this.ИмяОкна, this.ИмяВыборки, "Ф" ) );
        this.FTP.ПоказатьСтрокуАдреса();
    }
    /**
     * Открыть папку FTP из позиции курсора
     */
    КП5(){
        if( !this.FTP ) this.FTP = new кСтекFTP();
        this.FTP.Прочитать( ПозицияКурсора( this.ИмяОкна, this.ИмяВыборки, "Ф" ) );
        this.FTP.ОткрытьПапку();
    }
    /**
     * Отображает строку адреса FTP сервера в новом окне
     */
    КП6(){
        this.ПоказатьСтрокуАдреса();
    }
}
class ДО_FTP_аккаунты extends _ДО_FTP_аккаунты{
    constructor(){
        super();
        this.ИмяОкна = "Организация";
        this.ИмяВыборки = "ДО FTP аккаунты";
    }
    Выбор_диалога(){
        return "";
    }
    /**
     * Удаление директории в положении курсора со всем содержимым
     */
    Удаление(){
        if( !this.FTP ) this.FTP = new кСтекFTP();
        this.FTP.Прочитать( ПозицияКурсора( this.ИмяОкна, this.ИмяВыборки, "Ф" ) );
        this.FTP.УдалитьПапку();
    }
}
class ДО_FTP_аккаунт extends БазовыйДиалог {
    constructor() {
        super("ДО FTP аккаунт");
    }

    Инициализация() {
        super.Инициализация();
        this.FTP = new кСтекFTP();
        if (this.НоваяЗапись) {
            var оДлгОрганизация = View( "Организация", "Организация" ).Обработчик.Запись;
            this.FTP.Очистить();
            this.Запись.Сервер = this.FTP.СерверПоУмолчанию;
            this.Запись.Порт = this.FTP.ПортПоУмолчанию;
            this.Запись.Название = this.Запись.Сервер;
            this.Запись.Логин = оДлгОрганизация.Название.Транслитерация().replace(/\W/gi,"");
            var пПароль = кWEBtools.ГенерацияПароля( 12 );
            this.Запись.Пароль = пПароль;
            УстановитьПолеСвязи(this.Запись, "Параметры FTP", 0);
        } else {
            this.ЗапретитьЭлементы("Сервер,Логин,Пароль");
        }
        this.FTP.ПрочитатьИзКонтекста(this.Запись);
        this.Запись['@СтрокаАдресаFTP'] = this.FTP.ПолучитьСтрокуАдреса();
    }

    Изменение() {
        this.FTP.ПрочитатьИзКонтекста(this.Запись);
        this.Запись['@СтрокаАдресаFTP'] = this.FTP.ПолучитьСтрокуАдреса();
    }

    Сохранение() {
        if (this.НоваяЗапись) {
            if (!this.Запись.Сервер) {
                Сообщить("Имя сервера задано неверно!");
                return "Сервер";
            }
            if (!this.Запись.Логин) {
                Сообщить("Логин задан неверно!");
                return "Логин";
            }
            if (!this.Запись.Пароль) {
                Сообщить("Пароль задан неверно!");
                return "Пароль";
            }
            try {
                this.FTP.СоздатьПапку();
            }
            catch( er ){
                er.ОбработкаОшибки();
                return -1;
            }
        }
    }
}
/**
 * Обработчик диалога завершения подзадания
 * @class ДО___Завершение_подзадания
 * @extends БазовыйДиалог
 */
class ДО___Завершение_подзадания extends БазовыйДиалог {
    constructor() {
        super("ДО - Завершение подзадания");
    }
    Модальность() {
        this.НомерЗаписи = this.Работа.НомерЗаписи;
        УстановитьПараметрыФильтра0(this.ИмяДиалога, "Завершение задания - часы", "[Часы-Задание]=:1", "S", this.Работа.НомерЗаписи);
        this.Запись.ЭлАдрес = this.Работа.Заявка.Объект['ЭлПочта'];
        this.Запись.фОтпСообщение = 0;
        if (!this.Запись.ЭлАдрес.trim()) {
            var Организация = new кОрганизация(this.Работа.Заявка.Договор.Объект.Грузополучатель);
            if (!Организация.Объект['email'].trim()) {
                this.ЗапретитьЭлементы("фОтпСообщение");
            } else {
                this.Запись.ЭлАдрес = Организация.Объект['email'].trim();
            }
        }
    }
    Сохранение() {
        if (this.Работа.Фаза.ОбязателенКомментарий && !this.Запись["@Комментарии"].trim()) {
            Сообщить("Необходимо заполнить комментарий!");
            return "@Комментарии";
        }
        if (ПрочитатьПолеСвязи(this.Запись, "фОтпСообщение")) { // отправляем сообщение с коментарием завершения
            this.Работа.Объект['Примечание'] = this.Запись["@Комментарии"];
            // TODO отправка клиенту
            //ОтправитьОтветКлиенту( оЗадание, 1 );
        }
        var ОтметкаРабота = this.Работа.Объект.Отметки;
        this.Работа.Объект['Отметки'] = ОтметкаРабота + "\nКомментарий: " + this.Запись['@Комментарии'];
        this.Работа.Объект['Дата завершения'] = this.ДатаЗакрытия;
        this.Работа.Объект['Время завершения'] = this.ДатаЗакрытия;
        this.Работа.Объект['Статус завершения'] = 1;
        new кМессенджер( 7, this.Работа.Заявка, this.Работа ).Добавить( this.Работа.Объект['Задание-Редактор'], ОтметкаРабота, this.Запись['@Комментарии'],
            this.Работа.Объект['Дата завершения'] + " в " + this.Работа.Объект['Время завершения'] + " выполнил подзадание" );

        this.Работа.Сохранить();
    }
}
/**
 * Класс для отображения гугл календаря
 */
class Календарь {
}