'use strict';

class ШаблонСФ extends BirtObj {
    constructor() {
        super();
        // TODO Варианты детализаций
        this.ВариантДетализации = 0;
        this.СФ = undefined;
        this.ДанныеСФ = undefined;
        this.НомерЗаписи = undefined;
        this.Данные = undefined;
        this.Подписи = undefined;
    }

    УстановитьШаблон(Шаблон) {
        if (Шаблон) {
            super.УстановитьШаблон(Шаблон);
        }
        else if (this.ДанныеСФ) {
            super.УстановитьШаблон(!this.ДанныеСФ.ЭтоКоррФактура ? "SHABLON\\UR_LIC\\СФ_Счет-фактура.rptdesign"
                : "SHABLON\\UR_LIC\\СФ_Счет-фактура корректировочный.rptdesign");
        }
    }

    ОпределитьИсточникиДанных() {
        this.ОпределитьИсточникДанных("Отчет", `Номер,A,Дата,A,Приложение,A,ВРедакции,A,НазваниеОтчета,A,Исправление,A,КФактуре,A,НазваниеОтчета1,A,ПодписьОтчета,A,ТемаДог,A,Срок,A
                                ,Продавец,A,ПродавецП,A,Адрес,A,ИННКПП,A,ИНН,A,КПП,A,ПродавецТел,A,ПродавецРС,A,ПродавецБанк,A,ПродавецБик,A,ПродавецКорРС,A
                                ,ПродавецФИО,A,Покупатель,A,ПокупательП,A,АдресПок,A,ИННКПППок,A,Валюта,A,ПокупательТел,A,ПокупательРС,A,ПокупательБанк,A,ПокупательБик,A
                                ,ПокупательКорРС,A,Грузоотправитель,A,ГрузоотправительП,A,ГрузоотправительНаим,A,ГрузоотправительАдр,A,ГрузоотправительИННКПП,A
                                ,ГрузоотправительТел,A,ГрузоотправительРС,A,ГрузоотправительБанк,A,ГрузоотправительБик,A,ГрузоотправительКорРС,A,ГрузоотправительФИОРук,A
                                ,Грузополучатель,A,ГрузополучательП,A,ГрузополучательНаим,A,ГрузополучательАдр,A,ГрузополучательИННКПП,A
                                ,ГрузополучательТел,A,ГрузополучательРС,A,ГрузополучательБанк,A,ГрузополучательБик,A,ГрузополучательКорРС,A
                                ,ГрузополучательФИОРук,A,ГрузополучательИНН,A,ГрузополучательКПП,A,ГрузополучательДолжностьРук,A
                                ,ПоДокументам,A,ПоПлатежкам,A,НомерДок,A,ДатаДок,A,СуммаПрописью,A,ВсегоМестПрописью,A, НалогПрописью,A,ИтогоНДС,N,ФИОРук,A
                                ,ДолжностьРук,A,ДолжностьБух,A,ДолжИсп,A,ФИОИсп,A,ФИОГлБухгалтера,A,ОснованиеРук,A,ОснованиеБух,A
                                ,НомерДог,A,ДатаДог,A,ПримРук,A,ПримБух,A,иСумма,$,иСумма2,$,иНДС,$,Город,A,Месяц,A,СтрДата,A,Основание,A
                                ,ДатаИсправления,A,НомерИсправления,A,КДата,A,КНомер,A,КДатаИсправления,A,КНомерИсправления,A,Таблица,L,ФПечать,S,Флаг,S,РасшифровкаДог,A`);
        this.ОпределитьИсточникДанных("Таблица", `Наименование,A,Комментарий,A,КодЕдИзмерения,A,ЕдИзмерения,A,Количество,N,Тариф,N,Сумма,$,ДоКоличество,N,ДоТариф,N,ДоСумма,$
                                         ,Акциз,A,Ставка,A,НДС,$,Сумма2,$,ДоСтавка,A,ДоНДС,$,ДоСумма2,$,КодСтрана,A,Страна,A,Декларация,A,Месяц,A,ЗаМесяц,A,МесяцГрупп,A`, "Отчет");
        this.ОпределитьИсточникДанных("Подпись", `ДРук,A,ФРук,A,ДГлБлбух,A,ФГлБлбух,A`);
    }

    УстановитьСвойстваПостроителя() {
        if (this.Рассылка)
            this.Построитель.УстановитьСвойство("Скрытый", "false");
        else
            this.Построитель.УстановитьСвойство("Скрытый", "true");
    }

    Строка() {
        this.НомерЗаписи = this.Запись.НомерЗаписи ? this.Запись.НомерЗаписи : НомерЗаписи(this.Запись);
        this.СФ = new СчетФактура(this.НомерЗаписи, this.ВариантДетализации);
        this.ДанныеСФ = this.СФ.ПолучитьДанныеФактуры();
        this.Данные = this.СФ.ПолучитьРеквизитыДляПечати();
        this.УстановитьШаблон();
        this.УстановитьСвойстваПостроителя();
        this.ОпределитьИсточникиДанных();
        this.ЗаполнитьТаблицу();
        this.ОпределитьПодписи();
        this.ОпределитьДополнительныеДанные();
        this.ДобавитьВИсточник("Отчет", this.Данные);
        //TODO let имяФИст = КороткоеИмяИзПолного( ФайлОтчета );
        //имяФИст = ПодСтрока( имяФИст, 1, Найти(имяФИст, ".") - 1 );
        this.Построить();
        this.Рассылка();
    }

    ЗаполнитьТаблицу() {
        let мНаим = this.ДанныеСФ.Результат;
        //Сообщить(мНаим.length);
        let СуммаСНДС = 0, ИтогоНДС = 0, СуммаБНДС = 0;
        for (let Строка of мНаим) {
            СуммаСНДС += Строка["Сумма2"] - Строка["ДоСумма2"];
            СуммаБНДС += Строка["Сумма"] - Строка["ДоСумма"];
            ИтогоНДС += Строка["НДС"] - Строка["ДоНДС"];
            this.ДобавитьВИсточник("Таблица", Строка, "Отчет");
        }

        this.Данные.ВсегоМестПрописью = мНаим.length.Прописью();
        this.Данные.СуммаПрописью = СуммаСНДС.Прописью("RUR");
        this.Данные.ИтогоНДС = ИтогоНДС;
        this.Данные.иСумма = this.Данные.СуммаСНДС = СуммаСНДС;
        this.Данные.СуммаБНДС = СуммаБНДС;

        if (ИтогоНДС != 0)
            this.Данные.НалогПрописью = " НДС " + this.Данные.СтавкаНДС + "% = " + ИтогоНДС + " руб.";
        else
            this.Данные.НалогПрописью = "Без налога (НДС)";

    }

    ОпределитьПодписи() {
        if (this.Подписи) {
            this.Данные.ФИОРук = this.Подписи.ФИОРук;
            this.Данные.ДолжностьРук = this.Подписи.ДолжностьРук;
            this.Данные.ОснованиеРук = this.Подписи.ОснованиеРук;
            this.Данные.ФИОГлБухгалтера = this.Подписи.ФИОГлБухгалтера;
            this.Данные.ДолжностьБух = this.Подписи.ДолжностьБух;
            this.Данные.ДолжИсп = this.Подписи.ДолжИсп;
            this.Данные.ФИОИсп = this.Подписи.ФИОИсп;
        }
    }

    ОпределитьДополнительныеДанные() {

    }
}

отчеты.Add("ОтчетСчетФактура", "Отгрузка: Счет-Фактура");
class ОтчетСчетФактура extends ШаблонСФ {
}

отчеты.Add("АктВыпРабот", "Отгрузка: Акт выполненных работ");
class АктВыпРабот extends ШаблонСФ {
    УстановитьШаблон() {
        super.УстановитьШаблон("SHABLON\\UR_LIC\\СФ_Акт выполненных работ.rptdesign");
    }
}
