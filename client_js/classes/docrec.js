"use strict";
/**
 * Набор вспомогательных методов работы с расписанием
 */
class кЗаполнениеРасписанияСтек {
    static МожноЛиСтолькоРаботатьВДень( _день, ОтрабВремя, ОплВремя ) {
        var зВремени = Query(`SELECT sum(60*datepart(hour, h.[Время работы]) + datepart(minute, h.[Время работы])) [ОтрабВремя],
                                  sum(60*datepart(hour, h.[Время к оплате]) + datepart(minute, h.[Время к оплате])) [ОплВремя]
                             FROM ~ДО часы~ h
                       INNER JOIN ~ДО задания~ zad ON zad.[row_id]=h.[Часы-Задание]
                            WHERE zad.[Задание-Исполнитель]=:1 and h.[Дата ввода]=:2
                           `, 100, "Sotr,S,Date,D");

        зВремени.УстановитьПараметры(НомерЗаписи(Пользователь()), _день);
        if (зВремени.Следующий()) {
            ОтрабВремя += зВремени.ОтрабВремя;
            ОплВремя += зВремени.ОплВремя;
            return ОтрабВремя > 480 || ОплВремя > 480 ? 0 : 1;  //-отработанное время или время к оплате в день не больше 8 часов
        }
        return 0;
    }
    static ПозицияНачФазыМаршрута( _кат, _маршрут ) {
        var зФазы = Query(`SELECT TOP 1 f.[row_id] from ~ДО категории карточек~ kk
                        INNER JOIN ~ДО наборы маршрутов~ nm ON nm.[Набор-Категория]=kk.row_id
                        INNER JOIN ~ДО маршруты~ m ON m.[row_id]=nm.[Набор-Маршрут]
                        INNER JOIN ~ДО фазы~ f ON f.[Маршрут-Фазы]=m.[row_id]
                        WHERE kk.[Название] LIKE :1 and m.[Название] LIKE :2
                       `, 500, "kk,A,m,A");
        зФазы.УстановитьПараметры("%" + _кат + "%", "%" + _маршрут + "%");
        return зФазы.Следующий() ? зФазы.row_id : -1;
    }
    /**
     *
     * @param _Дата
     * @param нзДог
     * @param имяПапки
     * @param текстЗаявки
     * @param имяКатегории
     * @param имяМаршрута
     * @returns {string}
     */
    static ПозицияЗаявкиНаСтекДляРазовыхРабот(_Дата, нзДог, имяПапки, текстЗаявки, имяКатегории, имяМаршрута) {
        var зПапки = BufferedReader(`SELECT ROW_ID FROM ~ДО карточки~
                                   WHERE [Папки_ADD]=0 AND [Примечание] like 'Разовые работы' AND Папки=-10`, 10, "");
        зПапки.УстановитьПараметры();
        var нзПапки = -1;
        if (зПапки.Следующий()) {
            нзПапки = зПапки.ROW_ID;
        } else { // не нашли папку с разовыми работами - создаем новую

            var зКатегории = Query(`SELECT TOP 1 ROW_ID FROM ~ДО категории карточек~
                                 WHERE [Название] LIKE :1`, 1, "name,A");
            зКатегории.УстановитьПараметры("%" + имяКатегории + "%");
            var зМаршрута = Query(`SELECT TOP 1 ROW_ID FROM ~ДО маршруты~
                                WHERE [Название] LIKE :1`, 1, "name,A");
            зМаршрута.УстановитьПараметры("%" + имяМаршрута + "%");
            var оПапка = Объект("ДО карточки");
            оПапка['Папки'] = -10;
            оПапка['Папки_Узел'] = 1;
            оПапка['Примечание'] = "Разовые работы";
            оПапка['Карточки-Категория'] = зКатегории.Следующий() ? зКатегории.ROW_ID : -1;
            оПапка['Карточки-Маршрут'] = зМаршрута.Следующий() ? зМаршрута.ROW_ID : -1;
            оПапка['Дата создания'] = _Дата;
            оПапка['Время создания'] = new Date();
            нзПапки = ВнестиЗапись(оПапка);
        }
        // ишем папка с категорией заявки, если нет таковой, то создаем внутри разовых работ
        var зПапкиКат = BufferedReader(`SELECT ROW_ID FROM ~ДО карточки~
                                      WHERE [Папки_ADD]=0 AND [Примечание] like :1 AND Папки=:2`, 10, "kat,A,ow,S");
        зПапкиКат.УстановитьПараметры(имяПапки, нзПапки);
        if (зПапкиКат.Следующий()) {
            нзПапки = зПапкиКат.ROW_ID;
        } else { // не нашли папку с категорией - создаем новую
            оПапка = Объект("ДО карточки");
            Сброс(оПапка);
            оПапка.Папки = нзПапки;
            оПапка.Папки_Узел = 1;
            оПапка.Примечание = имяПапки;
            оПапка['Дата создания'] = _Дата;
            оПапка['Время создания'] = new Date();
            нзПапки = ВнестиЗапись(оПапка);
        }

        var пСоздатьЗаявку = 0;
        var Режим =  arguments[8] | 0; // = 1 - создавать новую заявку, = 0 - искать заявку на текующую дату
        if (Режим) {
            пСоздатьЗаявку = 1;
        } else { // проверяем, есть ли заявка в на этот день по нужному договору и категории
            var зЕстьЗаявка = Query(`SELECT TOP 1 [row_id] FROM ~ДО карточки~
                                  WHERE [Карточка-Договор]=:1 AND [Дата создания]=:2 AND [Папки]=:3`, 1, "Dog,S,Date,D,Cat,S");

            зЕстьЗаявка.УстановитьПараметры(нзДог, _Дата, нзПапки);
            if (зЕстьЗаявка.Следующий()) {
                var нзЗаявки = 'зЕстьЗаявка.ROW_ID';
            } else {
                пСоздатьЗаявку = 1;
            }
        }

        if (пСоздатьЗаявку) {
            //%Источник заявки%
            var зКатегории = Query(`SELECT TOP 1 ROW_ID FROM ~ДО категории карточек~
                                 WHERE [Название] LIKE :1`, 1, "name,A");
            зКатегории.УстановитьПараметры("%" + имяКатегории + "%");
            //%Разовые работы%
            var зМаршрута = Query(`SELECT TOP 1 ROW_ID FROM ~ДО маршруты~
                                WHERE [Название] LIKE :1`, 1, "name,A");
            зМаршрута.УстановитьПараметры("%" + имяМаршрута + "%");
            var оЗаявки = new кЗаявка();
            оЗаявки.Очистить();
            УстановитьПолеСвязи(оЗаявки.Объект, "Карточки-Категория", зКатегории.Следующий() ? зКатегории.ROW_ID : -1);    //--- Категория документов = "Источник заявки"
            УстановитьПолеСвязи(оЗаявки.Объект, "Карточки-Маршрут", зМаршрута.Следующий() ? зМаршрута.ROW_ID : -1);    //--- Маршрут = "Телефонный звонок"
            УстановитьПолеСвязи(оЗаявки.Объект, "Автор", НомерЗаписи(Пользователь()));
            УстановитьПолеСвязи(оЗаявки.Объект, "Карточка-Договор", нзДог);
            оЗаявки.Договор = new кДоговор(оЗаявки.Объект['Карточка-Договор'], true);
            УстановитьПолеСвязи(оЗаявки.Объект, "Карточка-Организация", оЗаявки.Договор.Объект.Грузополучатель);
            УстановитьПолеСвязи(оЗаявки.Объект, "Карточка-ПлОрганизация", оЗаявки.Договор.Объект.Грузополучатель);
            оЗаявки.Объект['Дата создания'] = оЗаявки['Завершить до'] = _Дата;
            оЗаявки.Объект['Время создания'] = new Date();
            оЗаявки.Объект['Тема'] = arguments[6] | '';
            оЗаявки.Объект['Примечание'] = текстЗаявки;
            оЗаявки.Объект['Номер'] = оЗаявки.НовыйНомер();
            оЗаявки.Объект['Папки'] = нзПапки;
            нзЗаявки = оЗаявки.Внести();
        }
        return нзЗаявки;
    }

    /**
     * Запрашивает варианты списания времени
     * @param катДог
     * @returns {*}
     */
    static ВыборВариантаСписанияВремени(катДог) {
        var мНазваний = [];
        var мКлючей = [];
        var видыСписаний = "";
        var стрВидыРаб = `SELECT Категория, ROW_ID FROM ~ДО категории работ~ WHERE Категория IN(`;
        switch (катДог) {
            case "КСопровождение":
                видыСписаний = "'Профрост','Политика','Дорога обратно','Ошибки сопровождения','Ошибки внедрения','Ошибки инсталляции'";
                break;
            case "КВнедрение":
                видыСписаний = "'Профрост','Ошибки внедрения','Ошибки инсталляции'";
                break;
            case "КИнсталляция":
                видыСписаний = "'Профрост','Ошибки инсталляции'";
                break;
            case "КТелЗвонок":
                видыСписаний = "'Профрост','Политика','Ошибки сопровождения','Ошибки внедрения','Ошибки инсталляции'";
                break;
        }
        if (!видыСписаний) {
            Сообщить("По данному договору списание времени не возможно.");
            return -1;
        }
        стрВидыРаб += видыСписаний + ") ORDER BY Категория";
        var зВидРаб = Query(стрВидыРаб, 100);
        зВидРаб.УстановитьПараметры();
        var инд = 10;
        while (зВидРаб.Следующий()) {
            мНазваний[инд] = зВидРаб.Категория;
            мКлючей[инд++] = зВидРаб.ROW_ID;
        }
        if (!мНазваний.length) {
            Сообщить("В справочнике видов работ отсутсвуют категории " + видыСписаний);
            return -1;
        }
        var Результат = {};
        Результат.мКлючей = мКлючей;
        Результат.мНазваний = мНазваний;
        Результат.Результат = ВыборВарианта("Разница времени 'Отработанного' и 'К оплате' - это", мНазваний, мКлючей);;
        return Результат;
    }

    /**
     * Возвращает запись договора для списания часов
     * @param темаДог
     * @constructor
     */
    static ПолучитьДоговорСписанияЧасов(темаДог) {
        var зДоговорСС = Query(`SELECT TOP 1 dog.[row_id] FROM ~Договор~ dog
                              WHERE dog.[Грузополучатель]=:1 AND dog.[Окончание] >=getdate() AND dog.[Тема] = :2`, 1, "Org,S,Tema,A");
        зДоговорСС.УстановитьПараметры(НомерЗаписи(Лицо0()), темаДог);
        var нзДоговора = зДоговорСС.Следующий() ? зДоговорСС.row_id : -1;
        if (нзДоговора == -1) new StackError("У ООО Фирма \"Стек-Спорт\" нет действующего договора с темой " + темаДог + " для данного вида работы.\nОбратитесь к менеджерам.");
        return нзДоговора;
    }

    /**
     *
     * @param _Исполнитель
     * @param _ТекстЗаявки
     * @returns {number}
     */
    static СоздатьЗаявкуНаИсправление(_Исполнитель, _ТекстЗаявки) {
        var пТекДат = new Date();
        if (arguments.length > 2) {
            var _нзЗаявки = _ТекстЗаявки;
            _ТекстЗаявки = arguments[2];
            var зЗавершитьДо = Query(`SELECT [Завершить до] Дата FROM ~ДО карточки~ WHERE ROW_ID=:1`, 1, "id,S");
            зЗавершитьДо.УстановитьПараметры(_нзЗаявки);
            var завершить_до = зЗавершитьДо.Следующий() ? зЗавершитьДо.Дата : пТекДат;

            var оЗад = Объект("ДО задания");
            УстановитьПолеСвязи(оЗад, "Задание-Карточка", _нзЗаявки);
            УстановитьПолеСвязи(оЗад, "Задание-Фаза", кЗаполнениеРасписанияСтек.ПозицияНачФазыМаршрута("Проект", "Уведомление"));
            УстановитьПолеСвязи(оЗад, "Задание-Исполнитель", _Исполнитель);
            оЗад['Дата выдачи'] = пТекДат;
            оЗад['Время выдачи'] = пТекДат;
            оЗад['Отметки'] = _ТекстЗаявки;
            оЗад['Статус завершения'] = 0; //###---в процессе
            оЗад['Папки'] = -10;
            оЗад['Завершить до'] = завершить_до;

            СохранитьЗапись(оЗад);
            return 1;
        }
        var нзДоговора = кЗаполнениеРасписанияСтек.ПолучитьДоговорСписанияЧасов("СПП");
        if (нзДоговора == -1) return 0;
        var нзЗаявки = кЗаполнениеРасписанияСтек.ПозицияЗаявкиНаСтекДляРазовыхРабот( пТекДат, нзДоговора, "Заявка на исправление", _ТекстЗаявки,
            "Проект", "Исправление ошибки по результатам тестирования", "", 1);

        var оЗадания = Объект("ДО задания");
        УстановитьПолеСвязи(оЗадания, "Задание-Карточка", нзЗаявки);
        УстановитьПолеСвязи(оЗадания, "Задание-Фаза", 401);
        УстановитьПолеСвязи(оЗадания, "Задание-Исполнитель", _Исполнитель);
        оЗадания['Дата выдачи'] = пТекДат;
        оЗадания['Время выдачи'] = пТекДат;
        оЗадания['Отметки'] = _ТекстЗаявки;
        оЗадания['Статус завершения'] = 0; //---в процессе
        оЗадания['Папки'] = -10;
        оЗадания['Завершить до'] = пТекДат;
        ВнестиЗапись(оЗадания);
        return 1;
    }

    /**
     *
     * @param пользователь
     * @param задание
     * @param вр_раб
     * @param примечание
     * @param комментарий
     * @returns {string}
     */
    static ТекстЗаявкиОшибкиИнстал(пользователь, задание, вр_раб, примечание, комментарий) {
        var зИнфЗадания = Query(`SELECT job.Отметки, org.Название, card.Номер, card.[Дата создания],card.Row_ID
                               FROM ~ДО задания~ job
                                    JOIN ~ДО карточки~ card ON job.[Задание-Карточка]=card.ROW_ID
                                    JOIN ~Договор~ cont ON card.[Карточка-Договор]=cont.ROW_ID
                                    JOIN ~Организации~ org ON cont.Грузополучатель=org.ROW_ID
                               WHERE job.ROW_ID=:1`, 1, "id,S");
        зИнфЗадания.УстановитьПараметры(задание);
        var отметки = ``, орг = "";
        var Название, номер, Дата_создания
        var ПримечаниеКарт = Название = Дата_создания = номер = "";
        var оДОКарт = Объект("ДО карточки");
        if (зИнфЗадания.Следующий()) {
            отметки = зИнфЗадания.Отметки;
            орг = зИнфЗадания.Название;
            номер = зИнфЗадания.Номер;
            Дата_создания = зИнфЗадания['Дата создания'];
            Название = зИнфЗадания.Название;
            ПрочитатьЗаписьТаблицы(оДОКарт, зИнфЗадания.Row_ID);
            ПримечаниеКарт = оДОКарт.Примечание;
        }

        return `Контроль за ошибкой инсталляции.\n По заявке № ` + номер + ` от ` + Дата_создания + ` ` + Название + `\n` +
            ` Текст заявки:` + ПримечаниеКарт +
            (пользователь != "" ? "\n Обнаружил: " + ФИО(пользователь) : "") +
            (вр_раб != "" ? "\n Отмечено: " + вр_раб.ПолноеКоличествоЧасов() : "") +
            (отметки != "" ? "\n Текст работы: " + отметки : "") +
            (примечание != "" ? "\n Примечание для клиента: " + примечание : "") +
            (комментарий != "" ? "\n Личный комментарий: " + комментарий : "");
    }

    /**
     *
     * @param _Дата
     * @param нзДог
     * @returns {*}
     */
    static ПозицияЗаявкиНаСтекДляУведомления(_Дата, нзДог) {
        var зПапки = Query(`SELECT [row_id] FROM ~ДО карточки~
                           WHERE [Папки_ADD]=0 AND [номер]=1`, 100, "");
        зПапки.УстановитьПараметры();
        var нзПапки = зПапки.Следующий() ? зПапки.row_id : -10;
        var оЗаявки = new кЗаявка();
        оЗаявки.Очистить();
        УстановитьПолеСвязи(оЗаявки.Объект, "Карточки-Категория", 9);    //--- Категория документов = "Источник заявки"
        УстановитьПолеСвязи(оЗаявки.Объект, "Карточки-Маршрут", 117);    //--- Маршрут = "Уведомление"
        УстановитьПолеСвязи(оЗаявки.Объект, "Автор", НомерЗаписи(Пользователь()));
        УстановитьПолеСвязи(оЗаявки.Объект, "Менеджер", 139);
        УстановитьПолеСвязи(оЗаявки.Объект, "Карточка-Договор", нзДог);
        оЗаявки.Договор = new кДоговор(оЗаявки.Объект['Карточка-Договор'], true);
        УстановитьПолеСвязи(оЗаявки.Объект, "Карточка-Организация", оЗаявки.Договор.Объект.Грузополучатель);
        УстановитьПолеСвязи(оЗаявки.Объект, "Карточка-ПлОрганизация", оЗаявки.Договор.Объект.Грузополучатель);
        оЗаявки.Объект['Дата создания'] = оЗаявки.Объект['Завершить до'] = _Дата;
        оЗаявки.Объект['Время создания'] = new Date();
        оЗаявки.Объект['Примечание'] = "Уведомление (" + _Дата.format('rusDate') + ")";
        оЗаявки.Объект['Номер'] = оЗаявки.НовыйНомер();
        оЗаявки.Объект['Папки'] = нзПапки;
        var нзЗаявки = оЗаявки.Внести();
        return нзЗаявки;
    }

    /**
     *
     * @param имяДиалога
     * @param катДог
     * @param Комментарий
     * @param Примечание
     * @param нзИсполнитель
     * @param датаВвода
     * @param нзЗадания
     * @param врРаб
     * @param врОпл
     * @param текстЗадания
     * @param вАкк
     * @param оргДог
     */
    static СписатьЧасы(имяДиалога, катДог, Комментарий, Примечание, нзИсполнитель, датаВвода, нзЗадания, врРаб, врОпл, текстЗадания, вАкк, оргДог) {
        var резПолеРаб = "Время работы", резПолеОпл = "Время к оплате";
        if (имяДиалога == "Телефонный звонок") {
            резПолеРаб = "@Минут";
            резПолеОпл = "@К оплате";
        }
        var позСп = -1;
        if ( typeof катДог != "number") {
            var Результат = кЗаполнениеРасписанияСтек.ВыборВариантаСписанияВремени(катДог);
            позСп = Результат.Результат;
        } else {
            позСп = катДог;
        }
        if (позСп <= 0) {
            return резПолеОпл;
        } else {
            var видСп = "", катЗаявки = "";
            for (let инд in Результат.мКлючей) {
                if (!Результат.мКлючей.hasOwnProperty(инд)) continue;
                if (Результат.мКлючей[инд] == позСп) {
                    видСп = Результат.мНазваний[инд].toLowerCase();
                    катЗаявки = Результат.мНазваний[инд];
                }
            }

            //обязательно заполнять комментарий при всех видах списания, кроме дороги
            if (!Комментарий.trim() && (видСп == "профрост" || видСп == "политика" || видСп == "дорога обратно")) {
                Сообщить("Обязательно необходимо указать 'Куда затрачено время?' в поле \"личный комментарий\".");
                return резПолеОпл;
            } else {
                /* если списываем на профрост, то необходимо создать работу на Стек
                 # если списываем на политику, то время к оплате необходимо поставить на Стек
                 # в обоих случаях нам нужно найти или создать заявку и работу на Стек
                 # Аналогично дорога обратно
                 */

                var пАналитика1 = 0;
                if (видСп == "профрост" || видСп == "политика" || видСп == "дорога обратно") {
                    if (видСп == "политика") {
                        if (!ДаНет("Вы уверены , что вид работ \"Политика\"?\nСогласовано с директором или менеджерами??"))
                            return резПолеРаб;
                    }
                    var нзДоговора = кЗаполнениеРасписанияСтек.ПолучитьДоговорСписанияЧасов("СК");
                    if (нзДоговора > 0) {
                        var нзЗаявки = кЗаполнениеРасписанияСтек.ПозицияЗаявкиНаСтекДляРазовыхРабот(датаВвода, нзДоговора, катЗаявки, "(" + датаВвода + ")",
                            "Источник заявки", "Разовые работы");

                        var оРаботы = Объект("ДО задания");
                        УстановитьПолеСвязи(оРаботы, "Задание-Карточка", нзЗаявки);
                        УстановитьПолеСвязи(оРаботы, "Задание-Фаза", кЗаполнениеРасписанияСтек.ПозицияНачФазыМаршрута("Источник заявки", "Разовые работы"));
                        УстановитьПолеСвязи(оРаботы, "Задание-Исполнитель", нзИсполнитель);
                        оРаботы['Дата выдачи'] = оРаботы['Дата принятия'] = оРаботы['Дата завершения'] = датаВвода;
                        оРаботы['Время выдачи'] = оРаботы['Время принятия'] = оРаботы['Время завершения'] = new Date();
                        var пОтметка = "";
                        switch (видСп) {
                            case "профрост":
                                пОтметка = "Профрост. ";
                                break;
                            case "политика":
                                пОтметка = "Политика. ";
                                break;
                            case "дорога обратно":
                                пОтметка = "Дорога обратно. "
                                break;
                        }
                        оРаботы['Отметки'] = пОтметка + оргДог | '';
                        оРаботы['Статус завершения'] = 1; // завершено успешно
                        оРаботы['Папки'] = -10;
                        var нзРаботы = ВнестиЗапись(оРаботы);
                    }
                } else if (видСп == "ошибки сопровождения" || видСп == "ошибки внедрения") {
                    var дОкноВыбораВиноватых = СоздатьДиалог("Окно выбора виноватых");
                    дОкноВыбораВиноватых.Выполнить();
                    var пВиновник = нзИсполнитель;
                    пАналитика1 = 1;
                    if (дОкноВыбораВиноватых.поз_в != 0) {
                        пАналитика1 = 0;
                        пВиновник = дОкноВыбораВиноватых.поз_в;
                    }
                } else if (видСп == "ошибки инсталляции") {
                    кЗаполнениеРасписанияСтек.СоздатьЗаявкуНаИсправление(68, кЗаполнениеРасписанияСтек.ТекстЗаявкиОшибкиИнстал(Пользователь().ФИО, нзЗадания,
                        врРаб.ПолноеКоличествоЧасов(), Примечание, Комментарий));
                }

                var оЧасы = Объект("ДО часы");

                УстановитьПолеСвязи(оЧасы, "Часы-Задание", видСп == "профрост" || видСп == "дорога обратно" ? нзРаботы : нзЗадания);
                оЧасы["Дата ввода"] = датаВвода;
                var МинутДляСписания = врРаб.getHours() * 60 + врРаб.getMinutes() - врОпл.getHours() * 60 - врОпл.getMinutes();
                оЧасы["Время работы"] =  МинутДляСписания / 60 + ":" + МинутДляСписания % 60;
                оЧасы["Время к оплате"] = видСп == "профрост" || видСп == "дорога обратно" ? оЧасы["Время работы"] : 0;
                оЧасы["Примечание"] = Примечание;    // а вот ничего подобного, личный комментарий не должны видеть клиенты
                оЧасы["Комментарий"] = Комментарий;
                оЧасы["Часы-Категория"] = позСп;

                // списываем аккордные работы - списанное время должно быть помечено как доп. время, если это не профрост
                if (вАкк) {
                    if (видСп != "профрост") {
                        пАналитика1 += 2;
                    } else {
                        Сообщить("Отработанное время в день не должно превышать 8 часов");
                        return резПолеРаб;
                    }
                }
                оЧасы['Аналитика1'] = пАналитика1;

                if ((видСп == "ошибки сопровождения" || видСп == "ошибки внедрения") && пВиновник) {
                    УстановитьПолеСвязи(оЧасы, "Ошибка-Виновник", пВиновник);
                    if (пВиновник != нзИсполнитель && пВиновник > 0) {
                        // если отмечаем на кого-то - ему задание
                        var пСтрИспр = `На вас отмечена ошибка.\n Обнаружил ` + ФИО(Пользователь().ФИО) + "\n Отмечено: " + врРаб.ПолноеКоличествоЧасов()
                            + "\n Примечание для клиента: " + Примечание + "\n Личный комментарий: " + Комментарий;
                        пСтрИспр += `\n\nИсходный текст заявки: ` + текстЗадания;
                        нзДоговора = кЗаполнениеРасписанияСтек.ПолучитьДоговорСписанияЧасов("СК");
                        if (нзДоговора > 0)
                            кЗаполнениеРасписанияСтек.СоздатьЗаявкуНаИсправление(пВиновник, кЗаполнениеРасписанияСтек.ПозицияЗаявкиНаСтекДляУведомления(new Date(), нзДоговора), пСтрИспр);
                    }
                }
                ВнестиЗапись(оЧасы);

                // при "Политике", на Стек поставим часы к оплате. То есть для клиента будет отработано 6 к оплате 0, а на Стек отработано 0 к оплате 6.
                if (видСп == "политика") {
                    УстановитьПолеСвязи(оЧасы, "Часы-Задание", нзРаботы);
                    оЧасы['Время работы'] = 0;
                    var МинутДляСписания = врРаб.getHours() * 60 + врРаб.getMinutes() - врОпл.getHours() * 60 - врОпл.getMinutes();
                    оЧасы['Время к оплате'] = МинутДляСписания / 60 + ":" + МинутДляСписания % 60;
                    ВнестиЗапись(оЧасы);
                }
            }
        }
        return "";
    }
}
/**
 * Переопределим сервер по умолчанию на "ftp.stack-it.ru"
 * @returns {string}
 */
кСтекFTP.prototype.СерверПоУмолчанию = "ftp.stack-it.ru";