'use strict';
/**
 * @module ДО Юридические лица
 */

кДоговор.prototype.СоздатьПараметрыДоговора = function () {
    var мПараметры = [];
    мПараметры.push( "АБОН_ЧАСЫ");
    мПараметры.push( "ЕЖЕМПЛАТЕЖ");
    мПараметры.push( "СРОК_ИСП");
    мПараметры.push( "АБФ_СТДО");
    var оСВ = Объект("Свойства");
    for(let имя of мПараметры) {
        Сброс(оСВ);
        оСВ["Виды-Параметры"]   = ДанныеПараметра(имя);
        оСВ["Параметры-Договор"] = this.НомерЗаписи;
        оСВ.ДатНач = new Date();
        оСВ.ДатКнц = new Date(2045, 4, 9 );
        if(оСВ["Виды-Параметры"]>0)
            ВнестиЗапись(оСВ);
    }
};

кДоговор.prototype.Действует = function (НаДату) {
    var з_сост = Query(`select Состояние from ~Договор~ where row_id = :1 and :2 between isnull([Начало договора],'19800101') and isnull([Окончание],'20450509')`, 10, "nz,S,dat,D");
    з_сост.УстановитьПараметры(this.НомерЗаписи,НаДату);
    //делаем расчет и для условно действующих договоров
    return з_сост.Следующий() ? ( з_сост.Состояние == 2 || з_сост.Состояние == 3 ? 1 : 0 ) : 0;
};

кДоговор.prototype.ДанныеРасчетаДоговора = function (МесяцРасчета) {
    this.Прочитать();
    if (this.Действует(МесяцРасчета)) {
        var пВариантНДС = 1; // TODO Нужно прочитать с Грузоотправителя и праально определить Ключ (СДЕЛАНО, СМ. кДоговор)
        var КлючНоменклатуры = this.Объект.Тема;
        this.ПрочитатьПараметрыДоговора(МесяцРасчета);
        var ВариантРасчетаДоговора = this.ОпределитьТипРасчета();
        var мНачДО = [];
        switch (ВариантРасчетаДоговора) {
            case 1:
                мНачДО = this._РасчетДоговора_1(МесяцРасчета, КлючНоменклатуры);
                break;
            case 2:
                мНачДО = this._РасчетДоговора_2(МесяцРасчета, КлючНоменклатуры);
                break;
            case 3:
                мНачДО = this._РасчетДоговора_3(МесяцРасчета, КлючНоменклатуры);
                break;
            case 4:
                мНачДО = this._РасчетДоговора_4(МесяцРасчета, КлючНоменклатуры);
                break;
        }


    }

    if (мНачДО != undefined && мНачДО.length > 0) {
        var зФактура = Query(`
                select sum(Сумма) as СуммаСФ
                from ~Документ~
                where [Документы-Договор] = :1
                and [Тип документа]=35
                and Дата between :2 and :3
                `, 1, "p1,S,p2,D,p3,D");
        зФактура.УстановитьПараметры(this.НомерЗаписи, МесяцРасчета, new Date(МесяцРасчета.getFullYear(), МесяцРасчета.getMonth() + 1, 0));
        мНачДО[0]["СуммаСФ"] = зФактура.Следующий() > 0 ? зФактура.СуммаСФ : 0;
    }

    return мНачДО;
};


кДоговор.prototype.ОтработаноПоДоговору = function (ДатНач, ДатКнц) {
    var пСписание = arguments.length > 2 ? ( arguments[2] == 0 ? ` and isnull(h.Перенос,0) & 1 = 0 ` : ` and isnull(h.Перенос,0) & 1 > 0 `) : ` and isnull(h.Перенос,0) & 1 = 0 `;
    var пВидЧасов = arguments.length > 3 ? ( arguments[3] == 0 ? ` and isnull(h.Перенос,0) & 2 > 0 ` : ( arguments[3] == 1 ? ` and isnull(h.Перенос,0) & 4 > 0 ` : ` and isnull(h.Перенос,0) & 2 = 0 and isnull(h.Перенос,0) & 4 = 0 ` ) ) : ` and isnull(h.Перенос,0) & 2 = 0 and isnull(h.Перенос,0) & 4 = 0 `;
    var пТема = arguments.length > 4 ? ` and c.Тема like '` + arguments[4] + `'` : ``;
    var зЧасы = Query(`Declare @dog INT,@dn datetime,@de datetime;
                           Set @dog = :1;
                           Set @dn  = :2;
                           Set @de  = :3;
                           Select sum(round(convert(float,60 * datepart(hour, h.[Время к оплате]) +
                                              datepart(minute, h.[Время к оплате]))/60,2)
                                     ) as Часы
                             From ~ДО часы~ h
                             Join ~ДО задания~  w ON h.[Часы-Задание] = w.ROW_ID
                             Join ~ДО карточки~ c ON c.[row_id] = w.[Задание-Карточка]
                            Where c.[Карточка-Договор] = @dog
                                  and h.[Дата ввода] between @dn and @de` + пСписание + пВидЧасов + пТема, 10, "p1,S,p2,D,p3,D");

    зЧасы.УстановитьПараметры(this.НомерЗаписи, ДатНач, ДатКнц);
    return зЧасы.Следующий() > 0 ? зЧасы.Часы : 0;
};


/**
 * # Расчет Факт/Час
 * @private
 */
кДоговор.prototype._РасчетДоговора_1 = function (МесяцРасчета, Ключ) {
    //TODO какая то глобальная хрень ???
    var _вид = 0;
    var Тариф = this.Параметры["АБФ_СТДО"] != undefined ? this.Параметры["АБФ_СТДО"] : Number(ПрочитатьКонстанту(МесяцРасчета, "ТАРИФФАКТЧАСДО"));
    var зНом = this.НайтиНоменклатуру(Ключ);
    var мЧасы = this.ОбъемПоДоговору(МесяцРасчета, new Date(МесяцРасчета.getFullYear(), МесяцРасчета.getMonth() + 1, 0));
    var Факт = мЧасы[1] != undefined ? мЧасы[1] : 0;
    var мНачДО = [];
    if (Факт != 0 && Тариф != 0) {
        мНачДО[0] = [];
        мНачДО[0]["ПОбъем"] = 0;
        мНачДО[0]["ФОбъем"] = Факт;
        мНачДО[0]["Объем"] = Факт;
        мНачДО[0]["Сумма"] = мНачДО[0].Объем * Тариф;
        мНачДО[0]["Склад-Услуги"] = зНом.нзНом;
        мНачДО[0]["ВариантНДС"] = зНом.ВариантНДС;
        мНачДО[0]["Месяц"] = МесяцРасчета;
        мНачДО[0]["Тариф"] = Тариф;
        мНачДО[0]["_ВключатьВОбъем"] = зНом.ВклОбъем;
        мНачДО[0]["Аналитика1"] = 0;
        мНачДО[0]["Аналитика2"] = "";
        мНачДО[0]["Название"] = зНом.Наименование;
        мНачДО[0]["Комментарий"] = "за " + МесяцРасчета.МесяцПрописью() + " " + МесяцРасчета.getFullYear() + " г.";
        мНачДО[0]["СуммаСФ"] = 0;

    }
    return мНачДО;
};

/**
 * # Расчет Аб/мес
 * @private
 */
кДоговор.prototype._РасчетДоговора_2 = function (МесяцРасчета, Ключ) {
    var _вид = 0;
    var зНом = this.НайтиНоменклатуру(Ключ);

    var СуммаПлатежа = this.Параметры["ЕЖЕМПЛАТЕЖ"] != undefined ? this.Параметры["ЕЖЕМПЛАТЕЖ"] : 0;
    var мНачДО = [];
    if (СуммаПлатежа != 0) {
        var мЧасы = this.ОбъемПоДоговору(МесяцРасчета, new Date(МесяцРасчета.getFullYear(), МесяцРасчета.getMonth() + 1, 0));
        var Факт = мЧасы[1] != undefined ? мЧасы[1] : 0;
        var План = мЧасы[0] != undefined ? мЧасы[0] : 0;
        мНачДО[0] = [];
        мНачДО[0]["Объем"] = 1;
        мНачДО[0]["ПОбъем"] = План;
        мНачДО[0]["ФОбъем"] = Math.min(План, Факт);
        мНачДО[0]["Сумма"] = СуммаПлатежа;
        мНачДО[0]["Склад-Услуги"] = зНом.нзНом;
        мНачДО[0]["ВариантНДС"] = зНом.ВариантНДС;
        мНачДО[0]["Месяц"] = МесяцРасчета;
        мНачДО[0]["Тариф"] = СуммаПлатежа;
        мНачДО[0]["_ВключатьВОбъем"] = зНом.ВклОбъем;
        мНачДО[0]["Аналитика1"] = 0;
        мНачДО[0]["Аналитика2"] = "";
        мНачДО[0]["Название"] = зНом.Наименование;
        мНачДО[0]["Комментарий"] = "за " + МесяцРасчета.МесяцПрописью() + " " + МесяцРасчета.getFullYear() + " г.";
        мНачДО[0]["СуммаСФ"] = 0;

        var ДопЧасы = мЧасы[3] != undefined ? мЧасы[3] : 0; // если абон.плату не выработали, то все равно должны выставить доп.часами плюсДЧ
        if (ДопЧасы > 0) {
            var зНомДоп = this.НайтиНоменклатуру(Ключ + "_ДЧ");
            var ТарифДопЧаса = this.Параметры["АБФ_СТДО"] != undefined ? this.Параметры["АБФ_СТДО"] : 0;
            мНачДО[1] = [];
            мНачДО[1]["ПОбъем"] = 0;
            мНачДО[1]["ФОбъем"] = ДопЧасы;
            мНачДО[1]["Объем"] = ДопЧасы;
            мНачДО[1]["Сумма"] = ДопЧасы * ТарифДопЧаса;
            мНачДО[1]["Склад-Услуги"] = зНомДоп.нзНом;
            мНачДО[1]["ВариантНДС"] = зНомДоп.ВариантНДС;
            мНачДО[1]["Месяц"] = МесяцРасчета;
            мНачДО[1]["Тариф"] = ТарифДопЧаса;
            мНачДО[1]["_ВключатьВОбъем"] = зНомДоп.ВклОбъем;
            мНачДО[1]["Аналитика1"] = 0;
            мНачДО[1]["Аналитика2"] = "";
            мНачДО[1]["Название"] = зНомДоп.Наименование;
            мНачДО[1]["Комментарий"] = "";
            мНачДО[1]["СуммаСФ"] = 0;
        }
    }

    return мНачДО;
};

/**
 * Расчет Аб/год
 * @private
 */
кДоговор.prototype._РасчетДоговора_3 = function (МесяцРасчета, Ключ) {
    var _вид = 0;
    var зНом = this.НайтиНоменклатуру(Ключ);
    var СуммаПлатежа = this.Параметры["ЕЖЕМПЛАТЕЖ"] != undefined ? this.Параметры["ЕЖЕМПЛАТЕЖ"] : 0;
    var мНачДО = [];
    if (СуммаПлатежа != 0) {
        var мЧасы = this.ОбъемПоДоговору(new Date(МесяцРасчета.getFullYear(), 0, 1), new Date(МесяцРасчета.getFullYear(), МесяцРасчета.getMonth() + 1, 0));
        var Факт = мЧасы[1] != undefined ? мЧасы[1] : 0;
        var План = мЧасы[0] != undefined ? мЧасы[0] : 0;
        мНачДО[0] = [];
        мНачДО[0]["Объем"] = 1;
        мНачДО[0]["ПОбъем"] = План;
        мНачДО[0]["ФОбъем"] = Math.min(План, Факт);
        мНачДО[0]["Сумма"] = СуммаПлатежа;
        мНачДО[0]["Склад-Услуги"] = зНом.нзНом;
        мНачДО[0]["ВариантНДС"] = зНом.ВариантНДС;
        мНачДО[0]["Месяц"] = МесяцРасчета;
        мНачДО[0]["Тариф"] = СуммаПлатежа;
        мНачДО[0]["_ВключатьВОбъем"] = зНом.ВклОбъем;
        мНачДО[0]["Аналитика1"] = 0;
        мНачДО[0]["Аналитика2"] = "";
        мНачДО[0]["Название"] = зНом.Наименование;
        мНачДО[0]["Комментарий"] = "за " + МесяцРасчета.МесяцПрописью() + " " + МесяцРасчета.getFullYear() + " г.";
        мНачДО[0]["СуммаСФ"] = 0;
        var ДопЧасы = мЧасы[3] != undefined ? мЧасы[3] : 0; // если абон.плату не выработали, то все равно должны выставить доп.часами плюсДЧ
        if (ДопЧасы > 0) {
            var зНомДоп = this.НайтиНоменклатуру(Ключ + "_ДЧ");
            var ТарифДопЧаса = this.Параметры["АБФ_СТДО"] != undefined ? this.Параметры["АБФ_СТДО"] : 0;
            мНачДО[1] = [];
            мНачДО[1]["ПОбъем"] = 0;
            мНачДО[1]["ФОбъем"] = ДопЧасы;
            мНачДО[1]["Объем"] = ДопЧасы;
            мНачДО[1]["Сумма"] = ДопЧасы * ТарифДопЧаса;
            мНачДО[1]["Склад-Услуги"] = зНомДоп.нзНом;
            мНачДО[1]["ВариантНДС"] = зНомДоп.ВариантНДС;
            мНачДО[1]["Месяц"] = МесяцРасчета;
            мНачДО[1]["Тариф"] = ТарифДопЧаса;
            мНачДО[1]["_ВключатьВОбъем"] = зНомДоп.ВклОбъем;
            мНачДО[1]["Аналитика1"] = 0;
            мНачДО[1]["Аналитика2"] = "";
            мНачДО[1]["Название"] = зНомДоп.Наименование;
            мНачДО[1]["Комментарий"] = "";
            мНачДО[1]["СуммаСФ"] = 0;
        }
    }
    return мНачДО;
};

/**
 * Аренда и лизинг
 * @private
 */
кДоговор.prototype._РасчетДоговора_4 = function (МесяцРасчета, Ключ) {
    var _вид = 0;
    var зНом = this.НайтиНоменклатуру(Ключ);
    var СуммаПлатежа = this.Параметры["ЕЖЕМПЛАТЕЖ"] != undefined ? this.Параметры["ЕЖЕМПЛАТЕЖ"] : 0;
    var мНачДО = [];
    if (СуммаПлатежа != 0) {
        мНачДО[0] = [];
        мНачДО[0]["Объем"] = 1;
        мНачДО[0]["ПОбъем"] = 1;
        мНачДО[0]["ФОбъем"] = 1;
        мНачДО[0]["Сумма"] = СуммаПлатежа;
        мНачДО[0]["Склад-Услуги"] = зНом.нзНом;
        мНачДО[0]["ВариантНДС"] = зНом.ВариантНДС;
        мНачДО[0]["Месяц"] = МесяцРасчета;
        мНачДО[0]["Тариф"] = СуммаПлатежа;
        мНачДО[0]["_ВключатьВОбъем"] = зНом.ВклОбъем;
        мНачДО[0]["Аналитика1"] = 0;
        мНачДО[0]["Аналитика2"] = "";
        мНачДО[0]["Название"] = зНом.Наименование;
        мНачДО[0]["Комментарий"] = " за " + МесяцРасчета.МесяцПрописью() + " " + Год(МесяцРасчета) + " г.";
        мНачДО[0]["СуммаСФ"] = 0;
    }
    return мНачДО;
};

/**
 * Функция возвращает количество отработанных часов по договору нзДог за период ДатН - ДатК
 * формируется массив, в котором индексы - вид часов
 * 0 - план (сколько по договору предусмотрено часов)
 * 1 - факт (сколько в действительности было отработано (включая списание))
 * 2 - к оплате (сколько идет к оплате, включая доп.часы)
 * 3 - дополнит.часы (сколько доп.часов к оплате)
 * 4 - служебные часы - списание (на сколько часов было списание)
 * 5 - часы факт без списания (сколько часов было отработано без списания)
 * @returns {Array}
 */
кДоговор.prototype.ОбъемПоДоговору = function (ДатНач, ДатКнц) {
    var Минус = this.ОтработаноПоДоговору(ДатНач, ДатКнц, 1);       // минусовые часы без галок аб или доп (минусуем из общего отработ.времени)
    var МинусАЧ = this.ОтработаноПоДоговору(ДатНач, ДатКнц, 1, 0);  // минусовые часы с галочкой аб (минусуем всегда из аб)
    var МинусДЧ = this.ОтработаноПоДоговору(ДатНач, ДатКнц, 1, 1);  // минусовые часы с галочкой доп (минусуем всегда из доп)
    var ПлюсАЧ = this.ОтработаноПоДоговору(ДатНач, ДатКнц, 0, 0);   // плюсовые часы с галочкой аб (плюсуем к абонентским часам, вне зависимости от часов по договору)
    var ПлюсДЧ = this.ОтработаноПоДоговору(ДатНач, ДатКнц, 0, 1);   // плюсовые часы с галочкой доп (плюсуем только к доп часам, не зависимо от того есть ли переработка)
    var ПлюсСП = this.ОтработаноПоДоговору(ДатНач, ДатКнц, 0, 3, "Перенос часов"); // плюсовые часы без галочек аб или доп (плюсуются автоматически к общей абонентской плате) - нужны только для выделения в отчетах
    var Факт = this.ОтработаноПоДоговору(ДатНач, ДатКнц) - Минус - МинусАЧ;
    if (this.Параметры.length == 0)
        this.ПрочитатьПараметрыДоговора(ДатНач);

    var ПланЧ = this.Параметры["АБОН_ЧАСЫ"] != undefined ? this.Параметры["АБОН_ЧАСЫ"] : 0;
    var План = ПланЧ + ПлюсАЧ;
    var зВыст = Query(`select sum(ns.Кол_во) as Колво from ~Наименования счета~ ns
                            inner join ~Номенклатура~ nom on ns.[Склад-Наименования счета] = nom.ROW_ID
                            inner join ~Документ~ d on d.ROW_ID = ns.[Счет-Наименования]
                            where d.[Документы-Договор] = :1 and nom.НомНомер like '%Д_ДЧ' and d.Дата between :2 and :3`, 1, "p1,S,p2,D,p3,D");
    зВыст.УстановитьПараметры(this.НомерЗаписи, ДатНач, ДатКнц);//TODO
    var ВыставленоДоп = зВыст.Следующий() > 0 ? зВыст.Колво : 0;
    var ДопЧасы = Math.max(Факт - План - ВыставленоДоп, 0) + ПлюсДЧ - МинусДЧ;
    var мРез = [];
    мРез[0] = Number(ПланЧ.toFixed(1));
    мРез[1] = Number(Факт.toFixed(1));
    мРез[3] = Number(ДопЧасы.toFixed(1));
    мРез[4] = Number( ПлюсСП + ПлюсАЧ + ПлюсДЧ - Минус - МинусАЧ - МинусДЧ);
    мРез[5] = Number( Факт - ПлюсСП + Минус + МинусАЧ );
    мРез[2] = Number((мРез[5] + мРез[4]).toFixed(1));
    мРез[4] = Number(мРез[4].toFixed(1));
    мРез[5] = Number(мРез[5].toFixed(1));
    мРез[6] = Минус;
    мРез[7] = МинусАЧ;
    мРез[8] = МинусДЧ;
    мРез[9] = ПлюсСП;
    мРез[10] = ПлюсАЧ;
    мРез[11] = ПлюсДЧ;
    return мРез;
};
// TODO Это не сюда бы
кДоговор.prototype.НайтиНоменклатуру = function (НомНомер) {
    var зНом = Query(`select top 1 row_id, row_id нзНом, Наименование, [Счетчика разрядность] as ВклОбъем, [Вариант НДС] as ВариантНДС from ~Номенклатура~ where НомНомер = :1`, 10, "p1,A30");
    зНом.УстановитьПараметры(НомНомер);
    // TODO Такая обработка ошибок не гуд...
    return зНом.Следующий() ? зНом.toJSObject() : Ошибка("Нет карточки номенклатуры с НомНомером " + _НомНомер);
};

кДоговор.prototype.ОпределитьТипРасчета = function () {
    var зФормула = Query(`select top 1 an.[Параметр 1] as Формула, Тема
                              from ~Аналитики~ an
                              where Тема = (select top 1 Тема from ~Договор~ where row_id = :1 and Тема != '')`, 10, "p1,S");
    зФормула.УстановитьПараметры(this.НомерЗаписи);
    return зФормула.Следующий() > 0 ? Number(зФормула.Формула) : 0;
};


