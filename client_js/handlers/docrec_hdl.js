"use strict";
/**
 * @extends БазоваяВыборка
 * @class класс ДО_шаблоны_спец - обработчик выборки 'ДО шаблоны спец' справочника "Шаблоны спецификаций"
 */
class ДО_шаблоны_спец extends БазоваяВыборка {
    constructor() {
        super('ДО шаблоны спец', 'ДО шаблоны спец');
    }
    Картинка(){
        var результат = "";
        if( ЭтоУзел( this.Запись ) ) {
            результат = "@Картинка,1";
        } else {
            результат = "@Картинка,0";
            if( this.Запись['Место выполнения'] == 0 ) {
                результат += результат ? ";@МестоВыполнения,2" : "@МестоВыполнения,2";
            } else {
                результат +=  результат ? ";@МестоВыполнения,3" : "@МестоВыполнения,3";
            }

            if( '.Ответственный' == 0 ) {
                результат += ";@Ответственный,2";
            } else if( '.Ответственный' == 1 ) {
                результат += ";@Ответственный,3";
            } else {
                результат += ";@Ответственный,5";
            }
        }
        return результат;
    }
}

/**
 * @extends БазовыйДиалог
 * @class класс ДО_шаблон - обработчик окна диалога 'ДО шаблон' выборки 'ДО шаблоны спец'
 */
class ДО_шаблон extends БазовыйДиалог {
    constructor() {
        super('ДО шаблон');
    }
    Инициализация(){
        УстановитьЗаголовок( this.ИмяДиалога, "Шаблон спецификации      " + this.Запись['Папки>Код'] + "  "
            + this.Запись['Папки>Наименование работ'] );
        this.Запись.Уровень = 2;
    }
    Изменение( поле ){
        switch( поле ){
            case "Цена": case "Количество": case "КолСотрудников":
                this.Запись.Стоимость = this.Запись.Цена * this.Запись.Количество * Math.max(this.Запись.КолСотрудников, 1);
                break;
        }
    }
}

class ОперацииДО {
    static РассылкаОрганизациям(){
        var имяЯщика = 'stack@yarnet.ru';
        var ящик = -1;
        if( (ящик = this.НайтиЯщик(имяЯщика)) == -1 ){
            Ошибка( "Не найден почтовый ящик для рассылки - " + имяЯщика );
            return;
        }
        new кЭлСообщение( ящик ).Ответить( 'Рассылка' );
    }
    static НайтиЯщик( название ){
        var зЯщик = BufferedReader( "SELECT row_id FROM ~Сообщения Заголовок~ WHERE ОтКого like :1 AND [Папка_ADD]=0 AND Вид=9" , 10, "name,A" );
        зЯщик.УстановитьПараметры( название );
        if( зЯщик.Следующий() ) return зЯщик.row_id;
        return -1;
    }
}

/**
 * @extends БазовыйДиалог
 * @class класс Карточка_документа - обработчик окна диалога 'Карточка документа' выборки 'Карточки документа'
 */
class $Карточка_документа extends Карточка_документа {
    constructor() {
        super();
        this.УстановленыПараметрыЗ = false;
        this.УстановленыКонтактыЗ = false;
        this.ЭлВопрос = null;
    }
    Инициализация() { //+
        super.Инициализация();

        this.Запись['@ДолгДог'] = this.Запись['@ДолгСопр'] = this.Запись['@ДолгОбщ'] = 0;
        if( this.Заявка.Договор.НомерЗаписи != -1 ) {
            var долг = this.ЗадолженностьПлательщика();
            this.Запись['@ДолгОбщ'] = долг.Общий;
            this.Запись['@ДолгСопр'] = долг.Сопровождение;
            this.Запись['@ДолгДог'] = долг.Текущий;
        }
        var инфДоговора = this.Заявка.ПолучитьЧасыДоговор();
        this.Запись['@ИнфПланЧасов'] = инфДоговора.ПланЧасов;
        this.Запись['@ИнфВсегоЧасов'] = инфДоговора.ВсегоЧасов;
        this.Запись['@ИнфФактЧасов'] = инфДоговора.ФактЧасов;
        this.Запись['@ИнфВозмПланФ'] = инфДоговора.ВозмПланФ;
        this.Запись['@ИнфВозмПланПФ'] = инфДоговора.ВозмПланПФ;
        this.Запись['@МеткаИнфВсегоЧасов'] = инфДоговора.МВсегоЧасов;
        var тема = this.Заявка.Договор.Объект.Тема;
        this.ЭлВопрос = this.Источник.Элементы["?"];
        this.ЭлВопрос.Скрытый = true;
        // Определяем доступность полей редактирования в зависимости от открытого месяца
        // Запрещаем редактировать карточки, созданные в закрытом периоде
        // и не отображаем сведения о перелимите  (если это не заявка по годовому договору сопровождения)
        var послЗМес = ОткрытыйМесяц( 285 ).СледующийМесяц( -1 );

        if( this.Запись['Дата создания'] <= послЗМес.ПоследнееЧисло() && this.Запись['Завершить до'] <= послЗМес.ПоследнееЧисло() &&
            тема != "СКК" && тема != "СКД" ) {
            // Проверяем, завершена ли заявка. Если нет, оставляем ее доступной для редактирования.
            var статусЗаявки = this.СтатусЗаявки();

            // последнее задание:
            // 1 - завершено успешно
            // 2 - завершено с ошибкой
            // 4 - отказ от задания
            // 5 - прерванное задание
            if( статусЗаявки == 1 || статусЗаявки == 2 || статусЗаявки == 4 || статусЗаявки == 5 ) { // заявка завершена, делаем ее недоступной для редактирования
                this.ЭлДоговор.Запрещен = true;
                this.Источник.Элементы["Адресат"].Запрещен = true;
                this.Источник.Элементы["Завершить до"].Запрещен = true;
                this.Источник.Элементы["ЭлПочта"].Запрещен = true;
                this.Источник.Элементы["Источник документа"].Запрещен = true;
                this.Источник.Элементы["&Сохранить"].Запрещен = true;
                var элДопИнф = Group( this.ИмяДиалога, "Дополнительная информация" );
                элДопИнф.Элементы["@АдресатПл"].Запрещен = true;
                элДопИнф.Элементы["Приоритет"].Запрещен = true;
                элДопИнф.Элементы["@КатСложности"].Запрещен = true;
                var элЧасыЗаявки = Group( this.ИмяДиалога, "Часы заявки" );
                элДопИнф.Элементы["ПланЧасов"].Запрещен = true;
                элДопИнф.Элементы["ЗатратыФакт"].Запрещен = true;
                // todo права Документооборота
                //if( !ПроверкаПравСотрудника(НомерЗаписи(Пользователь()), "Менеджер") )
                //View( this.ИмяДиалога, "Редактировать расписание" ).Скрытый = true;
            }
        } else {
            if( this.Запись['@БыстрДогОрг'] ) { // если указан договор, определяем, есть ли по нему перелимит
                // актуализируем данные о перелимите (тема и месяц проверяются внутри функции)
                var перелимит = this.ПолучитьПерелимит();
                if( перелимит > 0 ) {
                    this.Запись['@ЛИМ'] = "Lim";
                    this.ЭлВопрос.Скрытый = false;
                }
            }
        }
    }
    Изменение( поле ){
        super.Изменение( поле );
        switch( поле ){
            case "@БыстрДогОрг":
                // todo Старое значение
                if( this.Запись['@БыстрДогОрг'] != this.СтароеЗначение ){
                    // Сначала смотрим тему договора - указываем перелимит только для договоров сопровождения
                    var темаД = this.Заявка.Договор.Объект.Тема; // договор читается в базовом обработчике
                    if( темаД == "СКА" || темаД == "СЭА" || темаД == "СУА" || темаД == "СКК" || темаД == "СКД" ){

                        if( this.Заявка.Договор.Объект.Перелимит > 0 ) {// Проверяем наличие перелимита по новому договору
                            this.Запись['@ЛИМ'] = "Lim";
                            this.ЭлВопрос.Скрытый = false;
                        } else {
                            this.Запись['@ЛИМ'] = "";
                            this.ЭлВопрос.Скрытый = true;
                        }
                    }
                    var долг = this.ЗадолженностьПлательщика();
                    this.Запись['@ДолгОбщ'] = долг.Общий;
                    this.Запись['@ДолгСопр'] = долг.Сопровождение;
                    this.Запись['@ДолгДог'] = долг.Текущий;
                }
        }
    }
    ОткрытиеВкладки( вкладка ) {
        switch( вкладка ) {
            case "Контакты":
                if( this.УстановленыКонтактыЗ ) return "";

                this.УстановленыКонтактыЗ = true;
                if( this.Запись['Карточка-Организация'] != this.Заявка.Договор.Объект.Плательщик ) {
                    УстановитьПараметрыФильтра(this.ИмяДиалога, "@КонтактыЗак", $Карточка_документа.ФильтрКонтактовЗаказчика(),
                        "S", this.Запись['Карточка-Организация']);
                } else {
                    var свПанель = СворачивающиесяПанели( this.ИмяДиалога, "ПанКонтакты" );
                    свПанель.СreturnПанель( "Контакты заказчика" );
                }
                break;
            case "Параметры организации":
                if( this.УстановленыПараметрыЗ ) return false;

                this.УстановленыПараметрыЗ = true;
                if( this.Запись['Карточка-Организация'] != this.Заявка.Договор.Объект.Плательщик ){
                    УстановитьПараметрыФильтра( this.ИмяДиалога, "@Организация Значения параметровЗак", " t1.[Орг-Параметры]=:1 AND t1.Тип<>2", "S",
                        this.Запись['Карточка-Организация'] );

                    var панельЗак = View( this.ИмяДиалога, "Параметры заказчика" );
                    var панельПл = View( this.ИмяДиалога, "Параметры плательщика" );
                    панельЗак.Заголовок = "Параметры заказчика: " + this.Запись['Карточка-Организация>Название'];
                    панельПл.Заголовок = "Параметры плательщика: " + this.Запись['Карточка-Договор>Плательщик>Название'];
                } else {
                    var свПанель = СворачивающиесяПанели( this.ИмяДиалога, "ПанПараметры" );
                    свПанель.СreturnПанель( "Параметры заказчика" );
                        // чтобы отобразить пустую выборку
                    УстановитьПараметрыФильтра( this.ИмяДиалога, "@Организация - значения параметровЗак", " t1.[Орг-Параметры]=-100" );
                }
                break;
        }
        return super.ОткрытиеВкладки( вкладка );
    }
    Сохранение(){
        this.ПолучитьПерелимит();
    }

    /**
     * завершить работу из браузера истории заявок
     * Параметры[0]- ид завершаемой работы
     */
    ЗавершитьЗадание( параметры ) {
        var комментарий = '';
        if( this.Запись.Письмо > 0 ){
            комментарий = this.Запись.ПрикреплФайл; // почтовое сообщение сохранено здесь
            this.Запись.ПрикреплФайл = "";
        }
        var работа = new кРабота( Number(параметры[0]), this.Заявка );
        // todo завершение с комментарием для фазы + завршения фазы на стороне заказчика, не работает так
        работа.ПараметрыПереходаПоУмолчанию['@Комментарии'] = комментарий;
        if( работа.Завершить(false) ){
            this.Запись['@HTMLTable'] = this.Заявка.ПолучитьИсториюHtml( -1, true );
            this.Перерисовать( '@HTMLTable' );
        }
    }

    /**
     * добавить уточнение к заявке - создаем невидимое подзадание на эту заявку
     */
    КП2(){ //+
        var статусЗаявки = this.СтатусЗаявки();
        if( this.СтатусЗаявки() > 0 ){
            Сообщить( "Эту заявку изменять нельзя" );
            return "";
        }
        var сейчас = new Date();
        var подзадание = new БазовыйОбъект( "ДО задания", -1, {'Подзадания' : -1,
            'Задание-Исполнитель' : this.Заявка.ТекущаяФаза.Исполнитель,
            'Задание-Карточка' : this.Заявка.НомерЗаписи,
            'Время выдачи' : сейчас,
            'Дата выдачи' : сейчас,
            'Отметки' : "Уточнение задания от " + сейчас.format('rusDateTime') + '\n',
            'Задание-Редактор' : НомерЗаписи( Пользователь() ),
            'ТипИсполнителя' : 5} ); // необработанное уточнение к заявке
        if( подзадание.Объект.Редактировать("Уточнение к заявке") ){
            подзадание.Внести();
            this.Запись['@HTMLTable'] = this.Заявка.ПолучитьИсториюHtml( -1, true );
                // todo До сообщение в чат
            //ОтправитьСообщениеИзДО( 6, обПодзадание, 0, "Уточнение задания" );
            new кМессенджер( 6, this.Заявка, подзадание ).Отправить( 0, null, "Уточнение задания",
                "Произошло изменение заявки, Необходимо выбрать действие." );
        }
    }
    // не нашел это для заявки
    /*КП3(){
        var об = ПолучитьВыборку( "Карточка документа Задания" );
        ПрочитатьЗаписьТаблицы( об, Параметры[0] );
        об.Редактировать( "Задание по документам" );
    }*/

    /**
     * редактировать расписание
     */
    КП4(){
        // todo праваДО
        //if( ПроверкаПравСотрудника(НомерЗаписи(Пользователь()), "Менеджер") )
        //{
        var элРасписание = View( this.ИмяДиалога, "@Часы по карточке фильтр" );
        элРасписание.Запрещен = false;
        this.Перерисовать( "@Часы по карточке фильтр" );
        //} else
        //ВсплывающееОкно( "У Вас нет прав на изменение расписания. Только мененджеры могут редактировать расписание", this.ИмяДиалога );
    }

    /**
     * удаление дополнения к заявке
     */
    УдалитьДополнение( параметры ){ //+
        var кУдалить = Command( 'DELETE FROM ~ДО задания~ WHERE ROW_ID=:1; ' +
            'DELETE ~ДО хранилище~ FROM ~ДО внешние документы~ doc ' +
            'WHERE [Хранилище-Файл]=doc.ROW_ID AND doc.[Файл-Задание]=:2 AND doc.Признаки&1 = 1; ' +
            'DELETE FROM ~ДО внешние документы~ WHERE [Файл-Задание]=:3 AND Признаки&1 = 1;', 1, "id1,S,id2,S,id3,S" );
        кУдалить.Выполнить( Number(параметры[0]), Number(параметры[0]), Number(параметры[0]) );
        кУдалить.Завершить();
        this.Запись['@HTMLTable'] = this.Заявка.ПолучитьИсториюHtml( -1, true );
        ПеренабратьВыборку( "Карточка документа Внешние документы" );
    }
    /**
     * Отмена задания - по кнопке из истории работ карточки
     */
    ОтменитьЗадание( параметры ){
        var завершитьДо = new Date();
        var резСпросить = Спросить( "На какое число изменить дату завершения работы:", завершитьДо );
        if( !резСпросить ) return 1;
        завершитьДо = резСпросить[0];
        var текРабота = new кРабота( Number(параметры[0]) );
        if( текРабота.ЕстьОтмеченныеЧасы() ){
            Сообщить( "Отмена работы невозможна, есть отмеченные часы" );
            return 1;
        }
        if( текРабота.Отменить(завершитьДо) ) {
            this.Запись['@HTMLTable'] = this.Заявка.ПолучитьИсториюHtml( -1, true );
            this.Перерисовать( '@HTMLTable' );
        }
    }
    /**
     * определяет задолженность плательщика по договору, записывает его в конфигурацию
     * @returns {*} - объект, описывающий долг по договору
     */
    ЗадолженностьПлательщика(){
        var долг = { 'Текущий' : 0,
            'Сопровождение' : 0,
            'Общий' : 0
        }
        if( this.Заявка.Договор.НомерЗаписи == -1 ) return долг;

        var зДоговоры = Query( 'SELECT ROW_ID FROM ~Договор~ WHERE [Плательщик]=:1', 500, "P1,S" );

        var мДоговоры = [];
        var стрДоговоры = '';
        зДоговоры.УстановитьПараметры( this.Заявка.Договор.Объект.Плательщик );
        while( зДоговоры.Следующий() ){
            мДоговоры.push( зДоговоры.ROW_ID );
            стрДоговоры += "," + зДоговоры.ROW_ID;
        }
        стрДоговоры = стрДоговоры.substr( 1 );
            // расчитываем сальдо всех договоров плательщика
        var датаРасчета = new Date().НачалоМесяца();
        for( let договор of мДоговоры ) {
            new СальдоДоговора( this.Заявка.Договор.НомерЗаписи, 1 ).Рассчитать( датаРасчета, true );
        }

        // todo хранить информацию прямо на договоре???
        var зСальдо = Query( 'SELECT sd.[Сумма], doc.[Дата], sd.[Сальдо-Договор], dog.Тема ' +
            'FROM ~Сальдо договора~ sd ' +
            '     JOIN ~Договор~ dog on sd.[Сальдо-Договор]=dog.row_id ' +
            '     JOIN ~Документ~ doc on [Платеж-Сальдо]=-1 and [Счет-Сальдо] = doc.row_id ' +
            'WHERE [Сальдо-Договор] in (' + стрДоговоры + ') AND [Месяц]=:1', 500, "month,D" );

        зСальдо.УстановитьПараметры( датаРасчета );
        var текДата = new Date();
        while( зСальдо.Следующий() ){
            if( (текДата.getDate() <= 20 && зСальдо.Дата < текДата.СледующийМесяц(-1), 1 ) ||
               (текДата.getDate() >  20 && зСальдо.Дата < текДата.НачалоМесяца()) ){
                долг.Общий += зСальдо.Сумма;
                if( this.Заявка.Договор.КатегорияАналитики(зСальдо.Тема, 0 ) == 'КСопровождение' ) долг.Сопровождение += зСальдо.Сумма;
                if( зСальдо['Сальдо-Договор'] == this.Заявка.Договор.НомерЗаписи ) долг.Текущий += зСальдо.Сумма;
            }
        }
        // todo надо оставить в заявке, использовать оттуда
        мКонфигурация.ЗадолженностьПлательщика = {
            'Долг' : долг,
            'Номер' : this.Заявка.Договор.Объект.Номер,
            'Тема' : this.Заявка.Договор.Объект.Тема,
            'Начало' : this.Заявка.Договор.Объект['Начало договора']
        };
        return долг;
    }

    /**
     * Расчитывает и обновляет информацию о перелимите по договору заявки
     * @returns {number} - значение перелимита по договору
     */
    ПолучитьПерелимит(){
        var текМесяц = new Date().НачалоМесяца();
        if( this.Заявка.Договор.НомерЗаписи == -1 || РабМес() != текМесяц ) return 0;

        // Запрос для перебора заявок по договору с планом часов по ним
        var зЗаявкиДог = Query( 'SELECT ROW_ID, [ПланЧасов], [Дата создания] ' +
            'FROM ~ДО карточки~ WHERE [Карточка-Договор] = :1', 100, "DogID,S" );

        var перелимит = 0, всегоЧасов = 0, кОплате = 0, планРабот = 0;
        var годовойДоговор = false, месячныйДоговор = false;

        var датаНачДог  = this.Заявка.Договор.Объект['Начало договора'].isEmpty() ? new Date( 1900, 0, 1 ) : this.Заявка.Договор.Объект['Начало договора'];
        var датаКнцДог  = this.Заявка.Договор.Объект['Окончание'].isEmpty() ? new Date(2045, 4, 9 ) : this.Заявка.Договор.Объект['Окончание'];
        var датаРастДог = this.Заявка.Договор.Объект['Дата расторжения'].isEmpty() ? new Date(2045, 4, 9 ) : this.Заявка.Договор.Объект['Дата расторжения'];
        var дТема = this.Заявка.Договор.Объект.Тема;
            // Проверяем тему договора
        if( дТема == "СКА" || дТема == "СЭА" || дТема == "СУА" ) {
            месячныйДоговор = true;
        } else if( дТема == "СКК" || дТема == "СКД" ) {
            годовойДоговор = true;
        }
        // в рабочем месяце срок окончания договора еще не наступил
        if( датаКнцДог > текМесяц && датаРастДог > текМесяц ) { // дата расторжения договора не указана или еще не наступила
            if( месячныйДоговор || годовойДоговор ) { // тогда считаем перелимит, иначе он останется равен 0
                // Определяем количество абонентских часов по договору
                // берем значение абонентских часов в зависимости от открытого месяца
                var зАбонЧасы = BufferedReader( 'SELECT sv.[Значение] ' +
                    'FROM ~Свойства~ sv ' +
                    "     JOIN ~Виды параметров~ type ON sv.[Виды-Параметры]=type.ROW_ID AND type.[Название]='АБОН_ЧАСЫ' " +
                    "WHERE sv.[Параметры-Договор] = :1 AND sv.[ДатКнц] >= :2 and sv.[ДатНач] <= :3", 1000, "DogID,S,d1,D,d2,D" );
                зАбонЧасы.УстановитьПараметры( this.Заявка.Договор.НомерЗаписи, текМесяц, текМесяц.ПоследнееЧисло() );
                if( зАбонЧасы.Следующий() ) всегоЧасов = Number( зАбонЧасы.Значение );

                // подсчитываем сумму отработанных часов (к оплате) по данному договору (из расписания)
                var зЧасыКОплате = Query( 'SELECT DATEPART(hour, ch.[Время к оплате]) hours, ' +
                    '   DATEPART(minute, ch.[Время к оплате]) minutes, ch.[Дата ввода] ' +
                    'FROM ~ДО часы~ ch ' +
                    '     JOIN ~ДО задания~ task ON ch.[Часы-Задание] = task.ROW_ID ' +
                    '     JOIN ~ДО карточки~ card ON task.[Задание-Карточка] = card.ROW_ID' +
                    'WHERE card.[Карточка-Договор]=:1', 500, "DogID,S" );
                зЧасыКОплате.УстановитьПараметры( this.Заявка.Договор.НомерЗаписи );
                while( зЧасыКОплате.Следующий() ){
                    // суммируем в зависимости от срока действия договора
                    if( месячныйДоговор ){ // считаем только часы в расписании за рабочий месяц
                        if( зЧасыКОплате['Дата ввода'] >= текМесяц && зЧасыКОплате['Дата ввода'] <= текМесяц.ПоследнееЧисло() )
                            кОплате += ((60*зЧасыКОплате.hours + зЧасыКОплате.minutes)/60).toFixed(3);
                    } else if( годовойДоговор ) { // считаем часы в расписании с начала срока действия договора до даты его окончания
                        if( зЧасыКОплате['Дата ввода'] >= датаНачДог && зЧасыКОплате['Дата ввода'] <= датаКнцДог )
                            кОплате += ((60*зЧасыКОплате.hours + зЧасыКОплате.minutes)/60).toFixed(3);
                    }
                }

                // Запрос для проверки отработанного по заявке времени
                var зЧасыПоЗаявке = Query( 'SELECT DATEPART(hour, hour.[Время к оплате]) AS h, ' +
                    '   DATEPART(minute, hour.[Время к оплате]) AS m, hour.[Дата ввода] AS dv, card.[Карточка-Договор] [Договор] ' +
                    'FROM ~ДО часы~ hour ' +
                    '   JOIN ~ДО задания~ task ON hour.[Часы-Задание] = task.ROW_ID ' +
                    '   JOIN ~ДО карточки~ card ON task.[Задание-Карточка] = card.ROW_ID' +
                    'WHERE card.ROW_ID=:1', 1000, "KartID,S" );
                зЗаявкиДог.УстановитьПараметры( this.Заявка.Договор.НомерЗаписи );
                while( зЗаявкиДог.Следующий() ){

                    if( месячныйДоговор && зЗаявкиДог['Дата создания'] >= текМесяц && зЗаявкиДог['Дата создания'] <= текМесяц.ПоследнееЧисло() ||
                        (годовойДоговор && зЗаявкиДог['Дата создания'] >= датаНачДог && зЗаявкиДог['Дата создания'] <= датаКнцДог && зЗаявкиДог['Дата создания'] <= текМесяц.ПоследнееЧисло())){
                        var добВремя = зЗаявкиДог.ПланЧасов, планВремя = зЗаявкиДог.ПланЧасов;
                        // Фактически отработанное время может пересекаться с запланированным в распределенных заявках и попасть в сумму два раза.
                        // Проверяем, что запланированное по заявке время не меньше, чем уже фактически по ней отработано.
                        // если отработано больше, чем запланировано, учтем эту сумму вместо плана часов в заявке.
                        // Иначе учтем только остаток плана за минусом отработанного факта
                        зЧасыПоЗаявке.УстановитьПараметры( зЗаявкиДог.ROW_ID );
                        var часов = 0;
                        while( зЧасыПоЗаявке.Следующий() ) {
                            // суммируем в зависимости от срока действия договора
                            if( месячныйДоговор ) { // считаем часы в расписании только за рабочий месяц
                                if( зЧасыПоЗаявке.dv >= текМесяц && зЧасыПоЗаявке.dv <= текМесяц.ПоследнееЧисло() )
                                    часов += ((60 * зЧасыПоЗаявке.h + зЧасыПоЗаявке.m) / 60).toFixed( 3 );
                            } else if( годовойДоговор ) { // считаем часы в расписании с начала срока действия договора до даты его окончания
                                if( зЧасыПоЗаявке.dv >= датаНачДог && зЧасыПоЗаявке.dv <= датаКнцДог && зЧасыПоЗаявке.dv <= текМесяц.ПоследнееЧисло() )
                                    часов += ((60 * зЧасыПоЗаявке.h + зЧасыПоЗаявке.m) / 60).toFixed( 3 );
                            }
                        }
                        // По данной заявке уже есть отмеченные часы в расписании к оплате, они были посчитаны в переменной кОплате
                        if( часов > 0 && планВремя - часов > 0 ) планРабот += планВремя - часов;
                    }
                } // перебор заявок по договору

                перелимит = кОплате + планРабот - всегоЧасов; // результат в часах
                перелимит = перелимит < 0 ? 0 : перелимит;
            }
        }

        // Команда для обновления значения перелимита в договоре
        var комОбновитьПерелимит = Command( 'UPDATE ~Договор~ SET [Перелимит] = :1 ' +
            'WHERE ROW_ID = :2', 1, "znach,N,id_dog,S" );
        комОбновитьПерелимит.Выполнить( перелимит, this.Заявка.Договор.НомерЗаписи );
        комОбновитьПерелимит.Завершить();
        return перелимит;
    }

    /**
     * возвращает минимальный статус завершения работ в заявке
     * @returns {number} - статус заявершения заявки
     */
    СтатусЗаявки(){
        var зСтатуса = Query( 'SELECT TOP 1 [Статус завершения] [Статус] ' +
            'FROM ~ДО задания~ ' +
            'WHERE [Задание-Карточка] = :1 AND ТипИсполнителя IN(0,1) ' +
            'ORDER BY [Статус завершения]', 10, "doc,S" );
        зСтатуса.УстановитьПараметры( this.Заявка.НомерЗаписи );
        зСтатуса.Статус = 999;
        зСтатуса.Следующий();
        if( зСтатуса.Статус != 1 && this.Запись.РасчТипИсполнителя == 1 ) зСтатуса.Статус = 98;

        return зСтатуса.Статус;
    }
    static ФильтрКонтактовЗаказчика(){
        return 't1.[Организация-Частные лица]=:1';
    }
}

/**
 * @extends Карточка_документа_Создание
 * @class класс Карточка_документа_Создание - обработчик окна диалога 'Карточка документа Создание' создания карточки документа
 */
class $Карточка_документа_Создание extends Карточка_документа_Создание {
    constructor() {
        super();
    }
    Инициализация() {
        super.Инициализация();
        this.ИнициализацияПочта();
    }
    ИнициализацияПочта(){
        if( !this.Запись.Письмо || this.Запись.Письмо <= 0 ) return false;
        // если договор однозначно можно определить то выставим его
        if( this.СписокДоговоров.Названия.length == 1 ){

            this.Запись["@БыстрДогОрг"] = this.СписокДоговоров.Названия[0];
            this.ЭлДоговор.Фильтр( this.СписокДоговоров.Названия[0] );
            // устанавливаем дату завершения по договору

            this.Запись['Завершить до'] = this.Заявка.ЗавершитьДо( this.Запись["@БыстрДогОрг"] );
            // устанавливаем плательщика и договор на заявку
            this.Запись['Карточка-Договор'] = this.СписокДоговоров.Ключи[0];
            this.Договор.Прочитать( this.СписокДоговоров.Ключи[0] );
            if( this.Запись.Номер <= 0 ) this.Запись.Номер = this.Заявка.НовыйНомер();
        }
        this.УстановитьЗаголовок();
        this.Запись["Автор"] = НомерЗаписи( Пользователь() );

        var зКВлж = BufferedReader( "SELECT ROW_ID FROM ~Сообщения Вложения~ " +
            "WHERE [Вложение-Заголовок]=:1 AND (Тип=0 OR (Тип=4 AND Письмо=-10))", 100, "mail,S" );
        зКВлж.УстановитьПараметры( this.Запись.Письмо );
        var имяДиалога = "";
        if( this.Заявка.НомерЗаписи == -1 ){
            имяДиалога = "Карточка документа Создание";
            this.Заявка.ПрочитатьИзКонтекста( this.Запись );
            this.Заявка.НомерЗаписи = СохранитьЗапись( this.Запись );
            if( зКВлж.Количество() ) this.Запись.Примечание += `\n\nК заявке приложены файлы сообщения от `+ new Date().format('rusDateDashed') + " " + new Date().format('HH:mm');
        } else {
            имяДиалога = "Карточка документа";
        }
        var элТабФайлы = View( имяДиалога, "Файлы" );
        элТабФайлы.Заголовок = "Файлы (" + зКВлж.Количество().toString() + ")";

         // добавим все вложения письма к заявке
        this.Заявка.ДобавитьФайлыИзСообщения( this.Запись.Письмо );
        return true;
    }
    Сохранение(){
        // в признаке на маршруте стоит "Отправлять уведомление о регистрации заявки"
        if( this.Запись.Признаки&1 == 1 ){
            var шаблонУведомления = this.ШаблонУведомленияРегистрацииЗаявки();
            this.Заявка.ОтправитьУведомление( this.Запись['Карточка-Организация'], шаблонУведомления["текст"], "",
                шаблонУведомления["тема"], "", 0 );
        }
    }
    /*УстановитьЗаголовок(){
        Сообщить( 22 );
        УстановитьЗаголовок( this.ИмяДиалога, "Заявка №" + this.Запись.Номер +
            " от: " + this.Запись['Дата создания'].format('rusDate') + " " + this.Запись['Время создания'].format(':mm'));
    }*/
    ШаблонУведомленияРегистрацииЗаявки(){
        var шаблон = {};
        var номерЗаявки = this.Заявка.Объект.Номер + (this.Заявка.Объект.СтороннийНомер ? " / " + this.Заявка.Объект.СтороннийНомер : "" );
        var договор = this.Заявка.Договор.НомерЗаписи == -1 ? "" :
            this.Заявка.Договор.Объект.Номер + "/" + this.Заявка.Договор.Объект.Тема;
        шаблон["тема"] = "Стек - зарегистрирована заявка " + номерЗаявки + " от " +
            this.Заявка.Объект['Дата создания'].format('rusDate') + " по договору " + договор;
        шаблон["текст"] = 'Ваша заявка успешно зарегистрирована в документооброте под номером ' + номерЗаявки +
            " и ожидает распределения на специалиста.\n" +
            "Текст заявки:\n" + this.Заявка.Объект.Примечание + "\n\n" + "С уважением,\nотдел по работе с клиентами\nООО Компания \"Стек\"\n(4852) 59-45-00";
        шаблон["html"] = '<div>Ваша заявка успешно зарегистрирована в документооброте под номером ' + номерЗаявки + " и ожидает распределения на специалиста.</div>" +
            "<div>Текст заявки:</div>" + this.Заявка.Объект.Примечание + "<br><br>" +
            "<hr><div>С уважением,</div><div>отдел по работе с клиентами</div><div>ООО Компания &quot;Стек&quot;</div><div>(4852) 59-45-00</div>";
        return шаблон;
    }
}

/**
 * @extends _Контакты
 * @class класс $_Контакты - обработчик наборной выборки @Контакты
 */
class $_Контакты extends _Контакты {
    constructor() {
        super( arguments[0] ? arguments[0] : '@Контакты' );
    }
    Удаление(){
        if( this.Запись.ФИО == "Основной телефон организации" ){
            Сообщить( "Удаление этой записи невозможно отсюда", "ERROR_TITLE,OK" );
            return 1;
        }
    }
}

/**
 * @extends $_Контакты
 * @class класс _КонтактыЗак - обработчик наборной выборки @КонтактыЗак
 */
class _КонтактыЗак extends $_Контакты {
    constructor() {
        super( "@КонтактыЗак" );
    }
    Инициализация(){
        // todo проверить в заданиях сотрудника
        Сообщить( this.Источник.Окно.Имя );
        this.Запись['Организация-Частные лица'] = this.Источник.Окно.Обработчик.Запись['Карточка-Организация'];
    }
}

/**
 * @class класс $Контакт_организации - обработчик окна диалога 'Контакт организации'
 * @extends Контакт_организации
 */
class $Контакт_организации extends Контакт_организации {
    constructor() {
        super();
    }
    Инициализация(){
        super.Инициализация();
        if( this.Запись.ФИО == "Основной телефон организации" ){
            this.Запись.Примечание = "<не редактируется, только через справочник организаций!>";
            this.Источник.Окно.Запрещен = true;
        }
    }
}

/**
 * @extends БазоваяВыборка
 * @class класс _Организация_Значения_параметров - обработчик наборной выборки '@Организация Значения параметров'
 */
class _Организация_Значения_параметров extends БазоваяВыборка {
    constructor() {
        super( arguments[0] ? arguments[0] : '@Организация Значения параметров' );

        this.Создание = 0;
        this.ВедетИсторию = false;
        this.СтароеЗначение = '';
    }
    Инициализация(){
        if( НомерЗаписи(this.Запись) == -1 ){
            // Нужно только когда выбор не в карточки Организация
            try {
                this.Запись['Орг-Параметры'] = this.Источник.Окно.Обработчик.Запись["Грузополучатель"];
            }
            catch(er){

            }
            var мВыбора = ВыборВОкне( "Параметры организаций" );
            for( let нз in мВыбора ) {
                this.Запись['Параметр-Значения'] = Number( нз );
                break;
            }
            if( this.Запись['Параметр-Значения'] <= 0 ) return 1;
        }
        this.Запись.ДатНач = new Date();
        this.Запись['Значение-Автор'] = НомерЗаписи( Пользователь() );
    }
    Выбор_диалога(){
        var имяДиалога = "Параметр (правка)";
        switch( this.Запись['Параметр-Значения>Имя'] ){
            case "ВЕРСИЯ_КОМПЛЕКСА":
            case "ВЕРСИЯ_КОМПЛЕКСА_ДОП":
                имяДиалога = "Версия комплекса Стек";
                break;
            case "ПАПКА_FTP":
                имяДиалога = "Ftp-папка";
                break;
            case "СПЕЦИФИКА":
                имяДиалога = "Специфика организации";
                break;
            case "УВЕДЭЛПОЧТА":
                имяДиалога = "Уведомления эл. почты";
                break;
            case "ЭДО":
                имяДиалога = "Подключение к электронному документообороту";
                break;
        }
            // для параметров с историей ставим тип=2, т.к. в дальнейшем при сохранении будет создана новая запись
        if( имяДиалога == "Параметр (правка)" || имяДиалога == "Версия комплекса Стек" ) {
            this.СтароеЗначение = this.Запись.Значение;
            this.ВедетИсторию = true;
        }
        return имяДиалога;
    }
    Удаление(){
        this.Создание = 2;
            // при удалении параметра удаляем и его историю
        var кИстория = Command( 'DELETE ~Значения параметров~ ' +
            'WHERE [Орг-Параметры]=:1 AND [Параметр-Значения]=:2 AND Тип=2', 1, "org,S,param,S" );
        кИстория.Выполнить( this.Запись["Орг-Параметры"], this.Запись["Параметр-Значения"] );
        кИстория.Завершить();
    }
    Копирование(){
        if( this.ВедетИсторию ) return 1;
    }
    Создана(){
        this.Создание = 1;
    }
    Модифицирована(){
        if( this.Создание == 0 && this.ВедетИсторию ) { // при редактировании существующей записи вносим новую для сохранеия истории параметра
            var оЗначение = new БазовыйОбъект( "Значения параметров", -1, this.Запись );
            оЗначение.ПрочитатьИзКонтекста( {'ДатНач' : new Date(),
                'Значение-Автор' : НомерЗаписи( Пользователь() )} );
            оЗначение.Внести();
               // восстанвливаем старое значение записи истории параметра
            this.Запись.Значение = this.СтароеЗначение;
            this.Запись.Тип = 2; // это запись истории параметра
            СохранитьЗапись( this.Запись );
            this.Перенабрать();
        } else if( this.Создание == 1 ) { // заносим в историю все предыдущие значения этого параметра
            var кИстория = Command( 'UPDATE ~Значения параметров~ ' +
                'SET Тип = 2 ' +
                'WHERE [Орг-Параметры]=:1 AND [Параметр-Значения]=:2 AND ROW_ID<>:3 AND Тип<>2', 1, "org,S,param,S,id,S" );
            кИстория.Выполнить( this.Запись["Орг-Параметры"], this.Запись["Параметр-Значения"], НомерЗаписи(this.Запись) );
            кИстория.Завершить();
            this.Перенабрать();
        }
    }
    КП0(){
        if( this.Запись.Редактировать( "&Параметр (правка)") ) СохранитьЗапись( this.Запись );
        return 1;
    }
}

/**
 * @extends БазоваяВыборка
 * @class класс _Организация_Значения_параметров - обработчик наборной выборки '@Организация Значения параметров'
 */
class _Организация_Значения_параметровЗак extends _Организация_Значения_параметров {
    constructor() {
        super( '@Организация Значения параметровЗак' );
    }
    Инициализация() {
        if( super.Инициализация() == 0 ) {
            this.Запись['Орг-Параметры'] = this.Источник.Окно.Обработчик.Запись["Карточка-Организация"];
        } else {
            return 1;
        }
    }
}

/**
 * @extends БазовыйДиалог
 * @class Параметр_правка - обработчик окна диалога 'Параметр (правка)'
 */
class Параметр_правка extends БазовыйДиалог {
    constructor() {
        super( arguments[0] ? arguments[0] : "Параметр (правка)" );
    }
    Инициализация(){
        super.Инициализация();
        УстановитьПараметрыФильтра0( this.ИмяДиалога, "Значения параметров История", "t1.[Параметр-Значения]=:1 AND t1.Тип=2", "S",
            this.Запись["Параметр-Значения"] );
    }
}

/**
 * @extends Параметр_правка
 * @class Версия_комплекса_Стек - обработчик окна диалога 'Версия комплекса Стек'
 */
class Версия_комплекса_Стек extends Параметр_правка {
    constructor() {
        super( "Версия комплекса Стек" );
    }
    Инициализация(){
        super.Инициализация();
        if( !this.НоваяЗапись ) {
                // ищем версию
            var значение = this.Запись.Значение.toLowerCase();
            var мВерсия = значение.match( /версия [\d\.]+/i );
            if( мВерсия ) this.Запись['@Версия'] = мВерсия[0].substr( 6 );
               // ищем сборку
            мВерсия = значение.match( /cборка [\d]+/i );
            if( мВерсия ) this.Запись['@Сборка'] = мВерсия[0].substr( 6 );
                // выставялем тип версии
            if( значение.indexOf("sql xml birt") != -1 ){
                this.Запись['@Тип'] = 2;
            } else if( значение.indexOf("sql xml") != -1 ) {
                this.Запись['@Тип'] = 1;
            } else if( значение.indexOf("sql") != -1 ) {
                this.Запись['@Тип'] = 0;
            } else if( значение.indexOf("pervasive") != -1 ) {
                this.Запись['@Тип'] = 3;
            }else if( значение.indexOf("облако") ) {
                this.Запись['@Тип'] = 4;
            } else {
                this.Запись['@Тип'] = 5;
            }
        }
    }
    Сохранение(){
        if( this.Запись['@Версия'] ){
            this.Запись.Значение = "Версия " + this.Запись['@Версия'] +
                (this.Запись['@Сборка'] != 0 ? "; cборка " + this.Запись['@Сборка'] : "") +
                (this.Запись['@Тип'] != "Другая" ? " (" + this.Запись['@Тип'] + ")" : " ");
        }
    }
}

/**
 * @extends Параметр_правка
 * @class Ftp_папка - обработчик окна диалога 'Ftp-папка'
 */
class Ftp_папка extends Параметр_правка {
    constructor() {
        super( "Ftp-папка" );
    }

    /**
     * открыть папку в проводнике
     */
    КП0(){
        if( this.Запись.Значение ){
            Запустить( "net use \\satellite 450194 /user:upload_user /persistent:no" );
            Запустить( "explorer " + this.Запись.Значение );
        }
    }

    /**
     * открыть диалог выбора каталога
     */
    КП1(){
        Запустить( "net use \\satellite 450194 /user:upload_user /persistent:no" );
        var каталог = ВыбратьКаталог( "Выберите путь к папке на FTP", "\\\\satellite\\ftp_upload" );
        this.Запись.Значение = каталог.replace( "CLIENT:", "" );
    }
}

/**
 * @extends БазоваяВыборка
 * @class класс Значения_параметров_История - обработчик наборной выборки 'Значения параметров История'
 */
class Значения_параметров_История extends БазоваяВыборка {
    constructor() {
        super( 'Значения параметров История' );
    }
    Открытие(){
        Сообщить( "Название: " + this.Запись['Параметр-Значения>Название'] + "\nЗначение: " + this.Запись.Значение );
    }
}

/**
 * @class класс $ДО_карточки_Этап - обработчик окна диалога 'ДО карточки Этап'
 * @extends ДО_карточки_Этап
 */
class $ДО_карточки_Этап extends ДО_карточки_Этап {
    constructor() {
        super( arguments[0] );
    }
    Инициализация(){
        super.Инициализация( arguments[0] );
        this.Запись['@Флаги'] = (this.Запись.Флаги & 4) == 4;
    }
    Модальность(){
        this.Запись['@Флаги'] = (this.Запись.Флаги & 4) == 4;
    }
    Сохранение(){
        if( this.Запись["@Флаги"] ) {// разрешаем пользователям SD создавать заявки в этой папке
            this.Запись.Флаги |= 4;
        } else {
            this.Запись.Флаги &= ~4;
        }
    }
}

/**
 * @class класс ДО_карточки_Проект - обработчик окна диалога 'ДО карточки Проект'
 * @extends $ДО_карточки_Этап
 */
class $ДО_карточки_Проект extends $ДО_карточки_Этап {
    constructor() {
        super('ДО карточки Проект');
    }
    Инициализация(){
        super.Инициализация( true );
    }
}
/**
 * Заплатка Обработчика окна ввода часов по заявке
 * @class $ЗаданияПоДокументам_часы
 * @extends ЗаданияПоДокументам_часы
 */
class $ЗаданияПоДокументам_часы extends ЗаданияПоДокументам_часы {
    constructor() {
        super( "Задания по документам - часы" );
        this.зВремени = Query( `SELECT sum(60*datepart(hour, h.[Время работы]) + datepart(minute, h.[Время работы]))/60 [ЧасыРаботы],
                                        sum(60*datepart(hour, h.[Время работы]) + datepart(minute, h.[Время работы]))%60 [МинутыРаботы],
                                        SUM(60*DATEPART(HOUR, h.[Время к оплате]) + DATEPART(MINUTE, h.[Время к оплате]))/60 [ОплВремяЧасы],
                                        SUM(60*DATEPART(HOUR, h.[Время к оплате]) + DATEPART(MINUTE, h.[Время к оплате]))% 60 [ОплВремяМинуты]
                                   FROM ~ДО часы~ h
                             INNER JOIN ~ДО задания~ zad ON zad.[row_id]=h.[Часы-Задание]
                                  WHERE h.[Дата ввода]=:1 and zad.[Задание-Исполнитель]=(SELECT [Задание-Исполнитель] FROM ~ДО задания~ WHERE [row_id]=:2)
                                 `, 100, "Dat,D,Sotr,S" );
    }

    Инициализация() {
        super.Инициализация();
        this.элКатегория = ComboBox( this.ИмяДиалога, "@Категория" );
        this.длгИсточник = View( ИмяТекущегоОкна(), ИмяТекущегоОкна() );
        if( this.НоваяЗапись ) {
            this.Запись["Дата ввода"] = new Date();
            if( this.длгИсточник.Обработчик.НомерЗаписи ) {
                this.Запись['Часы-Задание'] = this.длгИсточник.Обработчик.НомерЗаписи;
                this.Запись.Примечание = this.длгИсточник.Обработчик.Комментарий;
            }
        }
        if( НомерЗаписи( this.Запись ) == -1 && this.Запись['Часы-Категория>Категория'].indexOf( "Ошибки" ) > 0 ) {
            this.Запись["Часы-Категория"] = -1;
        } else {
            this.элКатегория.Текст = this.Запись["@Категория"] = this.Запись['Часы-Категория>Категория'];
        }
        if( !this.Запись['Время к оплате'] ) {
            this.Запись['Время к оплате'] = 0;
        }
        if( !this.Запись['Время работы'] ) {
            this.Запись['Время работы'] = 0;
        }
        this.ОтработаноЧасы = 0;
        this.ОтработаноМинуты = 0;
        this.ОплаченоЧасы = 0;
        this.ОплаченоМинуты = 0;
        this.Запись["@ОтрабВремя"] = "00:00";
        this.зВремени.УстановитьПараметры( this.Запись['Дата ввода'], ПрочитатьПолеСвязи( this.Запись, "Часы-Задание" ) );
        while( this.зВремени.Следующий() ) {
            this.Запись["@ОтрабВремя"] = this.зВремени.ЧасыРаботы + ":" + this.зВремени.МинутыРаботы;
            this.ОтработаноЧасы = this.зВремени.ЧасыРаботы;
            this.ОтработаноМинуты = this.зВремени.МинутыРаботы;
            this.ОплаченоЧасы = this.зВремени.ОплВремяЧасы;
            this.ОплаченоМинуты = this.зВремени.ОплВремяМинуты;
        }

        this.НачВремяРаботы = this.Запись['Время работы'].isEmpty() ? 0 : this.Запись['Время работы'].ПолноеКоличествоЧасов();
        this.НачВремяКОплате = this.Запись['Время к оплате'].isEmpty() ? 0 : this.Запись['Время к оплате'].ПолноеКоличествоЧасов();
        this.НачДатаВвода = this.Запись['Дата ввода'];
        var зТема = Query( `SELECT dog.[Тема], org.[Название]
         FROM ~ДО Задания~ zd
         INNER JOIN ~ДО Карточки~ ka on zd.[Задание-Карточка] = ka.[ROW_ID]
         INNER JOIN ~Договор~ dog on ka.[Карточка-Договор] = dog.[Row_ID]
         INNER JOIN ~Организации~ org on dog.[Грузополучатель] = org.[Row_ID]
         WHERE zd.[ROW_ID]= :1
         `, 500, "Zad,S" );
        this.ОргДог = "";
        зТема.УстановитьПараметры( ПрочитатьПолеСвязи( this.Запись, "Часы-Задание" ) );
        this.ТемаДог = "";
        if( зТема.Следующий() ) {
            this.ТемаДог = зТема.Тема;
            this.ОргДог = зТема.Название;
        }
        this.катДогИД = this.КатегорияДоговора( this.ТемаДог, 1 );
        this.катДог = this.КатегорияДоговора( this.ТемаДог, 0 );
        if( this.катДогИД != -1 ) {
            var мНазваний = [];
            var мКлючей = [];
            var инд = 100;
            var стрВидыРаб = `SELECT kjob.Категория, kjob.ROW_ID
         FROM ~ДО наборы категорий работ~ skat
         JOIN ~ДО категории работ~ kjob ON skat.[Категорий набор-Категория]=kjob.ROW_ID
         WHERE skat.[Категорий набор-Аналитики]=:1`;
            if( this.катДог == "ККарьера" && this.Запись['Часы-Задание>Отметки'] &&
                this.Запись["'Часы-Задание>Отметки'"].indexOf( "На вас отмечена ошибка" ) >= 0 ) {
                стрВидыРаб += " AND (kjob.Категория like 'Профрост' OR kjob.Категория like 'Опыт')";
            }
            стрВидыРаб += "\nORDER BY kjob.Категория";
            var зВидыРаб = Query( стрВидыРаб, 100, "kdog,S" );
            зВидыРаб.УстановитьПараметры( this.катДогИД );
            var инд = 0;
            while( зВидыРаб.Следующий() ) {
                мНазваний[инд] = зВидыРаб.Категория;
                мКлючей[инд++] = зВидыРаб.ROW_ID;
            }
            if( !мНазваний.length ) {
                Сообщить( "Для категории договора " + this.катДог + " не задано ни одного вида работы" );
            }
            this.элКатегория.СписокСКлючами( мКлючей, мНазваний );
        } else {
            Сообщить( "Для договора " + this.ТемаДог + " не определена категория." );
        }
        if( this.Запись["@Категория"].substr( 0, 6 ) == "Ошибки" || this.Запись["@Категория"] == "Политика" ) {
            this.Запись['Время к оплате'] = "00:00";
            this.ЗапретитьЭлементы( "Время к оплате" );
        } else {
            this.РазрешитьЭлементы( "Время к оплате" );
        }
    }

    Изменение( Поле ) {
        switch( Поле ) {
            /*
             case "Время к оплате":
             if( !this.Запись['Время работы'].isEmpty() ) {
             this.Запись['Время работы'] = this.Запись['Время к оплате'];
             }
             break;
             */
            case "Время работы":
                if( !this.Запись['Время к оплате'].isEmpty() ) {
                    if( this.Запись['@Категория'].substr( 0, 6 ) != "Ошибки" && this.Запись['@Категория'] != "Политика" )
                        this.Запись['Время к оплате'] = this.Запись['Время работы'];
                }
                break;
            case "Дата ввода":
                this.зВремени.УстановитьПараметры( this.Запись['Дата ввода'], ПрочитатьПолеСвязи( this.Запись, "Часы-Задание" ) );this.ОтработаноЧасы = 0;
                this.ОтработаноЧасы = 0;
                this.ОтработаноМинуты = 0;
                this.ОплаченоЧасы = 0;
                this.ОплаченоМинуты = 0;
                this.Запись["@ОтрабВремя"] = "00:00";
                while( this.зВремени.Следующий() ) {
                    this.Запись["@ОтрабВремя"] = this.зВремени.ЧасыРаботы + ":" + this.зВремени.МинутыРаботы;
                    this.ОтработаноЧасы = this.зВремени.ЧасыРаботы;
                    this.ОтработаноМинуты = this.зВремени.МинутыРаботы;
                    this.ОплаченоЧасы = this.зВремени.ОплВремяЧасы;
                    this.ОплаченоМинуты = this.зВремени.ОплВремяМинуты;
                }

                break;
            case "@Категория":
                if( this.Запись["@Категория"].substr( 0, 6 ) == "Ошибки" || this.Запись["@Категория"] == "Политика" ) {
                    this.Запись["Время к оплате"] = 0;
                    this.ЗапретитьЭлементы( "Время к оплате" );
                } else {
                    this.РазрешитьЭлементы( "Время к оплате" );
                }
                break;
        }
    }

    Сохранение() {
//Вводить и изменять за прошлые месяца нельзя, кроме как на Стек-Спорт, кроме как первого числа месяца
        //Но менеджерам можно.
        if( !ПраваСотрудниковДО.ПроверкаПравСотрудника( НомерЗаписи( Пользователь() ), "Менеджер" ) ) {
            if( this.катДог != "КИнсталляция" && this.катДог != "ККарьера" && this.катДог != "КОтдых" &&
                this.Запись['Дата ввода'] < new Date().СледующийМесяц( 0 ) && new Date().getDate() != 1 ) {
                Сообщить( "Счета за предыдущий месяц уже выставлены.\nВнимание, вопрос:\n Зачем нам теперь это время? :)" );
                return "Дата ввода";
            }
        }
        if( this.элКатегория.ИндексЭлемента < 0 ) { // категория работы не выбрана
            Сообщить( "Необходимо выбрать категорию работы!" );
            return "@Категория";
        }
        this.Запись['Часы-Категория'] = this.элКатегория.Значение();
        var отрабВремя = this.Запись['Время работы'].ПолноеКоличествоЧасов() - this.НачВремяРаботы;
        var оплВремя = this.Запись['Время к оплате'].ПолноеКоличествоЧасов() - this.НачВремяКОплате;
        var естьДопВр = 0;
        if( this.Запись['Время к оплате'] > this.Запись['Время работы'] ) {
            Сообщить( "Время к оплате клиенту не может превышать отработанное" );
            return "Время к оплате";
        }
        if( this.Запись["@Категория"] == "Политика" ) {
            if( !ДаНет( "Вы уверены , что вид работ \"Политика\"?\nСогласовано с директором или менеджерами??" ) ) {
                return "Время работы";
            }
        }

        if( this.ОтработаноЧасы + this.ОтработаноМинуты / 60 > 24 ||this.ОплаченоЧасы + this.ОплаченоМинуты / 60 > 24 ) {
            Сообщить( "Отработанное время в день не должно превышать 24 часа!" );
            return "Время работы";
        } else if( !new кРабочийКалендарь().ЭтоРабочийДень( this.Запись['Дата ввода'] ) ) { // в выходной день все часы выставляем как дополнительные
            if( ДаНет( "Работем в выходной день! Хотите выставить Отработанное время как дополнительные часы?" ) ) {
                естьДопВр = 2;
            } else {
                return "Время работы";
            }
        }
        this.Запись["Аналитика1"] = 0; // чтобы сбрасывалась старая аналитика, например при смене аккордных часов на обычные
        if( this.Запись["@Категория"].substr( 0, 6 ) == "Ошибки" ) {
            if( this.Запись["@Категория"] == "Ошибки сопровождения" || this.Запись["@Категория"] == "Ошибки внедрения" ) {
                var дОкновыборавиноватых = СоздатьДиалог( "Окно выбора виноватых" );
                дОкновыборавиноватых.Выполнить();
                if( !дОкновыборавиноватых.поз_в ) {
                    this.Запись["Аналитика1"] = 1;
                    УстановитьПолеСвязи( this.Запись, "Ошибка-Виновник", this.Запись["Часы-Задание>Задание-Исполнитель"] );
                } else {
                    this.Запись["Аналитика1"] = 0;
                    УстановитьПолеСвязи( this.Запись, "Ошибка-Виновник", дОкновыборавиноватых.поз_в );
                }
                if(дОкновыборавиноватых.поз_в != this.Запись['Часы-Задание>Задание-Исполнитель'] && дОкновыборавиноватых.поз_в > 0 ) {
                    // если отмечаем на кого-то - ему задание
                    var пСтрИспр = `На вас отмечена ошибка.\n Обнаружил ` + ФИО( Пользователь().ФИО ) + "\n Отмечено: " + this.Запись['Время работы'].format( "hh:mm" )
                        + "\n Примечание для клиента: " + this.Запись['Примечание'] + "\n Личный комментарий: " + this.Запись['Комментарий'];
                    пСтрИспр += `\n\nИсходный текст заявки: ` + this.длгИсточник.Примечание;
                    var нзДоговора = кЗаполнениеРасписанияСтек.ПолучитьДоговорСписанияЧасов( "СК" );
                    if( нзДоговора > 0 )
                        кЗаполнениеРасписанияСтек.СоздатьЗаявкуНаИсправление( дОкновыборавиноватых.поз_в, кЗаполнениеРасписанияСтек.ПозицияЗаявкиНаСтекДляУведомления( new Date(), нзДоговора ), пСтрИспр );
                }
            } else if( this.Запись["@Категория"] == "Ошибки инсталляции" ) {
                var рез = кЗаполнениеРасписанияСтек.СоздатьЗаявкуНаИсправление( 68, кЗаполнениеРасписанияСтек.ТекстЗаявкиОшибкиИнстал( Пользователь().ФИО, ПрочитатьПолеСвязи( this.Запись, "Часы-Задание" ),
                    this.Запись["Время работы"].ПолноеКоличествоЧасов(), this.Запись['Примечание'], this.Запись['Комментарий'] ) );
                if( !рез ) {
                    return "@Категория";
                }
            }
        }
        if( this.Запись['Время к оплате'] < this.Запись['Время работы'] && (this.Запись["@Категория"].substr( 0, 6 ) != "Ошибки" && this.Запись["@Категория"] != "Политика") ) {
            var резПоле = кЗаполнениеРасписанияСтек.СписатьЧасы( "Задания по документам - часы", this.катДог
                , this.Запись['Комментарий'], this.Запись['Примечание'], this.Запись['Часы-Задание>Задание-Исполнитель'],
                this.Запись['Дата ввода'], ПрочитатьПолеСвязи( this.Запись, "Часы-Задание" ), this.Запись['Время работы'], this.Запись['Время к оплате'], this.Запись['Часы-Задание>Отметки'],
                this.ОтработаноЧасы + this.ОтработаноМинуты / 60 + отрабВремя > 480, this.оргДог );
            if( резПоле != "" ) {
                return резПоле;
            }
            if( this.Запись['Время работы'].ПолноеКоличествоЧасов() - this.Запись['Время к оплате'].ПолноеКоличествоЧасов() < отрабВремя ) {
                отрабВремя -= this.Запись['Время работы'].ПолноеКоличествоЧасов() - this.Запись['Время к оплате'].ПолноеКоличествоЧасов();
            }
            this.Запись['Время работы'] = this.Запись['Время к оплате'];
            new БазоваяВыборка( "Задания по документам - часы" ).Перенабрать();
        }
        if( естьДопВр != 2 && this.ОтработаноЧасы + this.ОтработаноМинуты / 60 + отрабВремя > 8 && this.Запись.Аналитика1 % 4 < 2 && отрабВремя > 0 ) // время в день превышвет 8 часов, выставим как доп. время
        {
            if( this.Запись["@Категория"] == "Профрост" || this.ТемаДог == "СК" ) { // на профрост не отмечаем аккордные часы
                Сообщить( "Отработанное время в день не должно превышать 8 часов" );
                return "Время работы";
            } else if( ДаНет( "Отработанное время в день превышает 8 часов. Хотите выставить его как дополнительные часы?" ) ) {
                естьДопВр = 1;
            } else {
                return "Время работы";
            }
        }
        if( естьДопВр ) { // отмечаем время как дополнительные часы
// создаем запись с доп. часами
            if( естьДопВр == 1 && 8 - ( this.ОтработаноЧасы + this.ОтработаноМинуты/ 60 ) > 0 ) {
                this.Запись['Время к оплате'] = this.Запись['Время работы'] = 8 * 60 * 60 - this.ОтработаноЧасы * 60 * 60 - this.ОтработаноМинуты * 60 + this.НачВремяРаботы * 60 * 60;
                отрабВремя = отрабВремя * 60 * 60 - 8 * 60 * 60 + this.ОтработаноЧасы * 60 * 60 + this.ОтработаноМинуты * 60 ;
                оплВремя = отрабВремя;
                var оЧасы = Объект( "ДО часы" );
                УстановитьПолеСвязи( оЧасы, "Часы-Задание", ПрочитатьПолеСвязи( this.Запись, "Часы-Задание" ) );
                оЧасы["Дата ввода"] = this.Запись['Дата ввода'];
                оЧасы["Время работы"] = отрабВремя;
                оЧасы["Время к оплате"] = оплВремя;
                оЧасы["Примечание"] = this.Запись['Примечание'];
                оЧасы["Комментарий"] = this.Запись['Комментарий'];
                оЧасы["Часы-Категория"] = this.Запись['Часы-Категория'];
                оЧасы["Аналитика1"] = this.Запись["Аналитика1"] + 2;//  признак дополнительных часов
                ВнестиЗапись( оЧасы );
            } else {
                if( this.Запись.Аналитика1 % 4 < 2 ) {
                    this.Запись.Аналитика1 += 2;
                }
            }
        }
        this.Сохранить();
        new БазоваяВыборка( "Задания по документам - часы" ).Перенабрать();
    }
    КатегорияДоговора( темаДоговора, режим ) {
        var рез = (режим == 1 ? -1 : "" );
        var зКатегории = Query( `;WITH HierUp AS(
                                 SELECT ROW_ID, Аналитики, Тема
                                 FROM ~Аналитики~ WHERE Тема LIKE :1 AND Аналитики_ADD=1
                                 UNION ALL
                                 SELECT child.ROW_ID, child.Аналитики, child.Тема
                                 FROM ~Аналитики~ child
                                      JOIN HierUp ON child.ROW_ID=HierUp.Аналитики
                              )
                              SELECT ROW_ID, Тема FROM HierUp WHERE Аналитики = -10`, 1, "th,A" );
        зКатегории.УстановитьПараметры( темаДоговора );
        if( зКатегории.Следующий() ) {
            if( режим == 1 ) {
                рез = зКатегории.ROW_ID;
            } else {
                рез = зКатегории.Тема;
            }
        }
        return рез;

    }
}
class Телефонный_звонок extends БазовыйДиалог {
    constructor() {
        super("Телефонный звонок");
    }

    Инициализация() {
        this.Запись['@Дата создания'] = new Date();
        this.Запись['@Время создания'] = new Date();
        // заполним комбобокс видов работ: телефонный звонок, виды работ категории отдых и карьра
        this.элКатегория = ComboBox(this.ИмяДиалога, "@ВидРаботы");
        var мНазваний = [];
        var мКлючей = [];
        var инд = 0;
        var зВидыРабт = Query(`SELECT TOP 1 Категория, ROW_ID
                                   FROM ~ДО категории работ~
                                   WHERE Категория LIKE 'Телефонный звонок'`, 1);
        var зВидыРаб = Query(`/*SELECT '------------------' [Категория], -1 [ROW_ID]
                                  UNION ALL*/
                                  SELECT kjob.Категория, kjob.ROW_ID
                                  FROM ~ДО наборы категорий работ~ skat
                                       JOIN ~ДО категории работ~ kjob ON skat.[Категорий набор-Категория]=kjob.ROW_ID
                                       JOIN ~Аналитики~ an ON skat.[Категорий набор-Аналитики]=an.ROW_ID
                                  WHERE an.Аналитики=-10 AND an.Тема LIKE :1
                                  ORDER BY Категория`, 100, "th,A");
        // добавляем телефонный звонок
       зВидыРабт.УстановитьПараметры();
        while (зВидыРабт.Следующий()) {
            мНазваний[инд] = зВидыРабт.Категория;
            мКлючей[инд++] = зВидыРабт.ROW_ID;
        }
        // добавляем работы из категории Отдых
       зВидыРаб.УстановитьПараметры("КОтдых");
        while (зВидыРаб.Следующий()) {
            мНазваний[инд] = зВидыРаб.Категория;
            мКлючей[инд++] = зВидыРаб.ROW_ID;
        }
        // добавляем работы из категории Карьера
        зВидыРаб.УстановитьПараметры("ККарьера");
        while (зВидыРаб.Следующий()) {
            мНазваний[инд] = зВидыРаб.Категория;
            мКлючей[инд++] = зВидыРаб.ROW_ID;
        }

        this.элКатегория.СписокСКлючами(мКлючей, мНазваний);
        this.элКатегория.Текст = this.Запись['@ВидРаботы'] = "Телефонный звонок";
    }

    Изменение(Поле) {
        switch (Поле) {
            case "@Дата создания":
                if (this.Запись["@Дата создания"] <= ОткрытыйМесяц().СледующийМесяц(-1).ПоследнееЧисло()) {
                    Сообщить("Внесение работ в закрытый месяц запрещено!");
                    return "@Дата создания";
                }
                break;
            case "@К оплате":
                if (!this.Запись['@Минут'].getHours()) this.Запись['@Минут'] = this.Запись['@К оплате'];
                break;
            case "@Минут":
                if (!this.Запись['@К оплате'].getHours()) this.Запись['@К оплате'] = this.Запись['@Минут'];
                break;
            case "@ВидРаботы":
                if (this.Запись['@ВидРаботы'].toLowerCase() != "телефонный звонок") {
                    this.Запись['@Организация'] = "Фирма \"СТЕК-СПОРТ\"";
                    this.ЗапретитьЭлементы("@Организация");
                } else {
                    this.Запись["@Организация"] = "";
                    this.РазрешитьЭлементы("@Организация");
                }
                break;
            case "@Организация": // при изменении организации меняем поле @Версия и Задачи

                this.Запись["@Версия"] = this.Запись["@Задачи"] = "";
                var нзДоговора = ЗначениеВыпадающегоСписка("Телефонный звонок", "@Организация");
                var зВерсии = BufferedReader(`SELECT value.[Значение], LOWER( par.[Имя] ) [ИмяПараметра]
                                                FROM ~Значения параметров~ value
                                                     JOIN ~Параметры~ par ON value.[Параметр-Значения]=par.row_id
                                                     JOIN ~Договор~ cont on cont.Грузополучатель=value.[Орг-Параметры]
                                                WHERE cont.[ROW_ID]=:1 AND value.Тип<>2 AND par.[Имя] IN('ВЕРСИЯ_КОМПЛЕКСА', 'ЗАДАЧИ', 'СПЕЦИФИКА')
                                                ORDER BY value.ДатНач DESC`, 1, "cont,S");
                зВерсии.УстановитьПараметры(нзДоговора);
                while (зВерсии.Следующий()) {
                    switch (зВерсии.ИмяПараметра) {
                        case "версия_комплекса":
                            var поз = зВерсии.Значение.indexOf("версия");
                            if (поз > 0) {
                                this.Запись["@Версия"] = зВерсии.Значение.substr(поз + 7);
                            } else {
                                this.Запись["@Версия"] = зВерсии.Значение;
                            }
                            break;
                        case "задачи":
                            this.Запись["@Задачи"] = зВерсии.Значение;
                            break;
                        case "специфика": // если есть специфика на органиазции, то сообщим об этом
                            Сообщить("Внимание! Специфика организации:\n" + зВерсии.Значение);
                            break;
                    }
                }
                break;
        }
    }

    Сохранение() {
        if (this.Запись['@Дата создания'] <= ОткрытыйМесяц().СледующийМесяц(-1).ПоследнееЧисло()) {
            Сообщить("Внесение работ в закрытый месяц запрещено!");
            return "@Дата создания";
        }
        if (!кЗаполнениеРасписанияСтек.МожноЛиСтолькоРаботатьВДень( this.Запись['@Дата создания'], this.Запись['@Минут'].ПолноеКоличествоЧасов(), this.Запись['@К оплате'].ПолноеКоличествоЧасов())) {
            Сообщить("Отработанное время в день не должно превышать 8 часов");
            return "@Минут";
        }
        if (this.Запись['@К оплате'] > this.Запись['@Минут']) {
            Сообщить("Время к оплате клиенту не может превышать отработанное");
            return "@К оплате";
        }
        if (this.Запись['@Минут'] == 0 || this.Запись['@Минут'] == "") {
            Сообщить("Время не может быть равно 00:00");
            return "@Минут";
        }
        var позСп = -1;
        if (this.Запись['@К оплате'] < this.Запись['@Минут']) {
            if (this.Запись['@ВидРаботы'].toLowerCase() == "телефонный звонок") {
                позСп = кЗаполнениеРасписанияСтек.ВыборВариантаСписанияВремени("КТелЗвонок");
                if (позСп < 0)
                    return "@К оплате";
            } else {
                return "@К оплате";
            }
        }
        var нзДоговора = -1, нзКатРаб = this.элКатегория.Значение();
        if (this.Запись['@ВидРаботы'].toLowerCase() != "телефонный звонок") {
            if (нзКатРаб == -1) return "@ВидРаботы";// категория работы не выбрана
            var темаДоговора = "СО";
            var зКатДог = Query(`SELECT an.[Тема] [Категория]
                                    FROM ~ДО наборы категорий работ~ skat
                                         JOIN ~Аналитики~ an ON skat.[Категорий набор-Аналитики]=an.ROW_ID
                                    WHERE skat.[Категорий набор-Категория]=:1 AND an.Аналитики=-10`, 1, "id,S");
            зКатДог.УстановитьПараметры(нзКатРаб);
            if (зКатДог.Следующий() && зКатДог.Категория == "ККарьера") темаДоговора = "СК";
            try {
                нзДоговора = кЗаполнениеРасписанияСтек.ПолучитьДоговорСписанияЧасов(темаДоговора);
            }
            catch (er) {
                er.ОбработкаОшибки();
                return "@ВидРаботы";
            }
        } else {
            нзДоговора = ЗначениеВыпадающегоСписка( this.ИмяДиалога, "@Организация");
        }
        if (нзДоговора == -1) {
            Сообщить("Необходимо выбрать договор");
            return "@Организация";
        }

        var зФазы = Query(`SELECT TOP 1 f.[row_id] from ~ДО категории карточек~ kk
                              INNER JOIN ~ДО наборы маршрутов~ nm ON nm.[Набор-Категория]=kk.row_id
                              INNER JOIN ~ДО Маршруты~ m ON m.[row_id]=nm.[Набор-Маршрут]
                              INNER JOIN ~ДО фазы~ f ON f.[Маршрут-Фазы]=m.[row_id]
                              WHERE kk.[Название] LIKE '%Источник заявки%' and m.[Название] LIKE '%Разовые работы%'`, 500, "");
        зФазы.УстановитьПараметры();
        var нзФазы = зФазы.Следующий() ? зФазы.row_id : -1;

        var нзЗаявки = кЗаполнениеРасписанияСтек.ПозицияЗаявкиНаСтекДляРазовыхРабот(this.Запись['@Дата создания'], нзДоговора, this.Запись['@ВидРаботы']
            , this.Запись['@ВидРаботы'] + " (" + this.Запись['@Дата создания'] + ")",
            "Источник заявки", "Разовые работы");

        УстановитьПолеСвязи(this.Запись, "Задание-Карточка", нзЗаявки);
        УстановитьПолеСвязи(this.Запись, "Задание-Фаза", нзФазы);
        УстановитьПолеСвязи(this.Запись, "Задание-Исполнитель", НомерЗаписи(Пользователь()));
        this.Запись['Дата выдачи'] = this.Запись['@Дата создания'];
        this.Запись['Время выдачи'] = this.Запись['@Время создания'];
        this.Запись['Дата принятия'] = this.Запись['@Дата создания'];
        this.Запись['Время принятия'] = this.Запись['@Время создания'];
        this.Запись['Дата завершения'] = this.Запись['@Дата создания'];


        // TODO странные махинации
        //if( this.Запись['@Время создания'].ПолноеКоличествоЧасов()+ this.Запись['@Минут'].ПолноеКоличествоЧасов > 24 )
        //    this.Запись['@Время создания'] -= this.Запись['@Время создания']+ this.Запись['@Минут'] - Время("24:00");

        this.Запись['Время завершения'] = this.Запись['@Минут'];
        this.Запись['Отметки'] = this.Запись['@ПримечаниеЗад'];
        this.Запись['Статус завершения'] = 1; //---завершено успешно
        this.Запись['Папки'] = -10;
        var нзРаботы = СохранитьЗапись(this.Запись);
        // списываем часы только стелефонного звонка
        if (this.Запись['@К оплате'] < this.Запись['@Минут'] && this.Запись['@ВидРаботы'].toLowerCase() == "телефонный звонок") {
            var зОргДог = BufferedReader(`SELECT org.Название FROM ~Договор~ cont
                                               JOIN ~Организации~ org ON cont.Грузополучатель=org.ROW_ID
                                             WHERE cont.ROW_ID=:1`, 1, "dog,S");
            зОргДог.УстановитьПараметры(нзДоговора);
            var оргДог = зОргДог.Следующий() ? зОргДог.Название : "";
            var текстЗадВин = "Отмечено с телефонного звонка от " + this.Запись['@Дата создания'].format('rusDate') + " сотрудника " + ФИО(Пользователь().ФИО);
            var резПоле = кЗаполнениеРасписанияСтек.СписатьЧасы( this.ИмяДиалога, позСп, this.Запись['@Комментарий'], this.Запись['@ПримечаниеЗад'], НомерЗаписи(Пользователь()),
                this.Запись['@Дата создания'], нзРаботы, this.Запись['@Минут'], this.Запись['@К оплате'], текстЗадВин, 0, оргДог);
            if (резПоле != "") return резПоле;
            this.Запись['@Минут'] = this.Запись['@К оплате'];
        }
        var оЧасы = Объект("ДО часы");
        УстановитьПолеСвязи(оЧасы, "Часы-Задание", нзРаботы);
        оЧасы['Дата ввода'] = this.Запись['@Дата создания'];
        оЧасы['Время работы'] = this.Запись['@Минут'];
        оЧасы['Время к оплате'] = this.Запись['@К оплате'];
        оЧасы['Примечание'] = this.Запись['@ПримечаниеЗад'];
        оЧасы['Комментарий'] = this.Запись['@Комментарий'];
        оЧасы['Часы-Категория'] = нзКатРаб;
        ВнестиЗапись(оЧасы);

        var контрольКадров = 0;
        if (this.Запись['@ВидРаботы'] == "Отпуск" || this.Запись['@ВидРаботы'] == "Больничный" || this.Запись['@ВидРаботы'] == "Отсутствие") {
            var маршрутКонтроля = "Проверка отпуска (больничного)";
            // ставим задание контроля на первую фазу маршрута
            var зФазы = BufferedReader(`SELECT TOP 1 ph.ROW_ID
                                           FROM ~ДО маршруты~ m
                                                JOIN ~ДО фазы~ ph ON ph.[Маршрут-Фазы]=m.ROW_ID
                                                JOIN ~ДО категории фаз~ catph ON ph.[Фаза-Категория]=catph.ROW_ID
                                           WHERE m.[Название] like :1
                                           ORDER BY ph.Номер`, 1, "name,A");
            зФазы.УстановитьПараметры(маршрутКонтроля);
            if (!зФазы.Следующий()) {
                Сообщить("В маршруте для контроля \"маршрутКонтроля\" нет стартовой фазы. Создать задание невозможно.");
                return ""
            }
            нзЗаявки = кЗаполнениеРасписанияСтек.ПозицияЗаявкиНаСтекДляРазовыхРабот('@Дата создания', нзДоговора, '@ВидРаботы', this.Запись['@ВидРаботы'] + " (" + this.Запись['@Дата создания'] + ")",
                "Отдел кадров", маршрутКонтроля);

            var текст_задания = `Контроль за ` + ФИО('Задание-Исполнитель>ФИО') + "\n" + this.Запись['@ВидРаботы'] + "\nДата: " +
                '@Дата создания' + "\nОтмечено: " + this.Запись['@Минут'].substr(1, 5) + "\n\nКомментарий: " + this.Запись['Отметки'];

            var оЗадания = Объект("ДО задания");
            оЗадания['Завершить до'] = ДатаЗавершитьДоСрока(ТекДат(), 3);
            оЗадания['Задание-Редактор'] = НомерЗаписи(Пользователь());
            оЗадания['Задание-Карточка'] = нзЗаявки;
            оЗадания['Задание-Фаза'] = зФазы.ROW_ID;
            оЗадания['Предыдущий номер'] = 0;
            оЗадания['Папки'] = -10;
            оЗадания['Дата выдачи'] = new Date();
            оЗадания['Время выдачи'] = new Date();
            оЗадания['Свой номер'] = 1;
            оЗадания['Срок исполнения'] = 3;
            оЗадания['Отметки'] = текст_задания;
            оЗадания['Задание-Наряд'] = -1;
            оЗадания['Статус завершения'] = 0;
            оЗадания['ТипИсполнителя'] = 0;
            оЗадания['Задание-Исполнитель'] = оЗадания["Задание-Фаза>Исполнитель по умолчанию"];
            оЗадания['Задание-Представитель'] = -1;
            оЗадания['ТипИсполнителя'] = 0;
            var резпоз = ВнестиЗапись(оЗадания);
        }
    }

    Отмена() {
        if (НомерЗаписи(this.Запись) != -1)УдалитьЗапись(this.Запись);
    }
}
/**
 * @extends БазоваяВыборка
 * @class класс Задания_сотрудника - обработчик выборки задания сотрудников
 */
class $Задания_сотрудника extends Задания_сотрудника {
    Инициализация() {
        if (Узел(this.Запись, "Папки")) {
            var мФильтр = ПолучитьЗначенияФильтра("Задания сотрудника", "Задания сотрудника");
            if (мФильтр["2"] > 0) УстановитьПолеСвязи(this.Запись, "Задание-Исполнитель", мФильтр["2"]);
        } else {
            return "Телефонный звонок";
        }
    }

    Выбор_диалога() {
        if (НомерЗаписи(this.Запись) == -1 && !Узел(this.Запись, "Папки"))
            return "Телефонный звонок";
    }
}
class Окно_выбора_виноватых extends БазовыйДиалог {
    constructor() {
        super("Окно выбора виноватых");
    }

    Инициализация() {
        this.ЗапретитьЭлементы("Виновник");
    }

    Изменение(Поле) {
        if (Поле == "Чья") {
            if (ПрочитатьПолеСвязи(this.Запись, "Чья") == 2) {
                this.РазрешитьЭлементы("Виновник");
            } else {
                this.ЗапретитьЭлементы("Виновник");
                this.Запись.Виновник = "";
            }
        }
    }

    Сохранение() {
        switch (ПрочитатьПолеСвязи(this.Запись, "Чья")) {
            case 0:
                this.Запись.поз_в = 0;
                break;
            case 1:
                this.Запись.поз_в = -1;
                break;
            case 2:
                var зСотр = Query(`select row_id from ~Сотрудники~ where ФИО = :1`, 1, "fio,A");
                зСотр.УстановитьПараметры(this.Запись.Виновник);
                if (зСотр.Следующий()) {
                    this.Запись.поз_в = зСотр.row_id
                } else {
                    Сообщить("Ошибка при определении виноватого! Введите ФИО полностью");
                    return 1;
                }
                break;
        }
        return "";
    }
    Отмена() {
        Сообщить("Нужно что-нибудь выбрать!");
        return -1;
    }
}

/**
 * @extends БазоваяВыборка
 * @class класс Карточки_документов_Папки - обработчик наборной выборки 'Карточки документов Папки'
 */
class Карточки_документов_Папки extends БазоваяВыборка {
    constructor() {
        super( 'Карточки документов Папки' );
    }
    Фильтр(){
        var мФильтр = { 'Запрос' : 't1.[Папки_ADD]=0' };
        return мФильтр;
    }
}

/**
 * @extends БазоваяВыборка
 * @class класс Регистрации_задач - обработчик выборки 'Регистрации задач'
 */
class Регистрации_задач extends БазоваяВыборка {
    constructor() {
        super( 'Регистрации задач' );
    }
    Инициализация(){
        this.Запись.Лицевые = 65535;
        this.Запись.Комплекс = this.Запись.Задачи = 0;
    }
    Расчет(){
        this.Запись.Автор = this.Запись['Регистрация-Автор>ФИО'];
    }
}

/**
 * @class класс Регистрация_задач - обработчик окна диалога 'Регистрация задач'
 * @extends БазовыйДиалог
 */
class Регистрация_задач extends БазовыйДиалог {
    constructor() {
        super( 'Регистрация задач' );
    }
    Инициализация(){
        super.Инициализация();
        if( !this.НоваяЗапись )
            this.ЗапретитьЭлементы( "Дата,Тип регистрации,Места,Лицевые,Код,@Задачи1,@Задачи2,@Задачи3,Комплекс" );

        switch( this.Запись.Комплекс ){
            case 0: // "Стек-ЖКХ"
                this.ЗапретитьЭлементы( "@Задачи2,@Задачи3" );
                this.Запись['@Задачи1'] = this.Запись.Задачи;
                this.Запись['@Задачи2'] = this.Запись['@Задачи3'] = 0;
                break;
            case 1: // "Стек-Энерго"
                this.ЗапретитьЭлементы( "@Задачи1,@Задачи3" );
                this.Запись['@Задачи2'] = this.Запись.Задачи;
                this.Запись['@Задачи1'] = this.Запись['@Задачи3'] = 0;
                break;
            case 2: // "Стек-Управа"
                this.ЗапретитьЭлементы( "@Задачи1,@Задачи2" );
                this.Запись['@Задачи3'] = this.Запись.Задачи;
                this.Запись['@Задачи1'] = this.Запись['@Задачи2'] = 0;
                break;
        }
    }
    Изменение( поле ){
        switch( поле ){
            case "Комплекс":
                switch( this.Запись.Комплекс ){
                    case 0: // "Стек-ЖКХ"
                        this.РазрешитьЭлементы( "@Задачи1" );
                        this.ЗапретитьЭлементы( "@Задачи2,@Задачи3" );
                        this.Запись['@Задачи2'] = this.Запись['@Задачи3'] = 0;
                        break;
                    case 1: // "Стек-Энерго"
                        this.РазрешитьЭлементы( "@Задачи2" );
                        this.ЗапретитьЭлементы( "@Задачи1,@Задачи3" );
                        this.Запись['@Задачи1'] = this.Запись['@Задачи3'] = 0;
                        break;
                    case 2: // "Стек-Управа"
                        this.РазрешитьЭлементы( "@Задачи3" );
                        this.ЗапретитьЭлементы( "@Задачи1,@Задачи2" );
                        this.Запись['@Задачи1'] = this.Запись['@Задачи2'] = 0;
                        break;
                }
                break;//Перерисовать()
            case "@Задачи1": case "@Задачи2": case "@Задачи3":
                this.Запись['@Задачи0'] = '';
                switch( this.Запись.Комплекс ){
                    case 0: // "Стек-ЖКХ"
                        var флаги = this.Запись["@Задачи1"];
                        if( флаги & 1 > 0 ) this.Запись['@Задачи0'] += " 252";     // Расчеты с абонентами - физическими лицами
                        if( флаги & 2 > 0 ) this.Запись['@Задачи0'] += " 169";     // Паспортный стол
                        if( флаги & 4 > 0 ) this.Запись['@Задачи0'] += " 278";     // АРМ юриста
                        if( флаги & 8 > 0 ) this.Запись['@Задачи0'] += " 11058";   // Расчеты с абонентами - юридическими лицами
                        if( флаги & 16 > 0 ) this.Запись['@Задачи0'] += " 253";    // Подомовой учет
                        if( флаги & 32 > 0 ) this.Запись['@Задачи0'] += " 11061";  // АРМ диспетчера
                        if( флаги & 64 > 0 ) this.Запись['@Задачи0'] += " 11065";  // АРМ кассира
                        if( флаги & 128 > 0 ) this.Запись['@Задачи0'] += " 11062"; // Субсидии
                        if( флаги & 256 > 0 ) this.Запись['@Задачи0'] += " 5022";  // АРМ поставщика
                        if( флаги & 512 > 0 ) this.Запись['@Задачи0'] += " 5024";  // АРМ юриста поставщика
                        if( флаги & 1024 > 0 ) this.Запись['@Задачи0'] += " 284";  // АРМ юриста (юридические лица)
                        if( флаги & 2048 > 0 ) this.Запись['@Задачи0'] += " 280";  // АРМ руководителя
                        if( флаги & 4096 > 0 ) this.Запись['@Задачи0'] += " 279";  // АРМ бухгалтера-экономиста
                        if( флаги & 8192 > 0 ) this.Запись['@Задачи0'] += "";      // АРМ УК
                        if( флаги & 16384 > 0 ) this.Запись['@Задачи0'] += " 285"; // Документооборот
                        if( флаги & 32768 > 0 ) this.Запись['@Задачи0'] += " 277"; // Расписание
                        if( флаги & 65536 > 0 ) this.Запись['@Задачи0'] += " 281"; // Сетевые коммуникации
                        break;
                    case 1: // "Стек-Энерго"
                        флаги = this.Запись["@Задачи2"];
                        if( флаги & 1 > 0 ) this.Запись['@Задачи0'] += " 252";     // Энергосбыт - население
                        if( флаги & 2 > 0 ) this.Запись['@Задачи0'] += " 11058";   // Энергосбыт - юридические лица
                        if( флаги & 4 > 0 ) this.Запись['@Задачи0'] += " 281";     // Сетевые коммуникации
                        if( флаги & 8 > 0 ) this.Запись['@Задачи0'] += " 278";     // АРМ юриста
                        if( флаги & 16 > 0 ) this.Запись['@Задачи0'] += " 284";    // АРМ юриста (юридические лица)
                        if( флаги & 32 > 0 ) this.Запись['@Задачи0'] += " 11065";  // АРМ кассира
                        if( флаги & 64 > 0 ) this.Запись['@Задачи0'] += " 280";    // АРМ руководителя
                        if( флаги & 128 > 0 ) this.Запись['@Задачи0'] += " 279";   // АРМ бухгалтера-экономиста
                        if( флаги & 256 > 0 ) this.Запись['@Задачи0'] += " 285";   // Документооборот
                        if( флаги & 512 > 0 ) this.Запись['@Задачи0'] += " 11066"; // Технологическое присоединение
                        break;
                    case 2: // "Стек-Управа"
                        флаги = this.Запись["@Задачи3"];
                        if( флаги & 1 > 0 ) this.Запись['@Задачи0'] += " 11060"; // Учет муниципальной собственности
                        if( флаги & 2 > 0 ) this.Запись['@Задачи0'] += " 11064"; // Сделки с имуществом
                        if( флаги & 4 > 0 ) this.Запись['@Задачи0'] += " 11059"; // Учет земельных отношений
                        if( флаги & 8 > 0 ) this.Запись['@Задачи0'] += " 285";   // Документооборот
                        if( флаги & 16 > 0 ) this.Запись['@Задачи0'] += "";      // Энерготехконтроль
                        if( флаги & 32 > 0 ) this.Запись['@Задачи0'] += "";      // Энергопаспорт
                        if( флаги & 64 > 0 ) this.Запись['@Задачи0'] += "";      // Учет хозяйств
                        if( флаги & 128 > 0 ) this.Запись['@Задачи0'] += "";     // Сводная электронная отчетность
                        break;
                }
                break;
        }
    }
    Сохранение(){
        if( this.НоваяЗапись ) this.Запись['Регистрация-Автор'] = НомерЗаписи( Пользователь() );
        switch( this.Запись.Комплекс ){
            case 0: // "Стек-ЖКХ"
                this.Запись.Задачи = this.Запись["@Задачи1"];
                break;
            case 1: // "Стек-Энерго"
                this.Запись.Задачи = this.Запись["@Задачи2"];
                break;
            case 2: // "Стек-Управа"
                this.Запись.Задачи = this.Запись["@Задачи3"];
                break;
        }
    }
    static СписокЗадачЖКХ(){
        return 'Расчеты с абонентами - физическими лицами\n' +
        'Паспортный стол\n' +
        'Работа с должниками - физическими лицами\n' +
        'Расчеты с абонентами - юридическими лицами\n' +
        'Подомовой учет\n' +
        'Аварийно-диспетчерская служба\n' +
        'Касса\n' +
        'Субсидии\n' +
        'АРМ поставщика\n' +
        'АРМ юриста поставщика\n' +
        'Работа с должниками - юридическими лицами\n' +
        'АРМ руководителя\n' +
        'Расчеты с поставщиками\n' +
        'АРМ УК\n' +
        'Документооборот\n' +
        'Расписание\n' +
        'Коммуникации';
    }
    static СписокЗадачЭнерго(){
        return 'Расчеты с абонентами - физическими лицами\n' +
        'Расчеты с абонентами - юридическими лицами\n' +
        'Коммуникации\n' +
        'Работа с должниками - физическими лицами\n' +
        'Работа с должниками - юридическими лицами\n' +
        'Касса\n' +
        'АРМ руководителя\n' +
        'Расчеты с поставщиками\n' +
        'Документооборот\n' +
        'Технологическое присоединение';
    }
    static СписокЗадачУправа(){
        return 'Учет муниципальной собственности\n' +
        'Сделки с имуществом\n' +
        'Учет земельных отношений\n' +
        'Документооборот\n' +
        'ЭнергоТехКонтроль\n' +
        'Энергопаспорт\n' +
        'Учет хозяйств\n' +
        'Сводная электронная отчетность';
    }
    static СписокДополнительныхЗадач(){
        return 'Тепловой расчет\n' +
        'WEB-сервис\n' +
        'SMS\n' +
        'Система автодозвона\n' +
        'Электронный паспорт дома';
    }
}

/**
 * @extends БазоваяВыборка
 * @class класс Сертификаты - обработчик выборки 'Сертификаты'
 */
class Сертификаты extends БазоваяВыборка {
    constructor() {
        super( 'Сертификаты', 'Организация' );
        /**
         * организация-владелец сертификатов
         * @type {БазовыйОбъект}
         */
        this.Организация = new БазовыйОбъект( 'Организации', -1 );
        /**
         * каталог для временного хранения сертификатов
         * @type {string}
         */
        this.Каталог = КаталогПрограммы();
    }
    Инициализация(){ return 1; }
    Удаление(){
            // todo запретить в правах пользователю удаление сертификатов
        //Если( !ПроверитьПравоНаСозданиеСертификатов() )
        //вернуть 1;
        if( this.Запись.Папки != -10 && !this.Запись.НачалоДействия.equalsWithoutTime(new Date()) ) {
            Сообщить( "Удаление сертификата возможно в день его создания." );
            return 1;
        }
    }

    /**
     * создает новую пачку сертификатов
     */
    СоздатьГруппу(){
        // todo права пользователя на кнопку "Создать группу"
        //Если( !ПроверитьПравоНаСозданиеСертификатов() )
        //вернуть "";
        try {
            this.ПолучитьОрганизацию();
            var длг = СоздатьДиалог( "Создание группы сертификатов" );
            длг['Срок действия'] = 36524;
            длг['Количество клиентов'] = 1;
            длг['Email'] = this.Организация.Объект.email;
            длг['Версия'] = "10750";
            if( длг.Выполнить() ) {
                СоздатьОкноСостояния( "Сертификаты - Линейка прогресса", "Сообщение", "Создание группы сертификатов" );

                УдалитьФайл( this.Каталог + "client_*.ks" );
                this.СгенеритьСертификаты( длг['Срок действия'], длг['Количество клиентов'], длг.Пароль, 1, длг['Версия'] );
                var нзКорня = this.СоздатьПапку( длг['Имя группы'], длг.Пароль, длг['Версия'] );
                var мСертификаты = this.ВнестиСертификаты( нзКорня, длг.Пароль, this.Каталог, new Date(), new Date().ПрибавитьДату('day', длг['Срок действия']), длг['Версия'] );
                this.ЭкспортФайлов( длг["ФEmail"] == 1, длг.Email, длг['КаталогС'], мСертификаты );
                УдалитьФайл( this.Каталог + "client_*.ks" );
                УдалитьОкноСостояния();
                this.Перенабрать();
            }
            длг = null;
        } catch ( err ){
            if( !(err instanceof StackError) ) throw err;
            err.ОбработкаОшибки();
        }
    }

    /**
     * Импортирует сертификаты из указанного каталога в базу, при этом создает папку для группы
     */
    Импорт(){
        // todo права пользователя на кнопку "Импорт"
        //Если( !ПроверитьПравоНаСозданиеСертификатов() )
        //вернуть "";
        try {
            this.ПолучитьОрганизацию();
            var длг = СоздатьДиалог( "Сертификаты Импорт" );
            if( длг.Выполнить() ) {
                СоздатьОкноСостояния( "Сертификаты - Линейка прогресса", "Сообщение", "Импорт сертификатов" );
                this.ВнестиСертификаты( this.СоздатьПапку( длг['Имя группы'], длг.Пароль, '' ), длг.Пароль, длг['КаталогС'] + "\\", null, null, '' );
                УдалитьОкноСостояния();
                this.Перенабрать();
            }
            длг = null;
        } catch ( err ){
            if( !(err instanceof StackError) ) throw err;
            err.ОбработкаОшибки();
        }
    }

    /**
     * экспортирует выбранные группы сертификатов в каталог на диске или сохраняет в Исходящих в электронной почте
     */
    Экспорт(){
        try {
            this.ПолучитьОрганизацию();
            var длг = СоздатьДиалог( "Сертификаты Экспорт" );
            длг.ФEmail = 0;
            длг.Email = this.Организация.Объект.email;
            if( длг.Выполнить() ) {
                СоздатьОкноСостояния( "Сертификаты - Линейка прогресса", "Сообщение", "Экспорт сертификатов" );
                var стрПозиций = '';
                var записи = this.ПолучитьВыделенныеЗаписи( false );
                for( let нз of записи ) {
                    стрПозиций += ',' + нз;
                }
                стрПозиций = стрПозиций.substr( 1 );
                var зСертификаты = Query( ';WITH Tree AS ( \
                    SELECT ROW_ID, Папки, Название \
                       FROM ~Сертификаты~ \
                    WHERE [ROW_ID] IN (' + стрПозиций + ') \
                    UNION ALL \
                    SELECT cert.ROW_ID, cert.Папки, cert.Название \
                       FROM ~Сертификаты~ cert \
                    INNER JOIN Tree up ON up.ROW_ID = cert.Папки \
                 ) SELECT Папки, ROW_ID, Название FROM Tree WHERE Папки<>-10 ORDER BY Название', 100 );
                зСертификаты.УстановитьПараметры();
                var мСертификаты = [];
                while( зСертификаты.Следующий() ){
                    if( !мСертификаты[зСертификаты.Папки] ) мСертификаты[зСертификаты.Папки] = [];
                    мСертификаты[зСертификаты.Папки].push( зСертификаты.ROW_ID );
                }

                this.ЭкспортФайлов( длг["ФEmail"] == 1, длг.Email, длг['КаталогС'], мСертификаты );
                УдалитьОкноСостояния();
            }
            длг = null;
        } catch ( err ){
            if( !(err instanceof StackError) ) throw err;
            err.ОбработкаОшибки();
        }
    }

    /**
     * добавляет клиенские сертификаты к уже существующим в выбранной группе
     */
    ДобавитьКлиентские(){
        // todo права пользователя на кнопку "Добавить клиенские"
        //Если( !ПроверитьПравоНаСозданиеСертификатов() )
        //вернуть "";
        try {
            this.ПолучитьОрганизацию();
            // Определяем группу сертификатов
            var сертификат = new БазовыйОбъект( "Сертификаты", ПозицияКурсора( this.ИмяОкна, this.ИмяВыборки, "Ф" ) );
            сертификат.Прочитать();
            var нзПапки = ЭтоКорень( сертификат.Объект ) ? сертификат.НомерЗаписи : сертификат.Объект.Папки;
            if( нзПапки != сертификат.НомерЗаписи ) сертификат.Прочитать( нзПапки );

            var длг = СоздатьДиалог( "Сертификаты Cоздание клиенских" );
            УстановитьЗаголовок( "Сертификаты Cоздание клиенских", "Создание клиенских сертификатов для группы " + сертификат.Объект.Название );
            длг.ФEmail = 0;
            длг.Email = this.Организация.Объект.email;
            длг['Срок действия'] = 36524;
            длг['Количество клиентов'] = 1;
            длг['Версия'] = сертификат.Объект.Версия;
            if( длг.Выполнить() ) {
                СоздатьОкноСостояния( "Сертификаты - Линейка прогресса", "Сообщение", "Создание клиенских сертификатов" );
                // Определяем номер маскимального сертификата
                var зНомерСерт = BufferedReader( 'SELECT CAST( LEFT(RIGHT(Название, 6), 3) AS INT ) Номер \
                FROM ~Сертификаты~ WHERE Папки=:1 ORDER BY Номер DESC', 1, "S,S" );
                зНомерСерт.УстановитьПараметры( нзПапки );
                var максНомер = зНомерСерт.Следующий() ? зНомерСерт.Номер + 1 : 1;
                // Генерим сертификаты
                УдалитьФайл( "client_*.ks" );
                this.СгенеритьСертификаты( длг['Срок действия'], длг['Количество клиентов'], сертификат.Пароль, максНомер, длг['Версия'] );
                var мСертификаты = this.ВнестиСертификаты( нзПапки, длг.Пароль, this.Каталог, new Date(), new Date().ПрибавитьДату('day', длг['Срок действия']), длг['Версия'] );
                this.ЭкспортФайлов( длг["ФEmail"] == 1, длг.Email, длг['КаталогС'], мСертификаты );
                УдалитьФайл( "client_*.ks" );
                УдалитьОкноСостояния();
            }
            длг = null;
        } catch ( err ){
            if( !(err instanceof StackError) ) throw err;
            err.ОбработкаОшибки();
        }
    }

    /**
     * удаляет недейсвующие сртификаты вместе с пустыми папками
     */
    УдалитьНедействующие(){
        // todo права пользователя на кнопку "Удалить недействующие"
        //Если( !ПроверитьПравоНаСозданиеСертификатов() )
        //вернуть "";

        СоздатьОкноСостояния( "Сертификаты - Линейка прогресса", "Сообщение", "Удаление недействующих сертификатов" );
        var удаление = Command( 'DELETE FROM ~Сертификаты~ WHERE [КонецДействия]<:1', 100, "D,D" );
        удаление.Выполнить( new Date() );
        удаление.Завершить();

        var удалПапки = Command( 'DELETE FROM ~Сертификаты~ WHERE [Папки]=-10 AND ROW_ID NOT IN ( SELECT папки FROM ~Сертификаты~ )', 100 );
        удалПапки.Выполнить();
        удалПапки.Завершить();
        УдалитьОкноСостояния();
    }

    /**
     * создает сертификаты в каталоге программы
     * @param срокДействия - срок действия сертификатов
     * @param клиентов - количество клиентов в серверном сертификате
     * @param пароль - пароль к сертификатам
     * @param позиция - индекс первого сертификата
     * @param версия - версия сертификатов
     */
    СгенеритьСертификаты( срокДействия, клиентов, пароль, позиция, версия ){
        УстановитьПоляОкнаСостояния( "Сообщение", "Генерация сертификатов" );

        // Генерим сертефикаты
        var название = this.Организация.Объект.Название.replace( /\"/g, "'" );
        var адрес = this.Организация.Объект.Адрес.replace( /\"/g, "'" );
        /*var строка = '..\\..\\..\\Stack.client\\jre1.7.0_40\\bin\\javaw.exe -jar "' + КаталогПрограммы() + 'certificate\\Stack_gen.jar" generate ' +
            '"' + название + '"' + ' "UNKNOWN"' + ' "UNKNOWN" ' +
            '"' + адрес + '"' + ' "UNKNOWN" ' + срокДействия + ' ' + клиентов + ' "' + пароль + '"' + ' "' + пароль + '" "' +
            позиция + '" "' + версия + '"';*/
        var строка = 'javaw.exe -jar "' + КаталогПрограммы() + 'certificate\\Stack_gen.jar" generate ' +
            '"' + название + '"' + ' "UNKNOWN"' + ' "UNKNOWN" ' +
            '"' + адрес + '"' + ' "UNKNOWN" ' + срокДействия + ' ' + клиентов + ' "' + пароль + '"' + ' "' + пароль + '" "' +
            позиция + '" "' + версия + '"';
        Запустить( строка, 1 );
    }

    /**
     * создает папку сертификатов, привязанную к организации
     * @param название - название папки
     * @param пароль - пароль к сертификатам в папке
     * @param версия - версия сертификатов в папке
     * @returns {number} - ид созданной папки
     */
    СоздатьПапку( название, пароль, версия ){
        УстановитьПоляОкнаСостояния( "Сообщение", "Создание папки сертификатов" );

        var сертификат = new БазовыйОбъект( "Сертификаты", -1, {'Папки' : -10,
            'Папки_Узел' : 1,
            'Название' : название,
            'Пароль' : пароль,
            'Сертификат-Автор' : НомерЗаписи( Пользователь() ),
            'Сертификат-Организация' : this.Организация.НомерЗаписи,
            'Версия' : версия
        } );
        сертификат.Внести();
        return сертификат.НомерЗаписи;
    }

    /**
     * инициализирует объект организации данными Организации
     * @returns {number} - ид организации
     */
    ПолучитьОрганизацию() {
        if( this.Организация.НомерЗаписи == -1 ) this.Организация = this.Источник.Окно.Обработчик.Организация;
        return this.Организация.НомерЗаписи;
    }

    /**
     * сохраняет в базе сертификаты из временного хранилища сертификатов
     * @param идПапки - куда сохранить пачку сертификатов
     * @param пароль - пароль к сертификатам
     * @param началоДействия - начало действия сертификатов, может быть null
     * @param конецДействия - конец действия сертификатов, может быть null
     * @param версия - версия сертификатов
     * @returns {*} - массив ид сохраненых сертификатов
     */
    ВнестиСертификаты( идПапки, пароль, каталог, началоДействия, конецДействия, версия ){
        УстановитьПоляОкнаСостояния( "Сообщение", "Занесение сертификатов в базу" );

        var мСерт = [];
        мСерт[идПапки] = [];
        var комманд = Query( 'INSERT INTO ~Сертификаты~ ( [Файл], [Сертификат-Организация], [Папки], [Название], \
             [Срок действия], [Пароль], [НачалоДействия], [КонецДействия], [Версия], [Сертификат-Автор]) \
             VALUES (:1,:2,:3,:4,:5,:6,:7,:8,:9,:10) \
             SELECT TOP 1 ROW_ID FROM ~Сертификаты~ ORDER BY ROW_ID DESC', 1,
             "file,F,org,S,folder,S,Name,A,srok,S,pas,A,Start,D,End,D,Vers,A,aut,S" );
        var списокФайлов = СодержимоеКаталога( каталог + "client_*.ks" );
        var j = 0;
        for( let i in списокФайлов ){
            УстановитьПоляОкнаСостояния( "Сообщение", "Занесение сертификатов в базу: " + списокФайлов[i] );
            if( началоДействия == null && конецДействия == null ) {
                var дата = ПолучитьНачалоСертификата( каталог + списокФайлов[i], пароль );
                if( дата.isEmpty() ) throw new StackError( 'Не удалось получить начало действия сертификата' );
                началоДействия = дата;
                дата = ПолучитьКонецСертификата( каталог + списокФайлов[i], пароль );
                if( дата.isEmpty() ) throw new StackError( 'Не удалось получить конец действия сертификата' );
                конецДействия = дата;
            }
            комманд.УстановитьПараметры( каталог + списокФайлов[i], this.Организация.НомерЗаписи, идПапки,
                списокФайлов[i].toLocaleLowerCase(), конецДействия.countOfDayBetweenDates( началоДействия ), пароль,
                началоДействия, конецДействия, версия, НомерЗаписи( Пользователь()) );
            if( комманд.Следующий() ) мСерт[идПапки][j++] = комманд.ROW_ID;
        }
        if( j == 0 ) throw new StackError( "Каталог не содержит сертификаты!" );
        return мСерт;
    }

    /**
     * извлекает из базы сертификаты по массиву мСертификаты и экспортирует в зависимости от назначения
     * @param наПочту - нужно отправить сертификаты на почту, файлы будут сохранены во временный каталог
     * @param email - мыло для отправки
     * @param каталогСерт - каталог для экспорта сертификатов
     * @param мСертификаты - массив с ид сертификатов, которые необходимо выгрузить
     */
    ЭкспортФайлов( наПочту, email, каталогСерт, мСертификаты ) {
        УстановитьПоляОкнаСостояния( "Сообщение", "Экспорт сертификатов" );
        var зСертификаты = Query( ';WITH Tree AS ( \
             SELECT ROW_ID, [Файл], [Название], [Пароль], Папки, Версия \
             FROM ~Сертификаты~ WHERE [ROW_ID]=:1 \
             UNION ALL \
             SELECT sert.ROW_ID, sert.[Файл], sert.[Название], sert.[Пароль], sert.Папки, sert.Версия \
             FROM ~Сертификаты~ sert \
                  JOIN Tree ON Tree.ROW_ID = sert.Папки \
          ) SELECT ROW_ID, [Файл], [Название], [Пароль], Папки, Версия \
            FROM Tree WHERE Папки <>-10 ORDER BY Название', 100, "id,S" );
        var зГруппы = Query( 'SELECT Пароль, RTRIM(Название) as Название FROM ~Сертификаты~ WHERE ROW_ID=:1', 1, "id,S" );

        var былСертификат = false;
        var врКаталогДиск = каталогСерт;
        var врКаталогПочта = '';
        for( let i in мСертификаты ) {
            if( !мСертификаты.hasOwnProperty(i) ) continue;

            зГруппы.УстановитьПараметры( Number(i) );
            if( !зГруппы.Следующий() ) throw new StackError( "Экспорт завершился с ошибкой!" );
            var пароль = зГруппы.Пароль;
            var названиеГр = зГруппы.Название;
            былСертификат = false;
            var врКаталогПочта
            if( каталогСерт ){
                if( названиеГр ){
                    врКаталогДиск = каталогСерт +  "\\" + названиеГр + "\\";
                    СоздатьКаталог( врКаталогДиск );
                }
                УдалитьФайл( врКаталогДиск + "*.ks" );
                    // todo кФайл
                var ф1 = СоздатьФайл( врКаталогДиск + "Пароль.txt" );
                ЗаписатьФайл( ф1, пароль );
                ЗакрытьФайл( ф1 );
            }
            if( наПочту ) {
                врКаталогПочта = КаталогПрограммы() + "certificate\\Email\\" + названиеГр + "\\";
                Сообщить( врКаталогПочта );
                СоздатьКаталог( врКаталогПочта );
                УдалитьФайл( врКаталогПочта + "*.ks" );

                var ф1 = СоздатьФайл( врКаталогПочта + "Пароль.txt" );
                ЗаписатьФайл( ф1, пароль );
                ЗакрытьФайл( ф1 );
            }

            зСертификаты.УстановитьПараметры( Number(i) );
            while( зСертификаты.Следующий() ) {
                былСертификат = true;
                УстановитьПоляОкнаСостояния( "Сообщение", "Экспорт сертификата: " + зСертификаты.Название );
                if( врКаталогДиск ){
                    if( зСертификаты.ДвоичноеПолеВФайл("Файл", врКаталогДиск + зСертификаты.Название) )
                        throw new StackError( "Не удалось распаковать из поля сертификат: " + зСертификаты.Название );
                    // копируем файл для того, чтобы в итоговом серверном сертификате он тоже был
                    КопироватьФайл( врКаталогДиск + "\\" + зСертификаты.Название, КаталогПрограммы() + "certificate\\" + зСертификаты.Название )
                }
                if( наПочту ) {
                    if( зСертификаты.ДвоичноеПолеВФайл("Файл", врКаталогПочта + зСертификаты.Название) )
                        throw new StackError( "Не удалось распаковать из поля сертификат: " + зСертификаты.Название );
                    // копируем файл для того, чтобы в итоговом серверном сертификате он тоже был
                    КопироватьФайл( врКаталогПочта + зСертификаты.Название, КаталогПрограммы() + "certificate\\" + зСертификаты.Название )
                }
                if( мСертификаты[i].indexOf(зСертификаты.ROW_ID) == -1 ) {
                    if( врКаталогДиск ) УдалитьФайл( врКаталогДиск + зСертификаты.Название );
                    if( наПочту ) УдалитьФайл( врКаталогПочта + зСертификаты.Название );
                }

                УстановитьПоляОкнаСостояния( "Сообщение", "Добавление в серверный сертификат: " + зСертификаты.Название );
                // Добавим в серверный сертификат
                /*var команда = '..\\..\\..\\Stack.client\\jdk1.7.0_40\\bin\\javaw.exe -jar "' + КаталогПрограммы() + 'certificate\\Stack_gen.jar" servergenerate ' +
                    '"' + КаталогПрограммы() + 'certificate" "' + зСертификаты.Название + '" "' +
                    зСертификаты.Пароль + '" "' + зСертификаты.Версия + '"';*/
                var команда = 'javaw.exe -jar "' + КаталогПрограммы() + 'certificate\\Stack_gen.jar" servergenerate ' +
                    '"' + КаталогПрограммы() + 'certificate" "' + зСертификаты.Название + '" "' +
                    зСертификаты.Пароль + '" "' + зСертификаты.Версия + '"';
                Запустить( команда, 1 );
            }
            if( былСертификат ){
                if( врКаталогДиск )
                    ПереименоватьФайл( КаталогПрограммы() + "certificate\\clients_add.ks", врКаталогДиск + "\\clients.ks" );
                if( наПочту )
                    ПереименоватьФайл( КаталогПрограммы() + "certificate\\clients_add.ks", врКаталогПочта + "clients.ks" );
            }
            УдалитьФайл( КаталогПрограммы() + "certificate\\*.ks" );
            врКаталогДиск = каталогСерт;
        }
        if( наПочту ){
            УстановитьПоляОкнаСостояния( "Сообщение", "Запаковка и отправка сертификатов" );

            var списокКаталогов = ПодкаталогиКаталога( КаталогПрограммы() + "certificate\\Email\\" );
            for( let j in списокКаталогов ){
                var команда = '7za a -tzip "' + КаталогПрограммы() + 'certificate\\Email\\certificate" "' +
                    КаталогПрограммы() + 'certificate\\Email\\' + списокКаталогов[j] + '"';
                if( Запустить(команда, 1) == 1 ) // не удалось создать архив с файлами
                    throw new StackError( "Ошибка при создании архива!" );
            }
            var сообщение = new кЭлСообщение(); // сообщение для отправки уведомления
            сообщение.ПрочитатьЯщик( "Рассылка организациям" );
            сообщение.ПрочитатьИзКонтекста( {'Кому': email,
                'Копия' : "test@stack-it.ru",
                'Тема': "Сертификаты",
                'Приоритет': 0,
                'Папка': сообщение.Ящик.Исходящие,
                'Папка_Узел': 0,
                'Организация-Сообщения': this.Организация.НомерЗаписи,
                'Признаки': 2 // Обработано
            } );
            сообщение.УстановитьОтправителя();
            if( сообщение.Внести() > 0 ) {
                var текстПисьма = 'Направляем Вам сертификаты для подключения клиенских рабочих мест.\n\n\
Для установки сертификатов выполните следующие действия:\n\
1. Распакуйте полученный архив certificate.zip\n\
2. Запустите из каталога Stack.client файл DispatcherSetup.cmd, откроется окно настройки службы диспетчера, пароль для входа - stack\n\
3. Войдите в каталог программы, в подкаталог DipatcherService.\n\
4. Все файлы полученного архива надо скопировать в подкаталог с именем Диспетчера подключений (имя диспетчера находится в окне настройки службы диспетчеров).\n\
5. После этого в окне настройки службы диспетчеров щелкните правой кнопкой мыши по имени диспетчера и выполните перезагрузку сертификатов клиентов.\n\
6. Файлы вида CLIENT_[название_организации]_00N.KS предназначены для клиентских рабочих мест. В каталог программы на каждом рабочем месте надо скопировать\n\
файл со своим порядковым номером. При этом надо выполнить следующее действие:\n\
7. Из файла пароль.txt скопировать пароль для доступа к хранилищу сертификатов.\n\
8. Этот пароль программа будет запрашивать при запуске с клиентского рабочего места.\n\
9. Для того, чтобы программа не спрашивала каждый раз этот пароль, сделайте следующее:\n\
- На клиентском рабочем месте в обычном текстовом редакторе откройте файл JavaStackClient.cmd, который находится в каталоге программы;\n\
- в конце второй строки допишите следующий параметр: -p\\\"пароль_из_файла_пароль.txt\\\";\n\
- сохрание изменения.\n\
- проделав эту процедуру на одном рабочем месте можно скопировать данный файл на остальные рабочие места.\n\n\
С уважением, ' + ФИО( Пользователь().ФИО ) + '\n\
___________________________________________\n\
Компания "Стек" - 23 года успешной работы!\n\
Малая Пролетарская ул., 33, г. Ярославль,150001\n\
Академика Губкина ул., 5, г. Рыбинск, 152901\n\
Тел. +7 (4852) 59-45-00\n\
e-mail: support@stack-it.ru ';
                сообщение.ДобавитьВложение( КаталогПрограммы() + "certificate\\Email\\certificate.zip" );
                сообщение.СохранитьТекст( текстПисьма );
                сообщение.УстановитьДату( 'создано,получено' );
            } else {
                throw new StackError( 'Не удалось создать сообщение.' );
            }
            УдалитьФайл( КаталогПрограммы() + "certificate\\Email\\*.*" );
        }
    }
}

/**
 * @class класс Создание_группы_сертификатов - обработчик окна диалога 'Создание группы сертификатов'
 * @extends БазовыйДиалог
 */
class Создание_группы_сертификатов extends БазовыйДиалог {
    constructor() {
        super( arguments[0] ? arguments[0] : 'Создание группы сертификатов' );
    }
    Инициализация(){
        //this.Запись['ФEmail'] = 0;
    }
    Сохранение(){
        if( this.Запись['Количество клиентов'] < 1 ){
            ВсплывающееОкно( 'Указанное количество клиентов недопустимо', this.ИмяДиалога, "Количество клиентов" );
            return "Количество клиентов";
        }
        return this.Сохранить();
    }
    Сохранить(){
        if( this.Запись.Пароль.length < 6 ){
            ВсплывающееОкно( 'Длина пароля должна быть больше 6 символов', this.ИмяДиалога, "Пароль" );
            return "Пароль";
        }
        if( this.Запись.Пароль != this.Запись['Повтор пароля'] ){
            ВсплывающееОкно( 'Пароли не совпадают', this.ИмяДиалога, "Повтор пароля" );
            return "Повтор пароля";
        }
        return "";
    }
}

/**
 * @class класс Сертификаты_Импорт_группы - обработчик окна диалога 'Сертификаты Импорт группы'
 * @extends Создание_группы_сертификатов
 */
class Сертификаты_Импорт extends Создание_группы_сертификатов {
    constructor() {
        super( 'Сертификаты Импорт' );
    }
    Сохранение(){
        if( !this.Запись.КаталогС ){
            ВсплывающееОкно( 'Не указан каталог с сертификатами', this.ИмяДиалога, "КаталогС" );
            return "КаталогС";
        }
        return this.Сохранить();
    }
}