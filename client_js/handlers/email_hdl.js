/**
 * Created by Константин on 12.06.2015.
 */
"use strict";

/**
 * @extends ЭлектронноеСообщение
 * @class класс $ЭлектронноеСообщение - обработчик окна диалога 'ЭлектронноеСообщение' Выборки 'Электронные сообщения'
 */
class $ЭлектронноеСообщение extends ЭлектронноеСообщение {
    constructor() {
        super( 'ЭлектронноеСообщение' );
        this.ИзмененаОрганизация = false;
    }
    Сохранение(){
        super.Сохранение();
        var мыло = this.Запись.ОтКого, имяКонтакта = "";
        var позНач = мыло.indexOf( "<" );
        if( позНач != -1 ) {
            var позКнц = мыло.indexOf( ">" );
            имяКонтакта = мыло.substr( 0, позНач - 1 );
            мыло = мыло.substr( позНач + 1, позКнц - позНач + 1 );
        }
        var организация = this.Запись["Организация-Сообщения"];
        if( мыло && this.ИзмененаОрганизация && this.организация != -1 ){
            if( !ДаНет("Есть желание поредактировать контакты организации " + this.Запись['Организация-Сообщения>Название'] + "?") )
                return "";
            var оОрганизация = new БазовыйОбъект( "Организации", организация );
            оОрганизация.ПрочитатьИзКонтекста( {'email' : мыло,
                'КПП' : имяКонтакта} );
            оОрганизация.Объект.Редактировать( "Частные лица организации" );
        }
    }
    Изменение( поле ){
        switch( поле ){
            case "Организация-Сообщения":
                if( this.Запись["Организация-Сообщения"] != -1 ) this.ИзмененаОрганизация = true;
                break;
            case "@Нет_организации":
                if( ПрочитатьПолеСвязи(this.Запись, "@Нет_организации") ) {
                    this.ЭлНазваниеОрганизации.Запрещен = true;
                } else {
                    this.ЭлНазваниеОрганизации.Запрещен = false;
                }
                break;
        }
    }

    /**
     * создает новую заявку на организацию-отправителя, перед этим спрашивает действующий договор с клиентом и
     * папку создания зяавки в карточках документах
     * @returns {boolean}
     */
    СоздатьЗаявку() {
        // todo Права ДО
        //Если( !ПроверкаПравСотрудника(НомерЗаписи(Пользователь()), "Менеджер") )
        //    Ошибка( "Только менеджеры могут создавать заявки с почты!" );
            // сначала проверим наличие хотя бы одного действующего договора с организацией
        var темыДог = new кДоговор().ПолучитьТемыПоКатегории( 'КВнедрение', 'КИнсталляция', 'КСопровождение', 'КПродажа' );
        if( !темыДог ) {
            Сообщить( 'Не заполнен справочник Аналитики', "OK,ERROR_TITLE" );
            return false;
        }
        var зДоговоры = Query( "SELECT TOP 1 ROW_ID FROM ~Договор~ \
                WHERE Грузополучатель=:1 AND GETDATE() BETWEEN [Начало договора] AND ISNULL([Окончание], '20451231') \
                      AND Состояние IN(2, 3) AND Тема IN(" + темыДог + ")", 100, "org,S" );
        // если нет действующего договора с организацией, то не даем создавать заявку
        var организация = this.Запись["Организация-Сообщения"];
        if( организация <= 0 ) {
            Сообщить( "Неправильно создавать заявку на неизвестную организацию!", "OK,ERROR_TITLE" );
            return false;
        }
        зДоговоры.УстановитьПараметры( организация );
        var плательщик = -1;
        if( !зДоговоры.Следующий() ) {
            if( ДаНет( "У организации нет действующего договора. Создать заявку с договором на \"Стек-спорт\" ?" ) ) {
                // todo вынести в отдельную функцию
                var зДоговор = Query( 'SELECT TOP 1 dog.[row_id], dog.[Грузополучатель] Плательщик \
                      FROM ~Договор~ dog \
                      WHERE dog.[Грузополучатель]=:1 AND dog.[Окончание] >=getdate() AND dog.[Тема] like :2', 1, "Org,S,Tema,A" );
                зДоговор.УстановитьПараметры( НомерЗаписи( Лицо0() ), "СПП" );
                if( !зДоговор.Следующий() ) {
                    Сообщить( "У ООО Фирма \"Стек-Спорт\" нет действующего договора для данного вида работы.\nОбратитесь к менеджерам." );
                    return false;
                }
                плательщик = зДоговор.Плательщик;
            } else {
                return false;
            }
        }

        // выбираем папку для заявки
        var мВыбора = ВыборВОкне( "Карточки документов Папки" );
        var папка = -10;
        for( let нз in мВыбора ) {
            папка = Number( нз );
            break;
        }
        if( папка == -10 ) {
            Сообщить( "Необходимо выбрать папку сохранения заявки!", "OK,ERROR_TITLE" );
            return false;
        }
        var заявка = ПолучитьВыборку( "Карточки документов" );
        заявка.Примечание                = new кЭлШаблон().ШаблонТекст( this.Сообщение );
        заявка['Карточка-Организация']   = организация;
        заявка['Карточка-ПлОрганизация'] = плательщик != -1 ? плательщик : организация;
        заявка.ПрикреплФайл              = плательщик != -1 ? "'СПП'" : "";
        заявка.Письмо                    = this.Сообщение.НомерЗаписи;
        заявка.ЭлПочта                   = this.Запись.ОтКого ? this.Запись.ОтКого : this.Запись['Организация-Сообщения>email'];
        заявка.Папки                     = папка;
        заявка.Папки_Узел                = 0;
        заявка.Тема                      = this.Запись.Тема;
        заявка['Дата создания']          = new Date();
        заявка['Время создания']         = new Date();
        заявка['Источник документа']     = 4; // источник - электронная почта
            // вызовем диалог редактирования
        if( заявка.Редактировать( "Карточка документа Создание" ) ){
            this.Запись['Заявка-Почта'] = НомерЗаписи( заявка );
            this.ЗакрытьСохранение();
        } else {
            УдалитьЗапись( заявка );
        }
        return true;
    }
    ИзменитьЗаявку() { // todo когда будет создание работы (подзадания) к заявке
        var мВыбора = ВыборВОкне( "Карточки документов Сообщение" );
        var карта = -1;
        for( let нз in мВыбора ) {
            карта = Number( нз );
            break;
        }
        if( карта == -1 ) {
            Сообщить( "Необходимо выбрать заявку" );
            return true;
        }
        // определяем позицию выбранной карточки
        var вКарта = new БазоваяВыборка( "Карточки документов" );
        вКарта.Прочитать( карта );
        if( !ЭтоУзел(вКарта.Выборка) ) {
            var заявка = new кЗаявка( вКарта.Выборка );
            var файлы = заявка.ДобавитьФайлыИзСообщения( this.Сообщение.НомерЗаписи );
            var спФайлы = '';
            for( let файл of файлы ){
                спФайлы += "\n" + файл.Имя;
            }
            if( !заявка.УстановитьТекущуюФазу() ) заявка.ТекущаяФаза.ТипИсполнителя = 0;
            var редактировали = false,
                текстСообщения = new кЭлШаблон().ШаблонТекст( this.Сообщение );
            if( спФайлы ) текстСообщения += "\nК заявке приложены новые файлы:" + спФайлы;
            if( заявка.ТекущаяФаза.ТипИсполнителя == 0 ) { // задание находится у нашего сотрудника - дописываем информацию в текст заявки
                var обПодзадание = new БазовыйОбъект( "ДО задания" );
                var сегодня = new Date();
                обПодзадание.ПрочитатьИзКонтекста( { 'Задание-Карточка' : заявка.НомерЗаписи,
                    'Время выдачи' : сегодня,
                    'Дата выдачи' : сегодня,
                    'Отметки' : "Уточнение задания от " + сегодня.format( 'rusDateTime' ) + '\n"' + текстСообщения + '"',
                    'ТипИсполнителя' : 5 // необработанное уточнение к заявке
                });
                редактировали = обПодзадание.Объект.Редактировать( "Уточнение к заявке" );
                if( редактировали ) {
                    обПодзадание.Внести();
                    new кМессенджер( 6, заявка, обПодзадание ).Отправить( заявка.ТекущаяФаза.Исполнитель, null, заявка.ТекущаяФаза.Название,
                        "Уточнение задания от " + сегодня.format('rusDateTime') );
                    //СообщениеДокументооборота( зПослРаб.Исполнитель, 6, Пользователь().ФИО, вКарта.Номер, 'вКарты.Карточка-Организация>Название',
                    //    обПодзадание.Отметки, "Уточнение задания от " + Текст(ТекДат()) + " " + Текст(ТекВремя()), зПослРаб.Название );
                }
            } else { // задание на той стороне - завершаем последнюю фазу
                вКарта.ПрикреплФайл = текстСообщения;
                вКарта.Письмо = this.Сообщение.НомерЗаписи;
                вКарта.ЭлПочта = ОтКого;
                редактировали = вКарта.Выборка.Редактировать( "Карточка документа" );
            }
            if( !редактировали && файлы.length > 0 ){
                // удаляем прикрепленные к завке файлы, если отменили сохранение
                var del = Command( "DELETE FROM ~ДО внешние документы~ WHERE ROW_ID=:1; \
                    DELETE FROM ~ДО хранилище~ WHERE [Хранилище-Файл]=:2;", 1, "id0,S,id1,S" );
                for( let файл of файлы )
                    del.Выполнить( файл.Документ, файл.Документ );
                del.Завершить();
            }
        }
        return true;
    }
}

/**
 * @extends ЭлСообщение_Организация
 * @class класс ЭлСообщение_Организация - обработчик Выборки 'ЭлСообщение Организация' для отображения организаций,
 * которых можно привязать к сообщению через email
 */
class $ЭлСообщение_Организация extends ЭлСообщение_Организация {
    constructor() {
        super( 'ЭлСообщение Организация', 'ЭлектронноеСообщение Организация' );
        this.ЭтоДО = (Задача() == 'Документооборот');
    }
    Цвет(){
        if( this.ЭтоДО ) return this.ЦветЗаписи( this.Запись.Цвет % 8 );
        return this.ЦветЗаписи( 0 );
    }
    Картинка(){
        if( !this.ЭтоДО ) return 0;
        if( this.Запись.Цвет & 16 ) {
            return "@Картинка,2";
        } else {
            return "@Картинка,0";
        }
    }
}

class $ЭлектронноеСообщение_Создание extends ЭлектронноеСообщение_Создание {
    constructor() {
        super( 'ЭлектронноеСообщение Создание' );
    }
    Инициализация(){ //+
        if( this.Запись.Операция == "Рассылка" ){
            this.Источник.Элементы["Кому"].Запрещен = true;
            this.Источник.Элементы["@Кому"].Запрещен = true;
            this.Источник.Элементы["Копия"].Запрещен = true;
            this.Источник.Элементы["@Копия"].Запрещен = true;
            this.Источник.Элементы["СкрытаяКопия"].Запрещен = true;
            this.Источник.Элементы["@СкрытаяКопия"].Запрещен = true;
            this.Источник.Элементы["В исходящие"].Запрещен = true;
            this.Источник.Элементы["@Черновик"].Запрещен = true;
            this.Источник.Элементы["&Отправить"].Скрытый = true;
            this.Источник.Элементы["Рассылка организациям"].Скрытый = false;
        }
        super.Инициализация();
    }
    /**
     * устанавливаем текст запроса полям Коия и СкрытаяКопия
     */
    КП0(){ //+
        var стрЗапрос = "SELECT CASE " +
            "   WHEN PATINDEX('%<%', email1)<>0 " +
            "      THEN LTRIM(RTRIM(SUBSTRING(email1, 0, PATINDEX('%<%', email1)))) " +
            "   WHEN фио<>'' " +
            "      THEN фио " +
            "   ELSE Название END + CASE " +
            "   WHEN фио<>'' " +
            "      THEN ' - ' + Название " +
            "   ELSE '' END + CASE " +
            "   WHEN PATINDEX('%<%', email1)<>0 " +
            "      THEN SUBSTRING(email, PATINDEX('%<%', email),len(email)) " +
            "   WHEN PATINDEX('%;%', email)<>0 " +
            "      THEN '<' +SUBSTRING( email, 0, PATINDEX('%;%', email)) + '>' + SUBSTRING( email, PATINDEX('%;%', email), LEN(email)) " +
            "   ELSE '<' + email + '>' END as Название, '' as n1, Организация [ROW_ID] " +
            "FROM (SELECT Название, '' as фио, email, CASE " +
            "        WHEN PATINDEX('%;%', email)<>0 " +
            "           THEN SUBSTRING(email, 0, PATINDEX('%;%', email)) " +
            "        ELSE email END as email1, ROW_ID as Организация " +
            "      FROM ~Организации~ " +
            "      WHERE email IS NOT NULL AND email <> '' " +
            "      UNION ALL " +
            "      SELECT org.Название, man.ФИО, man.email, CASE " +
            "         WHEN PATINDEX('%;%', man.email)<>0 " +
            "            THEN SUBSTRING(man.email, 0, PATINDEX('%;%', man.email)) " +
            "         ELSE man.email END as email1, man.[Организация-Частные лица] [Организация] " +
            "      FROM ~Частные лица~ man " +
            "         JOIN ~Организации~ org ON man.[Организация-Частные лица]=org.ROW_ID " +
            "      WHERE man.email IS NOT NULL AND man.email <> '' AND ФИО <> 'Основной телефон организации') s1 " +
            "ORDER BY Название";
        УстановитьЗапрос( this.ИмяДиалога, "Копия", стрЗапрос );
        УстановитьЗапрос( this.ИмяДиалога, "СкрытаяКопия", стрЗапрос );

        return 1;
    }

    /**
     * рассылка сообщения выбранным организациям
     * создает письма в Исходящих (ящик для отправки stack@yarnet.ru), подобные созданному, для всех выбранных организаций
     */
    КП6(){ //+
        var вернуть = this.ПроверкаДанныхРассылка();
        if( вернуть ) return вернуть;

        this.Исходящее = true;
        var мОрганизации = ВыборВОкне( "Организации - рассылка" );
        if( НомерЗаписи(this.Запись) > 0 ) this.Сообщение.Прочитать( НомерЗаписи(this.Запись) );
        if( Размер(мОрганизации) > 0 ) {
            var оОрганизация = new БазовыйОбъект( "Организации" );

            for( let i in мОрганизации ) {
                var организация = Number( мОрганизации[i] );
                оОрганизация.Прочитать( организация );
                if( !оОрганизация.Объект.email ) {
                    Сообщить( "У организации " + оОрганизация.Объект.Название + " не указан электронный адрес." );
                    continue;
                }
                var сообщение = new кЭлСообщение();
                сообщение.Ящик = this.Сообщение.Ящик;
                сообщение.ПрочитатьИзКонтекста( {
                    'Кому': оОрганизация.Объект.email,
                    'ОтКого': this.Сообщение.Объект.ОтКого,
                    'Тема': this.Запись.Тема,
                    'Приоритет': 0,
                    'Папка': this.Сообщение.Ящик.Исходящие,
                    'Папка_Узел': 0,
                    'Организация-Сообщения': организация,
                    'Признаки': 2 //
                } );
                сообщение.УстановитьОтправителя();
                if( сообщение.Внести() > 0 ) {
                    this.Сообщение.КопироватьВложение( сообщение.НомерЗаписи, -10 );
                    сообщение.СохранитьТекст( this.Запись['@Редактор письма'] );
                    сообщение.УстановитьДату( 'Создано' );
                }
            }
        }
        this.ЗакрытьОтмена(); // удаляем исходное сообщение
    }
    ПроверкаДанныхРассылка(){ //+
        if( !this.Запись.Тема ){
            if( !ДаНет("Тема письма пустая. Продолжить рассылку?") ) return "Тема";
        }
        if( !this.Запись['@Редактор письма'] ){
            if( !ДаНет("Текст письма пустой. Продолжить рассылку?") ) return "@Редактор письма";
        }
        return '';
    }
}

/**
 * @extends БазоваяВыборка
 * @class класс Карточки_документов_Сообщение - обработчик выборки 'Карточки документов Сообщение'
 */
class Карточки_документов_Сообщение extends Карточки_документов {
    constructor() {
        super( 'Карточки документов Сообщение' );
    }
    Фильтр(){
        var источник = this.Источник.Группа.Обработчик.Запись;

        var мФильтр = {};
        мФильтр["Диалог"] = "Фильтр Заявки";
        мФильтр["Запрос"] = '(t1.[Папки_ADD]=0 OR (t1.[Папки_ADD]=1 AND t1.[Карточка-Организация]=:1 \
            AND (t1.ROW_ID IN( SELECT [Задание-Карточка] FROM ~ДО задания~ \
                WHERE ТипИсполнителя IN(0,1) \
                GROUP BY [Задание-Карточка] \
                HAVING min([Статус завершения])=0) \
            OR NOT EXISTS( SELECT [Задание-Карточка] FROM ~ДО задания~ \
                WHERE [Задание-Карточка] = t1.ROW_ID))))';
        мФильтр["ДатаС"] = new Date( new Date().getFullYear(), 0, 1 );
        мФильтр["ДатаПо"] = new Date( new Date().getFullYear(), 11, 31 );
        мФильтр.Параметры = [источник["Организация-Сообщения"]];
        return мФильтр;
    }
}

/**
 * @extends БазовыйДиалог
 * @class класс Фильтр_Заявки - обработчик окна диалога 'Фильтр Заявки' фильтра для выбора заявки
 */
class Фильтр_Заявки extends БазовыйДиалог {
    constructor() {
        super( 'Фильтр Заявки' );
        this.ЭлОрганизация = null;
        this.ЗОрганизация = Query( "SELECT Название FROM ~Организации~ WHERE ROW_ID=:1", 1, "id,S" );
    }
    Инициализация(){
        var значФильтра = ПолучитьЗначенияФильтра( "Карточки документов Сообщение", "Карточки документов Сообщение" );
        this.ЭлОрганизация = this.Источник.Элементы["ВыборОрганизации"];
        this.ЭлОрганизация.Текст = "";
        var организация = значФильтра[Размер(значФильтра)];
        if( организация !== undefined ) {
            this.ЗОрганизация.УстановитьПараметры( организация );
            if( this.ЗОрганизация.Следующий() ){
                this.ЭлОрганизация.Текст = this.ЗОрганизация.Название;
                this.ЭлОрганизация.Фильтр( this.ЗОрганизация.Название );
            }
        }
    }
    Сохранение(){
        var запрос = '(t1.[Папки_ADD]=0 OR ( [Дата создания] >=:1 AND [Дата создания] <=:2 AND t1.[Карточка-Организация]=:3 \
            AND (t1.ROW_ID IN( SELECT [Задание-Карточка] FROM ~ДО задания~ \
                WHERE ТипИсполнителя IN(0,1) \
                GROUP BY [Задание-Карточка] \
                HAVING min([Статус завершения])=0) \
            OR NOT EXISTS( SELECT [Задание-Карточка] FROM ~ДО задания~ \
                WHERE [Задание-Карточка] = t1.ROW_ID))))';

        var организация = this.ЭлОрганизация.Значение();
        УстановитьПараметрыФильтра( "Карточки документов Сообщение", "Карточки документов Сообщение", запрос, "D,D,S",
            this.Запись.ДатаС, this.Запись.ДатаПо, организация );
    }
}