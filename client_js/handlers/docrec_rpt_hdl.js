'use strict';

class Отчет_по_организациям
{
   constructor()
   {
      this.испАб;
   }
   
	Инициализация()
	{
		this.Запись.испАб = 80;
		this.испАб = this.Источник.Элементы.испАб;
      this.испАб.Запрещен = 1;
	}
   
	Изменение( Поле )
	{
		if( Поле == "типОтчета" )
		{
			if( this.Запись.типОтчета == "Рассылка" )
				this.испАб.Запрещен = 0;
			else
			{
				this.Запись.испАб = 80;
            this.испАб.Запрещен = 1;
			}
		}
	}
}

class Отчет_по_организациям___Рассылка extends БазовыйДиалог
{
	constructor()
	{
		super('Отчет по организациям - Рассылка');
	}

	СформироватьТелоДляРасылки( в )
	{
		if( в.Тема == "СКА" || в.Тема == "СЭА" || в.Тема == "СУА" )
		{
			var строка = "Сообщаем Вам, что согласно п.1.2 договора сопровождения № " + в.НомерДог + " от " + в.ДатаПодписания.format( "rusDate" ) +
			" по вашим заявкам может быть отработано не более " + в.АбонЧасы + " часов суммарного рабочего времени в каждом месяце.\n" +
			"По состоянию на " + new Date().format( "rusDate" ) + " по Вашим заявкам отработано " + в.ЧасовКОплате + " часов.\n" +
			"Также в процессе находятся незавершенные заявки в количестве - " + в.АктЗаяв + " и нераспределенные на специалиста " +
			"заявки в количестве " + в.НераспЗаяв + " (подробнее на сайте: www.sd.stack-it.ru)\n" +
			"Время, превысившее ежемесячный лимит часов, будет выставлено к оплате по стоимости дополнительных часов согласно условиям договора № " +
			в.НомерДог + " от " + в.ДатаПодписания.format( "rusDate" ) + "\n" +
			"Просим учесть этот факт при направлении к нам новых заявок.\n" +
			"По заявкам, которые находятся в процессе либо ожидают распределения на специалиста, предлагаем перенести выполнение данных работ в следующем месяце.\n" +
			"Просим сообщить Ваше решение.";

			var пс = '\n\nC Уважением, ' + ФИО(Пользователь().ФИО );
			return строка + пс;
		}
		return "";
	}

	Сохранение() {
		var внос = Command( `INSERT INTO ~ДО письма~( [Письмо-Договор],[email],[Дата],[Автор] )
							VALUES( :1,:2,:3,:4 )`, 500, "MailDog,S,email,A,Date,D,Aut,A" );

		var имя_ящика = "stack@yarnet.ru";
		var ящик = кЭлЯщик.ПолучитьЭлектронныйЯщик( имя_ящика );
		if( ящик == -1 ) {
			Сообщить( "Не найден почтовый ящик" + имя_ящика + "для рассылки." );
			return "";
		}
		var в = new БазоваяВыборка( "@Отчет по организациям - Рассылка", this.ИмяДиалога );
		в.ПолучитьВыборку();
		var мПозиций = в.ПолучитьВыделенныеЗаписи( false );
		if( мПозиций.length == 0 )
		{// выделенных записей не было
			if( ДаНет( "Вы действительно хотите отправить сообщения для всех записей из списка?" ) )
			{
				while( в.Следующий() ) // перебираем всю выборку
					мПозиций.push( НомерЗаписи(в.Выборка) );
			}
		}
		var сообщение = new кЭлСообщение(); // сообщение для отправки уведомления
		сообщение.Ящик = new кЭлЯщик( ящик );
		if( сообщение.Ящик.Исходящие == -1 )
		{
			Сообщить( "В ящике \"" + имя_ящика + "\" не существует папки \"Исходящие\".\nПопробуйте пересоздать ящик." );
			return "";
		}
		for( let номерЗаписи of мПозиций )
		{
			ПрочитатьЗаписьТаблицы( в.Выборка, номерЗаписи );
			if( в.Выборка.email != "" ) {
				if( в.Выборка.АбонЧасы == 0 && в.Выборка.ЧасовКОплате == 0) continue;
				var тело_с = this.СформироватьТелоДляРасылки( в.Выборка );
				if( тело_с ) {
					сообщение.ПрочитатьИзКонтекста( {
						'Кому': в.Выборка.email,
						'Тема': "Уведомление от " + new Date().format( "rusDate" ) + " для " + в.Выборка.Организация + " (договор № " + в.Выборка.НомерДог + ")",
						'Приоритет': 0,
						'Папка': сообщение.Ящик.Исходящие,
						'Папка_Узел': 0,
						'Организация-Сообщения': в.Выборка.нОрг,
						'Заявка-Почта': -1,
						'Признаки': 2 // Обработано
					} );
					сообщение.УстановитьОтправителя();
					if( сообщение.Внести() > 0 ) {
						сообщение.СохранитьТекст( тело_с );
						сообщение.УстановитьДату( 'создано,получено' );
						внос.Выполнить( в.Выборка.ПозДог, в.Выборка.email, new Date(), Пользователь().ФИО );
					}
				}
			}
			else
				Сообщить( "У органирзации " + в.Выборка.Организация + " отсутствует адрес электронной почты." );
		}
		внос.Завершить();

		ПеренабратьВыборку( "ЗаголовокСообщение" );
	}
}

class Диалог___Отчет_детализация_общ
{
   constructor()
   {
      this.Кол_дог;
      this.нзДоговора;
      this.ЭлОрганизация = null;
   }
   
   Модальность()
   {
      this.ЭлОрганизация = this.Источник.Элементы["Организация"];
      if( this.Кол_дог == 1)
      {
         this.Источник.Элементы.Организация.Запрещен = 1;                     //####=== т.к. печать идет по уже выбранным договорам
         this.Источник.Элементы.ВидОтчДог.Запрещен = 1;
         this.Запись.ВидОтчДог = 0;
      }
      if( this.Кол_дог > 1 )
      {
         this.Источник.Элементы.Организация.Запрещен = 1;  //####=== т.к. печать идет по уже выбранным договорам
         this.Источник.Элементы.ВидОтч.Запрещен = 1;      //Если выбраны несколько догворов, предполагается что, пока их можно выгрузить только в pdf в папку
         this.Источник.Элементы.ВидОтчДог.Запрещен = 1;
         this.Запись.ВидОтчДог = 1;
      }
   }
   
   Изменение( Поле )
   {
      switch(Поле)
      {
         case "ВидОтч":
         {
            if( this.Запись.ВидОтч == 1)  //####==== excel
            {
               this.Запись.ВидОтчДог = 0;
               this.Источник.Элементы.ВидОтчДог.Запрещен = 1;
               if( this.Кол_дог == 0 )
                  this.Источник.Элементы.Организация.Запрещен = 0;
            } 
            else
            {
               if( this.Кол_дог == 0 && this.ЭлОрганизация.Значение() == -1 )
                  this.Источник.Элементы.ВидОтчДог.Запрещен = 0;
            }               
         }
				break;
         case "ВидОтчДог":
         {
            if( this.Запись.ВидОтчДог != "Все договора(PDF в папку)" )  //Установили печать всех договоров в
               this.Источник.Элементы.Организация.Запрещен = 0;
            else
            {
               this.Запись.ВидОтч = 0;
               this.Источник.Элементы.Организация.Запрещен = 1;
            }    
         }
				break;
         case "Организация":
         {
            this.нзДоговора = this.ЭлОрганизация.Значение();
            if( this.нзДоговора != -1) //####==== Выбрали договор
            {
               this.Источник.Элементы.ВидОтчДог.Запрещен = 1;
               this.Запись.ВидОтчДог = 0;
            }
            else
               this.Источник.Элементы.ВидОтчДог.Запрещен = 0;
         }
				break;
      }   
   }
   
   Сохранение()
   {
      this.нзДоговора = this.ЭлОрганизация.Значение();
   }
}

class ОтчетыОрг extends БазовыйДиалог
{
	constructor()
	{
		super( "ОтчетыОрг" );
		this.Каталог;
		this.ВыборкаОтчета;
	}

	Модальность()
	{
		this.ВыборкаОтчета = new БазоваяВыборка( this.ИмяДиалога, this.ИмяДиалога );
		this.ВыборкаОтчета.ПолучитьВыборку();
		var вОтчет = [];
		var зОрг = Query( "SELECT Название, email FROM ~Организации~ WHERE row_id=:1", 1, "id,S" );
		var СодКат = СодержимоеКаталога( this.Каталог + "\\*" );
		for( let индФ in СодКат )
		{
			var мДан = СодКат[индФ].split("_");
			зОрг.УстановитьПараметры( Number(мДан[0]) );

			if( зОрг.Следующий() )
			{
				var Организация = зОрг.Название.replaceAll( " ", "_" );
				Организация = Организация.replace( /[,\"]/g, "" );
				var кОплате = мДан[3].split( "." )[0];

				вОтчет.push( {
					'Наименование' : зОрг.Название,
					'email' : зОрг.email,
					'ИмяФайла' : Организация + ".pdf",
					//'ИмяФайла' : СодКат[индФ],
					'Путь' : this.Каталог + "\\" + СодКат[индФ],
					'нОрг' : Number( мДан[0] ),
					'нДоговора' : мДан[1].replaceAll( ";", "/" ),
					'АбонЧасы' : Number(мДан[2]).ЧислоСВедущимиНулями(2) + ":" + "00", // абонентские часы приходят в часах
					'кОплате' : ( Math.floor (Number(кОплате)/60) ).ЧислоСВедущимиНулями(2) + ":" + (Number(кОплате)%60).ЧислоСВедущимиНулями(2) // к оплате приходит в минутах'Наименование'
				});
			}
		}
		this.ВыборкаОтчета.Заполнить( вОтчет );
	}

	Сохранение() {
		var имя_ящика = "stack@yarnet.ru";
		var ящик = кЭлЯщик.ПолучитьЭлектронныйЯщик(имя_ящика);
		if (ящик == -1) {
			Сообщить("Не найден почтовый ящик" + имя_ящика + "для рассылки.");
			return "";
		}

		var мПозиций = this.ВыборкаОтчета.ПолучитьВыделенныеЗаписи(false);

		var сообщение = new кЭлСообщение(); // сообщение для отправки уведомления
		сообщение.Ящик = new кЭлЯщик(ящик);
		if (сообщение.Ящик.Исходящие == -1) {
			Сообщить("В ящике \"" + имя_ящика + "\" не существует папки \"Исходящие\".\nПопробуйте пересоздать ящик.");
			return "";
		}

		var тело_с = `Направляем Вам отчет отработанного по Вашим заявкам времени.\n`;
		тело_с += `В случае возникновения вопросов или замечаний просим обращаться \nк менеджерам по тел. (4852)59-45-00 или эл. почте support@stack-it.ru\n\n`;
		if (Пользователь().Имя == "ПОЧУЕВА")
			тело_с += `С уважением, менеджер Почуева Е.А.`;
		else if (Пользователь().Имя == "ГОЛУБЕВА")
			тело_с += `С уважением, менеджер Голубева Я.Ю.`;
		else if (Пользователь().Имя == "ПЕРЕЛЕВНОВА")
			тело_с += `С уважением, менеджер Перелевнова А.В.`;

		for (let номерЗаписи of мПозиций) {
			if (!this.ВыборкаОтчета.Прочитать(номерЗаписи)) continue;
			var запись = this.ВыборкаОтчета.Выборка;
			if (запись.email) {
				var файлВлж = this.Каталог + "\\" + запись.ИмяФайла;
				ПереименоватьФайл(запись.Путь, файлВлж); // чтобы имя файла соответствовало названию организации

				сообщение.ПрочитатьИзКонтекста({
					'Кому': запись.email,
					'Тема': "Детализация по организации " + запись.Наименование + " за " + РабМес().format("MM.yyyy"),
					'Приоритет': 0,
					'Папка': сообщение.Ящик.Исходящие,
					'Папка_Узел': 0,
					'Организация-Сообщения': запись.нОрг,
					'Заявка-Почта': -1,
					'Признаки': 2 // Обработано
				});
				сообщение.УстановитьОтправителя();
				if (сообщение.Внести() > 0) {
					var вложение = new кЭлВложение(сообщение.НомерЗаписи, 'сообщение');

					var аттрибутыФ = АтрибутыФайла(файлВлж);
					if (аттрибутыФ.Размер > 0) {
						вложение.ДобавитьФайл(файлВлж);
					}
					сообщение.СохранитьТекст(тело_с);
					сообщение.УстановитьДату('создано,получено');
				}
				// удаляем файл отчета
				УдалитьФайл(файлВлж);
			}
			else
				Сообщить("У органирзации " + запись.Наименование + " отсутствует адрес электронной почты.");
		}
		ПеренабратьВыборку("Электронные Сообщения");
	}
}

class Отработано_по_сотрудникам
{
	constructor()
	{
		this.Детализация = 0;
		this.ТолькоВнедр = 0;
		this.Кратк = 0;
		this.Звено = 0;
		this.СвоеЗвено = 0;
		this.Катег = 0;
	}
	Инициализация()
	{
      
      this.Источник.Элементы.СвоеЗвено.Запрещен = 1;
	}
	Изменение( Поле )
	{
		switch( Поле )
		{
			case "Детализация":
			{
            if( this.Запись["Детализация"] == 1 )
				{
					this.Кратк = 0;
               this.Источник.Элементы.Кратк.Запрещен = 1;
				}
				else
					this.Источник.Элементы.Кратк.Запрещен = 0;
			}
         break;
			case "Кратк":
			{
				if( this.Запись["Кратк"] == 1 )
				{
					this.Детализация = 0;
               this.Источник.Элементы.Детализация.Запрещен = 1;
				}
				else
               this.Источник.Элементы.Детализация.Запрещен = 0;
			}
         break;
			case "Звено":
			{
				if( this.Запись["Звено"] == 0 )
				{
               this.Источник.Элементы.СвоеЗвено.Запрещен = 1;
               this.Источник.Элементы.Катег.Запрещен = 0;
					this.СвоеЗвено = 0;
				}
				else
				{
               this.Источник.Элементы.СвоеЗвено.Запрещен = 0;
               this.Источник.Элементы.Катег.Запрещен = 1;
				}
			}
         break;
			case "Катег":
			{
				if( this.Запись["Катег"] == 1 )
				{
               this.Источник.Элементы.Звено.Запрещен = 1;
				}
				else
				{
               this.Источник.Элементы.Звено.Запрещен = 0;
				}
			}
         break;
		}
	}
}

class ДО_Сотрудники_и_число_работ
{
	Расчет()
	{
		var зКолРабот = Query(`DECLARE @LS int;
							  SET @LS = :1;

							  SELECT count(*) [КолРабот],(SELECT count(*) fROM ~ДО задания~ work
													  INNER JOIN ~ДО Карточки~ card ON card.[row_id]=work.[Задание-Карточка]
														   WHERE work.Папки_ADD = 1 and work.[Задание-исполнитель]=@LS and work.[Статус завершения]=0
															  and ISNULL(card.[Завершить До],'20100101')<getdate() and work.[ТипИсполнителя] in (0,1)) [КолПросрочРабот]
											  , (SELECT count(*) fROM ~ДО задания~ work
													  INNER JOIN ~ДО Карточки~ card ON card.[row_id]=work.[Задание-Карточка]
														   WHERE work.Папки_ADD = 1 and work.[Задание-исполнитель]=@LS and work.[Статус завершения]=0 and work.[ТипИсполнителя] in (0,1)) [КолАктивРабот]
											  , (SELECT count(*) fROM ~ДО задания~ work
													  INNER JOIN ~ДО Карточки~ card ON card.[row_id]=work.[Задание-Карточка]
														   WHERE work.Папки_ADD = 1 and work.[Задание-исполнитель]=@LS and work.[Статус завершения]=6 and work.[ТипИсполнителя] in (0,1)) [КолПриостРабот]
								FROM ~ДО задания~ work
							   WHERE work.Папки_ADD = 1 and work.[Задание-исполнитель]=@LS and work.[Статус завершения] in (0,6) and work.[ТипИсполнителя] in (0,1)
							 `,1,"LS,S");

		//зКолРабот.УстановитьПараметры( НомерЗаписи(this.Запись) );
		зКолРабот.УстановитьПараметры( НомерЗаписи(this.Запись) );
		if( зКолРабот.Следующий() )
		{
			//'@КолРабот' = зКолРабот.КолРабот;
			//'@КолПросрочРабот' = зКолРабот.КолПросрочРабот;
			//'@КолАктивРабот'   = зКолРабот.КолАктивРабот;
			//'@КолПриостРабот'  = зКолРабот.КолПриостРабот;
			this.Запись['@КолРабот'] = зКолРабот.КолРабот;
			this.Запись['@КолПросрочРабот'] = зКолРабот.КолПросрочРабот;
			this.Запись['@КолАктивРабот']   = зКолРабот.КолАктивРабот;
			this.Запись['@КолПриостРабот']  = зКолРабот.КолПриостРабот;
		}
	}
}

class Отчет_детализация
{
	Сохранение()
	{
		this.Запись.нзДоговора = ЗначениеВыпадающегоСписка( "Отчет-детализация", "Организация" )
	}
}