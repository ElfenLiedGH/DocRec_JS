'use strict';
/**
 * @extends Сотрудники
 * @class класс $Сотрудники - заплатка на обработчик выборки Сотрудники из окна Сотрудники
 */
class $Сотрудники extends Сотрудники {
    constructor() {
        /**
         * memberof ЭтоДО - текущая задача - Документооборот
         */
        super('Сотрудники', 'Сотрудники');
        this.ЭтоДО = (Задача() == 'Документооборот');
    }

    Расчет() {
        if ( this.ЭтоДО ) {
            var аттрСотр = this.Запись.Телефон.split('#', 8);
            this.Запись['@РКТелефон'] = аттрСотр[0];
            this.Запись['@МЛТелефон'] = аттрСотр[1];
            this.Запись['@МКТелефон'] = аттрСотр[2];
            this.Запись['@ДомТелефон'] = аттрСотр[3];
            this.Запись['@EMail'] = аттрСотр[4];
            this.Запись['@Skype'] = аттрСотр[5];
            this.Запись['@ICQ'] = аттрСотр[6];
            this.Запись['@Кабинет'] = аттрСотр[7];
        } else super.Расчет();
    }

    Цвет() {
        if ( this.ЭтоДО ) return 0;
        return super.Цвет();
    }

    /**
     * Отображает диалог с работами данного сострудника
     * @returns {number} 1, если событие обработано
     */
    КП3() {
        this.Запись.Редактировать("ДО Сотрудники - работы");
        return 1;
    }
}

/**
 * @extends Сотрудники
 * @class класс $Сотрудник - заплатка на обработчик диалога Сотрудник из справочника Сотрудники
 */
class $Сотрудник extends Сотрудник {
    constructor() {
        super('Сотрудник');
        /**
         * row_id таблицы "Сотрудники (расширение)"
         * @type {number}
         */
        this.РасширениеС = -1;
        /**
         * текущая задача - Документооборот
         * @type {boolean}
         */
        this.ЭтоДО = (Задача() == 'Документооборот');
    }

    /**
     * загружает образ фотографии в файл на клиенте и отображает его в поле для фотографии
     */
    ПоказатьФото() {
        if ( this.ЭтоДО && this.РасширениеС > 0 ) {
            СоздатьКаталог("Report"); // через файл
            var путь = "CLIENT:Report\\tmp.bmp";
            var зОбраза = Query('SELECT [Образ] FROM ~ДО Фото~ WHERE [Файл фото]=:1', 1, "own,S");
            зОбраза.УстановитьПараметры(this.РасширениеС);
            if ( зОбраза.Следующий() && !зОбраза.ДвоичноеПолеВФайл("Образ", путь) )
                ПоказатьИзображение(this.ИмяДиалога, "@Изображение", путь.replace("CLIENT:", ""));
        }
    }

    /**
     * удаляет образ фотографии из Расширения сотрудника
     */
    УдалитьФото() {
        if ( this.ЭтоДО && this.РасширениеС > 0 ) {
            var кУдалить = Command('DELETE FROM ~ДО Фото~ WHERE [Файл фото]=:1', 1, "id,S");
            кУдалить.Выполнить(this.РасширениеС);
            кУдалить.Завершить();
        }
    }

    /**
     * добавляет фотографию в Расширение сотрудника
     */
    ДобавитьФото() {
        if ( !this.ЭтоДО ) return true;

        this.УдалитьФото();
        var файл = ВыбратьФайл("Открыть файл...", "", 0, "*.*, All Files");
        if ( this.РасширениеС > 0 && файл ) {
            var аттФ = АтрибутыФайла(файл);
            if ( аттФ.Размер > 0 ) {
                var кФото = Command('INSERT INTO ~ДО Фото~([Файл фото],Образ) \
                                  VALUES(:1, :2)', 1, "p1,S,p2,F");
                кФото.Выполнить(this.РасширениеС, файл);
                кФото.Завершить();
            }
        }
    }

    Инициализация() {
        if ( this.ЭтоДО ) {
            var аттрСотр = this.Запись.Телефон.split('#', 8);
            this.Запись['@РКТелефон'] = аттрСотр[0];
            this.Запись['@МЛТелефон'] = аттрСотр[1];
            this.Запись['@МКТелефон'] = аттрСотр[2];
            this.Запись['@ДомТелефон'] = аттрСотр[3];
            this.Запись['@EMail'] = аттрСотр[4];
            this.Запись['@Skype'] = аттрСотр[5];
            this.Запись['@ICQ'] = аттрСотр[6];
            this.Запись['@Кабинет'] = аттрСотр[7];
            this.Запись['@Должность'] = this.Запись.Должность;
            this.РасширениеС = ПрочитатьПолеСвязи(this.Запись, "Расширение сотрудника");
            var оСР = Объект("Сотрудники (расширение)");
            if ( this.РасширениеС > 0 ) {
                ПрочитатьЗаписьТаблицы(оСР, this.РасширениеС);
                this.Запись['@ДатРож'] = оСР['Год рождения'];
            }
            this.ПоказатьФото();
        } else super.Инициализация();
    }

    Изменение( _поле ) {
        if ( _поле == "@РКТелефон" || _поле == "@МЛТелефон" || _поле == "@МКТелефон" || _поле == "@ДомТелефон" || _поле == "@EMail" || _поле == "@Skype" || _поле == "@ICQ" || _поле == "@Кабинет" )
            this.Запись.Телефон = this.Запись['@РКТелефон'] + "#" + this.Запись['@МЛТелефон'] + "#" + this.Запись['@МКТелефон'] + "#" + this.Запись['@ДомТелефон'] + "#" + this.Запись['@EMail'] + "#" + this.Запись['@Skype'] + "#" + this.Запись['@ICQ'] + "#" + this.Запись['@Кабинет']; else if ( _поле == "@Должность" ) {
            if ( ЗначениеВыпадающегоСписка(this.ИмяДиалога, "@Должность") <= 0 ) {
                Сообщить("Нет такой должности. Выберите из списка!");
                return "@Должность";
            }
        } else super.Изменение(_поле);
    }

    Сохранение() {
        if ( this.ЭтоДО ) {
            var оСР = Объект("Сотрудники (расширение)");
            if ( this.РасширениеС > 0 ) {
                ПрочитатьЗаписьТаблицы(оСР, this.РасширениеС);
                оСР['Год рождения'] = this.Запись['@ДатРож'];
                СохранитьЗапись(оСР);
            } else {
                оСР['Год рождения'] = this.Запись['@ДатРож'];
                this.Запись['Расширение сотрудника'] = ВнестиЗапись(оСР);
            }
            this.Запись.Должность = this.Запись['@Должность'];
        } else {
            super.Сохранение()
        }
    }

    /**
     * добавить фотографию сотрудника из выбранного файла, фото храниться в Расширение сотрудника
     * @returns {number} - 1, если событие обработано
     */
    КП1() {
        if ( this.ЭтоДО ) {
            var оСР = Объект("Сотрудники (расширение)");
            if ( this.РасширениеС > 0 ) {
                this.ДобавитьФото();
            } else {
                this.Запись['Расширение сотрудника'] = this.РасширениеС = ВнестиЗапись(оСР);
                this.ДобавитьФото();
            }
            this.ПоказатьФото();
        } else super.КП1();
        return 1;
    }

    /**
     * удалить фотографию сотрудника
     * @returns {number} - 1, если событие обработано
     */
    КП2() {
        if ( this.ЭтоДО ) {
            this.УдалитьФото();
        } else super.КП2();
        return 1;
    }
}
/**
 * @extends Организации
 * @class  класс $Организации
 * memberof ОбработчикиЗаплатки
 */
class $Организации extends Организации {
    constructor() {
        super();
        this.ЭтоДО = Задача() == 'Документооборот';
    }

    Начало() {
        if ( this.ЭтоДО ) {
            this._ВызваноСобытиеКП0 = 0;
            this.зПараметры = Query(` SELECT zp.Значение, par.Имя
           FROM ~Значения параметров~ zp
           JOIN ~Параметры~ par ON par.ROW_ID = zp.[Параметр-Значения]
           WHERE :1 BETWEEN ISNULL( zp.ДатНач, '19800101' ) AND ISNULL( zp.ДатКнц, '20450509' )
           AND zp.[Орг-Параметры] = :2`, 10, "rDate,D,orgID,S");
        }
    }

    Расчет() {
        super.Расчет();
        if ( this.ЭтоДО ) {
            if ( !this._ВызваноСобытиеКП0 && ИмяТекущегоОкна() == "Организации - рассылка" ) {
                $Организации.ОтметитьОрганизациисДействующимДоговором("Организации - рассылка", "Организации");
                this._ВызваноСобытиеКП0 = 1;
            }
            this.ЕстьЭДО = 0;
            this.Облако = 0;
            this.зПараметры.УстановитьПараметры(new Date, НомерЗаписи(this.Запись));
            while ( this.зПараметры.Следующий() ) {
                if ( this.зПараметры.Значение.toUpperCase().indexOf('ОБЛАКО') != -1 ) this.Облако = 1;
                if ( this.зПараметры.Имя.toUpperCase().indexOf('ЭДО') != -1 ) this.ЕстьЭДО = 1;
            }
        }
    }

    Цвет() {
        var пЦвет = super.Цвет();
        if ( this.ЕстьЭДО ) пЦвет += "#Шрифт*Пустой,Ж;"
        return пЦвет;
    }

    Картинка() {
        if ( this.ЭтоДО ) {
            var пКартинка = '';
            if ( ЭтоУзел(this.Запись) ) {
                пКартинка = "@Картинка,1;";
            }
            if ( !пКартинка && this.Облако ) {
                пКартинка = "@Картинка,4;";
            }
            if ( !пКартинка && this.Запись.Цвет % 32 >= 16 ) {
                пКартинка = "@Картинка,2;";
            }
            if ( !пКартинка ) {
                пКартинка = "@Картинка,0;";
            }
            if ( this.Запись.УстановленСД ) {
                пКартинка += "Название,5";
            }
            return пКартинка;
        }
    }

    Фильтр() {
        // todo проверить фильтр организаций
        if ( this.ЭтоДО ) {
            this.мФильтр = {};
            this.мФильтр["Запрос"] = "((Цвет % 8 in(3,4) and Организации_ADD=1) or Организации_ADD=0 )"; // по умолчанию отображаем синие и зеленые организации
            this.мФильтр["Диалог"] = "Фильтр организации";
            this.мФильтр["ПоСостоянию"] = 3;
            this.мФильтр["ПоПараметру"] = 0;
            return this.мФильтр;
        }
    }

    /**
     * Отмечаем организации с действующим договром
     * @param Окно Имя окна, вкотором необходимо отметить
     * @param Выборка Имя борыки, в которой необходимо отметить
     * @static
     */
    static ОтметитьОрганизациисДействующимДоговором( Окно, Выборка ) {
        var зДействующиеДоговоры = Query("SELECT o.ROW_ID\
                                         FROM ~Организации~ o, ~Договор~ c\
                                         WHERE o.ROW_ID=c.[Грузополучатель]\
                                         AND ( (GetDate() BETWEEN [Начало договора] AND [Окончание])\
                                         OR ( GetDate() >= [Начало договора] AND [Окончание] IS NULL) )", 100);
        зДействующиеДоговоры.УстановитьПараметры();
        while ( зДействующиеДоговоры.Следующий() ) {
            if ( зДействующиеДоговоры.ROW_ID != НомерЗаписи(Лицо0()) );
            ОтметитьЗаписьВыборки(Окно, Выборка, зДействующиеДоговоры.ROW_ID);
        }
    }
}

/**
 * Обрабочтик фильтра по Ctrl+Q из выборки организаций
 * @extends БазовыйДиалог
 * @class  Фильтр_организации
 */
class Фильтр_организации extends БазовыйДиалог{
    constructor(){
        super( "Фильтр организации " );
    }
    // установить/снять все галки по состоянию
    КП1() {
        var состояние = ПрочитатьПолеСвязи(this.Запись, "ПоСостоянию");
        if (состояние >= 0 && состояние != 31) {
            this.Запись.ПоСостоянию = 31;
        } else {
            this.Запись.ПоСостоянию = 0;
        }
    }

    // установить/снять все галки фильтрации по параметру
    КП2() {
        var параметр = ПрочитатьПолеСвязи(this.Запись, "ПоПараметру");
        if (параметр >= 0 && параметр != 3) {
            this.Запись.ПоПараметру = 3;
        } else {
            this.Запись.ПоПараметру = 0;
        }
    }

    Сохранение() {
        var состояние = ПрочитатьПолеСвязи(this.Запись, "ПоСостоянию");
        var параметр = ПрочитатьПолеСвязи(this.Запись, "ПоПараметру");
        // папки в фильтре отображаем всегда
        var стр_сост = "", фильтр = `(Организации_ADD=0`, услпо_парам = ``, есть_усл = 0;
        // Цвет % 8 in () - условие организаций по цвету
        // установлены не все галки
        if (состояние > 0) {
            // синий
            if (состояние & 1) стр_сост += ",4";
            // зеленый
            if (состояние & 2) стр_сост += ",3";
            // серый
            if (состояние & 4) стр_сост += ",5";
            // черный
            if (состояние & 8) стр_сост += ",0";
            if (состояние & 16) стр_сост += ",1,2,6,7";
        }
        if (стр_сост) {
            фильтр += " or ("
            стр_сост = стр_сост.substr(1);
            фильтр += "t1.Цвет % 8 in(" + стр_сост + ")";
        }
        // t1.row_id in() - условие организаций по параметрам
        if (параметр > 0) {
            if (стр_сост) {
                фильтр += " and ";
            } else {
                фильтр += " or (";
            }
            var есть_усл = 0;
            // формируем запрос, извлекающий орагнизации с определеным значением в параметрах
            var услпо_парам = `SELECT distinct org.row_id
                       FROM ~Организации~ org
                         JOIN ~Значения параметров~ zp ON zp.[Орг-Параметры]=org.row_id
                         JOIN ~Параметры~ p ON zp.[Параметр-Значения]=p.row_id
                       WHERE org.row_id = t1.row_id and (`;
            // ищем среди версии комплекса облако
            if (параметр & 1) {
                есть_усл = 1;
                услпо_парам += "(p.Имя = 'ВЕРСИЯ_КОМПЛЕКСА' and zp.Значение like '%облако%')";
            }
            // ищем параметр ЭДО
            if (параметр & 2) {
                if (есть_усл) услпо_парам += " OR ";
                услпо_парам += "(p.Имя = 'ЭДО' and zp.Значение = '1')";
            }
            // добавялем к условию реальное значение параметра
            услпо_парам += ") and zp.Тип<>2";
            фильтр += "exists (" + услпо_парам + ")"
        }
        // добавляем условие на поиск только листьев - самих организаций
        if (услпо_парам || стр_сост) фильтр += " and Организации_ADD=1)";
        фильтр += ")";
        if (фильтр) {
            УстановитьПараметрыФильтра(this.Источник.Группа.Имя, "Организации", фильтр);
        } else {
            СброситьПараметрыФильтра(this.Источник.Группа.Имя, "Организации");
        }
    }
}



/**
 * @extends Организация
 * @class  класс $Организация
 * memberof ОбработчикиЗаплатки
 */
class $Организация extends Организация {
    constructor() {
        super();
        this.ЭтоДО = Задача() == 'Документооборот';
    }

    Инициализация() {
        super.Инициализация();
        if ( this.ЭтоДО ) {
            // TODO Надо что то с этим сделать...
            //Если( ПроверкаПравСотрудника( НомерЗаписи(Пользователь()), "Менеджеры" ) == 0 )
            //УдалитьКолонку( "Организация", "Пароли", "Примечание" );
            if ( this.НоваяЗапись ) {
                this.Организация.Установить(СохранитьЗапись(this.Запись));
                let пстрПараметры = "ВЕРСИЯ_КОМПЛЕКСА;К_АРМ;К_БАЗ;ЗАДАЧИ;Л_С;НАСПУНКТ;ЛИЦЕНЗИЯ;SVN";
                this.Организация.СоздатьПараметрыПоУмолчанию(пстрПараметры);
                this.Запись['Организация-Автор'] = НомерЗаписи(Пользователь());
                УстановитьПараметрыФильтра0("Организация", "@Организация - заявки", " t2.ROW_ID = :1", "S", -10);
            } else {
                УстановитьПараметрыФильтра0("Организация", "@Организация - заявки", " t2.ROW_ID=:1 AND Папки_ADD=1", "S", this.НомерЗаписи);
            }
        }
    }

    Сохранение() {
        if ( this.ЭтоДо ) {
            this.Организация.ОбновитьОсновнойТелефонОрганизации(this.Запись.email, this.Запись.Телефон);
            if ( this.ЕстьИзменения ) this.Запись['Организация-Редактор'] = НомерЗаписи(Пользователь());
            var поискПредставителя = BufferedReader("SELECT cL.Row_ID\
                                                  FROM ~Частные лица~ cL\
                                                  JOIN ~Пароли~ par ON par.[Пароль-Частные лица] = cL.Row_ID\
                                                       AND cL.[Организация-Частные лица] = :1", 1, "orgID,S");
            поискПредставителя.УстановитьПараметры(this.НомерЗаписи);
            // Если нет представителя, создаим и сгенерируем к нему пароль
            // TODO а как мы его потом узнаем???? может не надо сразу создавать????
            if ( !поискПредставителя.Следующий() ) {
                var оЧастныеЛица = Объект("Частные лица");
                УстановитьПолеСвязи(оЧастныеЛица, "Организация-Частные лица", this.НомерЗаписи);
                оЧастныеЛица.ФИО = this.Запись.Наименование;
                кWEBtools.ПересоздатьПарольЛК(ВнестиЗапись(оЧастныеЛица), 3);
            }
        }
    }

    ОткрытиеВкладки( Поле ) {
        switch ( Поле ) {
            case "Параметры":
                this.РазрешитьЭлементыГруппы( "Параметры", "Внести информацию о сборке" );
                break;
            case "Входящие":
                УстановитьПараметрыФильтра("Почта-Входящие", "Почта-Входящие", " t1.Папка_ADD = 1 AND Признаки &520 = 0");
                break;
            case "Отправленные":
                УстановитьПараметрыФильтра("Почта-Отправленные", "Почта-Входящие", " t1.Папка_ADD = 1 AND Признаки &8 > 0 AND Признаки &512 = 0");
                break;
            case "Договоры":
                УстановитьПараметрыФильтра("Договоры", "@Организация - договоры ДО", " t1.Папки_ADD = 1 AND ( t1.Грузополучатель = :1 or t1.Плательщик = :2 )", "S,S", this.НомерЗаписи, this.НомерЗаписи);
                break;
        }
    }

    ИзменитьАдрес(){
        this.ФормированиеАдреса( "Адрес" );
    }
    ИзменитьФактАдрес(){
        this.ФормированиеАдреса( "ФактАдрес" );
    }
    /**
     * Создает диалог с  полями Страна Город Улица и т д
     * @returns {string} Пр. "Страна,Город,ул...."
     */
    ФормированиеАдреса( поле ){
        var длгАдрес = СоздатьДиалог( "Адрес организации" );
        if( !длгАдрес.Выполнить() ) return;
        var адрес = "";
        if( длгАдрес["@ПСтрана"] || длгАдрес["@ПГород"] || длгАдрес["@П_Улица"] ){
            адрес += длгАдрес["@П_Индекс"] ? длгАдрес["@П_Индекс"] + ", " : "";
            адрес += длгАдрес["@ПСтрана"] ? длгАдрес["@ПСтрана"] + ", " : "";
            адрес += длгАдрес["@ПОбласть"] ? длгАдрес["@ПОбласть"] + ", " : "";
            адрес += длгАдрес["@ПРайон"] ? длгАдрес["@ПРайон"] + ", " : "";
            адрес += длгАдрес["@ПГород"] ? длгАдрес["@ПГород"] + ", " : "";
            адрес += длгАдрес["@П_Улица"] ? длгАдрес["@П_Улица"] + ", " : "";
            адрес += длгАдрес["@П_Дом"] ? "д." + длгАдрес["@П_Дом"] + ", " : "";
            адрес += длгАдрес["@П_Корпус"] ? "корп." + длгАдрес["@П_Корпус"] + ", " : "";
            адрес += длгАдрес["@П_Квартира"] ? "кв." + длгАдрес["@П_Квартира"] + ", " : "";
            адрес = адрес.slice( 0, -2 );
        }
        длгАдрес = null;
        if( адрес ){
            switch( поле ){
                case "Адрес":
                    this.Запись.Адрес = адрес;
                    break;
                case "ФактАдрес":
                    this.Запись.ФактАдрес = адрес;
                    break;
            }
        }
        return адрес;
    }
    ПроставитьСборкуОрганизации() {
        var дВерсия = СоздатьДиалог("Сборка организации");
        дВерсия.Обработчик.нзОрганизации = this.НомерЗаписи;
        дВерсия.Выполнить();
    }
}
class Сборка_организации {
    Изменение(Поле) {
        if (Поле == "@Версия") this.Запись.Версия = this.Запись.Версия.replace(/,/g, ".");
    }

    Сохранение() {
        if (this.Запись.Версия.trim() && this.Запись.Тип) {
            var Значение = "версия " + 'Версия';
            Значение += ('Сборка' != 0) ? "; сборка " + 'Сборка' : "";
            Значение += ('Тип' != "Другая") ? " (" + 'Тип' + ")" : " ";
            var зПар = Query("SELECT ROW_ID FROM ~Параметры~ WHERE Имя like :1", 1, "name,A");
            зПар.УстановитьПараметры("версия_комплекса");
            if (зПар.Следующий()) {
                var кИст = Command(`UPDATE ~Значения параметров~ SET Тип=2
                    WHERE [Параметр-Значения]=:1 AND [Орг-Параметры] = :2`, 1, "par,S,org,S");
                кИст.Выполнить(зПар.ROW_ID, this.нзОрганизации);
                кИст.Завершить();
                // вносим новое значение пераметра "версия_комплекса"
                var ЗначениеПараметра = Объект("Значения параметров");
                ЗначениеПараметра['Параметр-Значения'] = зПар.ROW_ID;
                ЗначениеПараметра['Значение'] = Значение;
                ЗначениеПараметра['Орг-Параметры'] = this.нзОрганизации;
                ЗначениеПараметра['ДатНач'] = new Date();
                ЗначениеПараметра['Значение-Автор'] = НомерЗаписи(Пользователь());
                ЗначениеПараметра['Тип'] = 0;
                ВнестиЗапись(ЗначениеПараметра);
            } else {
                Сообщить("Нет параметра \"версия_комплекса\"!");
            }
        } else {
            return "Версия";
        }

    }
}
/**
 * @extends БазоваяВыборка
 * @class класс Аналитики - обработчик выборки 'Аналитики' окна "Аналитики"
 */
class Аналитики extends БазоваяВыборка {
    constructor() {
        super('Аналитики', 'Аналитики');
    }

    /**
     * при переходе в корень справочника тему меняем на "Категория в отчетах"
     */
    Обновление() {
        if ( this.Позиция == -10 ) // выходим в корень справочника
            УстановитьСвойствоКолонки(this.ИмяВыборки, this.ИмяОкна, "Тема", "Заголовок", "Категория в отчетах"); else
            УстановитьСвойствоКолонки(this.ИмяВыборки, this.ИмяОкна, "Тема", "Заголовок", "Тема договора");
    }
}

/**
 * @extends БазовыйДиалог
 * @class класс Аналитика - обработчик окна диалога 'Аналитика' выборки 'Аналитики'
 */
class Аналитика extends БазовыйДиалог {
    constructor() {
        /**
         * memberof элВидыРасч {*} - комбобокс выбора вида расчета для аналитики договора, заполняется в инициализации
         */
        super('Аналитика');
        this.элВидыРасч = undefined;
    }

    Инициализация() {
        super.Инициализация();
        this.элВидыРасч = ComboBox(this.ИмяДиалога, "Параметр 1");
        var мВидыР = Аналитика.ВидыРасчетаДоговоровДО(-1);
        this.элВидыРасч.СписокСКлючами(мВидыР, мВидыР);
        let пар1 = Number(this.Запись['Параметр 1']);
        this.Запись['Параметр 1'] = мВидыР[пар1] ? мВидыР[пар1] : мВидыР[0];
    }

    Сохранение() {
        this.Запись['Параметр 1'] = элВидыРасч.ИндексЭлемента;
        // обрабатываем только записи
        if ( ЭтоУзел(this.Запись) ) return '';

        var ответ = 0, темаСт = "";
        if ( !this.НоваяЗапись ) { // нужно проверить поменялась тема или нет
            var зТемаСт = Query('SELECT Тема FROM ~Аналитики~ WHERE ROW_ID = :1', 1, "row,S");
            зТемаСт.УстановитьПараметры(this.НомерЗаписи);
            темаСт = зТемаСт.Следующий() ? зТемаСт.Тема : this.Запись.Тема;
            if ( темаСт != this.Запись.Тема )
                ответ = ДаНет('Меняется значение поля Тема. Внести соответствующие изменения в справочнике "Номенклатура"?');
        } else ответ = ДаНет("Добавить запись в справочник \"Номенклатура\"?");
        // если запись новая или тема поменялась и хотят поменять номенклатуру
        if ( !ответ ) return '';
        var позНоменклатура = -1, позДопЧасы = -1, корень = -10;
        // ищем по теме аналитики подходящую запись номенклатуры
        if ( темаСт ) {
            var зНоменклатура = Query(`SELECT ROW_ID FROM ~Номенклатура~ WHERE НомНомер = :1`, 1, "nn,A");
            зНоменклатура.УстановитьПараметры(темаСт);
            if ( зНоменклатура.Следующий() ) позНоменклатура = зНоменклатура.ROW_ID;

            // доп часы только для договоров с абонентской платой
            if ( this.Запись['Параметр 1'] > 1 ) {
                зНоменклатура.УстановитьПараметры(темаСт + "_ДЧ");
                if ( зНоменклатура.Следующий() ) позДопЧасы = зНоменклатура.ROW_ID;
            }
        }

        var номеклатура = new кНоменклатура();
        if ( позНоменклатура == -1 ) { // если записи в Номенклатуре нет, внесем
            var зКорень = Query('SELECT TOP1 ROW_ID FROM ~Номенклатура~ WHERE [Идентификатор] = 2', 1);
            if ( зКорень.Следующий() ) корень = зКорень.ROW_ID;

            номеклатура.ПрочитатьИзКонтекста({
                'Иерархия': корень,
                'Иерархия_Узел': 0,
                'Наименование': this.Запись.Название,
                'НомНомер': this.Запись.Тема,
                'Вариант НДС': 2,
                'Счетчика разрядность': 1
            });
            номеклатура.Внести();
        } else {
            номеклатура.Прочитать(позНоменклатура);
        }
        номеклатура.ПрочитатьИзКонтекста({'НомНомер': this.Запись.Тема});
        if ( номеклатура.Объект.Редактировать("Карточка номенклатуры УслЮр") )
            номеклатура.Сохранить();

        // обработка на доп часы - создаем или меняем в номенклатуре запись
        if ( this.Запись['Параметр 1'] > 1 ) {
            if ( позДопЧасы == -1 ) { // если записи в Номенклатуре нет
                var название = номеклатура.Объект.Наименование + " (доп. часы)";
                номеклатура.ПрочитатьИзКонтекста({
                    'Иерархия': корень,
                    'Иерархия_Узел': 0,
                    'Наименование': Название,
                    'ЕдИзмерения': "ч",
                    'Вариант НДС': 2,
                    'Счетчика разрядность': 1
                });
                номеклатура.Внести();
            } else {
                номеклатура.Прочитать(позДопЧасы);
            }

            номеклатура.ПрочитатьИзКонтекста({'НомНомер': this.Запись.Тема + "_ДЧ"});
            номеклатура.Сохранить();
        }
    }

    /** todo возможно нужно оставить не в этом классе
     * возвращает виды расчета договоров в различных режимах
     * @param режим - если режим>0, возвращает один из возможных видов расчета, соответствующий индексу в массиве
     * если режим = -1, возвращает виды расчеты как массив
     * если режим = -2, возвращает виды расчеты как строку
     * @returns {*} - либо массив либо строку со всеми возможными видами, либо строку с конкретным видом расчета
     */
    static ВидыРасчетаДоговоровДО( режим ) {
        var виды = "Не установлен\nФакт Час\nАбонент\nГодовой\nАренда и Лизинг";

        if ( режим == -2 ) return виды;

        var мВиды = виды.split('\n');
        if ( режим == -1 ) return мВиды;

        return мВиды[режим];
    }
}

/**
 * @extends БазоваяВыборка
 * @class класс Категории_работ - обработчик выборки 'Категории работ' справочника "Категории работ"
 */
class Категории_работ extends БазоваяВыборка {
    constructor() {
        /**
         * memberof зКатегории - запрос всех категорий, куда входит данный вид работы
         */
        super('Категории работ', 'Категории работ');
        this.зКатегории = Query('SELECT an.[Название] \
         FROM ~ДО наборы категорий работ~ katj \
         JOIN ~Аналитики~ an ON katj.[Категорий набор-Аналитики]=an.ROW_ID \
         WHERE [Категорий набор-Категория]=:1', 50, "id,S");
    }

    Фильтр() {
        var мФильтр = {'Запрос' : '',
            'Диалог'    : "Категории работ фильтр",
            'Категория' : 'Все'};
        return мФильтр;
    }

    Расчет() {
        this.Запись.Категории = "";
        this.зКатегории.УстановитьПараметры(НомерЗаписи(this.Запись));
        while ( this.зКатегории.Следующий() )
            this.Запись.Категории += ", " + this.зКатегории.Название;
        if ( this.Запись.Категории ) this.Запись.Категории = this.Запись.Категории.substr(2);
    }
}

/**
 * @extends БазовыйДиалог
 * @class класс Категории_работ_фильтр - обработчик окна диалога фильтра 'Категории работ фильтр' справочника 'Категории работ'
 */
class Категории_работ_фильтр extends БазовыйДиалог {
    constructor() {
        super('Категории работ фильтр');
    }

    Сохранение() {
        var элКатегория = ComboBox(this.ИмяДиалога, "Категория");
        var идКатегория = элКатегория.Значение();
        УстановитьПараметрыФильтра("Категории работ", "Категории работ", '0=:1 or t1.ROW_ID IN( \
      SELECT [Категорий набор-Категория] FROM ~ДО наборы категорий работ~ \
      WHERE [Категорий набор-Аналитики]=:2)', "S,S", идКатегория, идКатегория);
    }
}

/**
 * @extends БазовыйДиалог
 * @class класс Категория_работ - обработчик окна диалога 'Категория работ' выборки 'Категории работ'
 */
class Категория_работ extends БазовыйДиалог {
    constructor() {
        super('Категория работ');
    }

    Сохранение() {
        var зИмяКат = BufferedReader('SELECT ROW_ID FROM ~ДО категории работ~ \
                                     WHERE Категория LIKE :1 AND ROW_ID <>:2', 100, "name,A,id,S");
        зИмяКат.УстановитьПараметры(this.Запись.Категория, НомерЗаписи(this.Запись));
        if ( зИмяКат.Следующий() && !ДаНет("Категория " + this.Запись.Категория + " уже существует. Сохранить?") )
            return "Категория";
    }
}

/**
 * @extends БазовыйДиалог
 * @class класс ДНаборКатегорийРабот - обработчик окна диалога 'Набор категорий работ' выборки 'Набор категорий работ'
 */
class ДНаборКатегорийРабот extends БазовыйДиалог {
    constructor() {
        super('Категория работ');
    }

    Сохранение() {
        if ( !ЭтоУзел(this.Запись, "Аналитики") ) {
            Сообщить("Необходимо выбрать категорию договора!");
            return "@Название";
        }
    }
}

/**
 * @extends БазовыйДиалог
 * @class класс Карточка_номенклатуры_УслЮр - обработчик окна диалога 'Карточка номенклатуры УслЮр' одноименного справочника
 */
class Карточка_номенклатуры_УслЮр extends БазовыйДиалог {
    constructor() {
        /**
         * memberof Номеклатура {кНоменклатура} - объект для работы с номенклатурой
         */
        super('Карточка номенклатуры УслЮр');
        this.Номеклатура;
    }

    Инициализация() {
        this.Номеклатура = new кНоменклатура();
        this.Номеклатура.ПрочитатьИзКонтекста({'ЕдИзмерения': this.Запись.ЕдИзмерения});
        this.Запись['@ПолноеНазвание'] = кНоменклатура.ОКЕИСФ(this.Запись.ЕдИзмерения) + "; Код: " + кНоменклатура.ОКЕИ(this.Запись.ЕдИзмерения);
    }

    Изменение( поле ) {
        switch ( поле ) {
            case 'ЕдИзмерения':
                this.Номеклатура.ПрочитатьИзКонтекста({'ЕдИзмерения': this.Запись.ЕдИзмерения});
                this.Запись['@ПолноеНазвание'] = кНоменклатура.ОКЕИСФ(this.Запись.ЕдИзмерения) + "; Код: " + кНоменклатура.ОКЕИ(this.Запись.ЕдИзмерения);
                break;
        }
    }
}

/**
 * @extends Контакт_организации
 * @class класс Организация_Частное_лицо - обработчик окна диалога 'Организация Частное лицо' выборки представителей
 */
class $Организация_Частное_лицо extends Организация_Частное_лицо {
    constructor() {
        super( 'Организация Частное лицо' );
    }
    Изменение( поле ) {
        switch( поле ){
            case "Логин":
                var зЛогин = BufferedReader( "SELECT ФИО FROM ~Частные лица~ WHERE [Логин]=:1 and row_id<>:2", 1, "A,A,S,S" );
                зЛогин.УстановитьПараметры( this.Запись.Логин, НомерЗаписи(this.Запись) );
                if( зЛогин.Следующий() ) {
                    ВсплывающееОкно( "Указанный логин уже используется " + зЛогин.ФИО, this.ИмяДиалога, "Логин" );
                    return "Логин";
                }
                break;
            case "Признаки": // Проверка на повторное указание руководителя
                var тип = ComboBox( this.ИмяДиалога, "Признаки" ).ИндексЭлемента;
                if( тип == 1 ) { // Руководитель
                    // Проверяем, указан ли уже руководитель для данной орг-ции
                    var зПроверка = Query( 'SELECT count(ROW_ID) povt FROM ~Частные лица~ ch \
                        WHERE ch.[Организация-Частные лица]=:1 AND ch.[Признаки] = 1', 1, "id_org,S" );
                    зПроверка.УстановитьПараметры( this.Запись['Организация-Частные лица'] );
                    if( зПроверка.Следующий() && зПроверка.povt > 0) {
                        ВсплывающееОкно( "Для данной организации уже указан руководитель", this.ИмяДиалога, "Признаки" );
                        return "Признаки";
                    }
                }
                break;
        }
        super.Изменение( поле );
    }
}

/**
 * @extends Организация_Частные_лица
 * @class класс Организация_Частные_лица - обработчик выборки 'Организация Частные лица' представителей организации
 */
class $Организация_Частные_лица extends Организация_Частные_лица {
    constructor() {
        super( 'Организация Частные лица' );
    }
    Инициализация(){
        this.ИмяОкна = this.Источник.Окно.Имя;
        if( this.ИмяОкна == "Частные лица организации" ){
            var записьД = this.Источник.Окно.Обработчик.Запись;
            if( this.Запись.email.indexOf(записьД.email) == -1 ){
                if( this.Запись.email ) this.Запись.email += ";"
                this.Запись.email += записьД.email;
            }
            if( НомерЗаписи(this.Запись) == -1 ) this.Запись.ФИО = записьД.КПП;
        }
    }
    Открытие(){
        return this.Инициализация();
    }
}
/**
 * Обработка параметров организации в диалоге Организация
 */
class Организация___значения_параметров extends _Организация_Значения_параметров {
    constructor(){
        super( "Организация - значения параметров" );
    }
}
class $Календарь extends Календарь {
    Инициализация(Объект) {
        this.элКалендарь = this.Источник.Элементы["@Календарь"];
        this.элКалендарь.Текст = `<iframe src="https://www.google.com/calendar/embed?showPrint=0&amp;showCalendars=0&amp;showTz=0&amp;mode=WEEK&amp;height=800&amp;wkst=2&amp;bgcolor=%23FFFFFF&amp;src=peregovornaya.stack%40gmail.com&amp;color=%232F6309&amp;ctz=Europe%2FMoscow" style=" border-width:0 " width="100%" height="800" frameborder="0" scrolling="no"></iframe>`;
        return Объект;
    }
}
