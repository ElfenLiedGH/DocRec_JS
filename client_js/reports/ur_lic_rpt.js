'use strict';

class ОтчетДоговорДО extends BirtObj {
    constructor() {
        super();
    }

    НашаОрганизацияПоИНН( _инн ) {
        switch( _инн ) {
            case "7602069740":
                return 0; // Стек
            case "7610045615":
                return 1; // Стек-Спорт
            case "7604258887":
                return 2; // Стек-ИТ
            default:
                return -1;
        }
    }

    // Функция находит соответствующий выбор в признаках организации и подставляет соответствующий штамп в договоре
    ВыборШтампаПо( _значение, пВыбор ) {
        var пФлаг = 0;
        switch( пВыбор ) {
            case "инн":
            {
                switch( кДоговор.НашаОрганизацияПоИНН( _значение ) ) {
                    case 1:
                        пФлаг = 1;   // Стек-Спорт
                        break;
                    case 0:
                        пФлаг = 2;   // Стек
                        break;
                    case 2:
                        пФлаг = 3;   // Стек - ИТ
                        break;
                }
            }
                break;
            case "наименование":
            {
                var значение = _значение.toUpperCase();
                if( значение.indexOf( "СТЕК" ) != -1 ) {
                    if( значение.indexOf( "СПОРТ" ) != -1 )
                        пФлаг = 1;                                                                        // Стек-Спорт
                    else if( (значение.replaceAll( " ", "" )).indexOf( "-ИТ" ) != -1 )
                        пФлаг = 3;                                                                        // Стек - ИТ
                    else
                        пФлаг = 2;                                                                        // Стек
                }
            }
                break;
        }
        return пФлаг;
    }

    ПолучитьИнфоЧастноеЛицо( _орг, _тип ) {
        var з_чл = Query( `Select Адрес as стрДог, ФактАдрес as Основание, Должность, ФИО
                    From ~Частные лица~
                   Where [Организация-Частные лица] = :1 and Признаки = :2
                 `, 10, "org,S,tip,S" );

        з_чл.УстановитьПараметры( _орг, _тип );
        if( з_чл.Следующий() )
            return з_чл;

        return "";
    }

    ОпределитьТипКомплекса( _тема ) {
        var Стек_Тип = _тема.indexOf( "Э" ) != -1 ? "Стек-ЭНЕРГО" : "Стек-ЖКХ";

        return Стек_Тип;
    }

    ПолучитьЗначениеПарОрг( _орг, _пар ) {
        var з_пар = Query( `Select top 1 zp.Значение
                    From ~Значения параметров~ zp
                    Join ~Параметры~ par on par.row_id = zp.[Параметр-Значения] and par.Имя = :1
                   Where zp.[Орг-Параметры] = :2  and zp.Тип <> 2
                Order by zp.ДатНач desc
                 `, 10, "par,A,org,S" );

        з_пар.УстановитьПараметры( _пар, _орг );
        if( з_пар.Следующий() )
            return з_пар.Значение;

        return "";
    }

    РасшифровкаПараметраЗадачи( пЗадачи ) {
        var ВыводЗадач = "";
        пЗадачи = пЗадачи.toUpperCase();
        if( пЗадачи.length > 0 ) {
            пЗадачи = пЗадачи + " ";
            if( пЗадачи.indexOf( "КВ" ) > -1 ) {
                ВыводЗадач = ВыводЗадач + `Расчеты с абонентами - физическими лицами` + ",";
                пЗадачи = пЗадачи.replaceAll( "КВ ", "" );
            }
            if( пЗадачи.indexOf( "ДЛЖ" ) > -1 ) {
                ВыводЗадач = ВыводЗадач + `Работа с должниками - физическими лицами` + ",";
                пЗадачи = пЗадачи.replaceAll( "ДЛЖ ", "" );
            }
            if( пЗадачи.indexOf( "ЮРЛ" ) > -1 ) {
                ВыводЗадач = ВыводЗадач + `Расчет с абонентами - юридическими лицами` + ",";
                пЗадачи = пЗадачи.replaceAll( "ЮРЛ ", "" );
            }
            if( пЗадачи.indexOf( "ДЛЮ" ) > -1 ) {
                ВыводЗадач = ВыводЗадач + `Работа с должниками - юридическими лицами` + ",";
                пЗадачи = пЗадачи.replaceAll( "ДЛЮ ", "" );
            }
            if( пЗадачи.indexOf( "КС" ) > -1 ) {
                ВыводЗадач = ВыводЗадач + `Касса` + ",";
                пЗадачи = пЗадачи.replaceAll( "КС ", "" );
            }
            if( пЗадачи.indexOf( "ПС" ) > -1 ) {
                ВыводЗадач = ВыводЗадач + `Паспортный стол` + ",";
                пЗадачи = пЗадачи.replaceAll( "ПС ", "" );
            }
            if( пЗадачи.indexOf( "АДС" ) > -1 ) {
                ВыводЗадач = ВыводЗадач + `Аварийно-диспетчерская служба` + ",";
                пЗадачи = пЗадачи.replaceAll( "АДС ", "" );
            }
            if( пЗадачи.indexOf( "ПДУ" ) > -1 ) {
                ВыводЗадач = ВыводЗадач + `Подомовой учет` + ",";
                пЗадачи = пЗадачи.replaceAll( "ПДУ ", "" );
            }
            if( пЗадачи.indexOf( "СУБ" ) > -1 ) {
                ВыводЗадач = ВыводЗадач + `Субсидии` + ",";
                пЗадачи = пЗадачи.replaceAll( "СУБ ", "" );
            }
            if( пЗадачи.indexOf( "СК" ) > -1 ) {
                ВыводЗадач = ВыводЗадач + `Коммуникации` + ",";
                пЗадачи = пЗадачи.replaceAll( "СК ", "" );
            }
            if( пЗадачи.indexOf( "РП" ) > -1 ) {
                ВыводЗадач = ВыводЗадач + `Расчеты с поставщиками` + ",";
                пЗадачи = пЗадачи.replaceAll( "РП ", "" );
            }
            if( пЗадачи.indexOf( "АП" ) > -1 ) {
                ВыводЗадач = ВыводЗадач + `АРМ поставщика` + ",";
                пЗадачи = пЗадачи.replaceAll( "АП ", "" );
            }
            if( пЗадачи.indexOf( "АЮП" ) > -1 ) {
                ВыводЗадач = ВыводЗадач + `АРМ юриста поставщика` + ",";
                пЗадачи = пЗадачи.replaceAll( "АЮП ", "" );
            }
            if( пЗадачи.indexOf( "ЛК" ) > -1 ) {
                ВыводЗадач = ВыводЗадач + `Личный кабинет` + ",";
                пЗадачи = пЗадачи.replaceAll( "ЛК ", "" );
            }
            if( пЗадачи.indexOf( "МК" ) > -1 ) {
                ВыводЗадач = ВыводЗадач + `Мобильный контролер` + ",";
                пЗадачи = пЗадачи.replaceAll( "МК ", "" );
            }
            if( пЗадачи.indexOf( "СМС" ) > -1 ) {
                ВыводЗадач = ВыводЗадач + `СМС-Сервис` + ",";
                пЗадачи = пЗадачи.replaceAll( "СМС ", "" );
            }
            ВыводЗадач = ВыводЗадач + пЗадачи + ",";
        }
        return ВыводЗадач;
    }

    ОпределитьНомерДокумента( _дог ) {
        var зДог = Query( `Select Номер, Тема, [Полный номер] пНомер
                   From ~Договор~
                  Where row_id = :1
                `, 10, "row,S" );

        зДог.УстановитьПараметры( _дог );
        if( зДог.Следующий() )
            return зДог.пНомер == "" ? зДог.Номер + "/" + зДог.Тема : зДог.пНомер;

        return "";
    }

    ПолучитьПараметрыДоговораДО(пдог,ДатаР)
    {
        var зПарам = Query(`select par.Название as Имя, zp.Значение from
                       ~Свойства~ zp
                       inner join ~Виды параметров~ par on par.ROW_ID = zp.[Виды-Параметры]
                       where [Параметры-Договор] = :1 and :2 between zp.ДатНач and zp.ДатКнц`,100,"p1,S,p2,D");

        var мПарамДог = {};
        зПарам.УстановитьПараметры(пдог,ДатаР);
        while( зПарам.Следующий() )
            мПарамДог[зПарам.Имя] = зПарам.Значение;

        return мПарамДог;
    }

    РасчСчетИБанк( _орг )
    {
        var з_данные = Query(`Select rs.[Р/счет] as РСчет, b.[Название банка] as Банк, b.[КоррСчет], b.БИК, b.[Адрес банка] [Адрес]
                           From ~Расчетные счета~ rs
                           Join ~Банки~ b on b.row_id = rs.[Банк-Р/с]
                          Where rs.[Лица-Р/с] = :1
                       Order by rs.[N п/п]
                        `, 10, "org,S");

        з_данные.УстановитьПараметры( _орг );
        if( з_данные.Следующий() )
            return з_данные;

        return "";
    }

    ВыборСвидетельство(_ИНН, СтТип)
    {
        var Свидетельство = "";
        switch( this.НашаОрганизацияПоИНН(_ИНН) )
        {
            case 1:                                  // Стек-Спорт
            {
                switch( СтТип.toLowerCase() )
                {
                    case '"стек-жкх"':    Свидетельство = "№ 2002612046 от 05.12.2002 г."; break;
                    case '"стек-энерго"': Свидетельство = "№ 2014615604 от 29.05.2014 г."; break;
                }
            }
                break;
            case 0:                                  // Стек
            {
                switch( СтТип.toLowerCase() )
                {
                    case '"стек-жкх"':    Свидетельство = "№ 2010616807 от 13.10.2010 г."; break;
                    case '"стек-энерго"': Свидетельство = "№ 2010616808 от 13.10.2010 г."; break;
                }
            }
                break;
            case 2:                                  // Стек - ИТ
                Свидетельство = "№ 2014615604 от 29.05.2014 г.";
                break;
        }
        return Свидетельство;
    }

    // на какие переменные какие ошибки выводить при заполнении форм договоров
    РасшифровкаПоля( поле )
    {
        switch( поле.toLowerCase() )
        {
            case "стоимчаса":               поле = " стоимость часа"; break;
            case "датаподписания":          поле = " дата подписания"; break;
            case "датаокончаниякончания":   поле = " дата окончания"; break;
            case "год":                     поле = " год"; break;
            case "номертемаема":            поле = " тема"; break;
            case "стек_тип":                поле = " тип комплекса программы"; break;
            case "территория":              поле = " адрес"; break;
            case "дата":                    поле = " дата"; break;
            case "наименфирм":              поле = " наименование нашей фирмы"; break;
            case "наименованиеорг":         поле = " наименование организации плательщика"; break;
            case "суммаруб":                поле = " сумма договора"; break;
            case "иннкппф":                 поле = " инн и кпп нашей фирмы"; break;
            case "адресф":                  поле = " адрес нашей фирмы"; break;
            case "рсчетф":                  поле = " расчетный счет нашей фирмы"; break;
            case "банкф":                   поле = " банк нашей фирмы"; break;
            case "адреспочтаф":             поле = " адрес нашей фирмы"; break;
            case "телфаксф":                поле = " телефон и факс нашей фирмы"; break;
            case "элпочтаф":                поле = " e-mail нашей фирмы"; break;
            case "адрессайтф":              поле = " сайт нашей фирмы"; break;
            case "фиоф":                    поле = " фио руководителя нашей фирмы"; break;
            case "фиодирф":                 поле = " фио руководителя нашей фирмы"; break;
            case "основаниеф":              поле = " основание нашей фирмы"; break;
            case "иннкппорг":               поле = " инн и кпп организации плательщика"; break;
            case "адресорг":                поле = " адрес организации плательщика"; break;
            case "рсчеторг":                поле = " расчетный счет организации плательщика"; break;
            case "банкорг":                 поле = " банк организации плательщика"; break;
            case "адреспочтаорг":           поле = " адрес организации плательщика"; break;
            case "телфаксорг":              поле = " телефон и факс организации плательщика"; break;
            case "элпочтаорг":              поле = " e-mail организации плательщика"; break;
            case "фиоорг":                  поле = " фио представителя организации плательщика"; break;
            case "фиодирорг":               поле = " фио представителя организации плательщика"; break;
            case "основаниеорг":            поле = " основание организации плательщика"; break;
            case "должностьорг":            поле = " должность представителя организации плательщика"; break;
            case "должностьф":              поле = " должность руководителя нашей фирмы"; break;
            case "флаг":                    поле = ""; break;
        }
        return поле;
    }

    // на какие переменные какие ошибки выводить при заполнении форм договоров
    СписокОшибокДоговор()
    {
        var мТекстОшибок = {};

        мТекстОшибок.НомерТема       = "Не заполнен номер и тема";
        мТекстОшибок.Стек_Тип        = "Не определен тип комплекса ";
        мТекстОшибок.Территория      = "Не заполнен параметр НАСПУНКТ";
        мТекстОшибок.Дата            = "Не заполнено поле Дата подписания";
        мТекстОшибок.НаименФирм      = "Не заполнено Наименование нашей организации";
        мТекстОшибок.ФИОФ            = "Не заполнена строка для договора (ФИО руководителя) на карточке руководителя нашей организации";
        мТекстОшибок.ОснованиеФ      = "Не заполнено основание у руководителя нашей организации";
        мТекстОшибок.НаименованиеОрг = "Не заполнено Наименование организации-клиента";
        мТекстОшибок.ФИООрг          = "Не заполнена строка для договора (ФИО руководителя) на карточке руководителя организации-клиента";
        мТекстОшибок.ОснованиеОрг    = "Не заполнено основание у руководителя организации-клиента";
        мТекстОшибок.ВсегоЧасов      = "Не заполнен параметр АБОН_ЧАСЫ (Часов в месяц или год)";
        мТекстОшибок.СрокИсполнения  = "Не заполнен параметр СРОК_ИСП (Срок исполнения по договору)";
        мТекстОшибок.СуммаРуб        = "Не заполнена сумма на договоре";
        мТекстОшибок.СуммаРубВМес    = "Не заполнен параметр ЕЖЕМПЛАТЕЖ (Ежемесячный платеж)";
        мТекстОшибок.СуммаРубДопЧас  = "Не заполнен параметр АБФ_СТДО (Стоимость допчасов по договору)";
        мТекстОшибок.ДатНачДог       = "Не заполнена дата начала договора";
        мТекстОшибок.ДатКнцДог       = "Не заполнена дата окончания договора";
        мТекстОшибок.ИННКППФ         = "Не заполнены ИНН и КПП нашей организации";
        мТекстОшибок.АдресФ          = "Не заполнен адрес нашей организации";
        мТекстОшибок.РсчетФ          = "Не заполнен расчетный счет нашей организации";
        мТекстОшибок.БанкФ           = "Не заполнен не заполнен банк нашей организации";
        мТекстОшибок.АдресПочтаФ     = "Не заполнен почтовый адрес нашей организации";
        мТекстОшибок.ТелФаксФ        = "Не заполнен телефон/факс нашей организации";
        мТекстОшибок.ЭлПочтаФ        = "Не заполнена электронная почта нашей организации";
        мТекстОшибок.АдресСайтФ      = "Не заполнен адрес сайта нашей организации";
        мТекстОшибок.ИННКППОрг       = "Не заполнен ИНН и КПП организации-клиента";
        мТекстОшибок.АдресОрг        = "Не заполнен адрес организации-клиента";
        мТекстОшибок.РСчетОрг        = "Не заполнен расчетный счет организации-клиента";
        мТекстОшибок.БанкОрг         = "Не заполнен банк организации-клиента";
        мТекстОшибок.АдресПочтаОрг   = "Не заполнен почтовый адрес организации-клиента";
        мТекстОшибок.ТелФаксОрг      = "Не заполнен телефон/факс организации-клиента";
        мТекстОшибок.ЭлПочтаОрг      = "Не заполнена электронная почта организации-клиента";
        мТекстОшибок.ДолжностьФ      = "Не заполнена должность нашего руководителя";
        мТекстОшибок.ФИОДирФ         = "Не заполнены ФИО нашего руководителя (подпись)";
        мТекстОшибок.ДолжностьОрг    = "Не заполнена должность руководителя организации-клиента";
        мТекстОшибок.ФИОДирОрг       = "Не заполнены ФИО руководителя организации-клиента (подпись)";

        return мТекстОшибок;
    }

    // поля, которые не используются при заполнения договоров и ошибки по которым выводить не нужно
    НеОбязательныеПоля( типДоговора )
    {
        var мНеЗаполнять = {};

        switch( типДоговора )
        {
            case 1:
            {
                мНеЗаполнять.ВсегоЧасов   = 1;
                мНеЗаполнять.СуммаРуб     = 1;
                мНеЗаполнять.СуммаРубВМес = 1;
            }
            case 2:
            {
                мНеЗаполнять.СуммаРуб = 1;
            }
        }

        return мНеЗаполнять;
    }

    ПроверкаДоговора( мДанные, типДоговора )
    {
        var мТекстОшибок = this.СписокОшибокДоговор();
        var мНеЗаполнять = this.НеОбязательныеПоля( типДоговора );

        var мОшибкиДоговоров = [];
        var номДог   = мДанные.НомерТема;
        var счОшибок = 0;

        for( let поле in мДанные )
        {
            if( !мДанные.hasOwnProperty(поле) ) continue;

            if( ( мДанные[ поле ] == "" || мДанные[ поле ] == 0 ) && поле != this.Запись.Флаг && мНеЗаполнять[ поле ] == undefined && мТекстОшибок[ поле ] != undefined )
            {
                if( мОшибкиДоговоров[ номДог ] == undefined )
                    мОшибкиДоговоров[ номДог ] = [];
                мОшибкиДоговоров[ номДог ][ счОшибок ] = мТекстОшибок[ поле ] != undefined ? мТекстОшибок[ поле ] : "Не заполнено поле " + this.РасшифровкаПоля( поле );
                счОшибок++;
            }
        }
        return мОшибкиДоговоров;
    }

    // Функция определяет вид алгоритма расчета договора (абонентское, годовое, факт-час, аренда и т.п.)
    // Используется при расчете и при печати документов (определение вида договора)
    ОпределитьТипРасчета( _позДог )
    {
        var зФормула = Query(`Select top 1 an.[Параметр 1] as Формула, Тема
                           From ~Аналитики~ an
                          Where Тема = (select top 1 Тема from ~Договор~ where row_id = :1 and Тема != '')
                        `,10,"p1,S");

        зФормула.УстановитьПараметры( _позДог );
        if( зФормула.Следующий() )
            return Number( зФормула.Формула );

        return 0;
    }

    Вывод_протокола_ошибок( _мОшибкиДоговоров ) {
        var мЭксель = [];
        var ФайлПротокола = отчеты.КаталогОтчета( this.constructor.name ) + "SHABLON\\DOCREC\\Протокол формирования договоров.xls";

        ВывестиСтатус( "Копирование шаблона *.xls ..." );

        var оЭксель = new ExcelObj( "Excel" );
        оЭксель.Create( ФайлПротокола );

        var стр = 0;
        мЭксель[ стр ] = [];
        for( let номДог in _мОшибкиДоговоров ) {
            if( !_мОшибкиДоговоров.hasOwnProperty( номДог ) ) continue;
            for( let инд in _мОшибкиДоговоров[номДог] ) {
                if( !_мОшибкиДоговоров[номДог].hasOwnProperty( инд ) ) continue;
                if( мЭксель[ стр ] == undefined )
                    мЭксель[ стр ] = [];
                мЭксель[ стр ][ 0 ] = номДог;
                мЭксель[ стр ][ 1 ] = _мОшибкиДоговоров[ номДог ][ инд ];
                стр++;
            }
        }

        оЭксель.Data( "Лист1", 4, 1, мЭксель, "г" );
        var пНазвОтчета = "Ошибки при формировании печатных форм договоров";
        оЭксель.cell( "Лист1", "НазваниеОтчета", пНазвОтчета );
        ВывестиСтатус( "Загрузка Excel . . . " );
        оЭксель.Close(1);
    }

    ЧислоДнейПрописьюДог( _число ) {
        switch( _число ) {
            case 1:
                return "Одного";
            case 2:
                return "Двух";
            case 3:
                return "Трех";
            case 4:
                return "Четырех";
            case 5:
                return "Пяти";
            case 6:
                return "Шести";
            case 7:
                return "Семи";
            case 8:
                return "Восьми";
            case 9:
                return "Девяти";
            case 10:
                return "Десяти";
            case 11:
                return "Одиннадцати";
            case 12:
                return "Двенадцати";
            case 13:
                return "Тринадцати";
            case 14:
                return "Четырнадцати";
            case 15:
                return "Пятнадцати";
            case 16:
                return "Шестнадцати";
            case 17:
                return "Семнадцати";
            case 18:
                return "Восемнадцати";
            case 19:
                return "Девятнадцати";
            case 20:
                return "Двадцати";
            case 21:
                return "Двадцати одного";
            case 22:
                return "Двадцати двух";
            case 23:
                return "Двадцати трех";
            case 24:
                return "Двадцати четырех";
            case 25:
                return "Двадцати пяти";
            case 26:
                return "Двадцати шести";
            case 27:
                return "Двадцати семи";
            case 28:
                return "Двадцати восьми";
            case 29:
                return "Двадцати девяти";
            case 30:
                return "Тридцати";
            case 31:
                return "Тридцати одного";
            case 32:
                return "Тридцати двух";
            case 33:
                return "Тридцати трех";
            case 34:
                return "Тридцати четырех";
            case 35:
                return "Тридцати пяти";
            case 36:
                return "Тридцати шести";
            case 37:
                return "Тридцати семи";
            case 38:
                return "Тридцати восьми";
            case 39:
                return "Тридцати девяти";
            case 40:
                return "Сорока";
        }

        return "";
    }
}


отчеты.Add("Отчет_Акт_приема_передачи_ПО", "Отгрузка: Акт приема-передачи ПО");
class Отчет_Акт_приема_передачи_ПО extends ШаблонСФ {
    УстановитьШаблон() {
        super.УстановитьШаблон("SHABLON\\UR_LIC\\СФ_Акт приема передачи ПО_стек.rptdesign");
    }
    ОпределитьДополнительныеДанные(){
        this.Данные.Флаг = 0;
    }
}

отчеты.Add("Отчет_СчетНаОплату", "Отгрузка: Счет на оплату");
class Отчет_СчетНаОплату extends ШаблонСФ {
    УстановитьШаблон() {
        super.УстановитьШаблон("SHABLON\\UR_LIC\\СФ_Счет на оплату_стек.rptdesign");
    }
    ОпределитьДополнительныеДанные(){
    }
}
отчеты.Add("Отчет_УПД", "Отгрузка: Универсальный передаточный документ");
class Отчет_УПД extends ШаблонСФ {
    УстановитьШаблон() {
        if (this.ДанныеСФ) {
            super.УстановитьШаблон(!this.ДанныеСФ.ЭтоКоррФактура ? "SHABLON\\UR_LIC\\СФ_Универсальный передаточный документ.rptdesign"
                : "SHABLON\\UR_LIC\\СФ_Универсальный корректировочный документ.rptdesign");
        }
    }
    ОпределитьДополнительныеДанные(){
    }
}


отчеты.Add( "ОтчетПоФормированиюИсходящихДокументов", "Отчет по формированию исходящих документов" );
class ОтчетПоФормированиюИсходящихДокументов extends BirtObj {
    constructor() {
        super();
    }

    УстановитьШаблон(Шаблон) {
        super.УстановитьШаблон("SHABLON\\Стандартный протокол.rptdesign");
    }

    ОпределитьИсточникиДанных() {
        this.ОпределитьИсточникДанных("Отчет", `Название,A,Описание,A,Название1,A,Название2,A,Название3,A,Название4,A,Название5,A,ПодписьОтчета,A`);
        this.ОпределитьИсточникДанных("Таблица", `Столбец1,A,Столбец2,A,Столбец3,A,Столбец4,A,Столбец5,A`);
    }

    УстановитьСвойстваПостроителя() {
        if (this.Рассылка)
            this.Построитель.УстановитьСвойство("Скрытый", "false");
        else
            this.Построитель.УстановитьСвойство("Скрытый", "true");
    }

    Строка() {
        this.УстановитьШаблон();
        this.УстановитьСвойстваПостроителя();
        this.ОпределитьИсточникиДанных();
        this.ДобавитьВИсточник("Отчет", {
            "Название" : "Ошибки формирования исходящих документов",
            "Описание" : "за " + this.МесяцФормирования.format("MMMM yyyy г."),
            "Название1" : "№ п/п",
            "Название2" : "Договор",
            "Название3" : "Плательщик",
            "Название4" : "Тип",
            "Название5" : "Описание",
            "ПодписьОтчета" : ""
        });

        if(this.Таблица) {
            for (let СтрокаТаблицы in this.Таблица) {
                if(this.Таблица.hasOwnProperty(СтрокаТаблицы))
                    this.ДобавитьВИсточник("Таблица", this.Таблица[СтрокаТаблицы]);
            }
        }
        this.Построить();
    }
}

отчеты.Add( "ДоговорООЛицензионныйДоговорСпецификация", "Договор(ОО) - Лицензионный договор @ Спецификация" );
class ДоговорООЛицензионныйДоговорСпецификация extends ОтчетДоговорДО {
    constructor() {
        super();
        this.ФайлОтчета = "SHABLON\\Спецификация.rptdesign";
        this.НашаОрг;
        this.Данные;
        this.построительКомплектов;
    }

    Начало_таблицы() {
        this.построительКомплектов = ПостроительКомплектовБирт(0);
        this.построительКомплектов.НачалоКомплекта();
    }

    Строка() {
        // Вставка Birt
        this.УстановитьШаблон( this.ФайлОтчета );
        this.Построитель.УстановитьСвойство("Формат", "pdf");

        this.ОпределитьИсточникДанных( "Отчет", `НомерДог,A,ДатаДог,A,СтекТип,A,колЛС,A,колАРМ,A,колБД,A,ДолжФ,A,НаимФ,A,ФИОФ,A,ДолжОрг,A,НаимОрг,A
                                    ,ФИООрг,A,Сумма,A,Флаг,A,Таблица,L` );
        this.ОпределитьИсточникДанных( "Таблица", `НомЗад,A,РасшЗадачи,A` );

        var пЛС = 0;
        this.НашаОрг = ЛицоП();
        var позФирм = НомерЗаписи( this.НашаОрг );
        var инфоРукФ = this.ПолучитьИнфоЧастноеЛицо( позФирм, 1 );
        var нОрг = this.Запись.Плательщик;
        var инфоРукОрг = this.ПолучитьИнфоЧастноеЛицо( нОрг, 1 );

        var пНомерДог = this.Запись.Номер + "/" + this.Запись.Тема;
        //var пДатаДогСтр = Разбить( 'Дата подписания', ".", Число, Месяц, Год );
        var пДатаДогСтр = this.Запись["Дата подписания"];
        var пДатаДог = пДатаДогСтр.getDate() + "." + пДатаДогСтр.getMonth() + "." + "20" + пДатаДогСтр.getYear() + " г.";
        var пСтекТип = ( "\"" + this.ОпределитьТипКомплекса( this.Запись.Тема ) + "\"" ).toUpperCase();
        var пСумма = this.Запись.Сумма;

        //пТерритория = this.ПолучитьЗначениеПарОрг( нОрг, "НАСПУНКТ" );
        var пколАРМ = this.ПолучитьЗначениеПарОрг( нОрг, "К_АРМ" );
        var пколБД = this.ПолучитьЗначениеПарОрг( нОрг, "К_БАЗ" );
        var пЛС = Number( this.ПолучитьЗначениеПарОрг( нОрг, "Л_С" ) );
        var пколЛС;

        if( пЛС < 500 )
            пколЛС = "до 500";
        else if( пЛС < 5000 )
            пколЛС = "до 5000";
        else if( пЛС > 4999 )
            пколЛС = "без ограничения по количеству";

        var пЗадачиСтр = this.ПолучитьЗначениеПарОрг( нОрг, "ЗАДАЧИ" );
        var пЗадачиРасшСтр = this.РасшифровкаПараметраЗадачи( пЗадачиСтр );
        var ДанТаб = {};
        var инд = 1;
        while( пЗадачиРасшСтр.length > 0 ) {
            var пРасшЗадача = пЗадачиРасшСтр.substr( 0, пЗадачиРасшСтр.indexOf( "," ) );
            ДанТаб.НомЗад = инд + ".";
            ДанТаб.РасшЗадачи = пРасшЗадача.replaceAll( ",", "" );
            this.ДобавитьВИсточник( "Таблица", ДанТаб );
            пЗадачиРасшСтр = пЗадачиРасшСтр.substr( пЗадачиРасшСтр.indexOf( "," ), пЗадачиРасшСтр.length );
            инд++;
        }

        var пНаимФ = this.НашаОрг.Наименование;
        var пДолжФ = инфоРукФ.Должность != undefined ? инфоРукФ.Должность : "Директор";

        var окЧеловек = new кЧеловек( инфоРукФ.ФИО != undefined ? инфоРукФ.ФИО : "" );
        var пФИОФ = окЧеловек.ИОФ();

        var пНаимОрг = this.Запись['Плательщик>Наименование'];
        var пДолжОрг = инфоРукОрг.Должность != undefined ? инфоРукОрг.Должность : "";
        окЧеловек = new кЧеловек( инфоРукОрг.ФИО != undefined ? инфоРукОрг.ФИО : "" );
        var пФИООрг = окЧеловек.ИОФ();

        this.Данные = {};
        this.Данные.НомерДог = пНомерДог;
        this.Данные.ДатаДог = пДатаДог;
        this.Данные.СтекТип = пСтекТип;
        this.Данные.колАРМ = пколАРМ;
        this.Данные.колБД = пколБД;
        this.Данные.колЛС = пколЛС;
        this.Данные.Задачи = пЗадачиРасшСтр;
        this.Данные.НаимФ = пНаимФ;
        this.Данные.ДолжФ = пДолжФ;
        this.Данные.ФИОФ = пФИОФ;
        this.Данные.НаимОрг = пНаимОрг;
        this.Данные.ДолжОрг = пДолжОрг;
        this.Данные.ФИООрг = пФИООрг;
        this.Данные.Сумма = пСумма;
        this.Данные.Флаг = 0;

        this.Дополнительный_раздел();

        this.ДобавитьВИсточник( "Отчет", this.Данные );
        this.Построить();
    }

    Дополнительный_раздел() {
    }

    Конец_таблицы() {
        if( this.построительКомплектов != undefined )
            this.построительКомплектов.КонецКомплекта();
    }
}

отчеты.Add( "ДоговорООЛицензионныйДоговорСпецификацияПодписанная", "Договор(ОО) - Лицензионный договор @ Спецификация (подписанная)" );
class ДоговорООЛицензионныйДоговорСпецификацияПодписанная extends ДоговорООЛицензионныйДоговорСпецификация {
    constructor() {
        super();
    }
    Дополнительный_раздел() {
        this.Данные.Флаг = this.ВыборШтампаПо( this.НашаОрг.Наименование, "наименование" );
        switch( this.Данные.Флаг ) {
            case 1:
                КопироватьФайл( отчеты.КаталогОтчета( "ДоговорООЛицензионныйДоговорСпецификацияПодписанная" )  +
                                "SHABLON\\ПечатьСтекСпорт.jpg", "CLIENT:Report_Birt\\" + "ПечатьСтекСпорт.jpg" ); break;
            case 2:
                КопироватьФайл( отчеты.КаталогОтчета( "ДоговорООЛицензионныйДоговорСпецификацияПодписанная" ) +
                                "SHABLON\\ПечатьСтек.jpg", "CLIENT:Report_Birt\\" + "ПечатьСтек.jpg" ); break;
            case 3:
                КопироватьФайл( отчеты.КаталогОтчета( "ДоговорООЛицензионныйДоговорСпецификацияПодписанная" ) +
                                "SHABLON\\ПечатьСтекИт.jpg", "CLIENT:Report_Birt\\" + "ПечатьСтекИт.jpg" ); break;
        }
    }
}

отчеты.Add( "ДоговорООЛицензионныйДоговорЛицензионныйДоговор", "Договор(ОО) - Лицензионный договор @ Лицензионный договор" );
class ДоговорООЛицензионныйДоговорЛицензионныйДоговор extends ОтчетДоговорДО {
    constructor() {
        super();
        this.ФайлОтчета = "SHABLON\\DOCREC\\Лицензионный договор.rptdesign";
        this.НашаОрг;
        this.Данные;
        this.построительКомплектов;
    }
    Начало_таблицы() {
        this.построительКомплектов = ПостроительКомплектовБирт(0);
        this.построительКомплектов.НачалоКомплекта();
    }

    Строка() {
        // Вставка Birt
        this.УстановитьШаблон( this.ФайлОтчета );
        this.Построитель.УстановитьСвойство("Формат", "pdf");

        this.ОпределитьИсточникДанных( "Отчет", `НомерТема,A,Стек_Тип,A,Территория,A,Дата,A,НаименФирм,A,ФИОФ,A,ФИОДирФ,A,ОснованиеФ,A,НаименованиеОрг,A,ОснованиеОрг,A
                      , СуммаРуб,A,ИННКППФ,A,АдресФ,A,РсчетФ,A,БанкФ,A,АдресОрг,A,РСчетОрг,A,БанкОрг,A
                      , ДолжностьФ,A,ДолжностьОрг,A,ФИООрг,A,ФИОДирОрг,A,Флаг,S,СтоимЧаса,A,ДатаПодписания,A,ДатаОкончания,A,Год,S
                      , АдресПочтаФ,A,ТелФаксФ,A,ЭлПочтаФ,A,АдресСайтФ,A,ИННКППОрг,A,АдресПочтаОрг,A,ТелФаксОрг,A,ЭлПочтаОрг,A,Свидетельство,A` );

        // начальная инициализация перемернных
        var Стек_Тип = "";
        var Территория = "";
        var Дата = "";
        var НаименФирм = "";
        var ФИОФ = "";
        var ФИОДирФ = "";
        var ОснованиеФ = "";
        var НаименованиеОрг = "";
        var ОснованиеОрг = "";
        var СуммаРуб = "";
        var ИННКППФ = "";
        var АдресФ = "";
        var РсчетФ = "";
        var БанкФ = "";
        var АдресОрг = "";
        var РСчетОрг = "";
        var БанкОрг = "";
        var ДолжностьФ = "";
        var ДолжностьОрг = "";
        var ФИООрг = "";
        var ФИОДирОрг = "";
        var СтоимЧаса = "";
        var ДатаПодписания = "";
        var ДатаОкончания = "";
        var АдресПочтаФ = "";
        var ТелФаксФ = "";
        var ЭлПочтаФ = "";
        var АдресСайтФ = "";
        var ИННКППОрг = "";
        var АдресПочтаОрг = "";
        var ТелФаксОрг = "";
        var ЭлПочтаОрг = "";
        var Флаг = 0;
        var Год = 0;

        var позОрг = this.Запись.Плательщик;
        this.НашаОрг = ЛицоП();
        var позФирм = НомерЗаписи( this.НашаОрг );
        var позДог = НомерЗаписи( this.Запись );

        var НомерТема = this.ОпределитьНомерДокумента( позДог );
        Стек_Тип = ( "\"" + this.ОпределитьТипКомплекса( this.Запись.Тема ) + "\"" ).toUpperCase();
        Территория = this.ПолучитьЗначениеПарОрг( позОрг, "НАСПУНКТ" );

        Год = (new Date()).getFullYear();
        //Флаг    = ВыборШтампаПо( this.НашаОрг.Наименование, "наименование" );
        var мПарДог = this.ПолучитьПараметрыДоговораДО( позДог, (this.Запись.Окончание != undefined && this.Запись.Окончание != "" ? this.Запись.Окончание : 'Начало договора') );
        СтоимЧаса = мПарДог[ "АБФ_СТДО" ] != undefined ? мПарДог[ "АБФ_СТДО" ] : "";

        // информация о плательщике (Орг)
        НаименованиеОрг = this.Запись['Плательщик>Наименование'];
        var инфоРукОрг = this.ПолучитьИнфоЧастноеЛицо( позОрг, 1 );
        ФИООрг = инфоРукОрг.стрДог != undefined ? инфоРукОрг.стрДог : "";
        ОснованиеОрг = инфоРукОрг.основание != undefined ? инфоРукОрг.основание : "Устава";
        ОснованиеОрг = ОснованиеОрг != "" ? ОснованиеОрг : "Устава";
        ДолжностьОрг = инфоРукОрг.Должность != undefined ? инфоРукОрг.Должность : "";
        //ФИОДирОрг    = ФИО( Извлечь(инфоРукОрг.ФИО, "") );
        var окЧеловек = new кЧеловек( инфоРукОрг.ФИО != undefined ? инфоРукОрг.ФИО : "" );
        ФИОДирОрг = окЧеловек.ИОФ();
        ИННКППОрг = this.Запись['Плательщик>ИНН'] + "/" + ( this.Запись['Плательщик>КПП'] != undefined && this.Запись['Плательщик>КПП'] != "" ? this.Запись['Плательщик>КПП'] : "" );
        АдресПочтаОрг = this.Запись['Плательщик>ФактАдрес'];
        АдресПочтаОрг = АдресПочтаОрг == "" ? this.Запись['Плательщик>Адрес'] : АдресПочтаОрг;
        АдресОрг = this.Запись['Плательщик>Адрес'];

        var инфоБанкОрг = this.РасчСчетИБанк( 'Плательщик' );
        РСчетОрг = инфоБанкОрг.РСчет != undefined ? инфоБанкОрг.РСчет : "";
        БанкОрг = инфоБанкОрг.Банк != undefined ? инфоБанкОрг.Банк : ""  + " БИК " + инфоБанкОрг.БИК != undefined ? инфоБанкОрг.БИК : "" +
                    " К/С " + инфоБанкОрг.КоррСчет != undefined ? инфоБанкОрг.КоррСчет : "";
        ТелФаксОрг = this.Запись['Плательщик>Телефон'] != "" ? "тел/факс " + this.Запись['Плательщик>Телефон'] : "";
        ЭлПочтаОрг = this.Запись['Плательщик>email'];
        ЭлПочтаОрг = ЭлПочтаОрг != "" ? "эл.почта " + ЭлПочтаОрг.replaceAll( ";", "; " ) : "";

        // информация о нашей фирме (Фирм)
        НаименФирм = this.НашаОрг.Наименование;
        var инфоРукФ = this.ПолучитьИнфоЧастноеЛицо( позФирм, 1 );
        ФИОФ = инфоРукФ.стрДог != undefined ? инфоРукФ.стрДог : "";
        ОснованиеФ = инфоРукФ.основание != undefined ? инфоРукФ.основание : "Устава";
        ОснованиеФ = ОснованиеФ != "" ? ОснованиеФ : "Устава";
        ДолжностьФ = инфоРукФ.Должность != undefined ? инфоРукФ.Должность : "Директор";
        //ФИОДирФ     = ФИО( Извлечь(инфоРукФ.ФИО, "") );
        окЧеловек = new кЧеловек( инфоРукФ.ФИО != undefined ? инфоРукФ.ФИО : "" );
        ФИОДирФ = окЧеловек.ИОФ();
        ИННКППФ = this.НашаОрг.ИНН != undefined ? this.НашаОрг.ИНН : "" + "/" + this.НашаОрг.КПП != undefined ? this.НашаОрг.КПП : "";
        АдресПочтаФ = this.НашаОрг.ФактАдрес != undefined ? this.НашаОрг.ФактАдрес : "";
        АдресПочтаФ = АдресПочтаФ == "" ? (this.НашаОрг.Адрес != undefined ? this.НашаОрг.Адрес : "") : АдресПочтаФ;
        АдресФ = this.НашаОрг.Адрес != undefined ? this.НашаОрг.Адрес : "";

        var инфоБанкФ = this.РасчСчетИБанк( НомерЗаписи( this.НашаОрг ) );
        РсчетФ = инфоБанкФ.РСчет != undefined ? инфоБанкФ.РСчет : "";
        БанкФ = инфоБанкФ.Банк != undefined ? инфоБанкФ.Банк : "" + " БИК " + инфоБанкФ.БИК != undefined ? инфоБанкФ.БИК : "" +
                        " К/С " + инфоБанкФ.КоррСчет != undefined ? инфоБанкФ.КоррСчет : "";
        ТелФаксФ = this.НашаОрг.Телефон != undefined ? this.НашаОрг.Телефон : "";
        ТелФаксФ = ТелФаксФ != "" ? "тел/факс " + ТелФаксФ : ТелФаксФ;
        // почту как и сайт прописываем в коде отчета по просьбе менеджеров
        //ЭлПочтаФ    = Извлечь( this.НашаОрг.email, "" );
        //ЭлПочтаФ    = ЭлПочтаФ != "" ? "эл.почта " + ЗаменитьВсе( ЭлПочтаФ, ";", "; " ) : ЭлПочтаФ;
        ЭлПочтаФ = "эл.почта soft@stack-it.ru";
        АдресСайтФ = "www.stack-it.ru";
        var пСвидетельство = this.ВыборСвидетельство( this.НашаОрг.ИНН, Стек_Тип );

        this.Данные = {};
        this.Данные.СтоимЧаса = СтоимЧаса + " (" + Прописью( Number( СтоимЧаса ) ) + ") рублей";
        this.Данные.ДатаПодписания = this.Запись["Дата подписания"].format( "dd MMMMM yyyy г." );
        this.Данные.ДатаОкончания = this.Запись.Окончание.format( "dd MMMMM yyyy г." );
        this.Данные.Год = Год;
        this.Данные.НомерТема = НомерТема;
        this.Данные.Стек_Тип = Стек_Тип;
        this.Данные.Территория = Территория;
        this.Данные.Свидетельство = пСвидетельство;
        this.Данные.Дата = (new Date()).format( "dd MMMMM yyyy г." );
        this.Данные.НаименФирм = НаименФирм;
        this.Данные.НаименованиеОрг = НаименованиеОрг;
        this.Данные.СуммаРуб = this.Запись.Сумма + " (" + Прописью( Number( this.Запись.Сумма ) ) + ") рублей";
        this.Данные.ИННКППФ = ИННКППФ;
        this.Данные.АдресФ = АдресФ;
        this.Данные.РсчетФ = РсчетФ;
        this.Данные.БанкФ = БанкФ;
        this.Данные.АдресПочтаФ = АдресПочтаФ;
        this.Данные.ТелФаксФ = ТелФаксФ;
        this.Данные.ЭлПочтаФ = ЭлПочтаФ;
        this.Данные.АдресСайтФ = АдресСайтФ;
        this.Данные.ФИОФ = ФИОФ;
        this.Данные.ФИОДирФ = ФИОДирФ;
        this.Данные.ОснованиеФ = ОснованиеФ;

        this.Данные.ИННКППОрг = ИННКППОрг;
        this.Данные.АдресОрг = АдресОрг;
        this.Данные.РСчетОрг = РСчетОрг;
        this.Данные.БанкОрг = БанкОрг;
        this.Данные.АдресПочтаОрг = АдресПочтаОрг;
        this.Данные.ТелФаксОрг = ТелФаксОрг;
        this.Данные.ЭлПочтаОрг = ЭлПочтаОрг;
        this.Данные.ФИООрг = ФИООрг;
        this.Данные.ФИОДирОрг = ФИОДирОрг;
        this.Данные.ОснованиеОрг = ОснованиеОрг;

        this.Данные.ДолжностьОрг = ДолжностьОрг;
        this.Данные.ДолжностьФ = ДолжностьФ;

        var мОшибкиДоговоров = this.ПроверкаДоговора( this.Данные );
        if( мОшибкиДоговоров != undefined && мОшибкиДоговоров.length > 0 ) {
            Сообщить( "Есть незаполненые поля" );
            this.Вывод_протокола_ошибок( мОшибкиДоговоров );
        }

        this.Данные.Флаг = Флаг;
        this.Дополнительный_раздел();

        this.ДобавитьВИсточник( "Отчет", this.Данные );
        this.Построить();
    }

    Дополнительный_раздел() {
    }

    Конец_таблицы() {
        if( this.построительКомплектов != undefined )
            this.построительКомплектов.КонецКомплекта();
    }
}

отчеты.Add( "ДоговорООЛицензионныйДоговорЛицензионныйДоговорПодписанный", "Договор(ОО) - Лицензионный договор @ Лицензионный договор (подписанный)" );
class ДоговорООЛицензионныйДоговорЛицензионныйДоговорПодписанный extends ДоговорООЛицензионныйДоговорЛицензионныйДоговор {
    constructor() {
        super();
    }
    Дополнительный_раздел() {
        this.Данные.Флаг = this.ВыборШтампаПо( this.НашаОрг.Наименование, "наименование" );
        switch( this.Данные.Флаг ) {
            case 1:
                КопироватьФайл( отчеты.КаталогОтчета( "ДоговорООЛицензионныйДоговорЛицензионныйДоговорПодписанный" ) +
                                "SHABLON\\ПечатьСтекСпорт.jpg", "CLIENT:Report_Birt\\" + "ПечатьСтекСпорт.jpg" ); break;
            case 2:
                КопироватьФайл( отчеты.КаталогОтчета( "ДоговорООЛицензионныйДоговорЛицензионныйДоговорПодписанный" ) +
                                "SHABLON\\ПечатьСтек.jpg", "CLIENT:Report_Birt\\" + "ПечатьСтек.jpg" ); break;
            case 3:
                КопироватьФайл( отчеты.КаталогОтчета( "ДоговорООЛицензионныйДоговорЛицензионныйДоговорПодписанный" ) +
                                "SHABLON\\ПечатьСтекИт.jpg", "CLIENT:Report_Birt\\" + "ПечатьСтекИт.jpg" ); break;
        }
    }
}

отчеты.Add( "ДоговорООДилерскийДоговорДилерскийДоговорОбласть", "Договор(ОО) - Дилерский договор @ Дилерский договор - Область" );
class ДоговорООДилерскийДоговорДилерскийДоговорОбласть extends ДоговорООЛицензионныйДоговорЛицензионныйДоговор
{
    constructor() {
        super();
        this.ФайлОтчета = "SHABLON\\DOCREC\\Дилерский договор.rptdesign";
    }

    Дополнительный_раздел() {
    }
}

отчеты.Add( "ДоговорООДилерскийДоговорДилерскийДоговорОбластьПодписанный", "Договор(ОО) - Дилерский договор @ Дилерский договор - Область (подписанный)" );
class ДоговорООДилерскийДоговорДилерскийДоговорОбластьПодписанный extends ДоговорООЛицензионныйДоговорЛицензионныйДоговор
{
    constructor() {
        super();
        this.ФайлОтчета = "SHABLON\\DOCREC\\Дилерский договор.rptdesign";
    }

    Дополнительный_раздел() {
        this.Данные.Флаг = this.ВыборШтампаПо( this.НашаОрг.Наименование, "наименование" );
    }
}

отчеты.Add( "ДоговорООДилерскийДоговорДилерскийДоговорПартнер", "Договор(ОО) - Дилерский договор @ Дилерский договор - Партнер" );
class ДоговорООДилерскийДоговорДилерскийДоговорПартнер extends ДоговорООЛицензионныйДоговорЛицензионныйДоговор
{
    constructor() {
        super();
        this.ФайлОтчета = "SHABLON\\DOCREC\\Дилерский_договор_партнер.rptdesign";
    }

    Дополнительный_раздел() {
    }
}

отчеты.Add( "ДоговорООДилерскийДоговорДилерскийДоговорПартнерПодписанный", "Договор(ОО) - Дилерский договор @ Дилерский договор - Партнер (подписанный)" );
class ДоговорООДилерскийДоговорДилерскийДоговорПартнерПодписанный extends ДоговорООЛицензионныйДоговорЛицензионныйДоговор
{
    constructor() {
        super();
        this.ФайлОтчета = "SHABLON\\DOCREC\\Дилерский_договор_партнер.rptdesign";
    }

    Дополнительный_раздел() {
        this.Данные.Флаг = this.ВыборШтампаПо( this.НашаОрг.Наименование, "наименование" );
    }
}

отчеты.Add( "ДоговорООДилерскийДоговорДилерскийДоговорДополнительноеСоглашение", "Договор(ОО) - Дилерский договор @ Дилерский договор - Дополнительное соглашение" );
class ДоговорООДилерскийДоговорДилерскийДоговорДополнительноеСоглашение extends ДоговорООЛицензионныйДоговорЛицензионныйДоговор
{
    constructor() {
        super();
        this.ФайлОтчета = "SHABLON\\DOCREC\\Дополнительное соглашение.rptdesign";
    }

    Дополнительный_раздел() {
    }
}

отчеты.Add( "ДоговорООДилерскийДоговорДилерскийДоговорДополнительноеСоглашениеПодписанный", "Договор(ОО) - Дилерский договор @ Дилерский договор - Дополнительное соглашение (подписанный)" );
class ДоговорООДилерскийДоговорДилерскийДоговорДополнительноеСоглашениеПодписанный extends ДоговорООЛицензионныйДоговорЛицензионныйДоговор
{
    constructor() {
        super();
        this.ФайлОтчета = "SHABLON\\DOCREC\\Дополнительное соглашение.rptdesign";
    }

    Дополнительный_раздел() {
        this.Данные.Флаг = this.ВыборШтампаПо( this.НашаОрг.Наименование, "наименование" );
    }
}

class ДоговорООДоговорОбщий extends ОтчетДоговорДО
{
    constructor() {
        super();
        this.мОшибкиДоговоров;
        this.колНапечатано;
        this.пВыбор;
        this.ФайлШаблон;
        this.построительКомплектов;
    }

    ИмяФайлаОтчета( _пНомерТема, _пНазваниеОрг ) {
        return undefined;
    }

    Начало_таблицы() {
        this.пВыбор = 1;
        this.колНапечатано = 0;

        if( this.мБылОтчет != undefined && this.мБылОтчет.БылОтчет != undefined ? this.мБылОтчет.БылОтчет : 0 )
            this.пВыбор = this.мБылОтчет.БылОтчет;
        else if( this.Рассылка )
            this.пВыбор = 0;
        else {
            this.пВыбор = Меню( "без подписи и печати\nc подписью и печатью" );
            if( !this.пВыбор )
                throw "ReportBreak: Построение отчета прервано пользователем!";
            if( this.мБылОтчет == undefined )
                this.мБылОтчет = {};
            this.мБылОтчет.БылОтчет = this.пВыбор;
        }

        if( this.ТихийРежим != undefined ) // переменная появляется, если печать делается через печать комплектов
        {
            this.построительКомплектов = ПостроительКомплектовБирт(0);
            this.построительКомплектов.НачалоКомплекта();
        }
    }

    ВыводНаПечать( _данные, _типДог, _пНомерТема ) {
        this.мОшибкиДоговоров = this.ПроверкаДоговора( _данные, _типДог );

        this.ДобавитьВИсточник( "Отчет", _данные );

        // переменная используется в разделе Рассылка
        // почему-то для формирования приложения к письму важно, чтобы этот блок был перед об.Отчет()
        // иначе не работает
        var файл = new кФайл( this.Шаблон );
        var имяФИст = файл.КороткоеИмяБезРасширения();

        this.Построить();
        if( this.Рассылка != undefined ) // рассылка договоров из комплектов документов
            this.РассылкаОтчета( имяФИст, _пНомерТема );
    }

    Конец_таблицы() {
        if( this.ТихийРежим != undefined ) // переменная появляется, если печать делается через печать комплектов
        {
            if( this.мОшибкиДоговоров != undefined && this.мОшибкиДоговоров.length > 0 )
                this.Вывод_протокола_ошибок( this.мОшибкиДоговоров );

            if( this.построительКомплектов != undefined )
                this.построительКомплектов.КонецКомплекта();

            if( this.колНапечатано == 0 )
                throw "ReportBreak: Не определена форма документа";
        }
    }

    РассылкаОтчета( _имяФИст, _пНомерТема, _пНазваниеОрг ) {
        var имяФО = this.ИмяФайлаОтчета( _пНомерТема, _пНазваниеОрг );
        УдалитьФайл( КаталогПрограммы() + "mailing\\" + имяФО );
        КопироватьФайл( "CLIENT:Report_Birt\\" + _имяФИст + ".pdf", КаталогПрограммы() + "mailing\\" + имяФО );

        if( this.мФайлы == undefined )
            this.мФайлы = {};
        this.мФайлы.Имя = имяФО;
        this.мФайлы.ПолноеИмя = КаталогПрограммы() + "mailing\\" + имяФО;
    }
}

отчеты.Add( "ДоговорООДоговорСопровождения", "Договор(ОО) - Договор @ сопровождения" );
class ДоговорООДоговорСопровождения extends ДоговорООДоговорОбщий {
    constructor() {
        super();
    }

    ИмяФайлаОтчета( _пНомерТема, _пНазваниеОрг ) {
        return "Договор сопровождения " + _пНомерТема.replaceAll( "/", "_" ) + " " + ЭлементИндекса( _пНазваниеОрг ) + ".pdf";
    }

    Строка() {
        var Данные = {};

        var позДоговора = НомерЗаписи( this.Запись );
        var ТипДог = this.ОпределитьТипРасчета( позДоговора );

        if( ТипДог > 0 && ТипДог < 4 ) // берем все, кроме аренды и не определенных
        {
            var НашаОрг = ЛицоП();
            var пВидОрг = this.НашаОрганизацияПоИНН( НашаОрг.ИНН );
            switch( ТипДог ) {
                case 1:
                    if( пВидОрг == 2 ) // для Стек-ИТ печатаем с НДС
                        this.ФайлШаблон = "SHABLON\\DOCREC\\Договор_сопровождение_Абон_ФактНДС.rptdesign";
                    else
                        this.ФайлШаблон = "SHABLON\\DOCREC\\Договор_сопровождение_Абон_Факт.rptdesign";
                    break;
                case 2:
                    if( пВидОрг == 2 ) // для Стек-ИТ печатаем с НДС
                        this.ФайлШаблон = "SHABLON\\DOCREC\\Договор_сопровождение_Абон_МесНДС.rptdesign";
                    else
                        this.ФайлШаблон = "SHABLON\\DOCREC\\Договор_сопровождение_Абон_Мес.rptdesign";
                    break;
                case 3:
                    if( пВидОрг == 2 ) // для Стек-ИТ печатаем с НДС
                        this.ФайлШаблон = "SHABLON\\DOCREC\\Договор_сопровождение_Абон_ГодНДС.rptdesign";
                    else
                        this.ФайлШаблон = "SHABLON\\DOCREC\\Договор_сопровождение_Абон_Год.rptdesign";
                    break;
                default:
                    throw "ReportBreak: Не определена форма документа";
                    break;
            }

            this.УстановитьШаблон( this.ФайлШаблон );
            this.Построитель.УстановитьСвойство("Формат", "pdf");

            if( this.Рассылка != undefined && this.Рассылка == 1 ) // если делаем рассылку комплекта, то не выводим на экран отчет
                this.Построитель.УстановитьСвойство("Скрытый", "true");
            else
                this.Построитель.УстановитьСвойство("Скрытый", "false");

            this.ОпределитьИсточникДанных( "Отчет", `НомерТема,A,Стек_Тип,A,Территория,A,Дата,A,НаименФирм,A,ФИОФ,A,ОснованиеФ,A,НаименованиеОрг,A,ФИООрг,A,ОснованиеОрг,A,ВсегоЧасов,A,СрокИсполнения,A
                      , СуммаРуб,A,СуммаРубВМес,A,СуммаРубДопЧас,A,ДатНачДог,A,ДатКнцДог,A,ИННКППФ,A,АдресФ,A,РсчетФ,A,БанкФ,A,АдресПочтаФ,A,ТелФаксФ,A,ЭлПочтаФ,A,АдресСайтФ,A
                      , ИННКППОрг,A,АдресОрг,A,РСчетОрг,A,БанкОрг,A,АдресПочтаОрг,A,ТелФаксОрг,A,ЭлПочтаОрг,A,ДолжностьФ,A,ФИОДирФ,A,ДолжностьОрг,A,ФИОДирОрг,A
                      , Флаг,S` );

            var позОрг = this.Запись.Плательщик;
            var позФирм = НомерЗаписи( НашаОрг );

            var пНомерТема = this.ОпределитьНомерДокумента( позДоговора );
            var пСтек_Тип = "\"" + this.ОпределитьТипКомплекса( this.Запись.Тема ) + "\"";
            var пТерритория = this.ПолучитьЗначениеПарОрг( позОрг, "НАСПУНКТ" );
            var датаПодписания = this.Запись["Дата подписания"];
            var пДата = датаПодписания.format("dd MMMMM yyyy г.");
            var пНаименФирм = НашаОрг.Наименование;

            var инфоРукФ = this.ПолучитьИнфоЧастноеЛицо( позФирм, 1 );
            var пФИОФ = инфоРукФ.стрДог != undefined ? инфоРукФ.стрДог : "";
            var пОснованиеФ = инфоРукФ.основание != undefined ? инфоРукФ.основание : "Устава";
            пОснованиеФ = пОснованиеФ != "" ? пОснованиеФ : "Устава";

            var пНаименованиеОрг = this.Запись['Плательщик>Наименование'];
            var пНазваниеОрг = this.Запись['Плательщик>Название'];
            var инфоРукОрг = this.ПолучитьИнфоЧастноеЛицо( позОрг, 1 );
            var пФИООрг = инфоРукОрг.стрДог != undefined ? инфоРукОрг.стрДог : "";
            var пОснованиеОрг = инфоРукОрг.основание != undefined ? инфоРукОрг.основание : "Устава";
            пОснованиеОрг = пОснованиеОрг != "" ? пОснованиеОрг : "Устава";

            var мПарДог = this.ПолучитьПараметрыДоговораДО( позДоговора, ( this.Запись.Окончание != "" ? this.Запись.Окончание : this.Запись['Начало договора'] ) );

            var пВсегоЧасов = мПарДог[ "АБОН_ЧАСЫ" ] != undefined ? мПарДог[ "АБОН_ЧАСЫ" ] : "";
            пВсегоЧасов = пВсегоЧасов != "" && пВсегоЧасов != 0 ? пВсегоЧасов + " (" + Прописью( пВсегоЧасов ) + ")" : "";

            var пСрокИсполнения = мПарДог[ "СРОК_ИСП" ] != undefined ? мПарДог[ "СРОК_ИСП" ] : "";
            пСрокИсполнения = пСрокИсполнения != "" && пСрокИсполнения != 0 ? пСрокИсполнения + " (" + this.ЧислоДнейПрописьюДог( пСрокИсполнения ) + ")" : "";

            var пСуммаРуб = Number( this.Запись.Сумма ) + " (" + Прописью( Number( this.Запись.Сумма ) ) + ")";
            var пСуммаРубДопЧас = мПарДог[ "АБФ_СТДО" ] != undefined ? мПарДог[ "АБФ_СТДО" ] : "";
            пСуммаРубДопЧас = пСуммаРубДопЧас != "" && пСуммаРубДопЧас != 0 ? пСуммаРубДопЧас + " (" + Прописью( пСуммаРубДопЧас ) + ")" : "";
            var пСуммаРубВМес = мПарДог[ "ЕЖЕМПЛАТЕЖ" ] != undefined ? мПарДог[ "ЕЖЕМПЛАТЕЖ" ] : "";
            пСуммаРубВМес = пСуммаРубВМес != "" && пСуммаРубВМес != 0 ? пСуммаРубВМес + " (" + Прописью( пСуммаРубВМес ) + ")" : "";

            var пДатНачДог = this.Запись[ 'Начало договора' ].format("dd MMMMM yyyy г.");
            var пДатКнцДог = this.Запись[ 'Окончание' ].format("dd MMMMM yyyy г.");

            var пИННКППФ = НашаОрг.ИНН != undefined ? НашаОрг.ИНН : "" + "/" + НашаОрг.КПП != undefined ? НашаОрг.КПП : "";
            var пАдресПочтаФ = НашаОрг.ФактАдрес != undefined ? НашаОрг.ФактАдрес : "";
            пАдресПочтаФ = пАдресПочтаФ == "" ? ( НашаОрг.Адрес != undefined ?  НашаОрг.Адрес : "" ) : пАдресПочтаФ;
            var пАдресФ = НашаОрг.Адрес != undefined ? НашаОрг.Адрес : "";

            var инфоБанкФ = this.РасчСчетИБанк( позФирм );
            var пРсчетФ = инфоБанкФ.РСчет != undefined ? инфоБанкФ.РСчет : "";
            var пАдресБанка = инфоБанкФ.Адрес != undefined ? инфоБанкФ.Адрес : "";
            пАдресБанка = пАдресБанка != "" ? ", " + пАдресБанка : "";
            var пБанкФ = инфоБанкФ.Банк != undefined ? инфоБанкФ.Банк : "" + пАдресБанка + " БИК " +
                        инфоБанкФ.БИК != undefined ? инфоБанкФ.БИК : "" + " К/С " + инфоБанкФ.КоррСчет != undefined ? инфоБанкФ.КоррСчет : "";
            var пТелФаксФ = НашаОрг.Телефон != undefined ? НашаОрг.Телефон : "";
            пТелФаксФ = пТелФаксФ != "" ? "тел/факс " + пТелФаксФ : пТелФаксФ;
            var пЭлПочтаФ = НашаОрг.email != undefined ? НашаОрг.email : "";
            пЭлПочтаФ = пЭлПочтаФ != "" ? "эл.почта " + пЭлПочтаФ.replaceAll( ";", "; " ) : пЭлПочтаФ;
            var пАдресСайтФ = "www.stack-it.ru";

            var пИННКППОрг = this.Запись['Плательщик>ИНН'] + "/" + ( this.Запись['Плательщик>КПП'] != "" ? this.Запись['Плательщик>КПП'] : "" );
            var пАдресОрг = this.Запись['Плательщик>Адрес'];
            var пАдресПочтаОрг = this.Запись['Плательщик>ФактАдрес'] == "" ? this.Запись['Плательщик>Адрес'] : this.Запись['Плательщик>ФактАдрес'];

            var инфоБанкОрг = this.РасчСчетИБанк( позОрг );
            var пРСчетОрг = инфоБанкОрг.РСчет != undefined ? инфоБанкОрг.РСчет : "";
            пАдресБанка = инфоБанкОрг.Адрес != undefined ?инфоБанкОрг.Адрес : "";
            пАдресБанка = пАдресБанка != "" ? ", " + пАдресБанка : "";
            var пБанкОрг = инфоБанкОрг.Банк != undefined ? инфоБанкОрг.Банк : "" + пАдресБанка + " БИК " +
                            инфоБанкОрг.БИК != undefined ? инфоБанкОрг.БИК : "" + " К/С " + инфоБанкОрг.КоррСчет != undefined ? инфоБанкОрг.КоррСчет : "";
            var пТелФаксОрг = this.Запись['Плательщик>Телефон'] != "" ? "тел/факс " + this.Запись['Плательщик>Телефон'] : "";
            var пЭлПочтаОрг = this.Запись['Плательщик>email'];
            пЭлПочтаОрг = пЭлПочтаОрг != "" ? "эл.почта " + пЭлПочтаОрг.replaceAll( ";", "; " ) : "";

            var пДолжностьФ = инфоРукФ.Должность != undefined ? инфоРукФ.Должность : "Директор";
            var пФИОДирФ = ФИО( инфоРукФ.ФИО != undefined ? инфоРукФ.ФИО : "" );

            var пДолжностьОрг = инфоРукОрг.Должность != undefined ? инфоРукОрг.Должность : "";
            var пФИОДирОрг = ФИО( инфоРукОрг.ФИО != undefined ? инфоРукОрг.ФИО : "" );

            Данные.НомерТема = пНомерТема;
            Данные.Стек_Тип = пСтек_Тип;
            Данные.Территория = пТерритория;
            Данные.Дата = пДата;
            Данные.НаименФирм = пНаименФирм;
            Данные.ФИОФ = пФИОФ;
            Данные.ОснованиеФ = пОснованиеФ;
            Данные.НаименованиеОрг = пНаименованиеОрг;
            Данные.ФИООрг = пФИООрг;
            Данные.ОснованиеОрг = пОснованиеОрг;
            Данные.ВсегоЧасов = пВсегоЧасов;
            Данные.СрокИсполнения = пСрокИсполнения;
            Данные.СуммаРуб = пСуммаРуб;
            Данные.СуммаРубВМес = пСуммаРубВМес;
            Данные.СуммаРубДопЧас = пСуммаРубДопЧас;
            Данные.ДатНачДог = пДатНачДог;
            Данные.ДатКнцДог = пДатКнцДог;
            Данные.ИННКППФ = пИННКППФ;
            Данные.АдресФ = пАдресФ;
            Данные.РсчетФ = пРсчетФ;
            Данные.БанкФ = пБанкФ;
            Данные.АдресПочтаФ = пАдресПочтаФ;
            Данные.ТелФаксФ = пТелФаксФ;
            Данные.ЭлПочтаФ = пЭлПочтаФ;
            Данные.АдресСайтФ = пАдресСайтФ;
            Данные.ИННКППОрг = пИННКППОрг;
            Данные.АдресОрг = пАдресОрг;
            Данные.РСчетОрг = пРСчетОрг;
            Данные.БанкОрг = пБанкОрг;
            Данные.АдресПочтаОрг = пАдресПочтаОрг;
            Данные.ТелФаксОрг = пТелФаксОрг;
            Данные.ЭлПочтаОрг = пЭлПочтаОрг;
            Данные.ДолжностьФ = пДолжностьФ;
            Данные.ФИОДирФ = пФИОДирФ;
            Данные.ДолжностьОрг = пДолжностьОрг;
            Данные.ФИОДирОрг = пФИОДирОрг;
            Данные.Флаг = this.пВыбор == 1 ? 0 : this.ВыборШтампаПо( пНаименФирм, "наименование" );

            this.ВыводНаПечать( Данные, ТипДог, пНомерТема );

            this.колНапечатано++;
        }
    }
}

отчеты.Add( "ДоговорООДоговорСопроводительноеПисьмо", "Договор(ОО) - Договор @ сопроводительное письмо" );
class ДоговорООДоговорСопроводительноеПисьмо extends ДоговорООДоговорОбщий {
    constructor() {
        super();
    }

    // Переопределили чтобы проверка договора не работала
    ПроверкаДоговора( _данные, _типДог ) {
        return undefined;
    }

    ИмяФайлаОтчета( _пНомерТема, _пНазваниеОрг ) {
        return "Сопроводительное письмо к договору " + _пНомерТема.replaceAll( "/", "_" ) + ".pdf";
    }

    Строка() {
        var Данные = {};

        var позДоговора = НомерЗаписи( this.Запись );
        var ТипДог = this.ОпределитьТипРасчета( позДоговора );

        if( ТипДог > 0 && ТипДог < 4 ) // берем все, кроме аренды и не определенных
        {
            var позОрг = this.Запись.Плательщик;
            var НашаОрг = ЛицоП();
            var ИННнашейОрг = НашаОрг.ИНН;
            var пВидОрг = this.НашаОрганизацияПоИНН( ИННнашейОрг );
            var позФирм = НомерЗаписи( НашаОрг );

            switch( пВидОрг ) {
                case 2:
                    this.ФайлШаблон = "SHABLON\\DOCREC\\Сопроводительное письмо к договору с НДС.rptdesign";
                    break;
                default:
                    this.ФайлШаблон = "SHABLON\\DOCREC\\Сопроводительное письмо к договору.rptdesign";
                    break;
            }

            this.УстановитьШаблон( this.ФайлШаблон );
            this.Построитель.УстановитьСвойство("Формат", "pdf");

            if( this.Рассылка != undefined && this.Рассылка == 1 ) // если делаем рассылку комплекта, то не выводим на экран отчет
                this.Построитель.УстановитьСвойство("Скрытый", "true");
            else
                this.Построитель.УстановитьСвойство("Скрытый", "false");

            this.ОпределитьИсточникДанных( "Отчет", `НомерТема,A,Стек_Тип,A,Дата,A,НаименованиеОрг,A,ТелФаксФ,A,ЭлПочтаФ,A,Год,A,СрокПодписи,A,ПрошлыйГод,A
                      , АдресОрг,A,ДолжностьФ,A,ФИОДирФ,A,ИсполнительФИО,A,Флаг,S,ВидОрг,S` );

            var пНомерТема = this.ОпределитьНомерДокумента( позДоговора );
            var пСтек_Тип = "\"" + this.ОпределитьТипКомплекса( this.Запись.Тема ) + "\"";
            var пДата = this.Запись['Дата подписания'];

            var пНаименФирм = НашаОрг.Наименование.toUpperCase();
            var пНаименованиеОрг = this.Запись['Плательщик>Наименование'];

            var пТелФаксФ = НашаОрг.Телефон != undefined ? НашаОрг.Телефон : "";
            var пЭлПочтаФ = НашаОрг.email != undefined ? НашаОрг.email : "";
            пЭлПочтаФ = пЭлПочтаФ.replaceAll( ";", "; " );

            var пАдресОрг = this.Запись['Плательщик>Адрес'];

            var инфоРукФ = this.ПолучитьИнфоЧастноеЛицо( позФирм, 1 );
            var пДолжностьФ = инфоРукФ.Должность != undefined ? инфоРукФ.Должность : "Директор";
            var пФИОДирФ = ФИО( инфоРукФ.ФИО != undefined ? инфоРукФ.ФИО : "" );

            // хотела сделать через переменные, но не понятно к чему привязаться (даты договора плавающие и печатать могут в любой момент)
            var пГод = "2015 г.";
            var пПрошлыйГод = "2014";
            var пСрокПодписи = "30 декабря 2014 г.";
            var пИсполнительФИО = Пользователь().ФИО;

            Данные.НомерТема = пНомерТема;
            Данные.Стек_Тип = пСтек_Тип;
            Данные.Дата = пДата;
            Данные.НаименованиеОрг = пНаименованиеОрг;
            Данные.ТелФаксФ = пТелФаксФ;
            Данные.ЭлПочтаФ = пЭлПочтаФ;
            Данные.АдресОрг = пАдресОрг;
            Данные.ДолжностьФ = пДолжностьФ;
            Данные.ФИОДирФ = пФИОДирФ;
            Данные.Год = пГод;
            Данные.СрокПодписи = пСрокПодписи;
            Данные.ПрошлыйГод = пПрошлыйГод;
            Данные.ИсполнительФИО = пИсполнительФИО;
            Данные.Флаг = this.пВыбор == 1 ? 0 : (( пНаименФирм.indexOf("СПОРТ") > -1 ? 1 : 2) );
            Данные.ВидОрг = пВидОрг;

            this.ВыводНаПечать( Данные, ТипДог, пНомерТема );

            this.колНапечатано++;
        }
    }
}

отчеты.Add( "ДоговорООДоговорНаСмсСервис", "Договор(ОО) - Договор @ на смс сервис" );
class ДоговорООДоговорНаСмсСервис extends ОтчетДоговорДО {
    constructor() {
        super();
        this.ФайлШаблон = "SHABLON\\DOCREC\\Договор на смс.rptdesign";
        this.пВыбор;
        this.построительКомплектов
    }

    Начало_таблицы() {
        this.пВыбор = 1;

        if( this.мБылОтчет != undefined && this.мБылОтчет.БылОтчет != undefined )
            this.пВыбор = this.мБылОтчет.БылОтчет;
        else if( this.Рассылка )
            this.пВыбор = 0;
        else {
            this.пВыбор = Меню( "без подписи и печати\nc подписью и печатью" );
            if( !this.пВыбор )
                throw "ReportBreak: Построение отчета прервано пользователем!";
            if( this.мБылОтчет == undefined )
                this.мБылОтчет = {};
            this.мБылОтчет.БылОтчет = this.пВыбор;
        }

        this.построительКомплектов = ПостроительКомплектовБирт(0);
        this.построительКомплектов.НачалоКомплекта();
    }

    Строка() {
        // Вставка Birt
        this.УстановитьШаблон( this.ФайлШаблон );
        this.Построитель.УстановитьСвойство("Формат", "pdf");

        this.ОпределитьИсточникДанных( "Отчет", `НомерТема,A,Стек_Тип,A,Территория,A,Дата,A,НаименФирм,A,ФИОФ,A,ФИОДирФ,A,ОснованиеФ,A,НаименованиеОрг,A,ОснованиеОрг,A
                        , СуммаРуб,A,ИННКППФ,A,АдресФ,A,РсчетФ,A,БанкФ,A,АдресОрг,A,РСчетОрг,A,БанкОрг,A
                        , ДолжностьФ,A,ДолжностьОрг,A,ФИООрг,A,ФИОДирОрг,A,Флаг,S,СтоимЧаса,A,ДатаПодписания,A,Год,S
                        , АдресПочтаФ,A,ТелФаксФ,A,ЭлПочтаФ,A,АдресСайтФ,A,ИННКППОрг,A,АдресПочтаОрг,A,ТелФаксОрг,A,ЭлПочтаОрг,A
		                  ,Свидетельство,A,ДатНачДог,A,ДатКнцДог,A,УчетНДС,A,ПорядокСдачи,A,СуммаСМС,A,пункт4т1,A,флагФирма,S` );

        var позОрг = this.Запись.Плательщик;
        var НашаОрг = ЛицоП();
        var позФирм = НомерЗаписи( НашаОрг );
        var позДог = НомерЗаписи( this.Запись );

        var НомерТема = this.ОпределитьНомерДокумента( позДог );
        var Стек_Тип = Вверх( "\"" + this.ОпределитьТипКомплекса( this.Запись.Тема ) + "\"" );
        var Территория = this.ПолучитьЗначениеПарОрг( позОрг, "НАСПУНКТ" );

        var Год = ( new Date() ).getFullYear();
        var мПарДог = this.ПолучитьПараметрыДоговораДО( позДог, (this.Запись.Окончание != "" ? this.Запись.Окончание : 'Начало договора') );
        var СтоимЧаса = мПарДог[ "АБФ_СТДО" ] != undefined ? мПарДог[ "АБФ_СТДО" ] : "";
        // Выводим стоимость смс с копейками или без
        var Сумма = this.Запись.Сумма;
        var смсСуммаРуб = Number(( Number( Сумма ) ).toFixed());
        var смсСуммаКоп = Number( Сумма ) * 100 % 100;
        var смсСумма = 0;
        if( смсСуммаКоп != 0 ) {
            if( смсСуммаРуб != 0 )
                смсСумма = Number( Сумма ) + " (" + Прописью( Number( Сумма ) ) + " руб. "
                + смсСуммаКоп + " коп." + ") " + "руб.";
            else
                смсСумма = Number( Сумма ) + " (" + смсСуммаКоп + "коп.) руб.";
        }
        else {
            смсСумма = Number( Сумма ) + " (" + Прописью( Number( Сумма ) ) + ") " + "руб.";
        }

        // информация о плательщике (Орг)
        var НаименованиеОрг = this.Запись['Плательщик>Наименование'];
        var инфоРукОрг = this.ПолучитьИнфоЧастноеЛицо( позОрг, 1 );
        var ФИООрг = инфоРукОрг.стрДог != undefined ? инфоРукОрг.стрДог : "";
        var ОснованиеОрг = инфоРукОрг.основание != undefined ? инфоРукОрг.основание : "Устава";
        ОснованиеОрг = ОснованиеОрг != "" ? ОснованиеОрг : "Устава";
        var ДолжностьОрг = инфоРукОрг.Должность != undefined ? инфоРукОрг.Должность : "";
        var окЧеловек = new кЧеловек( инфоРукОрг.ФИО != undefined ? инфоРукОрг.ФИО : "" );
        var ФИОДирОрг = окЧеловек.ИОФ();
        var ИННКППОрг = this.Запись['Плательщик>ИНН'] + "/" + ( this.Запись['Плательщик>КПП'] != "" ? this.Запись['Плательщик>КПП'] : "" );
        var АдресПочтаОрг = this.Запись['Плательщик>ФактАдрес'];
        АдресПочтаОрг = АдресПочтаОрг == "" ? this.Запись['Плательщик>Адрес'] : АдресПочтаОрг;
        var АдресОрг = this.Запись['Плательщик>Адрес'];

        var инфоБанкОрг = this.РасчСчетИБанк( this.Запись.Плательщик );
        var РСчетОрг = инфоБанкОрг.РСчет != undefined ? инфоБанкОрг.РСчет : "";
        var БанкОрг = инфоБанкОрг.Банк != undefined ? инфоБанкОрг.Банк : "" + " БИК " +
                        инфоБанкОрг.БИК != undefined ? инфоБанкОрг.БИК : "" + " К/С " + инфоБанкОрг.КоррСчет != undefined ? инфоБанкОрг.КоррСчет : "";
        var ТелФаксОрг = this.Запись['Плательщик>Телефон'] != "" ? "тел/факс " + this.Запись['Плательщик>Телефон'] : "";
        var ЭлПочтаОрг = this.Запись['Плательщик>email'];
        ЭлПочтаОрг = ЭлПочтаОрг != "" ? "эл.почта " + ЭлПочтаОрг.replaceAll( ";", "; " ) : "";

        // информация о нашей фирме (Фирм)
        var НаименФирм = НашаОрг.Наименование;
        var инфоРукФ = this.ПолучитьИнфоЧастноеЛицо( позФирм, 1 );
        var ФИОФ = инфоРукФ.стрДог != undefined ? инфоРукФ.стрДог : "";
        var ОснованиеФ = инфоРукФ.основание != undefined ? инфоРукФ.основание : "Устава";
        ОснованиеФ = ОснованиеФ != "" ? ОснованиеФ : "Устава";
        var ДолжностьФ = инфоРукФ.Должность != undefined ? инфоРукФ.Должность : "Директор";
        окЧеловек = new кЧеловек( инфоРукФ.ФИО != undefined ? инфоРукФ.ФИО : "" );
        var ФИОДирФ = окЧеловек.ИОФ();
        var ИННКППФ = НашаОрг.ИНН != undefined ? НашаОрг.ИНН : "" + "/" + НашаОрг.КПП != undefined ? НашаОрг.КПП : "";
        var АдресПочтаФ = НашаОрг.ФактАдрес != undefined ? НашаОрг.ФактАдрес : "";
        АдресПочтаФ = АдресПочтаФ == "" ? (НашаОрг.Адрес != undefined ? НашаОрг.Адрес : "") : АдресПочтаФ;
        var АдресФ = НашаОрг.Адрес != undefined ? НашаОрг.Адрес : "";

        var инфоБанкФ = this.РасчСчетИБанк( НомерЗаписи( НашаОрг ) );
        var РсчетФ = инфоБанкФ.РСчет != undefined ? инфоБанкФ.РСчет : "";
        var БанкФ = инфоБанкФ.Банк != undefined ? инфоБанкФ.Банк : "" + " БИК " +
                    инфоБанкФ.БИК != undefined ? инфоБанкФ.БИК : "" + " К/С " + инфоБанкФ.КоррСчет != undefined ? инфоБанкФ.КоррСчет : "";
        var ТелФаксФ = НашаОрг.Телефон != undefined ? НашаОрг.Телефон : "";
        ТелФаксФ = ТелФаксФ != "" ? "тел/факс " + ТелФаксФ : ТелФаксФ;
        // почту как и сайт прописываем в коде отчета по просьбе менеджеров
        //ЭлПочтаФ    = Извлечь( НашаОрг.email, "" );
        //ЭлПочтаФ    = ЭлПочтаФ != "" ? "эл.почта " + ЗаменитьВсе( ЭлПочтаФ, ";", "; " ) : ЭлПочтаФ;
        var ЭлПочтаФ = "эл.почта soft@stack-it.ru";
        var АдресСайтФ = "www.stack-it.ru";
        var пСвидетельство = this.ВыборСвидетельство( НашаОрг.ИНН, Стек_Тип );

        var суммаСтр = (Number( Сумма )).toLocaleString();
        суммаСтр = суммаСтр.split(".")[0] + " (" + Прописью( Number( Сумма ) ) + ") рублей";

        var Данные = {};
        Данные.СтоимЧаса = СтоимЧаса + " (" + Прописью( Number( СтоимЧаса ) ) + ") рублей";
        Данные.ДатаПодписания = this.Запись['Окончание'].format( "dd MMMMM yyyy г." );
        Данные.Год = Год;
        Данные.ДатНачДог = this.Запись['Начало договора'].format( "dd MMMMM yyyy г." );
        Данные.ДатКнцДог = this.Запись['Окончание'].format( "dd MMMMM yyyy г." );
        Данные.НомерТема = НомерТема;
        Данные.Стек_Тип = Стек_Тип;
        Данные.Территория = Территория ? "(" + Территория + ")" : "";
        Данные.Свидетельство = пСвидетельство;
        Данные.Дата = this.Запись['Начало договора'].format( "dd MMMMM yyyy г." );
        Данные.НаименФирм = НаименФирм;
        Данные.НаименованиеОрг = НаименованиеОрг;
        Данные.СуммаРуб = суммаСтр;
        Данные.ИННКППФ = ИННКППФ;
        Данные.АдресФ = АдресФ;
        Данные.РсчетФ = РсчетФ;
        Данные.БанкФ = БанкФ;
        Данные.АдресПочтаФ = АдресПочтаФ;
        Данные.ТелФаксФ = ТелФаксФ;
        Данные.ЭлПочтаФ = ЭлПочтаФ;
        Данные.АдресСайтФ = АдресСайтФ;
        Данные.ФИОФ = ФИОФ;
        Данные.ФИОДирФ = ФИОДирФ;
        Данные.ОснованиеФ = ОснованиеФ;
        Данные.СуммаРуб = смсСумма;

        Данные.ИННКППОрг = ИННКППОрг;
        Данные.АдресОрг = АдресОрг;
        Данные.РСчетОрг = РСчетОрг;
        Данные.БанкОрг = БанкОрг;
        Данные.АдресПочтаОрг = АдресПочтаОрг;
        Данные.ТелФаксОрг = ТелФаксОрг;
        Данные.ЭлПочтаОрг = ЭлПочтаОрг;
        Данные.ФИООрг = ФИООрг;
        Данные.ФИОДирОрг = ФИОДирОрг;
        Данные.ОснованиеОрг = ОснованиеОрг;

        Данные.ДолжностьОрг = ДолжностьОрг;
        Данные.ДолжностьФ = ДолжностьФ;
        //Печатаем разные пункты для Стек-ИТ и Стек-Спорт, Стек.
        if( НашаОрг.Название == "ООО " + "\"" + "Стек-ИТ" + "\"" ) {
            //Стек-ИТ
            Данные.флагФирма = 1;
            Данные.пункт4т1 = "в том числе НДС 18%."
        }
        else {
            //Стек или Стек-спорт
            Данные.флагФирма = 2;
            Данные.пункт4т1 = "без учета НДС (не облагается в связи с упрощенной системой налогообложения).";
        }

        Данные.Флаг = this.пВыбор == 1 ? 0 : this.ВыборШтампаПо( НаименФирм, "наименование" );
        var мОшибкиДоговоров = this.ПроверкаДоговора( Данные );

        if( мОшибкиДоговоров.length > 0 ) {
            Сообщить( "Есть незаполненые поля" );
            this.Вывод_протокола_ошибок( мОшибкиДоговоров )
        }

        this.ДобавитьВИсточник( "Отчет", Данные );
        this.Построить();
    }

    Конец_таблицы() {
        if( this.построительКомплектов != undefined )
            this.построительКомплектов.КонецКомплекта();
    }
}

отчеты.Add( "ДоговорООДоговорВнедрения", "Договор(ОО) - Договор @ внедрения" );
class ДоговорООДоговорВнедрения extends ДоговорООДоговорНаСмсСервис {
    constructor() {
        super();
        this.ФайлШаблон = "SHABLON\\DOCREC\\Договор внедрения.rptdesign";
    }
}

отчеты.Add( "ДоговорООДоговорАренды", "Договор(ОО) - Договор аренды @ Договор аренды" );
class ДоговорООДоговорАренды extends ДоговорООДоговорОбщий {
    constructor() {
        super();
        this.ФайлОтчета  = "SHABLON\\DOCREC\\Договор аренды.rptdesign";
        this.ТихийРежим = 1;        //Надо, чтобы запустился комплект
    }

    Строка() {
        // Вставка Birt
        this.УстановитьШаблон( this.ФайлОтчета );
        this.Построитель.УстановитьСвойство("Формат", "pdf");

        this.ОпределитьИсточникДанных( "Отчет", `НомерТема,A,Стек_Тип,A,Территория,A,Дата,A,НаименФирм,A,ФИОФ,A,ФИОДирФ,A,ОснованиеФ,A,НаименованиеОрг,A,ОснованиеОрг,A
                      , СуммаРуб,A,ИННКППФ,A,АдресФ,A,РсчетФ,A,БанкФ,A,АдресОрг,A,РСчетОрг,A,БанкОрг,A
                      , ДолжностьФ,A,ДолжностьОрг,A,ФИООрг,A,ФИОДирОрг,A,Флаг,S,СтоимЧаса,A,ДатаПодписания,A,Год,S
                      , АдресПочтаФ,A,ТелФаксФ,A,ЭлПочтаФ,A,АдресСайтФ,A,ИННКППОрг,A,АдресПочтаОрг,A,ТелФаксОрг,A,ЭлПочтаОрг,A
            ,Свидетельство,A,ДатНачДог,A,ДатКнцДог,A,УчетНДС,A,ПорядокСдачи,A,пункт1т2,A,пункт3т1,A,флагФирма,S` );

        var позОрг = this.Запись.Плательщик;
        var НашаОрг = ЛицоП();
        var позФирм = НомерЗаписи( НашаОрг );
        var позДог = НомерЗаписи( this.Запись );

        var НомерТема = this.ОпределитьНомерДокумента( позДог );
        var Стек_Тип = ( "\"" + this.ОпределитьТипКомплекса( this.Запись.Тема ) + "\"" ).toUpperCase();
        var Территория = this.ПолучитьЗначениеПарОрг( позОрг, "НАСПУНКТ" );

        var Год = ( new Date() ).getFullYear();
        var мПарДог = this.ПолучитьПараметрыДоговораДО( позДог, (this.Запись.Окончание != "" ? this.Запись.Окончание : this.Запись['Начало договора']) );
        var СтоимЧаса = мПарДог[ "АБФ_СТДО" ] != undefined ? мПарДог[ "АБФ_СТДО" ] : "";

        // информация о плательщике (Орг)
        var НаименованиеОрг = this.Запись['Плательщик>Наименование'];
        var инфоРукОрг = this.ПолучитьИнфоЧастноеЛицо( позОрг, 1 );
        var ФИООрг = инфоРукОрг.стрДог != undefined ? инфоРукОрг.стрДог : "";
        var ОснованиеОрг = инфоРукОрг.основание ? инфоРукОрг.основание : "Устава";
        ОснованиеОрг = ОснованиеОрг != "" ? ОснованиеОрг : "Устава";
        var ДолжностьОрг = инфоРукОрг.Должность != undefined ? инфоРукОрг.Должность : "";

        var окЧеловек = new кЧеловек( инфоРукОрг.ФИО != undefined ? инфоРукОрг.ФИО : "" );
        var ФИОДирОрг = окЧеловек.ИОФ();

        var ИННКППОрг = this.Запись['Плательщик>ИНН'] + "/" + ( this.Запись['Плательщик>КПП'] != "" ? this.Запись['Плательщик>КПП'] : "" );
        var АдресПочтаОрг = this.Запись['Плательщик>ФактАдрес'];
        АдресПочтаОрг = АдресПочтаОрг == "" ? this.Запись['Плательщик>Адрес'] : АдресПочтаОрг;
        var АдресОрг = this.Запись['Плательщик>Адрес'];

        var инфоБанкОрг = this.РасчСчетИБанк( this.Запись.Плательщик );
        var РСчетОрг = инфоБанкОрг.РСчет != undefined ? инфоБанкОрг.РСчет : "";
        var БанкОрг = инфоБанкОрг.Банк != undefined ? инфоБанкОрг.Банк : "" + " БИК " +
                        инфоБанкОрг.БИК != undefined ? инфоБанкОрг.БИК : "" + " К/С " + инфоБанкОрг.КоррСчет != undefined ? инфоБанкОрг.КоррСчет : "";
        var ТелФаксОрг = this.Запись['Плательщик>Телефон'] != "" ? "тел/факс " + this.Запись['Плательщик>Телефон'] : "";
        var ЭлПочтаОрг = this.Запись['Плательщик>email'];
        ЭлПочтаОрг = ЭлПочтаОрг != "" ? "эл.почта " + ЭлПочтаОрг.replaceAll( ";", "; " ) : "";

        // информация о нашей фирме (Фирм)
        var НаименФирм = НашаОрг.Наименование;
        var инфоРукФ = this.ПолучитьИнфоЧастноеЛицо( позФирм, 1 );
        var ФИОФ = инфоРукФ.стрДог != undefined ? инфоРукФ.стрДог : "";
        var ОснованиеФ = инфоРукФ.основание != undefined ? инфоРукФ.основание : "Устава";
        ОснованиеФ = ОснованиеФ != "" ? ОснованиеФ : "Устава";
        var ДолжностьФ = инфоРукФ.Должность != undefined ? инфоРукФ.Должность : "Директор";

        окЧеловек = new кЧеловек( инфоРукФ.ФИО != undefined ? инфоРукФ.ФИО : "" );
        var ФИОДирФ = окЧеловек.ИОФ();

        var ИННКППФ = НашаОрг.ИНН ? НашаОрг.ИНН : "" + "/" + НашаОрг.КПП != undefined ? НашаОрг.КПП : "";
        var АдресПочтаФ = НашаОрг.ФактАдрес != undefined ? НашаОрг.ФактАдрес : "";
        АдресПочтаФ = АдресПочтаФ == "" ? (НашаОрг.Адрес != undefined ? НашаОрг.Адрес : "") : АдресПочтаФ;
        var АдресФ = НашаОрг.Адрес != undefined ? НашаОрг.Адрес : "";

        var инфоБанкФ = this.РасчСчетИБанк( НомерЗаписи( НашаОрг ) );
        var РсчетФ = инфоБанкФ.РСчет != undefined ? инфоБанкФ.РСчет : "";
        var БанкФ = инфоБанкФ.Банк != undefined ? инфоБанкФ.Банк : "" + " БИК " + инфоБанкФ.БИК != undefined ? инфоБанкФ.БИК : "" +
                    " К/С " + инфоБанкФ.КоррСчет != undefined ? инфоБанкФ.КоррСчет : "";
        var ТелФаксФ = НашаОрг.Телефон != undefined ? НашаОрг.Телефон : "";
        ТелФаксФ = ТелФаксФ != "" ? "тел/факс " + ТелФаксФ : ТелФаксФ;
        // почту как и сайт прописываем в коде отчета по просьбе менеджеров
        //ЭлПочтаФ    = Извлечь( НашаОрг.email, "" );
        //ЭлПочтаФ    = ЭлПочтаФ != "" ? "эл.почта " + ЗаменитьВсе( ЭлПочтаФ, ";", "; " ) : ЭлПочтаФ;
        var ЭлПочтаФ = "эл.почта soft@stack-it.ru";
        var АдресСайтФ = "www.stack-it.ru";
        var пСвидетельство = this.ВыборСвидетельство( НашаОрг.ИНН, Стек_Тип );

        var Сумма = this.Запись.Сумма;
        var суммаСтр = (Number( Сумма )).toLocaleString();
        суммаСтр = суммаСтр.split(".")[0] + " (" + Прописью( Number( Сумма ) ) + ") рублей";

        var Данные = {};
        Данные.СтоимЧаса = СтоимЧаса + " (" + Прописью( Number( СтоимЧаса ) ) + ") рублей";
        Данные.ДатаПодписания = this.Запись['Окончание'].format( "dd MMMMM yyyy г." );
        Данные.Год = Год;
        Данные.ДатНачДог = this.Запись['Начало договора'].format( "dd MMMMM yyyy г." );
        Данные.ДатКнцДог = this.Запись['Окончание'].format( "dd MMMMM yyyy г." );
        Данные.НомерТема = НомерТема;
        Данные.Стек_Тип = Стек_Тип;
        Данные.Территория = Территория ? "(" + Территория + ")" : "";
        Данные.Свидетельство = пСвидетельство;
        Данные.Дата = this.Запись['Дата подписания'].format( "dd MMMMM yyyy г." );
        Данные.НаименФирм = НаименФирм;
        Данные.НаименованиеОрг = НаименованиеОрг;
        Данные.ИННКППФ = ИННКППФ;
        Данные.АдресФ = АдресФ;
        Данные.РсчетФ = РсчетФ;
        Данные.БанкФ = БанкФ;
        Данные.АдресПочтаФ = АдресПочтаФ;
        Данные.ТелФаксФ = ТелФаксФ;
        Данные.ЭлПочтаФ = ЭлПочтаФ;
        Данные.АдресСайтФ = АдресСайтФ;
        Данные.ФИОФ = ФИОФ;
        Данные.ФИОДирФ = ФИОДирФ;
        Данные.ОснованиеФ = ОснованиеФ;
        Данные.СуммаРуб = суммаСтр;

        Данные.ИННКППОрг = ИННКППОрг;
        Данные.АдресОрг = АдресОрг;
        Данные.РСчетОрг = РСчетОрг;
        Данные.БанкОрг = БанкОрг;
        Данные.АдресПочтаОрг = АдресПочтаОрг;
        Данные.ТелФаксОрг = ТелФаксОрг;
        Данные.ЭлПочтаОрг = ЭлПочтаОрг;
        Данные.ФИООрг = ФИООрг;
        Данные.ФИОДирОрг = ФИОДирОрг;
        Данные.ОснованиеОрг = ОснованиеОрг;

        Данные.ДолжностьОрг = ДолжностьОрг;
        Данные.ДолжностьФ = ДолжностьФ;
        // Печатаем разные пункты для Стек-ИТ и Стек-Спорт, Стек.
        if( НашаОрг.Название == "ООО " + "\"" + "Стек-ИТ" + "\"" ) {
            // Стек-ИТ
            Данные.флагФирма = 1;
            Данные.пункт1т2 = `Арендодатель имеет право коммерческого использования ПО на основании договора №1/ПО от 18 марта 2014 года на совместную разработку программного обеспечения. Правообладателем ПО на основании свидетельства об официальной регистрации программ для ЭВМ  № 2002612046 от 05 декабря 2012 года является ООО Фирма \"Стек-спорт\" г. Ярославль.`;
            Данные.пункт3т1 = "в том числе  НДС 18%.";
        }
        else {
            // Стек или Стек-спорт
            Данные.флагФирма = 2;
            if( НашаОрг.Название == "ООО Компания Стек" ) {
                Данные.пункт1т2 = "Арендодатель  является правообладателем ПО на основании свидетельства об официальной регистрации программ для ЭВМ № 2010616807 от 13.10.2010 г. года, разработчик - ООО Компания \"Стек\" г. Ярославль.";
            }
            else if( НашаОрг.Название == "ООО Фирма " + "\"" + "Стек-спорт" + "\"" ) {
                Данные.пункт1т2 = "Арендодатель  является правообладателем ПО на основании свидетельства об официальной регистрации программ для ЭВМ № 2002612046 от 05.12.2002 г. года, разработчик - ООО Фирма \"Стек-спорт\" г. Ярославль.";
            }
            Данные.пункт3т1 = "НДС не облагается на основании п.2 гл.26.2 ст.346.11 НК РФ.";
        }

        Данные.Флаг = this.пВыбор == 1 ? 0 : this.ВыборШтампаПо( НаименФирм, "наименование" );
        var мОшибкиДоговоров = this.ПроверкаДоговора( Данные );
        if( мОшибкиДоговоров.length > 0 ) {
            Сообщить( "Есть незаполненые поля" );
            this.Вывод_протокола_ошибок( мОшибкиДоговоров );
        }

        this.Дополнительный_раздел();

        this.ДобавитьВИсточник( "Отчет", Данные );
        this.Построить();
    }

    Дополнительный_раздел() {
    }

    Конец_таблицы() {
        if( this.построительКомплектов != undefined )
            this.построительКомплектов.КонецКомплекта();
    }
}

отчеты.Add( "ДоговорООДоговорАрендыПриложение1Спецификация", "Договор(ОО) - Договор аренды @ Приложение №1 - Спецификация" );
class ДоговорООДоговорАрендыПриложение1Спецификация extends  ДоговорООЛицензионныйДоговорСпецификация {
    constructor() {
        super();
        this.ФайлОтчета = "SHABLON\\DOCREC\\Спецификация(Приложение №1).rptdesign";
    }
}

отчеты.Add( "ДоговорООДоговорАрендыПриложение1СпецификацияПодписанная", "Договор(ОО) - Договор аренды @ Приложение №1 - Спецификация (подписанная)" );
class ДоговорООДоговорАрендыПриложение1СпецификацияПодписанная extends ДоговорООДоговорАрендыПриложение1Спецификация {
    constructor() {
        super();
    }

    Дополнительный_раздел() {
        this.Данные.Флаг = this.ВыборШтампаПо( this.НашаОрг.Наименование, "наименование" );
        switch( this.Данные.Флаг ) {
            case 1:
                КопироватьФайл( отчеты.КаталогОтчета( "ДоговорООДоговорАрендыПриложение1СпецификацияПодписанная" ) +
                                "SHABLON\\ПечатьСтекСпорт.jpg", "CLIENT:Report_Birt\\" + "ПечатьСтек.jpg" );
                break;
            case 2:
                КопироватьФайл( отчеты.КаталогОтчета( "ДоговорООДоговорАрендыПриложение1СпецификацияПодписанная" ) +
                                "SHABLON\\ПечатьСтек.jpg", "CLIENT:Report_Birt\\" + "ПечатьСтек.jpg" );
                break;
            case 3:
                КопироватьФайл( отчеты.КаталогОтчета( "ДоговорООДоговорАрендыПриложение1СпецификацияПодписанная" ) +
                                "SHABLON\\ПечатьСтекИт.jpg", "CLIENT:Report_Birt\\" + "ПечатьСтек.jpg" );
                break;
        }
    }
}

отчеты.Add( "ДоговорООДоговорАрендыПриложение2ЛицензионноеСоглашение", "Договор(ОО) - Договор аренды @ Приложение №2 - Лицензионное соглашение" );
class ДоговорООДоговорАрендыПриложение2ЛицензионноеСоглашение extends ДоговорООДоговорОбщий {
    constructor() {
        super();
        this.ФайлОтчета = "SHABLON\\DOCREC\\Спецификация(Приложение №2).rptdesign";
        this.ТихийРежим = 1;        //Надо, чтобы запустился комплект
    }

    Строка() {
        // Вставка Birt
        this.УстановитьШаблон( this.ФайлОтчета );
        this.Построитель.УстановитьСвойство("Формат", "pdf");

        this.ОпределитьИсточникДанных( "Отчет", `ДолжностьФ,A,ДолжностьОрг,A,ФИОДирФ,A,ФИОДирОрг,A,АдресФ,A,АдресОрг,A,ИННКППОрг,A,
                                                ИННКППФ,A,НомерТема,A,Стек_Тип,A,Дата,A,РасшЗадачи,A,НаименФирм,A,НаименованиеОрг,A,
                                                ФИОФ,A,ФИООрг,A,ОснованиеФ,A,ОснованиеОрг,A,ЭлПочтаФ,A,АдресСайтФ,A,Флаг,S` );

        var позДог = НомерЗаписи( this.Запись );
        var позОрг = this.Запись.Плательщик;
        var НашаОрг = ЛицоП();
        var позФирм = НомерЗаписи( НашаОрг );

        var пЗадачиСтр = this.ПолучитьЗначениеПарОрг( позОрг, "ЗАДАЧИ" );
        var конфиг = this.РасшифровкаПараметраЗадачи( пЗадачиСтр );
        var пЗадачиРасшСтр = конфиг.slice( 0, -1 );

        var НомерТема = this.ОпределитьНомерДокумента( позДог );
        var Стек_Тип = ( "\"" + this.ОпределитьТипКомплекса( this.Запись.Тема ) + "\"" ).toUpperCase();
        // инфо о фирмах
        var НаименФирм = НашаОрг.Наименование;
        var инфоРукФ = this.ПолучитьИнфоЧастноеЛицо( позФирм, 1 );
        var ОснованиеФ = инфоРукФ.основание != undefined ? инфоРукФ.основание : "Устава";
        ОснованиеФ = ОснованиеФ != "" ? ОснованиеФ : "Устава";
        инфоРукФ = this.ПолучитьИнфоЧастноеЛицо( позФирм, 1 );
        var ФИОФ = инфоРукФ.стрДог != undefined ? инфоРукФ.стрДог : "";
        var ИННКППФ = НашаОрг.ИНН != undefined ? НашаОрг.ИНН : "" + "/" + НашаОрг.КПП != undefined ? НашаОрг.КПП : "";
        var ИННКППОрг = this.Запись['Плательщик>ИНН'] + "/" + ( this.Запись['Плательщик>КПП'] != "" ? this.Запись['Плательщик>КПП'] : "" );
        var АдресФ = НашаОрг.Адрес != undefined ? НашаОрг.Адрес : "";
        var АдресОрг = this.Запись['Плательщик>Адрес'];
        var ЭлПочтаФ = "soft@stack-it.ru";
        var АдресСайтФ = "www.stack-it.ru";

        var окЧеловек = new кЧеловек( инфоРукФ.ФИО != undefined ? инфоРукФ.ФИО : "" );
        var ФИОДирФ = окЧеловек.ИОФ();

        var ДолжностьФ = инфоРукФ.Должность != undefined ? инфоРукФ.Должность : "Директор";
        var инфоРукОрг = this.ПолучитьИнфоЧастноеЛицо( позОрг, 1 );

        var окЧеловек = new кЧеловек( инфоРукОрг.ФИО != undefined ? инфоРукОрг.ФИО : "" );
        var ФИОДирОрг = окЧеловек.ИОФ();

        var ДолжностьОрг = инфоРукОрг.Должность != undefined ? инфоРукОрг.Должность : "";
        var НаименованиеОрг = this.Запись['Плательщик>Наименование'];
        var ОснованиеОрг = инфоРукОрг.основание != undefined ? инфоРукОрг.основание : "Устава";
        ОснованиеОрг = ОснованиеОрг != "" ? ОснованиеОрг : "Устава";
        var ФИООрг = инфоРукОрг.стрДог != undefined ? инфоРукОрг.стрДог : "";

        var Данные = {};
        Данные.НаименФирм = НаименФирм;
        Данные.НаименованиеОрг = НаименованиеОрг;
        Данные.ФИОФ = ФИОФ;
        Данные.ФИООрг = ФИООрг;
        Данные.ОснованиеФ = ОснованиеФ;
        Данные.ОснованиеОрг = ОснованиеОрг;
        Данные.ИННКППФ = ИННКППФ;
        Данные.ИННКППОрг = ИННКППОрг;
        Данные.АдресФ = АдресФ;
        Данные.АдресОрг = АдресОрг;
        Данные.ФИОДирФ = ФИОДирФ;
        Данные.ФИОДирОрг = ФИОДирОрг;
        Данные.ДолжностьОрг = ДолжностьОрг;
        Данные.ДолжностьФ = ДолжностьФ;
        Данные.АдресСайтФ = АдресСайтФ;
        Данные.ЭлПочтаФ = ЭлПочтаФ;
        Данные.РасшЗадачи = пЗадачиРасшСтр;
        Данные.НомерТема = НомерТема;
        Данные.Стек_Тип = Стек_Тип;
        Данные.Дата = this.Запись['Дата подписания'].format( "dd MMMMM yyyy г." );

        Данные.Флаг = this.пВыбор == 1 ? 0 : this.ВыборШтампаПо( НаименФирм, "наименование" );

        this.Дополнительный_раздел();

        this.ДобавитьВИсточник( "Отчет", Данные );
        this.Построить();
    }

    Дополнительный_раздел() {
    }

    Конец_таблицы() {
        if( this.построительКомплектов != undefined )
            this.построительКомплектов.КонецКомплекта();
    }
}

отчеты.Add( "ДоговорООДополнительноеСоглашениеСоглашениеОПереносеСроковВыполненияРабот", "Договор(ОО) - Дополнительное соглашение @ Соглашение о переносе сроков выполнения работ" );
class ДоговорООДополнительноеСоглашениеСоглашениеОПереносеСроковВыполненияРабот extends ДоговорООЛицензионныйДоговорЛицензионныйДоговор {
    constructor() {
        super();
        this.ФайлОтчета = "SHABLON\\DOCREC\\Соглашение о переносе сроков.rptdesign";
    }

    Дополнительный_раздел() {
    }
}

отчеты.Add( "ДоговорООДополнительноеСоглашениеСоглашениеОРасторженииДоговора", "Договор(ОО) - Дополнительное соглашение @ Соглашение о расторжении договора" );
class ДоговорООДополнительноеСоглашениеСоглашениеОРасторженииДоговора extends ДоговорООЛицензионныйДоговорЛицензионныйДоговор {
    constructor() {
        super();
        this.ФайлОтчета = "SHABLON\\DOCREC\\Соглашение о расторжении.rptdesign";
    }

    Дополнительный_раздел() {
    }
}