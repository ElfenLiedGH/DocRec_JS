'use strict';

отчеты.Add( "ОтчетДляСотрудников", "Отчет для сотрудников" );
class ОтчетДляСотрудников
{
    constructor()
    {
        this.ЕстьПрава = 1;
        this.КаталогОтчетов = отчеты.КаталогОтчета( "ОтчетДляСотрудников" );
    }
	
	ИмяОтчета()
	{
	    return "Отчет для сотрудников";
	}

    ДобавляемПустуюСтроку( _вчерашнийДень, _вариантОтчета, _об )
    {
        var Данные = {};
        var ЗавтрашнийДень = new Date( (new Date(_вчерашнийДень)).setDate(_вчерашнийДень.getDate() + 1) );
        if( ЗавтрашнийДень.getDay() != 6 && ЗавтрашнийДень.getDay() != 0)
        {
            Данные["Дата"]         = ЗавтрашнийДень;
            Данные["ЧасовРаботы"]  = 0;
            Данные["ЧасовКОплате"] = 0;
            if( _вариантОтчета == 2 )
                Данные["Организация"] = "";

            _об.Добавить("Данные", Данные);
        }
        return ЗавтрашнийДень;
    }
   
    Формирователь_отчета()
    {
        var П = Пользователь();
        var Д = СоздатьДиалог("Отчет для сотрудников");
        Д["@Сотрудник"] = П.ФИО;
        // todo не реализована, не знаю где будет.
        //if( !ПроверкаПравСотрудника( НомерЗаписи( П ), "ОтчетПоСотрудникам" ) )
        //{
        //     ЗапретитьЭлемент( "Диалог - Отчет для сотрудников", "@Сотрудник" );
        //    this.ЕстьПрава = 0;
        //}
        Д.ДатНач = РабМес();
        Д.ДатКнц = Д.ДатНач.ПоследнееЧисло();

        if (!Д.Выполнить())
            throw "ReportBreak: Построение отчета прервано";

        var Об = ПостроительОтчета("Open Office");

        var поз_исп = this.ЕстьПрава ? ЗначениеВыпадающегоСписка("Отчет для сотрудников", "@Сотрудник") : НомерЗаписи(П);
        var ВариантОтчета = Д["@ВариантОтчета"] == "в разрезе дней" ? 1 : 2;
        var зДанных;

        switch (ВариантОтчета) {
            case 1:
            {
                Об.Имя(this.КаталогОтчетов + "SHABLON\\DO\\Отчет_для_сотрудников_д.ods");
                Об.Источник("Данные", "Дата,A,ЧасовРаботы,N,ЧасовКОплате,N");
                зДанных = Query(`SELECT sotr.[ФИО] [Сотрудник],
                                        hour.[Дата ввода],
                                        sum(60*datepart(hour, hour.[Время работы]) + datepart(minute, hour.[Время работы])) [ВремяРаботы],
                                        sum(60*datepart(hour, hour.[Время к оплате]) + datepart(minute, hour.[Время к оплате])) [ВремяКОплате]
                                   FROM ~ДО часы~ hour
                             INNER JOIN ~ДО задания~ work ON hour.[Часы-Задание]=work.[row_id]
                             INNER JOIN ~Сотрудники~ sotr ON sotr.[row_id]=work.[Задание-Исполнитель]
                                  WHERE hour.[Дата ввода] between :1 and :2
                                      and sotr.[row_id]=:3
                               GROUP BY sotr.[ФИО],hour.[Дата ввода]
                               ORDER BY sotr.[ФИО],hour.[Дата ввода]
                                 `, 10, "DatN,D,DatK,D,Sotr,S");
            }
                break;
            case 2:
            {
                Об.Имя(this.КаталогОтчетов + "SHABLON\\DO\\Отчет_для_сотрудников_о.ods");
                Об.Источник("Данные", "Дата,A,Организация,A,ЧасовРаботы,N,ЧасовКОплате,N");
                Об.Источник("Организации", "Организация,A,ЧасовРаботы,N,ЧасовКОплате,N");
                зДанных = Query(`SELECT sotr.[ФИО] [Сотрудник],
                                        hour.[Дата ввода],
                                        org.[Название],
                                        sum(60*datepart(hour, hour.[Время работы]) + datepart(minute, hour.[Время работы])) [ВремяРаботы],
                                        sum(60*datepart(hour, hour.[Время к оплате]) + datepart(minute, hour.[Время к оплате])) [ВремяКОплате]
                                   FROM ~ДО часы~ hour
                             INNER JOIN ~ДО задания~ work ON hour.[Часы-Задание]=work.[row_id]
                             INNER JOIN ~ДО карточки~ card ON work.[Задание-Карточка]=card.[row_id]
                             INNER JOIN ~Договор~ dog ON card.[Карточка-Договор]=dog.[row_id]
                             INNER JOIN ~Организации~ org ON dog.[Грузополучатель]=org.[row_id]
                             INNER JOIN ~Сотрудники~ sotr ON sotr.[row_id]=work.[Задание-Исполнитель]
                                  WHERE hour.[Дата ввода] between :1 and :2
                                      and sotr.[row_id]=:3
                               GROUP BY hour.[Дата ввода],org.[row_id],org.[Название],sotr.[ФИО]
                           ORDER BY hour.[Дата ввода],org.[Название]
                                `, 10, "DatN,D,DatK,D,Sotr,S");
            }
                break;
            default:
                throw "ReportBreak: Построение отчета прервано";
        }

        var ВчерашнийДень = new Date((new Date(Д.ДатНач)).setDate(Д.ДатНач.getDate() - 1));
        var мОрг = {};
        var Данные = {};
        var Организации = {};

        зДанных.УстановитьПараметры(Д.ДатНач, Д.ДатКнц, поз_исп);

        var Счетчик = 0;
        while (зДанных.Следующий()) {
            ВывестиСтатус("Обработано данных - " + Счетчик++);
            while (зДанных["Дата ввода"] > new Date((new Date(ВчерашнийДень)).setDate(ВчерашнийДень.getDate() + 1)))
                ВчерашнийДень = this.ДобавляемПустуюСтроку(ВчерашнийДень, ВариантОтчета, Об);

            Данные["Дата"] = зДанных["Дата ввода"];
            Данные["ЧасовРаботы"] = (зДанных.ВремяРаботы / 60).toFixed(2);
            Данные["ЧасовКОплате"] = (зДанных.ВремяКОплате / 60).toFixed(2);
            if (ВариантОтчета == 2) {
                var зНазвание = зДанных.Название;
                Данные["Организация"] = зНазвание;
                мОрг[зНазвание] = {};
                мОрг[зНазвание].Отработано += (зДанных.ВремяРаботы / 60).toFixed(2);
                мОрг[зНазвание].КОплате += (зДанных.ВремяКОплате / 60).toFixed(2);
            }

            Об.Добавить("Данные", Данные);
            ВчерашнийДень = зДанных["Дата ввода"];
        }

        while ((new Date((new Date(ВчерашнийДень)).setDate(ВчерашнийДень.getDate() + 1))) <= Д.ДатКнц)
            ВчерашнийДень = this.ДобавляемПустуюСтроку(ВчерашнийДень, ВариантОтчета, Об);

        for (var инд_о in мОрг) {
            Организации["Организация"] = инд_о;
            Организации["ЧасовРаботы"] = мОрг[инд_о].Отработано;
            Организации["ЧасовКОплате"] = мОрг[инд_о].КОплате;

            Об.Добавить("Организации", Организации);
        }

        var Форма = {};
        Форма["Исполнитель"] = Д["@Сотрудник"];
        Форма["Период"] = Д.ДатНач.format("rusDateDashed") + " - " + Д.ДатКнц.format("rusDateDashed");

        Об.Данные("Форма", Форма);
        Об.Отчет();
    }
}

отчеты.Add( "ОтработаноПоОрганизациям", "Отработано по организациям" );
class ОтработаноПоОрганизациям
{
	constructor()
    {
        this.ФайлОтчета = отчеты.КаталогОтчета( "ОтработаноПоОрганизациям" )+"SHABLON\\DO\\Отработано_по_организациям.ods";
    }
	
	ИмяОтчета()
	{
	    return "Отработано по организациям";
	}

	Формирователь_отчета()
	{
		var Счетчик = 0;
		var Об = ПостроительОтчета("Open Office");
		Об.Имя( this.ФайлОтчета );    
		Об.Источник("Данные", "Организация,A,НомерДог,A,ТемаДог,A,АбонЧасы,N,АбонСумма,N,ЧасовРаботы,N,ЧасовКОплате,N,ЧасовСписание,N,ЧасовПоЗаявкам,N,ЗатратыФакт,N,ДопЧасы,N,ДопСумма,N,ИтогоКОплате,N,Минус,N,МинусАб,N,МинусДоп,N,Плюс,N,ПлюсАб,N,ПлюсДоп,N");

		var д = СоздатьДиалог("Отчет по организациям");
		д.ДатНач = РабМес();
		д.ДатКнц = д.ДатНач.ПоследнееЧисло();
		д.Тема = "СКА";
		if( !д.Выполнить() )
			throw "ReportBreak: Построение отчета прервано";
	   
		var Данные = {};

		var зДанных = Query(` declare @datn datetime;
								  declare @datk datetime;
								  set @datn = :1;
								  set @datk = :2;

							SELECT dog.[ROW_ID] [ПозДог],
									org.[email] [Email], 
									org.[Название] [Организация],
									dog.[Номер]    [НомерДоговора], 
									dog.[Тема]     [ТемаДоговора],
									dog.[Дата подписания] [ДатаПодписания],
									dog.[Сумма]    [СуммаДоговора],
									sum(60*datepart(hour, hour.[Время работы]) + datepart(minute, hour.[Время работы])) [ВремяРаботы],
									sum(60*datepart(hour, hour.[Время к оплате]) + datepart(minute, hour.[Время к оплате])) [ВремяКОплате],
									sum(card.[ЗатратыФакт]) [ЗатратыФакт],
									ISNULL(par1.[Значение],0) [АбонЧасы],
									ISNULL(par2.[Значение],0) [СтоимДопЧаса],
									org.row_id [НомерОрг]
							   FROM ~ДО часы~ hour
						 INNER JOIN ~ДО задания~ work ON hour.[Часы-Задание]=work.[row_id]
						 INNER JOIN ~ДО карточки~ card ON work.[Задание-Карточка]=card.[row_id]
						 INNER JOIN ~Договор~ dog ON card.[Карточка-Договор]=dog.[row_id]
						 INNER JOIN ~Организации~ org  ON dog.[Грузополучатель]=org.[row_id]
						 LEFT JOIN ~Свойства~ par1 ON par1.[Параметры-Договор]=dog.[row_id] 
																   AND par1.[Виды-Параметры]=(SELECT TOP 1 [row_id] FROM ~Виды параметров~ WHERE [Название]='АБОН_ЧАСЫ' )
																   AND par1.[ДатКнц] >= @datn and par1.[ДатНач] <= @datk
						 LEFT JOIN ~Свойства~ par2 ON par2.[Параметры-Договор]=dog.[row_id] 
																   AND par2.[Виды-Параметры]=(SELECT TOP 1 [row_id] FROM ~Виды параметров~ WHERE [Название]='АБФ_СТДО' )
																   AND par2.[ДатКнц] >= @datn and par2.[ДатНач] <= @datk
							  WHERE hour.[Дата ввода] between :3 and :4
							  AND (dog.[Тема] LIKE :5 or dog.[Тема] LIKE :6 or dog.[Тема] LIKE :7 or dog.[Тема] LIKE :8 or dog.[Тема] LIKE :9 ) /*and (dog.[Окончание] > getdate() or dog.[Окончание] is null)*/
						   GROUP BY dog.[ROW_ID], org.[email], org.[Название], org.row_id, dog.[Номер], dog.[Тема], dog.[Дата подписания], dog.[Сумма], par1.[Значение],par2.[Значение]
						   ORDER BY org.[Название], dog.[Номер], dog.[Тема]`
						 ,500,"d1,D,d2,D,DatN,D,DatK,D,Tema,A,Tema2,A,Tema3,A,Tema4,A,Tema5,A");

		var зАктЗаяв = Query( `;WITH tab AS (
								   SELECT card.[Номер] [Номер карточки] 
								   FROM ~ДО задания~ work
										INNER JOIN ~ДО карточки~ card on work.[Задание-Карточка] = card.[ROW_ID]
										INNER JOIN ~Договор~ dog on card.[Карточка-Договор] = dog.[ROW_ID]
								   WHERE work.[Статус Завершения] = 0 AND work.ТипИсполнителя = 0 AND dog.[Тема] = :1
										AND dog.[ROW_ID] = :2
								   GROUP BY dog.[Номер], card.[Номер])
								 SELECT COUNT(*) [Актив] FROM tab`, 500, "Tema,A,Dogovor,S" );
								 
		var зНераспЗаяв = Query( `;WITH tab AS(
									SELECT card.ROW_ID
									FROM ~ДО карточки~ card
									WHERE [Карточка-Договор]=:1 AND Шаблон = 0
										AND( card.ROW_ID IN (
											  SELECT [Задание-Карточка] 
											  FROM ~ДО задания~ dz
											  JOIN (
												 SELECT [Задание-Карточка] as Zk,max( [Свой номер] ) as [Свой номер]
												 FROM ~ДО задания~ dz2
												 WHERE [Задание-Карточка]= card.ROW_ID
												 GROUP BY [Задание-Карточка]
											) tbl ON tbl.Zk = dz.[Задание-Карточка] AND dz.[Свой номер] = tbl.[Свой номер]  
											  AND dz.[ТипИсполнителя] = 0 AND dz.[Задание-Исполнитель] = :2)
										OR NOT EXISTS( SELECT [Задание-Карточка] FROM ~ДО задания~ WHERE [Задание-Карточка] = card.ROW_ID))
								  )
								  SELECT COUNT(*) [Нерасп] FROM tab`, 1, "dog,S,manag,S" );
								  
		var зМенеджеры = Query( "SELECT TOP 1 ROW_ID FROM ~Сотрудники~ WHERE ФИО LIKE :1", 1, "name,A" );
		зМенеджеры.УстановитьПараметры( "группа Менеджеры" );
		if( !зМенеджеры.Следующий() )
			зМенеджеры.ROW_ID = -5;

		switch( д.Тема )
		{
			case "СКФ": зДанных.УстановитьПараметры( д.ДатНач, д.ДатКнц, д.ДатНач, д.ДатКнц, "%"+д.Тема+"%", "%СИФ%" , "%БЛАБЛАБЛА%", "%БЛАБЛАБЛА%", "%БЛАБЛАБЛА%" ); break;
			case "СКА": зДанных.УстановитьПараметры( д.ДатНач, д.ДатКнц, д.ДатНач, д.ДатКнц, "%"+д.Тема+"%", "%СУА%", "%ПК%", "%ПЛ%", "%ПА%" ); break;
			default: зДанных.УстановитьПараметры( д.ДатНач, д.ДатКнц, д.ДатНач, д.ДатКнц, "%"+д.Тема+"%", "%БЛАБЛАБЛА%", "%БЛАБЛАБЛА%", "%БЛАБЛАБЛА%", "%БЛАБЛАБЛА%" );
		}

		var зПисьма = Query(`  SELECT  TOP 1 mail.[Письмо-Договор] [ID],
										mail.[Дата]           [Дата],
										mail.[Автор]          [Автор]
								FROM ~ДО письма~ mail 
								WHERE mail.[Письмо-Договор] = :1
								ORDER BY mail.[ДАТА] desc
							`,500,"MailDog,S");

		if(д.типОтчета=="Вывод в ОО")
		{
			while( зДанных.Следующий() )
			{
            ВывестиСтатус( "Обработано договоров " + Счетчик++ );
            var Абон = Number( зДанных.АбонЧасы );

            var оДог = new кДоговор( зДанных.ПозДог );
            //var мПарамДог = ПолучитьПараметрыДоговораДО( зДанных.ПозДог, д.ДатКнц );
            var мЧасы = оДог.ОбъемПоДоговору( д.ДатНач, д.ДатКнц );

            Данные[ "Организация" ] = зДанных.Организация;
            Данные[ "НомерДог" ] = зДанных.НомерДоговора;
            Данные[ "ТемаДог" ] = зДанных.ТемаДоговора;
            Данные[ "АбонЧасы" ] = Абон;
            Данные[ "АбонСумма" ] = зДанных.СуммаДоговора.toFixed( 2 );
            Данные[ "ЧасовРаботы" ] = (зДанных.ВремяРаботы / 60).toFixed( 2 );
            Данные[ "Минус" ] = -1 * Number( мЧасы[ 6 ] != undefined ? мЧасы[ 6 ] : 0 );
            Данные[ "МинусАб" ] = -1 * Number( мЧасы[ 7 ] != undefined ? мЧасы[ 7 ] : 0 );
            Данные[ "МинусДоп" ] = -1 * Number( мЧасы[ 8 ] != undefined ? мЧасы[ 8 ] : 0 );
            Данные[ "Плюс" ] = мЧасы[ 9 ] != undefined ? мЧасы[ 9 ] : 0;
            Данные[ "ПлюсАб" ] = мЧасы[ 10 ] != undefined ? мЧасы[ 10 ] : 0;
            Данные[ "ПлюсДоп" ] = мЧасы[ 11 ] != undefined ? мЧасы[ 11 ] : 0;
            Данные[ "ЧасовСписание" ] = мЧасы[ 4 ] != undefined ? мЧасы[ 4 ] : 0; // сколько часов было на списание всего
            Данные[ "ЧасовПоЗаявкам" ] = мЧасы[ 5 ] != undefined ? мЧасы[ 5 ] : 0; // сколько часов отработано без учета списания
            Данные[ "ЧасовКОплате" ] = мЧасы[ 2 ] != undefined ? мЧасы[ 2 ] : 0; // сколько часов к оплате, включая списание
            Данные[ "ЗатратыФакт" ] = 0;
            Данные[ "ДопЧасы" ] = мЧасы[ 3 ] != undefined ? мЧасы[ 3 ] : 0; // сколько доп.часов к оплате
            Данные[ "ДопСумма" ] = Number( Данные[ "ДопЧасы" ] ) * Number( зДанных.СтоимДопЧаса );
            Данные[ "ИтогоКОплате" ] = ( Number( Данные[ "АбонСумма" ] ) + Number( Данные[ "ДопСумма" ] ) + Number( Данные[ "ЗатратыФакт" ] ) ).toFixed( 2 );

            Об.Добавить( "Данные", Данные );
			}

			var Форма = {};
			Форма["КолДоговоров"] = Счетчик;
			Форма["Период"] =  ( (д.ДатНач == д.ДатКнц) || (д.ДатКнц == new Date(0,0,0))  ) ? д.ДатНач.format("rusDateDashed") :
                                          д.ДатНач.format("rusDateDashed") + " - " + д.ДатКнц.format("rusDateDashed");
			Форма["Тема"  ] = д.Тема;
			Об.Данные( "Форма", Форма);

			ВывестиСтатус("Идет вывод документа OpenOffice... ");
			Об.Отчет(); 
	   }
	   else
	   {
			var д1 = СоздатьДиалог("Отчет по организациям - Рассылка");

			var в = ПолучитьВыборку("@Отчет по организациям - Рассылка");
			while( зДанных.Следующий() )
			{
				var Опл  = Number((зДанных.ВремяКОплате/60).toFixed(2));
				var Абон = Number(зДанных.АбонЧасы);
			 
				if( (Number(д.испАб)/100)*Абон <= Опл )
				{
					зПисьма.УстановитьПараметры( зДанных.ПозДог );
					//var в = {};
					if( зПисьма.Следующий() )
					{
					   в.Дата = зПисьма.Дата;
					   в.Автор = зПисьма.Автор;
					}

               в.ДатаПодписания = зДанных.ДатаПодписания;
					в.НомерДог = зДанных.НомерДоговора+"/"+зДанных.ТемаДоговора;//д.Тема;
					в.Тема = зДанных.ТемаДоговора;
					в.ПозДог = зДанных.ПозДог;
					в.Организация = зДанных.Организация;
					в.АбонЧасы = Абон;
					в.ЧасовКОплате = Опл;
					в.email = зДанных.email;//"stack@yarnet.ru"; //для теста
					в.нОрг = зДанных.НомерОрг;

					зАктЗаяв.УстановитьПараметры(д.Тема,зДанных.ПозДог);
					в.АктЗаяв =  зАктЗаяв.Следующий() ? зАктЗаяв.Актив : 0;
					
					зНераспЗаяв.УстановитьПараметры( зДанных.ПозДог, зМенеджеры.ROW_ID );
					в.НераспЗаяв = зНераспЗаяв.Следующий() ? зНераспЗаяв.Нерасп : 0;

					ВнестиЗапись( в );
				}
			}
			д1.Выполнить();
		}
	}
}

отчеты.Add( "ДДетализацияПоОрганизацииОбщий", "ДДетализация по организации общий" );
class ДДетализацияПоОрганизацииОбщий
{
	constructor()
   {
      //####=====                              
      this.зДогСОрг = Query(`SELECT org.[Название], org.row_id as id_org
                              FROM ~Договор~ dog
                              JOIN ~Организации~ org ON org.ROW_ID = dog.[Грузополучатель]
                              where dog.row_id = :1
                             `,1,"iddog,S");  
      this.мДог = {};
      this.Счетчик = 0;
      this.ФайлОтчета;
   }

   //####===== основная обработка....
   ОтчетПоОрганизации( _ДатНач, _ДатКнц, _Договор, _НазвОрг, _фВывод, _Орг, _Папка, _пВидОтчКомм, _ПВидОтчДог )
   {
      //###====== Общая часть для birt/OppOff
      var Об = ПостроительОтчета( "Birt" );
      Об.УстановитьСвойство( "Формат", "pdf" );
      if( _фВывод == 0 )
      {
         ВывестиСтатус("Обработано договоров "+ this.Счетчик++);
         Об.УстановитьСвойство( "Скрытый", "true");
      }
      Об.Имя(this.ФайлОтчета); 
      
      if( _пВидОтчКомм == "Без комментариев" )  //без комм.
      {
         Об.Источник("Отчет", `НазваниеОтчета,A,Период,A,Организация,A,Исполнитель,A,Метки,A,ТекДат,A,АбонЧасы,A,ПодписьОтчета,A,Флаг,S,ФлагСп,S`);
         Об.Источник("Таблица", `нпп,S,Номер,A,Дата,D,Исполнитель,A,Часов,A,ЧасовДробь,N,КОплате,A,КОплатеДробь,N,Затраты,N,ВидРаботы,A,Работа,A,Комментарии,A,ДатаКомментария,A`);   
         Об.Источник("ТаблицаСписание", `нппСп,S,НомерСп,A,ДатаСп,A,ИсполнительСп,A,ЧасовСп,A,ЧасовДробьСп,N,КОплатеСп,A,КОплатеДробьСп,N,`+
                                        `ЗатратыСп,N,ВидРаботыСп,A,РаботаСп,A,КомментарииСп,A,ДатаКомментарияСп,A,ИтогоЧасовДробьСп,N,ИтогоКОплатеДробьСп,N`);
      }
      else
      {
        Об.Источник("Отчет", `НазваниеОтчета,A,Период,A,Организация,A,Исполнитель,A,ТекДат,A,АбонЧасы,A,ПодписьОтчета,A,Договор,A,ДатаНачДог,A,Флаг,S,ФлагСп,S`);
        Об.Источник("Таблица", `нпп,S,Номер,A,Дата,D,Часов,A,КОплате,A,Работа,A,АбонЧасы,A,Примечание,A,ДатВыд,A,ЗавДо,A,Завершено,A,ФИО,A,Фаза,A,Отметки,A,ИтогоЧасовПоЗаявке,A,ИтогоКОплатеПоЗаявке,A,ИтогоЧасов,A,ИтогоКОплате,A`);            
      }
      
      //####======= Общее описание запросов
      var sql0 = ``;
      var sql1 = ``;
      var sql2_1 = ``;
      var sql3 = ``;
      if( _Папка != undefined && _Папка != "" )
      {
         sql0 = `;WITH DownKr AS                                                                
                       (                                                                                   
                          SELECT ct.*                                                               
                          FROM ~ДО карточки~  ct                                                          
                          WHERE ct.row_id in (` + _Папка  +  `)                                                
                          UNION ALL                                                                        
                          select child.*                                                            
                          FROM ~ДО карточки~  child                                                       
                             INNER JOIN Downkr parent ON parent.ROW_ID = child.[Папки]               
                       )`;
      }
      
      if( _пВидОтчКомм == "Без комментариев" ) 
      {      
         sql1 = `SELECT`;
         sql3 = ``;
      }  
      else
      {
         sql1 = `SELECT DISTINCT card.[Примечание],`;
         sql3 = `,card.[Примечание]`;
      }  
 
      var sql2_0   = `  work.[row_id] [нзРаботы],
                    hour.[row_id] [нзЧасов],
                    card.[row_id] [нзЗаявки],
                    card.[Номер] [НомерЗаявки],
                    card.[СтороннийНомер] [СторНомерЗаявки],
                    hour.[Дата ввода] [ДатаКомментария],
                    hour.[Перенос],
                    work.[Дата выдачи] [ДатаРаботы],
                    card.[Дата создания] [ДатаЗаявки],
                    isp.[ФИО] [Исполнитель],
                    sum(60*datepart(hour, hour.[Время работы]) + datepart(minute, hour.[Время работы])) [Часов],
                    sum(60*datepart(hour, hour.[Время к оплате]) + datepart(minute, hour.[Время к оплате])) [КОплате],
                    card.[ЗатратыФакт] [Затраты],
                    kjob.[Категория] [ВидРаботы], 
                    dog.[Номер] [НомерДоговора],
                    dog.[Тема] [ТемаДоговора],
                    dog.[Начало договора] [НачалоДоговора],
                    card.[Тема],
                    Case 
                       When card.[Тема] = 'Перенос часов'  
                          Then 0
                       When card.[Тема] <> 'Перенос часов'
                          Then 1
                    End
                          as НТема,
                    --convert(varchar(20), dog.[Номер])+'/'+dog.[Тема] [Договор],
                    ISNULL(par1.[Значение],0) [АбонЧасы]
               FROM ~ДО часы~ hour
               INNER JOIN ~ДО задания~ work ON hour.[Часы-Задание]=work.[row_id]`;
      if( _Папка != undefined &&_Папка != "" )
         sql2_1 = `INNER JOIN DownKr card ON work.[Задание-Карточка]=card.[row_id]`;
      else
         sql2_1 = `INNER JOIN ~ДО карточки~ card ON work.[Задание-Карточка]=card.[row_id]`;

      // проверяем, при формировании отчета из веба могут быть переданы фильтры по меткам ( подзадание 15890 от 22 дек 2014 г.)
      var sql2_2_0 = "";
      var условие_по_меткам = "";
      if( this.Вызов_из_веба != undefined && ЕстьСвойство( мМетки, "tag_search" ) )
      {
         if( мМетки["tag_search"] == 2 )
         {
            условие_по_меткам = "без меток" ;
            sql2_2_0 =  `AND ISNULL(card.[Метки клиентов],'') = '' `;
         }   
         else 
         {   
            var пУсловиеВыборкиАнгл  =  ( мМетки["tag_search"] == 1 )  ? "or" : "and";
            var пУсловиеВыборкиРус   =  ( мМетки["tag_search"] == 1 )  ? "или" : "и";
            for( let _индекс in мМетки )
               if( мМетки[_индекс] != "" && вниз(_индекс) != "tag_search")
               {
                  if( sql2_2_0 == "" )
                  {
                     sql2_2_0 +=  ` card.[Метки клиентов] LIKE '%`+ мМетки[_индекс] + `%' `;
                     условие_по_меткам += " \"" +  мМетки[_индекс]  + "\" ";
                  }
                  else
                  {
                     sql2_2_0 +=  пУсловиеВыборкиАнгл + ` card.[Метки клиентов] LIKE '%`+ мМетки[_индекс] + `%' `;
                     условие_по_меткам +=  пУсловиеВыборкиРус  +  "  \"" +  мМетки[_индекс]  + "\" ";
                  }   
               }   

            if( sql2_2_0 != "" )
               sql2_2_0 = ` AND (`  + sql2_2_0 +`)`
         }
      }
      // -------------
      var sql2_2 = `INNER JOIN ~Договор~ dog ON card.[Карточка-Договор]=dog.[row_id]
               INNER JOIN ~Сотрудники~ isp ON isp.[row_id]=work.[Задание-Исполнитель]
                LEFT JOIN ~ДО категории работ~ kjob ON hour.[Часы-Категория] = kjob.ROW_ID
               LEFT JOIN ~Свойства~ par1 ON par1.[Параметры-Договор]=dog.[row_id] 
                                           AND par1.[Виды-Параметры]=(SELECT TOP 1 [row_id] FROM ~Виды параметров~ WHERE [Название]='АБОН_ЧАСЫ' )
                                           AND par1.[ДатКнц] >= :1 AND par1.[ДатНач] <= :2
               WHERE hour.[Дата ввода] between :3 and :4
                  AND dog.[row_id]=:5  ` +  sql2_2_0  + `
               GROUP BY card.[row_id],work.[row_id],hour.[row_id],hour.[Дата ввода],isp.[ФИО],card.[Тема],hour.[Перенос],
                     card.[ЗатратыФакт],kjob.[Категория],dog.[Номер],dog.[Тема],dog.[Начало договора],
                     par1.[Значение],card.[СтороннийНомер],card.[Номер],work.[Дата выдачи],card.[Дата создания]`;
      
      var sql2 = sql2_0 + sql2_1 + sql2_2;            
      var sql4   = `ORDER BY S.[НТема] desc, S.[ДатаРаботы] desc,S.[нзРаботы] desc,S.[ДатаКомментария] desc`;

      var зДанных = BufferedReader( `Select * from (` + sql0 + sql1 + sql2 + sql3 + `) as S ` + sql4, 500,"d1,D,d2,D,DatN,D,DatK,D,Dog,S");

      var зТекстаРаботы    = Query(`SELECT [Отметки] FROM ~ДО задания~ WHERE row_id=:1`,1,"ID,S");

      var зТекстаРаботыНов = Query( `SELECT card.[Примечание] 
                                       FROM ~ДО задания~ job
                                            JOIN ~ДО Карточки~ card ON job.[Задание-Карточка]=card.ROW_ID
                                       WHERE job.row_id=:1`, 1, "ID,S" );

      var зКомментЧасов = Query(`SELECT [Примечание] FROM ~ДО часы~ WHERE row_id=:1`,1,"ID,S");

      
            
      var зИстЗаявки = Query( `SELECT task.row_id, m.[ФИО], chl.ФИО ЧФИО, edit.ФИО as [Редактор], task.[Статус завершения], task.Подзадания,
                               task.[Дата выдачи] ДатВыд, convert(varchar(5), task.[Время выдачи], 14) [Время выдачи], 
                               task.[Дата завершения] Завершено, convert(varchar(5), task.[Время завершения], 14) [Время завершения],
                               task.[Отметки],kf.Название as Фаза, task.ТипИсполнителя, task.ROW_ID, hours.[Часов], hours.[КОплате],task.[Завершить до] ЗавДо
                        FROM ~ДО задания~ task
                           JOIN ~ДО Карточки~ d ON d.ROW_ID=task.[Задание-Карточка]
                           LEFT JOIN ~ДО фазы~ k ON k.ROW_ID = task.[Задание-Фаза] 
                           LEFT JOIN ~ДО категории фаз~ kf ON kf.ROW_ID = k.[Фаза-Категория] 
                           LEFT JOIN ~Сотрудники~ m ON m.ROW_ID=task.[Задание-Исполнитель]
                           LEFT JOIN ~Сотрудники~ edit ON edit.ROW_ID=task.[Задание-Редактор]
                           LEFT JOIN ~Частные лица~ chl ON task.[Задание-Представитель] = chl.ROW_ID
                           LEFT JOIN ( SELECT work.[row_id],
                                         sum(60*datepart(hour, hour.[Время работы]) + datepart(minute, hour.[Время работы])) [Часов],
                                         sum(60*datepart(hour, hour.[Время к оплате]) + datepart(minute, hour.[Время к оплате])) [КОплате]
                                  FROM ~ДО часы~ hour
                                       JOIN ~ДО задания~ work ON hour.[Часы-Задание]=work.[row_id]
                                  WHERE work.[Задание-Карточка]=:1
                                  GROUP BY work.[row_id]) hours on hours.ROW_ID=task.row_id
                        WHERE d.ROW_ID = :2 AND task.ТипИсполнителя IN(0,1)
                        ORDER BY task.[Дата выдачи] desc, task.[Время выдачи] desc`, 100, "card1,S,card2,S" );

      //####======= Описание переменных
      var мДанные = {};
      var Данные = {};
      var мРаботы = {};  
      var мВывод = {};
      var ДанныеСп = {};
      var ИтогоЧасов = 0;
      var ИтогоКОплате = 0;
      var нпп = 0;
      var СумИтогоКОплате = 0;
      var СумИтогоКОплате2 = 0;
      var СумИтогоЧасов = 0;
      var СумИтогоЧасов2 = 0;
      var СумИтогоЧасовВсего2 = 0;
      var СумИтогоКОплатеВсего2 = 0;
      var СумИтогоКОплатеВсего = 0;
      var СумИтогоЧасовВсего = 0;
      var СуммаЧасовДробь = 0;
      var СуммаКОплатеДробь = 0;
      var Флаг = 0;
      var ФлагСп = 0;
      var СуммаЧасовДробьСп = 0;
      var СуммаКОплатеДробьСп = 0;
            
      //####======= Обработка
      зДанных.УстановитьПараметры( _ДатНач, _ДатКнц, _ДатНач, _ДатКнц, _Договор );
      var зДанныхАбонЧасы;
      var зДанныхНомерДоговора;
      var зДанныхТемаДоговора;
      var зДанныхНачалоДоговора;
      while( зДанных.Следующий() )
      {
         if( _фВывод == 1 )
            ВывестиСтатус("Обработано работ "+ this.Счетчик++);
                         
         if( _пВидОтчКомм == "Без комментариев" )  //без комм.
         {
            if( зДанных.Тема != "Перенос часов" )
            { 
               Флаг = 1;
               var пНомерЗаявки = зДанных.НомерЗаявки.toString() + (зДанных.СторНомерЗаявки != "" ? ("/" + зДанных.СторНомерЗаявки) : "");
            
               Данные.Номер        = пНомерЗаявки;
               Данные.Дата         = new Date(зДанных.ДатаЗаявки);     //   ДатаРаботы
               Данные.Исполнитель  = ФИО(зДанных.Исполнитель);
                        
               зТекстаРаботыНов.УстановитьПараметры( зДанных.нзРаботы );
               if( зТекстаРаботыНов.Следующий() )
               {
                  if( зТекстаРаботыНов.Примечание != "" )
                     Данные.Работа =  зТекстаРаботыНов.Примечание;
                  else
                  {
                     зТекстаРаботы.УстановитьПараметры( зДанных.нзРаботы );
                     Данные.Работа = зТекстаРаботы.Следующий() ? зТекстаРаботы.Отметки : "";
                  }
               }
           
               //затраты учитываются только один раз
               if( мРаботы[зДанных.НомерЗаявки] == undefined )
               {
                  Данные.нпп           = ++нпп;
                  Данные.Затраты       = зДанных.Затраты;
                  мРаботы[зДанных.НомерЗаявки] = 1;
               }
               else
               {
                  Данные.нпп           ="";
                  Данные.Затраты       = 0;
               }
            
               ИтогоЧасов         += зДанных.Часов;
               ИтогоКОплате       += зДанных.КОплате;

               Данные.Часов   =  Number((зДанных.Часов/60).toFixed(2));
               Данные.КОплате =  Number((зДанных.КОплате/60).toFixed(2));
               Данные.ЧасовДробь   = Number((зДанных.Часов/60).toFixed(2));
               Данные.КОплатеДробь = Number((зДанных.КОплате/60).toFixed(2));
               СуммаЧасовДробь   += Данные.ЧасовДробь;
               СуммаКОплатеДробь += Данные.КОплатеДробь;

               Данные.ВидРаботы    = зДанных.ВидРаботы;   //КодВНазваниеРаботы( зДанных.ВидРаботы );            
               Данные.ДатаКомментария   = зДанных.ДатаКомментария;

               Данные.Комментарии = "";
               зКомментЧасов.УстановитьПараметры( зДанных.нзЧасов );
               if( зКомментЧасов.Следующий() ) {
                  var Примечание = зКомментЧасов.Примечание;
                  Данные.Комментарии = Примечание.replace( new RegExp( "<", 'g' ), "¤" );
               }

               //###=== Доп. форматирование + доопределение данных...

               //Данные.Работа = Заменить( ПодСтрока(Данные.Работа, 1, 255), "<", "¤" );
               Данные.Работа = Данные.Работа.toString().replace( new RegExp( "<", 'g' ), "¤" );

               Об.Добавить("Таблица", Данные);
            }
            else
            {
               ФлагСп = 1;
               пНомерЗаявки = зДанных.НомерЗаявки.toString() + (зДанных.СторНомерЗаявки != "" ? ("/" + зДанных.СторНомерЗаявки) : "");
            
               Данные.НомерСп       = пНомерЗаявки;
               Данные.ДатаСп        = зДанных.ДатаЗаявки;     //   ДатаРаботы
               Данные.ИсполнительСп = ФИО(зДанных.Исполнитель);

               зТекстаРаботыНов.УстановитьПараметры( зДанных.нзРаботы );
               if( зТекстаРаботыНов.Следующий() )
               {
                  if( зТекстаРаботыНов.Примечание != undefined && зТекстаРаботыНов.Примечание != "" )
                     Данные.РаботаСп =  зТекстаРаботыНов.Примечание;
                  else
                  {
                     зТекстаРаботы.УстановитьПараметры( зДанных.нзРаботы );
                     Данные.РаботаСп = зТекстаРаботы.Следующий() ? зТекстаРаботы.Отметки : "";
                  }
               }
           
               //затраты учитываются только один раз
               if( мРаботы[зДанных.НомерЗаявки] == undefined )
               {
                  Данные.нппСп           = ++нпп;
                  Данные.ЗатратыСп       = зДанных.Затраты;
                  мРаботы[зДанных.НомерЗаявки] = 1;
               }
               else
               {
                  Данные.нппСп           ="";
                  Данные.ЗатратыСп       = 0;
               }
            
               ИтогоЧасов         += зДанных.Часов;
               ИтогоКОплате       += зДанных.КОплате;

               if( зДанных.Перенос  % 2 >= 1 )
               {
                  Данные.ЧасовСп   =  (-1) * Number((зДанных.Часов/60).toFixed(2));
                  Данные.КОплатеСп =  (-1) * Number((зДанных.КОплате/60).toFixed(2));
                  Данные.ЧасовДробьСп   = (-1) * Number((зДанных.Часов/60).toFixed(2));
                  Данные.КОплатеДробьСп = (-1) * Number((зДанных.КОплате/60).toFixed(2));
                  СуммаЧасовДробьСп   += Данные.ЧасовДробьСп; 
                  СуммаКОплатеДробьСп += Данные.КОплатеДробьСп;
               }
               else
               {
                  Данные.ЧасовСп   =  Number((зДанных.Часов/60).toFixed(2));
                  Данные.КОплатеСп =  Number((зДанных.КОплате/60).toFixed(2));
                  Данные.ЧасовДробьСп   = Number((зДанных.Часов/60).toFixed(2));
                  Данные.КОплатеДробьСп = Number((зДанных.КОплате/60).toFixed(2));
                  СуммаЧасовДробьСп   += Данные.ЧасовДробьСп; 
                  СуммаКОплатеДробьСп += Данные.КОплатеДробьСп;
               }
                                            
               Данные.ВидРаботыСп    = зДанных.ВидРаботы;   //КодВНазваниеРаботы( зДанных.ВидРаботы );            
               Данные.ДатаКомментарияСп   = зДанных.ДатаКомментария;

               Данные.КомментарииСп = "";
               зКомментЧасов.УстановитьПараметры( зДанных.нзЧасов );
               if( зКомментЧасов.Следующий() ) {
                  var Примечание = зКомментЧасов.Примечание;
                  Данные.КомментарииСп = Примечание.replace( new RegExp( "<", 'g' ), "¤" );
               }

               //Данные.Договор = зДанных.Договор; # не используется
               //###=== Доп. форматирование + доопределение данных...

               Данные.ИтогоЧасовДробьСп   = СуммаЧасовДробь + СуммаЧасовДробьСп;
               Данные.ИтогоКОплатеДробьСп = СуммаКОплатеДробь + СуммаКОплатеДробьСп;
               //Данные.РаботаСп = Заменить( ПодСтрока(Данные.РаботаСп, 1, 255), "<", "¤" ); 
               Данные.РаботаСп = Данные.РаботаСп.replace( new RegExp("<",'g'), "¤" );
               Об.Добавить("ТаблицаСписание", Данные);

            }
         }
         else   //c комментариями - cбор данных в массив для вывода
         {                                             
            var ИтогоЧасовПоЗаявке = 0;
            var ИтогоКОплатеПоЗаявке = 0;
            зИстЗаявки.УстановитьПараметры( зДанных.нзЗаявки, зДанных.нзЗаявки );
            if( мРаботы[зДанных.НомерЗаявки] == undefined )
            {
               ++нпп;
               var НЗ = зДанных.НомерЗаявки;
               while(зИстЗаявки.Следующий())
               {
                  var НомРаб = зИстЗаявки.row_id;

                  ИтогоЧасовПоЗаявке                    += зИстЗаявки.Часов;
                  ИтогоКОплатеПоЗаявке                  += зИстЗаявки.КОплате;
                  ИтогоЧасов                            += зИстЗаявки.Часов;
                  ИтогоКОплате                          += зИстЗаявки.КОплате;
                  
                  if( мВывод[нпп] == undefined )
                     мВывод[нпп] = {};
                  if( мВывод[нпп][НЗ] == undefined )
                     мВывод[нпп][НЗ] = {};
                  мВывод[нпп][НЗ]["СторНЗ"]                = зДанных.СторНомерЗаявки;
                  мВывод[нпп][НЗ]["Дата"]                  = зДанных.ДатаЗаявки;
                  мВывод[нпп][НЗ]["Примечание"]            = зДанных.Примечание;
                  if( мВывод[нпп][НЗ]["ИтогоЧасовПоЗаявке"] == undefined )
                     мВывод[нпп][НЗ]["ИтогоЧасовПоЗаявке"] = 0;
                  мВывод[нпп][НЗ]["ИтогоЧасовПоЗаявке"]   += зИстЗаявки.Часов;
                  if( мВывод[нпп][НЗ]["ИтогоКОплатеПоЗаявке"] == undefined )
                     мВывод[нпп][НЗ]["ИтогоКОплатеПоЗаявке"] = 0;
                  мВывод[нпп][НЗ]["ИтогоКОплатеПоЗаявке"] += зИстЗаявки.КОплате;
                  if(  мВывод[нпп][НЗ][НомРаб] == undefined )
                      мВывод[нпп][НЗ][НомРаб] = {};
                  мВывод[нпп][НЗ][НомРаб]["ДатВыд"]         = зИстЗаявки.ДатВыд;
                  мВывод[нпп][НЗ][НомРаб]["ЗавДо"]          = зИстЗаявки.ЗавДо;
                  мВывод[нпп][НЗ][НомРаб]["Завершено"]      = зИстЗаявки.Завершено;
                  мВывод[нпп][НЗ][НомРаб]["ФИО"]            = зИстЗаявки.ФИО;
                  мВывод[нпп][НЗ][НомРаб]["Фаза"]           = зИстЗаявки.Фаза;
                  мВывод[нпп][НЗ][НомРаб]["Отметки"]        = зИстЗаявки.Отметки;
                  if( мВывод[нпп][НЗ][НомРаб]["Часов"] == undefined )
                     мВывод[нпп][НЗ][НомРаб]["Часов"] = 0;
                  мВывод[нпп][НЗ][НомРаб]["Часов"]         += зИстЗаявки.Часов;
                  if( мВывод[нпп][НЗ][НомРаб]["КОплате"] == undefined )
                     мВывод[нпп][НЗ][НомРаб]["КОплате"] = 0;
                  мВывод[нпп][НЗ][НомРаб]["КОплате"]       += зИстЗаявки.КОплате;
               }
               мРаботы[зДанных.НомерЗаявки] = 1;
            }               
         }
         зДанныхАбонЧасы = зДанных.АбонЧасы;
         зДанныхНомерДоговора = зДанных.НомерДоговора;
         зДанныхТемаДоговора = зДанных.ТемаДоговора;
         зДанныхНачалоДоговора = зДанных.НачалоДоговора;
      }

      //Для отчета с комментариями вывод в бирт по порядку после пред. обработки
      //##   Вывод данных массива в бирт по порядку
      for( let нпп in мВывод )
      {
         if( !мВывод.hasOwnProperty(нпп) ) continue;
         for( let НЗ in мВывод[нпп] )
         {
            if( !мВывод[нпп].hasOwnProperty(НЗ) ) continue;
            for( let НомРаб in мВывод[нпп][НЗ] )
            {
               if( !мВывод[нпп][НЗ].hasOwnProperty(НомРаб) ) continue;
               if( isNaN(Number(НомРаб)) ) continue;
               var Данные = {};
               Данные.нпп                  = нпп;
               Данные.ДатВыд               = мВывод[нпп][НЗ][НомРаб]["ДатВыд"];
               Данные.ЗавДо                = мВывод[нпп][НЗ][НомРаб]["ЗавДо"];
               Данные.Завершено            = мВывод[нпп][НЗ][НомРаб]["Завершено"];
               Данные.ФИО                  = мВывод[нпп][НЗ][НомРаб]["ФИО"];
               Данные.Фаза                 = мВывод[нпп][НЗ][НомРаб]["Фаза"];
               Данные.Отметки              = мВывод[нпп][НЗ][НомРаб]["Отметки"];
               Данные.Часов                = (мВывод[нпп][НЗ][НомРаб]["Часов"] != undefined ? ВремяСТремяНулями(мВывод[нпп][НЗ][НомРаб]["Часов"]) : "");
               Данные.КОплате              = (мВывод[нпп][НЗ][НомРаб]["КОплате"] != undefined ? ВремяСТремяНулями(мВывод[нпп][НЗ][НомРаб]["КОплате"]) : "");
               Данные.ИтогоЧасовПоЗаявке   = ВремяСТремяНулями(мВывод[нпп][НЗ]["ИтогоЧасовПоЗаявке"]);
               Данные.ИтогоКОплатеПоЗаявке = ВремяСТремяНулями(мВывод[нпп][НЗ]["ИтогоКОплатеПоЗаявке"]);
               Данные.ИтогоКОплате         = ВремяСТремяНулями(ИтогоКОплате);
               Данные.ИтогоЧасов           = ВремяСТремяНулями(ИтогоЧасов);
               Данные.АбонЧасы             = зДанныхАбонЧасы;

               Данные.Номер       = НЗ;
               Данные.Дата        = мВывод[нпп][НЗ]["Дата"];
               Данные.Примечание  = мВывод[нпп][НЗ]["Примечание"];

               Об.Добавить("Таблица", Данные);
            }
         }
      }

      //####===== Шапка отчета      
      if( зДанныхНомерДоговора != undefined )
      {
         мДанные.Флаг   = Флаг;
         мДанные.ФлагСп = ФлагСп;
         if( _пВидОтчКомм == "Без комментариев" )  //без комм.
            мДанные.Организация  = зДанныхНомерДоговора.toString() + "/" + зДанныхТемаДоговора + " - "+ _НазвОрг;
         else                      //c комм.
         {
            мДанные.Организация    = _НазвОрг;
            мДанные.Договор        = зДанныхНомерДоговора.toString() + "/" + зДанныхТемаДоговора;
            мДанные.ДатаНачДог     = зДанныхНачалоДоговора.toString();
         }  
         мДанные.АбонЧасы       = зДанныхАбонЧасы; 
         мДанные.НазваниеОтчета = "Детализация по организации";
         мДанные.Период         =  ( _ДатНач.equals(_ДатКнц) || _ДатКнц.isEmpty() ) ? _ДатНач.format("rusDateDashed") : _ДатНач.format("rusDateDashed") + " - " + _ДатКнц.format("rusDateDashed");
         мДанные.Исполнитель    = Пользователь().ФИО;

         var текущееВремя = new Date();
         мДанные.ТекДат         = РабДат().getDate()+" "+РабДат().МесяцПрописьюВРодительномПадеже()+" "+РабДат().getFullYear()+"г. "+текущееВремя.getHours()+":"+текущееВремя.getMinutes();

         if( this.Вызов_из_веба != undefined && условие_по_меткам != undefined && условие_по_меткам != ""   )
            мДанные.Метки  = условие_по_меткам;

         Об.Добавить( "Отчет", мДанные);
         Об.Отчет();
         
         if (_ПВидОтчДог != "Один договор(на экран)") // Никуда не сохраняем отчет, если он строится по одному договору - заявка №13440 от 13.03.2014
         { 
            var имяФО = _Орг + "_" + зДанныхНомерДоговора + ";" + зДанныхТемаДоговора + "_" + зДанныхАбонЧасы + "_" + ИтогоКОплате + ".pdf";
            
            if( _фВывод == 0 )
               КопироватьФайл( "CLIENT:Report_Birt\\Детализация по организации.pdf", КаталогПрограммы() + "mailing\\" + имяФО);

            КопироватьФайл( "CLIENT:Report_Birt\\Детализация по организации.pdf", this.КаталогДляОтчетов +
                                       _НазвОрг.replace(  new RegExp("\"",'g'), "_") + this.Дата_стр + ".pdf" ); //"
         }
      }
      else
      {
         if( this.Вызов_из_веба == undefined )  // || пВидОтч == 0)
            Сообщить("По данному договору нет отмеченных часов!");
         else
         {
            мДанные.Организация = _НазвОрг;
            мДанные.Период      =  ( _ДатНач.equals(_ДатКнц) || _ДатКнц.isEmpty()  ) ? _ДатНач.format("rusDateDashed") : _ДатНач.format("rusDateDashed") + " - " + _ДатКнц.format("rusDateDashed");
            мДанные.Исполнитель = Пользователь().ФИО;
            мДанные.ТекДат      = ТекДат()+" "+ТекДат().МесяцПрописьюВРодительномПадеже()+" "+ТекДат().getFullYear()+"г. "+ТекВремя();
            if( условие_по_меткам != undefined && условие_по_меткам != ""   )
               мДанные.Метки  = условие_по_меткам;
            Об.Добавить( "Отчет",  мДанные);
            Об.Отчет();        
         }
      }
   }

   //####===== 
   ОтчетыОрганизациям( _КатОт )
   {
      var длг = СоздатьДиалог( "ОтчетыОрг" );
      длг.Обработчик.Каталог = _КатОт;
      длг.Выполнить();
   }
   
   Формирователь_отчета()
   {
      if( this.Вызов_из_веба == undefined )
      {
         var пДатНач = РабМес();
         var пДатКнц = пДатНач.ПоследнееЧисло(); 
         var нзДоговора = -1;
         var пПапка = "";
         //###======
         if( this.Параметры != undefined && this.Параметры["@НЗ_Дог"] == 1 ) 
         {
            this.мДог = this.Параметры["@НЗ_Дог"];
            for( let инд in this.Параметры["@НЗ_Дог"] )
            {
               if( !this.Параметры["@НЗ_Дог"].hasOwnProperty(инд) ) continue;
               this.мДог[инд]["Договор"] = 1; 
               нзДоговора = инд;
            }      
         }
         //###======  
         if( this.Параметры != undefined && this.Параметры["@НЗ_Заявок"] == 1 ) //###===== Уточняем договор
         {          
            var мПапка = this.Параметры["@НЗ_Заявок"];
            for( let инд in мПапка )
            {
               if( !мПапка.hasOwnProperty(инд) ) continue;
               пПапка += + инд.toString();    
            }
            if( пПапка != "" ) 
            {
               var зДогИзПапок = Query(`;WITH DownKr AS                                                                
                                          (                                                                                   
                                             SELECT ct.ROW_ID, ct.[Карточка-Договор]                                                                
                                             FROM ~ДО карточки~  ct                                                          
                                             WHERE ct.row_id in (` + пПапка  +  `)                                                
                                             UNION ALL                                                                        
                                             select child.ROW_ID, child.[Карточка-Договор]                                                            
                                             FROM ~ДО карточки~  child                                                       
                                                INNER JOIN Downkr parent ON parent.ROW_ID = child.[Папки]               
                                          )
                                          SELECT distinct dog.row_id  as DogId, dog.[Номер], dog.[Тема],  org.[Название],
                                                 max(hour.[Дата ввода]) as MaxD, min(hour.[Дата ввода]) as MinD
                                          FROM DownKr 
                                          Left JOIN ~ДО задания~ work ON work.[Задание-Карточка]= DownKr.[row_id]
                                          left JOIN ~ДО часы~ hour ON hour.[Часы-Задание]=work.[row_id]
                                          INNER JOIN ~Договор~  dog ON  DownKr.[Карточка-Договор]=dog.[row_id]
                                          JOIN ~Организации~ org ON org.ROW_ID = dog.[Грузополучатель]
                                          group by  dog.row_id , dog.[Номер], dog.[Тема],  org.[Название]`, 100, "" );
                                            
               var пДоговоровОбПоПапкам = 0;
               зДогИзПапок.УстановитьПараметры();   //####==== Запрос всех договоров в выбранных папок
               while(зДогИзПапок.Следующий())
               {
                  this.мДог[зДогИзПапок.DogId]["Договор"] = Текст(зДогИзПапок.Номер) + зДогИзПапок.Тема + " - " + зДогИзПапок.Название;
                  this.мДог[зДогИзПапок.DogId]["ЧасыОт"] = зДогИзПапок.MinD;
                  this.мДог[зДогИзПапок.DogId]["ЧасыДо"] = зДогИзПапок.MaxD;
                  
                  нзДоговора = зДогИзПапок.DogId;
                  пДатНач = зДогИзПапок.MinD;
                  пДатКнц = зДогИзПапок.MaxD;
                  
                  пДоговоровОбПоПапкам++;
               } 
               if( пДоговоровОбПоПапкам > 1 )  //В папке обнаружилось несколько договоров.....
               {
                  var массив_позиций = {};
                  var массив_названий = {};
                  var ii = 1;
                  for( let инд in this.мДог )
                  {
                     массив_позиций[ii]    = Number( инд );
                     массив_названий[ii++] = this.мДог[инд]["Договор"] + " (отр. часы с " + this.мДог[инд]["ЧасыОт"] + " по " + this.мДог[инд]["ЧасыДо"] +")";
                  }
                  нзДоговора = ВыборВарианта( "Укажите договор:", массив_названий, массив_позиций ); 
                  пДатНач = this.мДог[нзДоговора]["ЧасыОт"] != undefined ?  this.мДог[нзДоговора]["ЧасыОт"] : пДатНач;
                  пДатКнц = this.мДог[нзДоговора]["ЧасыДо"] != undefined ?  this.мДог[нзДоговора]["ЧасыДо"] : пДатКнц;
               }   
            }
         }  
      
         //###====== 
         var Д = СоздатьДиалог("Диалог - Отчет-детализация общ");
         Д.ДатНач = пДатНач;    
         Д.ДатКнц = пДатКнц;       
         Д.кол_дог = 0;
         this.дФормат = Д.Формат;
         if( this.Параметры != undefined && this.Параметры["@НЗ_Дог"] == 1 )
            Д.кол_дог = this.Параметры["@НЗ_Дог"].length;  //####===== Кол-во выбранных договоров
         if( this.Параметры != undefined && this.Параметры["@НЗ_Заявок"] == 1 )
            Д.кол_дог = 1;                          //####===== При печати отчета с папки предполагается выбор определенного договора          
         if( !Д.Выполнить() )
            throw "ReportBreak: Построение отчета прервано";
            
         if( нзДоговора != -1)
            Д.Обработчик.нзДоговора = нзДоговора;
         
         //пВидОтч = ПрочитатьПолеСвязи(Д,"ВидОтч");              //####===== 0 - birt, 1 - OpenOffice
         var пВидОтчКомм = Д["ВидОтчКомм"];      //####===== 0 - Без комментариев, 1 -с комментариями
         var пВидОтчДог  = Д["ВидОтчДог"];       //####===== 0 - Вывод на экран, 1  - в папку
            
         var Организация = "";
         //Разбить(Д.Организация, " - ", темпДог, Организация);
         if( Д.Обработчик.нзДоговора != -1 ) //Определение орг. по id договора - общ. независимо от  точки вызова
         { 
            this.зДогСОрг.УстановитьПараметры( Д.Обработчик.нзДоговора );
            Организация =  this.зДогСОрг.Следующий() ? this.зДогСОрг.Название : ""; 
         }
         Организация = Организация.replace(  new RegExp(" ",'g'), "_");
         Организация = Организация.replace(  new RegExp(",",'g'), "");
         Организация = Организация.replace(  new RegExp("\"",'g'), ""); //"
         
         //####==== Формирование отчета по выбранным данным
         this.Счетчик = 0;
         var ДатаНач = Д.ДатНач; 
         var ДатаКнц = Д.ДатКнц;
         
         if( пВидОтчКомм == "Без комментариев" )  //без комм.
            this.ФайлОтчета = отчеты.КаталогОтчета("ДДетализацияПоОрганизацииОбщий")+"SHABLON\\DO\\Детализация по организации.rptdesign";
         else                    //с комм.
            this.ФайлОтчета = отчеты.КаталогОтчета("ДДетализацияПоОрганизацииОбщий")+"SHABLON\\DO\\Детализация по организациискомментарием.rptdesign";
         if( пВидОтчДог != "Один договор(на экран)" )  //# Не создаем каталог, когда отчет строится по одному договору
         // if( пВидОтчДог != "Вывод на экран" )  //# Не создаем каталог, когда отчет строится по одному договору
         {    
            //КаталогДляОтчетов = "\\\\server\\corporation\\ss_buh\\+MANAGER\\ОТЧЕТЫ\\ОТЧЕТЫ "+Год(РабМес())+"\\"+МесяцПрописью(РабМес())+"\\";
            this.КаталогДляОтчетов = "\\\\server\\corporation\\ss_buh\\+MANAGER\\ОТЧЕТЫ\\ОТЧЕТЫ "+ДатаНач.getFullYear()+"\\"+ДатаНач.МесяцПрописью()+"\\";
            СоздатьКаталог( this.КаталогДляОтчетов );
         }
         this.Дата_стр = "_" + РабМес().format("MM-yyyy");
         
         //####===== Несовместимые варианты выбора отсекаем на этапе диалога     
         if( пВидОтчДог == "Один договор(на экран)" ) // || пВидОтч == 1 )   #Один договор на экран. - для  вариант OpOf - вывод на экран одного договора
            this.ОтчетПоОрганизации( Д.ДатНач, Д.ДатКнц,Д.Обработчик.нзДоговора, Организация, 1, -1, пПапка, пВидОтчКомм, пВидОтчДог);
         else                     //Договоры в папку - для варианта birt
         {             
            СоздатьКаталог( КаталогПрограммы() + "mailing\\" );
            УдалитьФайл( КаталогПрограммы() + "mailing\\*" );
           // ДатаНач = РабМес(); 
           // ДатаКнц = ПоследнееЧисло(РабМес());

            if( this.мДог != undefined && this.мДог.length )   //Выбраны договора
            {
               for( let нз_дог in this.мДог )
               {
                  if( !this.мДог.hasOwnProperty(нз_дог) ) continue;
                  зДогСОрг.УстановитьПараметры( нз_дог );
                  Организация = "";
                  var нз_орг = -1;
                  if(зДогСОрг.Следующий())
                  {
                     нз_орг      = зДогСОрг.id_org;
                     Организация = зДогСОрг.Название;
                  }
                  this.ОтчетПоОрганизации( ДатаНач, ДатаКнц, нз_дог, Организация, 0, нз_орг, undefined, пВидОтчКомм, пВидОтчДог ); 
               }
               this.ОтчетыОрганизациям( КаталогПрограммы() + "mailing" );
            }
            else   // выгрузка всех договоров для отправки клиентам
            {
               var Запрос = Query( `SELECT dog.[row_id] [Дог],dog.[Номер], an_leaf.Тема [КатегорияДог], dog.[Тема], dog.[Начало договора] [ДатНач],
                                             dog.[Окончание] [ДатКнц], org.[Название] [Орг], org.row_id as [Орг_id]
                                      FROM ~ДО часы~ hour
                                           JOIN ~ДО задания~ work ON hour.[Часы-Задание]=work.[row_id]
                                           JOIN ~ДО карточки~ card ON work.[Задание-Карточка]=card.[row_id]
                                           JOIN ~Договор~ dog ON card.[Карточка-Договор]=dog.[row_id]
                                           JOIN ~Организации~ org ON org.[row_id]=dog.[Грузополучатель]
                                           LEFT JOIN ~Аналитики~ an on dog.Тема like an.Тема
                                           LEFT JOIN ~Аналитики~ an_leaf on an.Аналитики = an_leaf.ROW_ID AND an_leaf.Аналитики = -10
                                      WHERE hour.[Дата ввода] between :1 and :2
                                      GROUP BY dog.[row_id], dog.[Номер], dog.[Тема], org.[Название], dog.[Начало договора],
                                               dog.[Окончание], org.row_id, an_leaf.Тема
                                      `,500,"DatN,D,DatK,D");
               
               Запрос.УстановитьПараметры( ДатаНач, ДатаКнц );

               var Счетчик = 0;
               //while( Запрос.Следующий() && Счетчик < 10 )
               while( Запрос.Следующий() )
               {
                  //if( Запрос.Тема == "СКФ" || Запрос.Тема == "СКА" || Запрос.Тема == "СЭА" || Запрос.Тема == "СКД" || Запрос.Тема == "СЭД" )
                  if( Запрос.КатегорияДог == "КСопровождение" || Запрос.Тема == "ВКО" || Запрос.Тема == "ВЭО" )
                  {
                     Организация = Запрос.Орг.replace(  new RegExp(" ",'g'), "_");
                     Организация = Организация.replace(  new RegExp(",",'g'), "");
                     Организация = Организация.replace(  new RegExp("\"",'g'), ""); //"
                     
                        //Для пакетных договоров мы отправляем отчет, если в этом месяце были работы, 
                        // но отчет за весь период действия договора
                     if( Запрос.Тема == "СКД" || Запрос.Тема == "ВКО" || Запрос.Тема == "ВЭО" )
                        this.ОтчетПоОрганизации( Запрос.ДатНач, ДатаКнц, Запрос.Дог, Организация, 0, Запрос.Орг_id, мПапка, пВидОтчКомм, пВидОтчДог );//0 означает не выводить отчет на экран
                     else
                        this.ОтчетПоОрганизации( ДатаНач, ДатаКнц, Запрос.Дог, Организация, 0, Запрос.Орг_id, мПапка, пВидОтчКомм, пВидОтчДог);
                  }
                  Счетчик++;
               }              
               this.ОтчетыОрганизациям( КаталогПрограммы() + "mailing" );
            }
         }
      }
      else
      {
         пВидОтчКомм = 0;
         this.Счетчик = 0;
         var Организация = "";
         if( ВнзДоговора != -1 ) //Определение орг. по id договора - общ. независимо от  точки вызова
         { 
            зДогСОрг.УстановитьПараметры( ВнзДоговора );
            Организация =  зДогСОрг.Следующий() ? зДогСОрг.Название : ""; 
         }                    
         Организация = Организация.replace(  new RegExp(" ",'g'), "_");
         Организация = Организация.replace(  new RegExp(",",'g'), "");
         Организация = Организация.replace(  new RegExp("\"",'g'), ""); //"
         this.дФормат = "Десятые";
         var ПВидОтчДог = 0;
         this.ФайлОтчета = отчеты.КаталогОтчета("ДДетализацияПоОрганизацииОбщий")+"SHABLON\\DO\\Детализация по организации.rptdesign";
         //  если в отчете указан фильтр по меткам
         if( фильтр != undefined )   
            if( НайтиВСтроке( вниз(фильтр), "tag_search" , 0) != -1 ) 
               this.мМетки = json_decode(фильтр);
         this.ОтчетПоОрганизации( ВДатНач, ВДатКнц, ВнзДоговора, ВОрганизация, 1, -1, "", пВидОтчКомм, ПВидОтчДог );
      }
   }
}

отчеты.Add( "ДетализацияПоОрганизации", "Детализация по организации" );
class ДетализацияПоОрганизации {
	constructor() {
		this.ФайлОтчета = отчеты.КаталогОтчета( "ДетализацияПоОрганизации" ) + "SHABLON\\DO\\Детализация_по_организации.ods";
	}

	ИмяОтчета() {
		return "Детализация по организации";
	}

	Формирователь_отчета() {
		var Счетчик = 0;
		var нпп = 0;
		var мРаботы = {};

		//todo var Д проверить с вебом и убрать пробелы из varенной 'Вызов из веба'
		var Д = {};
		if(this.Вызов_из_веба == undefined) {
			Д = СоздатьДиалог("Диалог - Отчет-детализация");
			Д.ДатНач = РабМес();//СледующийМесяц( РабДат(), 0 );
			Д.ДатКнц = Д.ДатНач.ПоследнееЧисло();
			if (!Д.Выполнить())
				throw "ReportBreak: Построение отчета прервано";
         
		}
		else {
			var зОргНаим = Query(`SELECT [Название] FROM ~Организации~ WHERE row_id=:1`, 1, "ID,S");
			зОргНаим.УстановитьПараметры(Number(ВОрганизация));
			var НазваниеОрганизации;
			while (зОргНаим.Следующий())
				НазваниеОрганизации = зОргНаим.Название;

			Д.ДатНач = ВДатНач;
			Д.ДатКнц = ВДатКнц;
			Д.Организация = НазваниеОрганизации;
			Д.Формат = ВФормат;
			Д.нзДоговора = Number(ВнзДоговора);
		}
      
		var ДОрганизацияРазбитое = Д.Организация.split(" - ");
      var Организация = ДОрганизацияРазбитое[1] != undefined ?ДОрганизацияРазбитое[1] : "";
		//Организация = Заменить(Организация, " ", "_");
      Организация = Организация.replace( new RegExp(" ",'g'), "_" );
		// Организация = Заменить(Организация, ",", "_" );
		//Организация = УдалитьИзСтроки(Организация, ",");
      Организация = Организация.replace( new RegExp(",",'g'), "" );
		//Организация = УдалитьИзСтроки(Организация, "\""); //"
      Организация = Организация.replace( new RegExp("\"",'g'), "" );

		var ВыходнойФайл;
		if(ЕстьСвойство( this.Запись, "Вызов из веба" ) == 0)
			ВыходнойФайл = отчеты.КаталогОтчета( "ДетализацияПоОрганизации" ) + "SHABLON\\DO\\" + Организация.toString() + "_" + ПодСтрока( Д.ДатНач.МесяцПрописью(), 1, 3) + Год(Д.ДатКнц) + ".ods";
		else {
			ВыходнойФайл = отчеты.КаталогОтчета( "ДетализацияПоОрганизации" ) + "SHABLON\\DO\\report.ods";
			//ВыходнойФайл = КаталогПрограммы() + "report.ods";
		}

		КопироватьФайл(this.ФайлОтчета, ВыходнойФайл);

		var Об = ПостроительОтчета("Open Office");
		Об.Имя(ВыходнойФайл);
		if (Д.Формат == "Десятые")
			Об.Источник("Данные", "нпп,A,Номер,A,Дата,A,Исполнитель,A,Часов,N,КОплате,N,ИтогоЧасов,N,ИтогоКОплате,N,СумИтогоКОплате,N,Затраты,N,ВидРаботы,A,Работа,M,Комментарии,M,Договор,A,ДатаКомментария,A");
		else
			Об.Источник("Данные", "нпп,A,Номер,A,Дата,A,Исполнитель,A,Часов,A,КОплате,A,ИтогоЧасов,N,ИтогоКОплате,A,СумИтогоКОплате,A,Затраты,N,ВидРаботы,A,Работа,M,Комментарии,M,Договор,A,ДатаКомментария,A");

		var зДанных = Query(`SELECT work.[row_id] [нзРаботы],
                                 hour.[row_id] [нзЧасов],
                                 card.[row_id] [нзЗаявки],
                                 card.[Номер] [НомерЗаявки],
                                 card.[СтороннийНомер] [СторНомерЗаявки],
                                 hour.[Дата ввода] [ДатаКомментария],
                                 work.[Дата выдачи] [ДатаРаботы],
                                 card.[Дата создания] [ДатаЗаявки],
                                 isp.[ФИО] [Исполнитель],
                                 sum(60*datepart(hour, hour.[Время работы]) + datepart(minute, hour.[Время работы])) [Часов],
                                 sum(60*datepart(hour, hour.[Время к оплате]) + datepart(minute, hour.[Время к оплате])) [КОплате],
                                 card.[ЗатратыФакт] [Затраты],
                                 kjob.[Категория] [ВидРаботы],
                                 convert( varchar(20), dog.[Номер])+'/'+dog.[Тема] [Договор],
                                 ISNULL(par1.[Значение],0) [АбонЧасы]
                            FROM ~ДО часы~ hour
                      INNER JOIN ~ДО задания~ work ON hour.[Часы-Задание]=work.[row_id]
                      INNER JOIN ~ДО карточки~ card ON work.[Задание-Карточка]=card.[row_id]
                      INNER JOIN ~Договор~ dog ON card.[Карточка-Договор]=dog.[row_id]
                      INNER JOIN ~Сотрудники~ isp ON isp.[row_id]=work.[Задание-Исполнитель]
                       LEFT JOIN ~ДО категории работ~ kjob ON hour.[Часы-Категория] = kjob.ROW_ID
                       LEFT JOIN ~Свойства~ par1 ON par1.[Параметры-Договор]=dog.[row_id]
                                           AND par1.[Виды-Параметры]=(SELECT TOP 1 [row_id] FROM ~Виды параметров~ WHERE [Название]='АБОН_ЧАСЫ' )
                                           AND par1.[ДатКнц] >= :1 and par1.[ДатНач] <= :2
                         WHERE hour.[Дата ввода] between :3 and :4
                               AND dog.[row_id]=:5
                        GROUP BY card.[row_id],work.[row_id],hour.[row_id],hour.[Дата ввода],isp.[ФИО],
                                 card.[ЗатратыФакт],kjob.[Категория],dog.[Номер],dog.[Тема],
                                 par1.[Значение],card.[СтороннийНомер],card.[Номер],work.[Дата выдачи],card.[Дата создания]
                        ORDER BY card.[номер] desc, card.[row_id] desc, work.[Дата выдачи] desc,work.[row_id] desc,hour.[Дата ввода] desc
                         `, 500, "D1,D,D2,D,DatN,D,DatK,D,Dog,S");

		var зТекстаРаботыСт = Query(`SELECT [Отметки] FROM ~ДО задания~ WHERE row_id=:1`, 1, "ID,S");

		var зТекстаРаботыНов = Query(`SELECT card.[Примечание]
                                    FROM ~ДО задания~ job
                                         JOIN ~ДО Карточки~ card ON job.[Задание-Карточка]=card.ROW_ID
                                    WHERE job.row_id=:1`, 1, "ID,S");
		var зКомментЧасов = Query(`SELECT [Примечание] FROM ~ДО часы~ WHERE row_id=:1`, 1, "ID,S");

		var СумИтогоКОплате = 0;
		var СумИтогоКОплате2 = 0;
		зДанных.УстановитьПараметры(Д.ДатНач, Д.ДатКнц, Д.ДатНач, Д.ДатКнц, Д.нзДоговора);
		var ИтогоРаботы = 0;
		var ИтогоКОплате = 0;
		while (зДанных.Следующий()) {

			ВывестиСтатус("Обработано работ " + Счетчик++);
			var Данные = {};

			var пНомерЗаявки = ( зДанных.НомерЗаявки ).toString() + (зДанных.СторНомерЗаявки != "" ? ("/" + зДанных.СторНомерЗаявки) : "");

			Форма["АбонЧасы"] = зДанных.АбонЧасы;
			Данные["Номер"] = пНомерЗаявки;
			Данные["Дата"] = зДанных.ДатаЗаявки.format("rusDateDashed");//ДатаРаботы
			Данные["Исполнитель"] = ФИО(зДанных.Исполнитель);

			зТекстаРаботыНов.УстановитьПараметры(зДанных.нзРаботы);
			if (зТекстаРаботыНов.Следующий()) {
				if (зТекстаРаботыНов.Примечание != "")
					Данные["кРабота"] = зТекстаРаботыНов.Примечание;
				else {
					зТекстаРаботыСт.УстановитьПараметры(зДанных.нзРаботы);
					Данные["кРабота"] = зТекстаРаботыСт.Следующий() ? зТекстаРаботыСт.Отметки : "";
				}
			}

			//затраты учитываются только один раз
			if (мРаботы[зДанных.нзЗаявки]  == undefined) {
				Данные["нпп"] = ++нпп;
				Данные["Затраты"] = зДанных.Затраты;
				мРаботы[зДанных.нзЗаявки] = 1;

				ИтогоРаботы = 0;
				ИтогоКОплате = 0;
				Данные["ИтогоЧасов"] = 0;
				Данные["ИтогоКОплате"] = 0;

			}
			else {
				Данные["нпп"] = "";
				Данные["Затраты"] = 0;
			}

			var ЧасовРаботы = parseInt(зДанных.Часов / 60);
			var МинутРаботы = (зДанных.Часов - ЧасовРаботы * 60).ЧислоСВедущимиНулями(2);
			var ЧасовКОплате = parseInt(зДанных.КОплате / 60);
			var МинутКОплате = (зДанных.КОплате - ЧасовКОплате * 60).ЧислоСВедущимиНулями(2);


			if (Д.Формат == "Десятые") {
				Данные["Часов"] = Окр(зДанных.Часов / 60, 0.01);
				Данные["КОплате"] = Окр(зДанных.КОплате / 60, 0.01);
			}
			else {
				Данные["Часов"] = ЧасовРаботы + ":" + МинутРаботы; //Окр(зДанных.Часов/60,0.1);
				Данные["КОплате"] = ЧасовКОплате + ":" + МинутКОплате;//Окр(зДанных.КОплате/60,0.1);
			}
			Данные["ВидРаботы"] = зДанных.ВидРаботы;//КодВНазваниеРаботы( зДанных.ВидРаботы );
			Данные["Договор"] = зДанных.Договор; //так то уже не используется

			Данные["ДатаКомментария"] = зДанных.ДатаКомментария;

         Данные["Комментарии"] = "";
         зКомментЧасов.УстановитьПараметры( зДанных.нзЧасов );
         if( зКомментЧасов.Следующий() )
            Данные["Комментарии"] = зКомментЧасов.Примечание;

			//подведем итоги по заявкам
			ИтогоРаботы += зДанных.Часов;
			ИтогоКОплате += зДанных.КОплате;

			var ИтогоЧасовРаботы = parseInt(ИтогоРаботы / 60);
			var ИтогоМинутРаботы = (ИтогоРаботы - ИтогоЧасовРаботы * 60).ЧислоСВедущимиНулями(2);
			var ИтогоЧасовКОплате = parseInt(ИтогоКОплате / 60);
			var ИтогоМинутКоплате = (ИтогоКОплате - ИтогоЧасовКОплате * 60).ЧислоСВедущимиНулями(2);

			if (Д.Формат == "Десятые") {
				Данные["ИтогоЧасов"] += Данные["Часов"];
				Данные["ИтогоКОплате"] += Данные["КОплате"];
			}
			else {
				Данные["ИтогоЧасов"] = ИтогоЧасовРаботы + ":" + ИтогоМинутРаботы; //Окр(зДанных.Часов/60,0.1);
				Данные["ИтогоКОплате"] = ИтогоЧасовКОплате + ":" + ИтогоМинутКоплате;//Окр(зДанных.КОплате/60,0.1);
			}
			//конечный итог по всем заявкам
			СумИтогоКОплате += Данные["КОплате"];
			СумИтогоКОплате2 += зДанных.КОплате;

			Об.Добавить("Данные", Данные);
		}

		if (Счетчик) {

			var СумИтогоЧасовКОплате = parseInt(СумИтогоКОплате2 / 60);
			var СумИтогоМинутКОплате = (СумИтогоКОплате2 - СумИтогоЧасовКОплате * 60).ЧислоСВедущимиНулями(2);
			if (Д.Формат == "Десятые")
				Форма["СумИтогоКОплате"] = СумИтогоКОплате;
			else
				Форма["СумИтогоКОплате"] = СумИтогоЧасовКОплате + ":" + СумИтогоМинутКоплате;//Окр(зДанных.КОплате / 60, 0.1);

			Форма["Организация"] = Д.Организация;
			Форма["Период"] = ( (Д.ДатНач == Д.ДатКнц) || (Д.ДатКнц == new Date(0,0,0) )  )  ? Д.ДатНач.format("rusDateDashed") :
														Д.ДатНач.format("rusDateDashed") + " - " + Д.ДатКнц.format("rusDateDashed");
			Форма["Исполнитель"] = Пользователь().ФИО;
			Форма["РабДат"] = День(РабДат()) + " " + МесяцВРодП(РабДат()) + " " + Год(РабДат()) + "г. " + ТекВремя();
			Об.Данные("Форма", Форма);

			ВывестиСтатус("Идет вывод документа OpenOffice... ");
			Об.Отчет();
		}
		else {
			if( ЕстьСвойство( this.Запись, "Вызов из веба" ) == 0 )
				Сообщить("По данному договору нет отмеченных часов");
			else {
				Форма["Организация"] = Д.Организация;
				Форма["Период"] = ( (Д.ДатНач == Д.ДатКнц) || (Д.ДатКнц == new Date(0, 0, 0))  ) ? Д.ДатНач.format("rusDateDashed") :
														Д.ДатНач.format("rusDateDashed") + " - " + Д.ДатКнц.format("rusDateDashed");
				Форма["Исполнитель"] = Пользователь().ФИО;
				Форма["РабДат"] = День(РабДат()) + " " + МесяцВРодП(РабДат()) + " " + Год(РабДат()) + "г. " + ТекВремя();
				Об.Данные("Форма", Форма);
				Об.Отчет();
			}
		}
	}
}

отчеты.Add( "ОрганизацииПоПараметрам", "Организации по параметрам" );
class ОрганизацииПоПараметрам
{
	constructor()
    {
        this.ФайлОтчета = отчеты.КаталогОтчета( "ОрганизацииПоПараметрам" )+"SHABLON\\DO\\Организации_по_параметрам.ods";
    }
	
	ИмяОтчета()
	{
	    return "Организации по параметрам";
	}
	
	Формирователь_отчета()
	{
		var Д = СоздатьДиалог( "Организации по параметрам" );
		var мЗначений = {};
		var мВерсий = {};
		var зПараметра = Query( `SELECT zp.Значение
								  FROM ~Организации~ org 
									  JOIN ~Значения параметров~ zp ON zp.[Орг-Параметры]=org.row_id
									  JOIN ~Параметры~ p ON zp.[Параметр-Значения]=p.row_id
								  WHERE p.Имя = 'ВЕРСИЯ_КОМПЛЕКСА' AND zp.Тип<>2`, 500 );
		зПараметра.УстановитьПараметры();
		var версия = "";
		var позНач = -1;
		var позКнц = -1;
		while( зПараметра.Следующий() )
		{
         позНач = зПараметра.Значение.indexOf("(");
			if( позНач != -1 )
			{
				позКнц = зПараметра.Значение.indexOf(")");
				версия = зПараметра.Значение.substr(позНач + 1, позКнц - позНач - 1 );
			}
			else if( зПараметра.Значение != "" )
				версия = "Другая";
			else
				версия = "_";
			if( мВерсий[версия] !== undefined )
				мВерсий[версия].колво = мВерсий[версия].колво + 1;
			else
			{
			мВерсий[версия] = {};
				мВерсий[версия].колво = 1;
				мВерсий[версия].версия = версия;
			}
		}
		var инд = 0;
		//ДляВсех( Элементов(мВерсий, верс) )
			//мЗначений[инд++] = (мВерсий[верс].версия != "_" ? мВерсий[верс].версия : "<Пусто>") + " (кол-во: " + Текст( мВерсий[верс].колво )+ ")";
		
		for( var верс in мВерсий)
      {
         if( !мВерсий.hasOwnProperty(верс) ) continue;
			мЗначений[инд++] = (мВерсий[верс].версия != "_" ? мВерсий[верс].версия : "<Пусто>") + " (кол-во: " + ( мВерсий[верс].колво ).toString()+ ")";
      }
			
		ЗаполнитьВыпадающийСписок( "Организации по параметрам", "Параметр", мЗначений );
		if( !Д.Выполнить() )
			throw "ReportBreak: Построение отчета прервано";

		var Счетчик = 0;
		var Об = ПостроительОтчета( "Open Office" );
		Об.Имя( this.ФайлОтчета );    
		Об.Источник("Данные", "нпп,N,Наз,A,Орг,A,Вер,A,Дат,A");

		var пВерс = Д.Параметр.substr( 0, Д.Параметр.indexOf(" (кол-во: ") );
		var мДанные = {};
		var стрЗап = `SELECT org.Название, org.Наименование, zp.Значение, zp.ДатНач
							   FROM ~Организации~ org
									JOIN ~Значения параметров~ zp on zp.[Орг-Параметры] = org.ROW_ID
									JOIN ~Параметры~ p on zp.[Параметр-Значения] = p.row_id
							   WHERE zp.Тип<>2 and p.Имя = 'ВЕРСИЯ_КОМПЛЕКСА' AND `;
		if( пВерс == "<Пусто>" ) // выбрана пустая версия
			стрЗап += "zp.Значение like ''";
		else if( пВерс == "Другая" ) // выбрана другая версия
			стрЗап += "zp.Значение not like '' and zp.Значение not like '%(%'";
		else // выбрана версия
			стрЗап += "zp.Значение like '%(" + пВерс + ")'";

		var запрОрг = Query( стрЗап, 100 );
		запрОрг.УстановитьПараметры();

		while( запрОрг.Следующий() )
		{
			мДанные.нпп = ++Счетчик;
			мДанные.Наз = запрОрг.Название;
			мДанные.Орг = запрОрг.Наименование;
			мДанные.Вер = запрОрг.Значение;
			мДанные.Дат = запрОрг.ДатНач;
			Об.Добавить("Данные", мДанные);
		}

		Об.Отчет(); 
	}
}

отчеты.Add( "ОтработаноПоСКД", "Отработано по СКД" );
class ОтработаноПоСКД
{
	constructor()
    {
        this.ФайлОтчета = отчеты.КаталогОтчета( "ОтработаноПоСКД" )+"SHABLON\\DO\\Отчет_по_СКП.ods";
    }
	
	ИмяОтчета()
	{
	    return "Отработано по СКД";
	}

	Формирователь_отчета()
	{
		var Счетчик = 0;
		var Об = ПостроительОтчета("Open Office");
		Об.Имя( this.ФайлОтчета );    
		Об.Источник("Данные", `Организация,A,Договор,A,ДатаДог,A,Часы_дог,N,ОтрабЧасы,N,ЧасыКОплате,N,Остаток_дог,N,План_мес1,N,Выстав_мес1,N,План_мес2,N,Выстав_мес2,N,План_мес3,N,Выстав_мес3,N,План_мес4,N,Выстав_мес4,N,План_мес1,N,Выстав_мес1,N,План_мес2,N,Выстав_мес2,N,План_мес3,N,Выстав_мес3,N,План_мес4,N,Выстав_мес4,N,План_мес5,N,Выстав_мес5,N,План_мес6,N,Выстав_мес6,N,План_мес7,N,Выстав_мес7,N,План_мес8,N,Выстав_мес8,N,План_мес9,N,Выстав_мес9,N,План_мес10,N,Выстав_мес10,N,План_мес11,N,Выстав_мес11,N,План_мес12,N,Выстав_мес12,N`);

		var зДанных = Query(`SELECT dog.[row_id] [нзДоговора],
									 org.[Название] [Организация],
									 convert(varchar(10),dog.[Номер])+'/'+dog.[Тема] [Договор],
									 dog.[Начало договора] [Дата],
									 dog.[Сумма]    [СуммаДоговора],
									 sum(60*datepart(hour, hour.[Время работы]) + datepart(minute, hour.[Время работы])) [ВремяРаботы],
									 sum(60*datepart(hour, hour.[Время к оплате]) + datepart(minute, hour.[Время к оплате])) [ВремяКОплате],
									 sum(card.[ЗатратыФакт]) [ЗатратыФакт],
									 par1.[Значение] [АбонЧасы],
									 ISNULL( par2.[Значение], 0 ) [ЕжемПлатеж]
								FROM ~Договор~ dog
						  INNER JOIN ~Организации~ org ON dog.[Грузополучатель]=org.[row_id]
						   LEFT JOIN ~ДО карточки~ card ON card.[Карточка-Договор]=dog.[row_id]
						   LEFT JOIN ~ДО задания~ work ON work.[Задание-Карточка]=card.[row_id]
						   LEFT JOIN ~ДО часы~ hour ON hour.[Часы-Задание]=work.[row_id]
						   LEFT JOIN ~Свойства~ par1 ON par1.[Параметры-Договор]=dog.[row_id] 
																   AND par1.[Виды-Параметры]=(SELECT TOP 1 [row_id] FROM ~Виды параметров~ WHERE [Название]='АБОН_ЧАСЫ' )
																   AND par1.[ДатКнц] >= :1 and par1.[ДатНач] <= :2
						   LEFT JOIN ~Свойства~ par2 ON par2.[Параметры-Договор]=dog.[row_id] 
																   AND par2.[Виды-Параметры]=(SELECT TOP 1 [row_id] FROM ~Виды параметров~ WHERE [Название]='ЕЖЕМПЛАТЕЖ' )
																   AND par2.[ДатКнц] >= :3 and par2.[ДатНач] <= :4
							   WHERE dog.[Тема]=:5 and ( (dog.[Окончание]>=:6 and dog.[Окончание]<=:7 ) or dog.[Окончание] IS NULL) 
							GROUP BY dog.[row_id],org.[Название], dog.[Номер], dog.[Тема],dog.[Начало договора],dog.[Сумма], par1.[Значение], par2.[Значение]
							ORDER BY org.[Название]
							 `,500,"d1,D,d2,D,d3,D,d4,D,Tema,A,DatN,D,DatK,D");

		var зЧасыПоМес = Query(`SELECT datepart(year,hour.[Дата ввода]) [Год],
										datepart(month,hour.[Дата ввода]) [Месяц],
									   ISNULL( sum(60*datepart(hour, hour.[Время к оплате]) + datepart(minute, hour.[Время к оплате])) ,0) [ВремяКОплате]
								  FROM ~ДО Часы~ hour
							 LEFT JOIN ~ДО задания~ work ON hour.[Часы-Задание]=work.[row_id]
							 LEFT JOIN ~ДО карточки~ card ON work.[Задание-Карточка]=card.[row_id]
							 LEFT JOIN ~Договор~ dog ON card.[Карточка-Договор]=dog.[row_id]
								 WHERE dog.[row_id]=:1
									 and datepart(year,hour.[Дата ввода])  IS NOT NULL
									 and datepart(month,hour.[Дата ввода]) IS NOT NULL
							  GROUP BY datepart(year,hour.[Дата ввода]),datepart(month,hour.[Дата ввода])
							  ORDER BY 1,2 /*по году, по месяцу*/
							   `,1,"Dog,S");

		var ГодОтчета = РабМес().getFullYear();
		var резСпросить = Спросить("Введите год построения отчета", ГодОтчета);
		if( !резСпросить )
			throw "ReportBreak: Построение отчета прервано";

		ГодОтчета = резСпросить[0];

		var ДатНач = new Date( ГодОтчета, 0, 1 );
		var ДатКнц = new Date( ГодОтчета, 11, 31 );

		//-- Если год отчета = текущий год, то выводим только договора не закрытые на сегодня
		if( ДатНач.getTime() < РабДат().getTime() && ДатКнц.getTime() > РабДат().getTime() )
			ДатНач = new Date();

		зДанных.УстановитьПараметры( ДатНач, ДатКнц, ДатНач, ДатКнц, "СКД", ДатНач, ДатКнц );
		
		while( зДанных.Следующий() )
		{
			ВывестиСтатус("Обработано договоров "+ Счетчик++);

			var Данные = {};
			Данные["Организация" ] = зДанных.Организация;
			Данные["Договор"     ] = зДанных.Договор;
			Данные["ДатаДог"     ] = зДанных.Дата.format("rusDateDashed");
			Данные["Часы_дог"    ] = зДанных.АбонЧасы;
			Данные["ОтрабЧасы"   ] = (зДанных.ВремяРаботы/60).toFixed(2);
			Данные["ЧасыКОплате" ] = (зДанных.ВремяКОплате/60).toFixed(2);
			Данные["Остаток_дог" ] = Number(зДанных.АбонЧасы) - (зДанных.ВремяКОплате/60).toFixed(2);

			//Есть договора заключенные в декабре 2010 года на 2011 год, и по ним уже прошли часы за декабрь
			var Декабрь2010 = зДанных.Дата.getTime() >= (new Date(2010,11,1)).getTime() && зДанных.Дата.getTime() <= (new Date(2010,11,31)).getTime() ? 1 : 0;
			//var КолМес = Декабрь2010 ? 11 : 12 - зДанных.Дата.getMonth();

				//Собираем отработанное время по месяцам
			var мЧасы_мес = {};
			зЧасыПоМес.УстановитьПараметры( зДанных.нзДоговора );
			while( зЧасыПоМес.Следующий() )
			{
				if( Декабрь2010 && зЧасыПоМес.Месяц == 12 &&  зЧасыПоМес.Год == 2010 )
				{
					if( мЧасы_мес[1] == undefined )
						мЧасы_мес[1] = {};
               if( мЧасы_мес[1].Время == undefined )
                  мЧасы_мес[1].Время = 0;
					мЧасы_мес[1].Время += (зЧасыПоМес.ВремяКОплате/60).toFixed(2);
				}
				else
				{
					if( мЧасы_мес[зЧасыПоМес.Месяц] == undefined )
						мЧасы_мес[зЧасыПоМес.Месяц] = {};
               if( мЧасы_мес[зЧасыПоМес.Месяц].Время == undefined )
                  мЧасы_мес[зЧасыПоМес.Месяц].Время = 0;
					мЧасы_мес[зЧасыПоМес.Месяц].Время += (зЧасыПоМес.ВремяКОплате/60).toFixed(2);
				}
			}

				//---Зануляем месяца, в которых ни минуты не отработано
			var i = 13;
			while( --i > 0 )
         {
            if( мЧасы_мес[i] == undefined )
               мЧасы_мес[i] = {};
            мЧасы_мес[i].Время = 0;
         }

				//---Собираем время с нарастающим итогом (время отработанное за год до месяца i)
			i = 13;
			while( --i > 0 )
				for( var инд_мес in мЧасы_мес )
				{
					if( мЧасы_мес[i] == undefined )
						мЧасы_мес[i] = {};
               if( мЧасы_мес[i].ВремяОбщ == undefined )
                  мЧасы_мес[i].ВремяОбщ = 0;
					мЧасы_мес[i].ВремяОбщ += инд_мес <= i ? мЧасы_мес[инд_мес].Время : 0;
				}

			//---Зануляем varенные для вывода в ОО
			i = 13;
			while( --i > 0 )
				Данные["План_мес"+i] = Данные["Выстав_мес"+i] = 0;

			//---Заполняем столбцы по всем месяцам
			i = 0;
			while( ++i < 13 )
			{
				var ii = 0;
				var ВыставленоДо = 0;
				while( ++ii < i )
					ВыставленоДо += Данные["Выстав_мес"+ii];

            var ОстатокНаТотМесяц = Number(зДанных.АбонЧасы) - мЧасы_мес[i].ВремяОбщ;
				Данные["План_мес"+i] = зДанных.ЕжемПлатеж;
										  //отработано больше часов, чем по договору
				Данные["Выстав_мес"+i] = ОстатокНаТотМесяц < 0 ? (-1)*ОстатокНаТотМесяц - ВыставленоДо : 0;
			}

			Об.Добавить("Данные", Данные);
		} 

		var Форма = {};
		Форма["КолДоговоров"] = Счетчик;
		Об.Данные( "Форма", Форма);

		Об.Отчет(); 
	}
}

отчеты.Add( "ОтработаноПоСотрудникам", "Отработано по сотрудникам" );
class ОтработаноПоСотрудникам
{
	constructor()
    {
        this.ФайлОтчета;
    }
	
	ИмяОтчета()
	{
	    return "Отработано по сотрудникам";
	}

	Формирователь_отчета()
	{
      var Об;
      var пИнд;
		var Данные = {};
		var мДанные = {};
		var д = СоздатьДиалог( "Отработано по сотрудникам" );
		д.ДатНач = РабМес();//СледующийМесяц( РабДат(), 0 );
		д.ДатКнц = д.ДатНач.ПоследнееЧисло();
		if( !д.Выполнить() )
			throw "ReportBreak: Построение отчета прервано";

		var пФильтр = ПрочитатьПолеСвязи(д, "ТолькоВнедр"); // фильтр "только внедр/сопр"
		var пВариант = 0;
		if( ПрочитатьПолеСвязи(д, "Детализация") == 1 ) // детализация
			пВариант += 1;
		if( ПрочитатьПолеСвязи(д, "Кратк") == 1 )       // краткий
			пВариант += 2;
  
		// блок проверки на необходимость группировки по звеньям (рабочим группам)
		var пCортировка  = "";
		var пФильтрЗвено = "";
		var пГрупЗвено   = ПрочитатьПолеСвязи(д, "Звено");
		var пФЗвено = 0;
		if( пГрупЗвено )
		{
			пФЗвено = ПрочитатьПолеСвязи(д, "СвоеЗвено");

			var пНомЗвена = Пользователь().Звено;
			if( пФЗвено == 1 && пНомЗвена > 0 ) // если звено указано, то делаем фильтр
				пФильтрЗвено = ` and sotr.Звено = ` + пНомЗвена;
		}

		var пФКатег = ПрочитатьПолеСвязи(д, "Катег");
      var Счетчик = 0;

// ------------------------- Обычный -------------------------
		if( пВариант == 0 )
		{
			this.ФайлОтчета = отчеты.КаталогОтчета( "ОтработаноПоСотрудникам" )+"SHABLON\\DO\\Отработано_по_сотрудникам.ods";
			//если строим по всем группируя - используем шаблон с подитогом
			if((пГрупЗвено && !пФЗвено) || пФКатег)
				this.ФайлОтчета = отчеты.КаталогОтчета( "ОтработаноПоСотрудникам" )+"SHABLON\\DO\\Отработано_по_сотрудникам_гр.ods";

			var ошибка = 0;
			Об = ПостроительОтчета( "Open Office" );
			Об.Имя( this.ФайлОтчета );
			Об.Источник( "Данные", "Сотрудник,A,ЧасовВсего,N,ЧасовДоп,N,ЧасовКОплате,N,ПродВсего,N,СопрВсего,N,СопрОплата,N,ВнедрВсего,N,ВнедрОплата,N,РазвитиеРаб,N,КарьераРаб,N,ОтдыхРаб,N,ОшибкиРаб,N,ОшибкиПол,N,Разное,N,Звено,N,текст_заголовок,A,текст_итог,A" );
			Об.Источник( "Ошибки", "Сотрудник,A,ТемаДог,A,Отработано,N,КОплате,N" );

			var зДанных = BufferedReader(`;WITH Hier_down_Kat AS(
                                         SELECT row_id, Аналитики, Тема [КатегорияДог], cast('' as varchar(256)) [ТемаДог], Аналитики_ADD
                                         FROM ~Аналитики~ WHERE Аналитики=-10
                                         UNION ALL 
                                         SELECT child.row_id, child.Аналитики, Hier_down_Kat.КатегорияДог, child.Тема [ТемаДог], child.Аналитики_ADD
                                         FROM ~Аналитики~ child
                                              JOIN Hier_down_Kat ON Hier_down_Kat.ROW_ID=child.Аналитики
                                      )
                                      SELECT sotr.[ФИО] [Сотрудник], sotr.ФлагВнедр, Hier_down_Kat.КатегорияДог, kjob.Категория, dog.Тема [ТемаДоговора], hour.Аналитика1,
                                         60*DATEPART(hour, hour.[Время работы]) + DATEPART(minute, hour.[Время работы]) [ВремяРаботы],
                                         60*DATEPART(hour, hour.[Время к оплате]) + DATEPART(minute, hour.[Время к оплате]) [ВремяКОплате],
                                         sotr.Звено, sotr.Признаки, sotr.Категория катег_сотр 
                                      FROM ~ДО часы~ hour
                                           JOIN ~ДО задания~ work ON hour.[Часы-Задание]=work.[row_id]
                                           JOIN ~ДО карточки~ card ON work.[Задание-Карточка]=card.[row_id]
                                           JOIN ~Договор~ dog ON card.[Карточка-Договор]=dog.[row_id]
                                           JOIN ~Сотрудники~ sotr ON sotr.[row_id]=work.[Задание-Исполнитель]
                                           JOIN ~ДО категории работ~ kjob ON hour.[Часы-Категория]=kjob.ROW_ID
                                           JOIN Hier_down_Kat on dog.Тема LIKE Hier_down_Kat.ТемаДог AND Hier_down_Kat.Аналитики_ADD=1
                                      WHERE hour.[Дата ввода] BETWEEN :1 AND :2 ` + пФильтрЗвено + `
                                      ORDER BY sotr.[ФИО]`, 500, "DatN,D,DatK,D" );

			зДанных.УстановитьПараметры( д.ДатНач, д.ДатКнц );
			while( зДанных.Следующий() )
			{
				if( !пФильтр || зДанных.ФлагВнедр%2 == 1 )
				{
					var пИнд;
					// если подняты флаги группировок формируем индекс хитро
					// добавлен какой-то сложный индекс, чтобы массив отсортировался по звеньям от руководителя группы, а далее по фио
					if(пГрупЗвено)
						пИнд = ( 100 * зДанных.Звено).toString() + "_" +  ( зДанных.Признаки == 1 ? 0 : 1 ).toString()  + "_" + зДанных.Сотрудник;
					else if( пФКатег )
						пИнд = (зДанных.катег_сотр).ЧислосВедущимиНулями(3) + "_" + зДанных.Сотрудник;
					else
						пИнд = зДанных.Сотрудник;

               //пИнд = пГрупЗвено ? Текст( 100 * зДанных.Звено) + "_" +  Текст( зДанных.Признаки == 1 ? 0 : 1 )  + "_" + зДанных.Сотрудник : зДанных.Сотрудник; // добавлен какой-то сложный индекс, чтобы массив отсортировался по звеньям от руководителя группы, а далее по фио
					//пИнд = пГрупЗвено ? Текст( 100 * зДанных.Звено) + "_" +  Текст( зДанных.Признаки == 1 ? 0 : 1 )  + "_" + зДанных.Сотрудник : зДанных.Сотрудник; // добавлен какой-то сложный индекс, чтобы массив отсортировался по звеньям от руководителя группы, а далее по фио

					//var мДанные = {};
					var мОшибки = {};
					if( мДанные[пИнд] == undefined )
						мДанные[пИнд] = {'РазвитиеОпл': 0,'СопрРаб':0, 'ОшибкиПол':0, 'КарьераРаб':0, 'КарьераОпл':0, 'ОтдыхРаб':0,
											'ОтдыхОпл':0, 'ПродРаб':0, 'СопрОпл':0, 'ВнедрРаб':0, 'ВнедрОпл':0, 'РазноеРаб':0,
											'РазноеОпл':0, 'ОшибкиРаб':0, 'ИтогоРаб':0, 'ИтогРасп':0, 'ИтогДоп':0, 'ИтогоОпл':0};
					switch( зДанных.КатегорияДог ) // отработанное время считаем вместе с ошибками
					{
						case "КИнсталляция": // "СПП", "СИ"
						{
							мДанные[пИнд].РазвитиеОпл += зДанных.ВремяКОплате;
						}
							break;
						case "ККарьера": // "СК":
						{
							if( зДанных.Категория == "Политика" )
							{
								мДанные[пИнд].СопрРаб    += зДанных.ВремяРаботы;
								//мДанные[пИнд].СопрОпл    += зДанных.ВремяКОплате;
								// политику пишем в ошибки для отображения
								мДанные[пИнд].ОшибкиПол += зДанных.ВремяКОплате;
							}
							else
							{
								мДанные[пИнд].КарьераРаб  += зДанных.ВремяРаботы;
								мДанные[пИнд].КарьераОпл  += зДанных.ВремяКОплате;
							}
						}
							break;
						case "КОтдых": // "СО":
						{
							мДанные[пИнд].ОтдыхРаб    += зДанных.ВремяРаботы;
							мДанные[пИнд].ОтдыхОпл    += зДанных.ВремяКОплате;
						}
							break;
						case "КПродажа":
						{
							мДанные[пИнд].ПродРаб    += зДанных.ВремяРаботы;
						}
							break;
						case "КСопровождение":
						{
							мДанные[пИнд].СопрРаб    += зДанных.ВремяРаботы;
							мДанные[пИнд].СопрОпл    += зДанных.ВремяКОплате;
						}
							break;
						case "КВнедрение":
						{
							мДанные[пИнд].ВнедрРаб   += зДанных.ВремяРаботы;
						  	мДанные[пИнд].ВнедрОпл   += зДанных.ВремяКОплате;
						}
							break;
						default:
						{
							мДанные[пИнд].РазноеРаб  += зДанных.ВремяРаботы;
							мДанные[пИнд].РазноеОпл  += зДанных.ВремяКОплате;

							var пИнд1 = пИнд + зДанных.ТемаДоговора;
							мОшибки[пИнд1] = {'Отработано':0, 'КОплате':0};
							мОшибки[пИнд1].Сотрудник   = зДанных.Сотрудник;
							мОшибки[пИнд1].ТемаДог     = зДанных.ТемаДоговора;
							мОшибки[пИнд1].Отработано += зДанных.ВремяРаботы;
							мОшибки[пИнд1].КОплате    += зДанных.ВремяКОплате;
						}
					}
					if( зДанных.Категория.substr( 0, 6 ) == "Ошибки" )
						мДанные[пИнд].ОшибкиРаб += зДанных.ВремяРаботы;
					мДанные[пИнд].Сотрудник = зДанных.Сотрудник;
					мДанные[пИнд].ИтогоРаб += зДанных.ВремяРаботы;
					if( зДанных.Аналитика1%4 < 2 ) // расписание
						мДанные[пИнд].ИтогРасп += зДанных.ВремяРаботы;
					else // аккордные работы
						мДанные[пИнд].ИтогДоп += зДанных.ВремяРаботы;
					//if( зДанных.Тема != "СО" )
					if( зДанных.КатегорияДог != "КОтдых" && Вниз(зДанных.Категория) != "профрост" )
						мДанные[пИнд].ИтогоОпл += зДанных.ВремяКОплате;
				}
			}

			if( мДанные.length > 0 )
			{
            var мДанныеСортированные = Object.keys(мДанные).sort();
				for( var инд_д of мДанныеСортированные )
				{
               if( !мДанные.hasOwnProperty(инд_д) ) continue;
					//если есть группировка по звеньям отделяем звенья друг от друга пустыми строками
					//var Данные = {};
					var пИндЗвена = "";
					if(пГрупЗвено || пФКатег)
					{
						var мИнд = инд_д.split("_");
						//Разбить(инд_д,"_",мИнд);
						пИндЗвена = мИнд[0] != undefined ? мИнд[0] : "";
						var пИндТекГр = пИндЗвена;
					}
					Данные["Сотрудник"   ] = мДанные[инд_д].Сотрудник != undefined ? мДанные[инд_д].Сотрудник : 0;
					Данные["РазвитиеРаб" ] = ( (мДанные[инд_д].РазвитиеОпл != undefined ? мДанные[инд_д].РазвитиеОпл : 0)/60 ).toFixed(1);
					Данные["КарьераРаб"  ] = ( (мДанные[инд_д].КарьераРаб != undefined ? мДанные[инд_д].КарьераРаб : 0)/60 ).toFixed(1);
					Данные["ОтдыхРаб"    ] = ( (мДанные[инд_д].ОтдыхРаб != undefined ? мДанные[инд_д].ОтдыхРаб : 0)/601 ).toFixed(1);
					Данные["ПродВсего"   ] = ( (мДанные[инд_д].ПродРаб != undefined ? мДанные[инд_д].ПродРаб : 0)/60 ).toFixed(1);
					Данные["СопрВсего"   ] = ( (мДанные[инд_д].СопрРаб != undefined ? мДанные[инд_д].СопрРаб : 0)/60 ).toFixed(1);
					Данные["СопрОплата"  ] = ( (мДанные[инд_д].СопрОпл != undefined ? мДанные[инд_д].СопрОпл : 0)/60 ).toFixed(1);
					Данные["ВнедрВсего"  ] = ( (мДанные[инд_д].ВнедрРаб != undefined ? мДанные[инд_д].ВнедрРаб : 0)/60 ).toFixed(1);
					Данные["ВнедрОплата" ] = ( (мДанные[инд_д].ВнедрОпл != undefined ? мДанные[инд_д].ВнедрОпл : 0)/60 ).toFixed(1);
					Данные["ЧасовВсего"  ] = ( (мДанные[инд_д].ИтогоРаб != undefined ? мДанные[инд_д].ИтогоРаб : 0)/60 ).toFixed(1);
					Данные["ЧасовРасп"   ] = ( (мДанные[инд_д].ИтогРасп != undefined ? мДанные[инд_д].ИтогРасп : 0)/60 .toFixed(1));
					Данные["ЧасовДоп"    ] = ( (мДанные[инд_д].ИтогДоп != undefined ? мДанные[инд_д].ИтогДоп : 0)/60 ).toFixed(1);
					Данные["ЧасовКОплате"] = ( (мДанные[инд_д].ИтогоОпл != undefined ? мДанные[инд_д].ИтогоОпл : 0)/60 ).toFixed(1);
					Данные["ОшибкиРаб"   ] = ( (мДанные[инд_д].ОшибкиРаб != undefined ? мДанные[инд_д].ОшибкиРаб : 0)/60 ).toFixed(1);
					Данные["ОшибкиПол"   ] = ( (мДанные[инд_д].ОшибкиПол != undefined ? мДанные[инд_д].ОшибкиПол : 0)/60 ).toFixed(1);
					Данные["Разное"      ] = ( (мДанные[инд_д].РазноеРаб != undefined ? мДанные[инд_д].РазноеРаб : 0)/60 ).toFixed(1);
					Данные["Звено"       ] = пИндЗвена;
					if(пФКатег)
					{
						Данные["текст_заголовок"] = "Категория " + Number(пИндЗвена);
					    Данные["текст_итог"]      = "Всего по категории " + Number(пИндЗвена);
					}
					if(пГрупЗвено)
					{
						Данные["текст_заголовок"] = "Звено " + Number(пИндЗвена)/100;
					   Данные["текст_итог"]      = "Всего по звену " + Number(пИндЗвена)/100;
					}

            		Об.Добавить( "Данные", Данные );
         	}

            	// выводим неучтенные часы в отчете
				for( let инд_д in мОшибки )
				{
               if( !мОшибки.hasOwnProperty(инд_д) ) continue;
					var Ошибки = {};
					Ошибки["Сотрудник" ] = мОшибки[инд_д].Сотрудник != undefined ? мОшибки[инд_д].Сотрудник : "";
					Ошибки["ТемаДог"   ] = мОшибки[инд_д].ТемаДог != undefined ? мОшибки[инд_д].ТемаДог : "";
					Ошибки["Отработано"] = ( (мОшибки[инд_д].Отработано != undefined ? мОшибки[инд_д].Отработано : 0)/60 ).toFixed(1);
					Ошибки["КОплате"   ] = ( (мОшибки[инд_д].КОплате != undefined ? мОшибки[инд_д].КОплате : 0)/60 ).toFixed(1);
					Об.Добавить( "Ошибки", Ошибки );
				}

				var Форма = {};
				Форма["Период"] = (д.ДатНач.equals( д.ДатКнц ) || д.ДатКнц.isEmpty()) ? д.ДатНач.format("rusDateDashed") :
                                                                     д.ДатНач.format("rusDateDashed") + " - " + д.ДатКнц.format("rusDateDashed");
				Форма["НазваниеОтчета"] = "Отчет о сотрудниках" + (Размер(мОшибки) > 0 ? "  (Данные не корректны)" : "" );
				//Форма["Тема"  ] = Тема;
				Об.Данные( "Форма", Форма );

				Об.Отчет();
      		}
			else
				Сообщить( "Нет данных для отчета" );
		}
// ------------------------- С детализацией -------------------------
		else if( пВариант == 1 )
		{
			this.ФайлОтчета = отчеты.КаталогОтчета( "ОтработаноПоСотрудникам" )+"SHABLON\\DO\\Отработано_по_сотрудникам_детально.rptdesign";
			//если строим по всем группируя - используем шаблон с подитогом
         
			if((пГрупЗвено && !пФЗвено) || пФКатег)
			{
				throw "ReportBreak: Этот отчет пока не реализован!";
				this.ФайлОтчета = отчеты.КаталогОтчета( "ОтработаноПоСотрудникам" )+"SHABLON\\DO\\Отработано_по_сотрудникам_детально_гр.ods"
			}
      
			Счетчик = 0;
			Об = ПостроительОтчета( "Birt" );
			Об.УстановитьСвойство( "ФОРМАТ", "xls" );
			Об.Имя( this.ФайлОтчета );
			Об.Источник( "Отчет", `НазваниеОтчета,A,Период,A` );
			Об.Источник( "ВидРабСопр", `caption,A,index,A` );
			Об.Источник( "СопрИтог", `caption,A,index,A` );
			Об.Источник( "ВидРабВнед", `caption,A,index,A` );
			Об.Источник( "ВнедИтог", `caption,A,index,A` );
			Об.Источник( "ВидРабИнст", `caption,A,index,A` );
			Об.Источник( "ИнстИтог", `caption,A,index,A` );
			Об.Источник( "ВидРабКар", `caption,A,index,A` );
			Об.Источник( "КарИтог", `caption,A,index,A` );
			Об.Источник( "ВидРабОтд", `caption,A,index,A` );
			Об.Источник( "ОтдИтог", `caption,A,index,A` );
			Об.Источник( "ВидРабПрод", `caption,A,index,A` );
			Об.Источник( "ПродИтог", `caption,A,index,A` );
			Об.Источник( "ВидРабПтр", `caption,A,index,A` );
      
			var стрВидРаб = "";
			var мЗапись = {};
			var Таблица = {};
                          
      		var зДанных = BufferedReader(`;WITH Hier_down_Kat AS(
                                         SELECT row_id, Аналитики, Тема [КатегорияДог], cast('' as varchar(256)) [ТемаДог], Аналитики_ADD
                                         FROM ~Аналитики~ WHERE Аналитики=-10
                                         UNION ALL 
                                         SELECT child.row_id, child.Аналитики, Hier_down_Kat.КатегорияДог, child.Тема [ТемаДог], child.Аналитики_ADD
                                         FROM ~Аналитики~ child
                                              JOIN Hier_down_Kat ON Hier_down_Kat.ROW_ID=child.Аналитики
                                      )
                                      SELECT sotr.[ФИО] [Сотрудник],sotr.ФлагВнедр, Hier_down_Kat.КатегорияДог, kjob.Категория, kjob.ROW_ID [ИдВид],
                                           dog.Тема [ТемаДоговора], card.row_id карточка,
                                           sum(60*datepart(hour, hour.[Время работы]) + datepart(minute, hour.[Время работы])) [ВремяРаботы],
                                           sum(60*datepart(hour, hour.[Время к оплате]) + datepart(minute, hour.[Время к оплате])) [ВремяКОплате],
                                           hour.Аналитика1,sotr.Звено, sotr.Признаки, sotr.Категория катег_сотр
                                      FROM ~ДО часы~ hour
                                         JOIN ~ДО задания~ work ON hour.[Часы-Задание]=work.[row_id]
                                         JOIN ~ДО карточки~ card ON work.[Задание-Карточка]=card.[row_id]
                                         JOIN ~Договор~ dog ON card.[Карточка-Договор]=dog.[row_id]
                                         JOIN ~Сотрудники~ sotr ON sotr.[row_id]=work.[Задание-Исполнитель]
                                         JOIN ~ДО категории работ~ kjob ON hour.[Часы-Категория]=kjob.ROW_ID
                                         JOIN Hier_down_Kat on dog.Тема LIKE Hier_down_Kat.ТемаДог AND Hier_down_Kat.Аналитики_ADD=1
                                      WHERE hour.[Дата ввода] between :1 AND :2
                                      GROUP BY sotr.Звено, sotr.Категория, sotr.Признаки,sotr.[ФИО], dog.[Тема], sotr.ФлагВнедр, card.row_id, 
                                             hour.Аналитика1, Hier_down_Kat.КатегорияДог, kjob.Категория, kjob.ROW_ID
                                      ORDER BY kjob.Категория, Hier_down_Kat.КатегорияДог`, 500, "DatN,D,DatK,D" );

			var зВидРаб = Query( `;WITH tel AS(
                                 SELECT row_id, Категория
                                 FROM ~ДО категории работ~
                                 WHERE Категория like 'Телефонный звонок'
                              )
                              SELECT kjob.Категория, kjob.ROW_ID, an.Тема
                              FROM ~ДО категории работ~ kjob
                                  JOIN ~ДО наборы категорий работ~ skat ON skat.[Категорий набор-Категория]=kjob.ROW_ID
                                  JOIN ~Аналитики~ an ON skat.[Категорий набор-Аналитики]=an.[row_id]
                              UNION ALL
                              SELECT Категория, ROW_ID, 'КСопровождение' [Тема]
                              FROM tel
                              UNION ALL
                              SELECT Категория, ROW_ID, 'КИнсталляция' [Тема]
                              FROM tel
                              UNION ALL
                              SELECT Категория, ROW_ID, 'КВнедрение' [Тема]
                              FROM tel
                              ORDER BY Категория`, 100 );
      		зВидРаб.УстановитьПараметры();
			var мВидыРаб = {};
         var имяНаб = "";
         var префЧас = "";
         var имяМасД = "";

			// определяем наборы основных категорий часов в источниках
			// телефонный звонок добавляем в категории Сопровождение, Внедрение, Инсталляция потому что работы могут быть добавлены часы
			// с разовой работы на эти договора
			var последнийROW_ID;
			var последняяКатегория;
			var последняяТема;
			while( зВидРаб.Следующий() )
			{
				мЗапись.index = ( зВидРаб.ROW_ID ).toString();
				мЗапись.caption = зВидРаб.Категория;
            if( мВидыРаб[зВидРаб.Тема] == undefined )
               мВидыРаб[зВидРаб.Тема] = {};
				мВидыРаб[зВидРаб.Тема][зВидРаб.ROW_ID] = зВидРаб.Категория;
				switch( зВидРаб.Тема )
				{
					case "КИнсталляция":   префЧас = "ihour"; имяМасД = "мИнст"; имяНаб = "ВидРабИнст"; break;
					case "ККарьера":       префЧас = "khour"; имяМасД = "мКар"; имяНаб = "ВидРабКар"; break;
					case "КОтдых":         префЧас = "ohour"; имяМасД = "мОтдых"; имяНаб = "ВидРабОтд"; break;
					case "КПродажа":       префЧас = "phour"; имяМасД = "мПрод"; имяНаб = "ВидРабПрод"; break;
					case "КСопровождение": префЧас = "shour"; имяМасД = "мСопр"; имяНаб = "ВидРабСопр"; break;
					case "КВнедрение":     префЧас = "vhour"; имяМасД = "мВнедр"; имяНаб = "ВидРабВнед"; break;
				}
				мВидыРаб[зВидРаб.Тема].префЧас = префЧас;
				мВидыРаб[зВидРаб.Тема].имяМасД = имяМасД;
				стрВидРаб += "," + префЧас + ( зВидРаб.ROW_ID ).toString() + ",A";
				Об.Добавить( имяНаб, мЗапись );
				последнийROW_ID = зВидРаб.ROW_ID;
				последняяКатегория = зВидРаб.Категория;
				последняяТема = зВидРаб.Тема;
			}
			// отдельно добавляем в категории сопровождение внедрение инсталляция категорию телефонный звонок
      		var зТелЗвонок = BufferedReader( `SELECT Категория, ROW_ID FROM ~ДО категории работ~
                                          WHERE Категория LIKE 'Телефонный звонок'`, 1 );
			зТелЗвонок.УстановитьПараметры();
			if( зТелЗвонок.Следующий() )
			{
				мЗапись.index = последнийROW_ID.toString();
				мЗапись.caption = последняяКатегория;
            if( мВидыРаб[последняяТема] == undefined )
            	мВидыРаб[последняяТема] = {};
				мВидыРаб[последняяТема][последнийROW_ID] = последняяКатегория;
			}
			// к ним добавляем итоги
			for( var индП in мВидыРаб )
			{
            if( !мВидыРаб.hasOwnProperty(индП) ) continue;
				switch( индП )
				{
					case "КИнсталляция":
					{
						стрВидРаб += ",itotal1,A";
						имяНаб = "ИнстИтог";
						мЗапись.index = "1";
						мЗапись.caption = "Итог:";
					}
					break;
					case "ККарьера":
					{
						стрВидРаб += ",ktotal1,A";
						имяНаб = "КарИтог";
						мЗапись.index = "1";
						мЗапись.caption = "Итог:";
					}
					break;
					case "КОтдых":
					{
						стрВидРаб += ",ototal1,A";
						имяНаб = "ОтдИтог";
						мЗапись.index = "1";
						мЗапись.caption = "Итог:";
					}
					break;
					case "КСопровождение":
					{
						стрВидРаб += ",stotal1,A,stotal2,A";
						имяНаб = "СопрИтог";
						мЗапись.index = "1";
						мЗапись.caption = "Итог:";
						Об.Добавить( имяНаб, мЗапись );
						мЗапись.index = "2";
						мЗапись.caption = "К оплате:";
					}
					break;
					case "КВнедрение":
					{
						стрВидРаб += ",vtotal1,A,vtotal2,A";
						имяНаб = "ВнедИтог";
						мЗапись.index = "1";
						мЗапись.caption = "Итог:";
						Об.Добавить( имяНаб, мЗапись );
						мЗапись.index = "2";
						мЗапись.caption = "К оплате:";
					}
					break;
					case "КПродажа":
					{
						стрВидРаб += ",ptotal1,A";
						имяНаб = "ПродИтог";
						мЗапись.index = "1";
						мЗапись.caption = "Итог:";
					}
					break;
				}
				Об.Добавить( имяНаб, мЗапись );
			}
			// отдельно формируем группу потери
         if( мВидыРаб["КПотери"] == undefined )
            мВидыРаб["КПотери"] = {};
			мВидыРаб["КПотери"].префЧас = "ehour";
			мВидыРаб["КПотери"].имяМасД = "мПотери";
			мВидыРаб["КПотери"]["1"] = "Сопр";
			мВидыРаб["КПотери"]["2"] = "Внед";
			мВидыРаб["КПотери"]["3"] = "Инст";
			мВидыРаб["КПотери"]["4"] = "Свои";
			мВидыРаб["КПотери"]["5"] = "Итог:";
			мВидыРаб["КПотери"]["6"] = "Политика";
			for( var индП in мВидыРаб["КПотери"] )
			{
            if( !мВидыРаб["КПотери"].hasOwnProperty(индП) ) continue;
				if( индП != "префЧас" && индП != "имяМасД" )
				{
					стрВидРаб += "," + мВидыРаб["КПотери"].префЧас + индП + `,A`;
					мЗапись.index = индП;
					мЗапись.caption = мВидыРаб["КПотери"][индП];
					Об.Добавить( "ВидРабПтр", мЗапись );
				}
			}
      		Об.Источник( "Таблица", `Сотрудник,A,ЧасовВсего,N,ЧасовКОплате,N,СопрВнедрОпл,N,Аккорд,N` + стрВидРаб );
      
      		зДанных.УстановитьПараметры( д.ДатНач, д.ДатКнц );
			var мОшибки = {};
			while( зДанных.Следующий() )
			{
				if( !пФильтр || зДанных.ФлагВнедр % 2 == 1 )
				{
					if( пГрупЗвено )
						пИнд = ( 100 * зДанных.Звено).toString() + "_" +  ( зДанных.Признаки == 1 ? 0 : 1 ).toString()  + "_" + зДанных.Сотрудник;
					else if( пФКатег )
						пИнд = (зДанных.катег_сотр).ЧислосВедущимиНулями(3) + "_" + зДанных.Сотрудник;
					else
						пИнд = зДанных.Сотрудник;
					var категория16 = зДанных.Категория.substr( 0, 6 );
					if( мДанные[пИнд] == undefined )
						мДанные[пИнд] = {};
					switch( зДанных.КатегорияДог )
					{
						case "КИнсталляция": // "СПП", "СИ": // инсталляцию смотрим по оплате
						{
							if( мДанные[пИнд]["мИнст"] == undefined )
								мДанные[пИнд]["мИнст"] = {};
							if( мДанные[пИнд]["мИнст"][зДанных.ИдВид] == undefined )
								мДанные[пИнд]["мИнст"][зДанных.ИдВид] = 0;
							мДанные[пИнд]["мИнст"][зДанных.ИдВид] += зДанных.ВремяКОплате/60;
							if( мДанные[пИнд]["Инст"] == undefined )
								мДанные[пИнд]["Инст"] = {'Итог':0};
							мДанные[пИнд]["Инст"]["Итог"] += зДанных.ВремяКОплате/60;
						}
					   	break;
						case "ККарьера": // "СК":
						{
							if( зДанных.Категория == "Политика" )
							{
								if( мДанные[пИнд]["мСопр"] == undefined )
									мДанные[пИнд]["мСопр"] = {};
								if( мДанные[пИнд]["мСопр"][зДанных.ИдВид]  == undefined )
									мДанные[пИнд]["мСопр"][зДанных.ИдВид] = 0;
								мДанные[пИнд]["мСопр"][зДанных.ИдВид] += зДанных.ВремяРаботы/60;
								if( мДанные[пИнд]["Сопр"] == undefined )
									мДанные[пИнд]["Сопр"] = {'Итог':0, 'Опл':0};
								мДанные[пИнд]["Сопр"]["Итог"] += зДанных.ВремяРаботы/60;
								if( мДанные[пИнд]["мПотери"] == undefined )
									мДанные[пИнд]["мПотери"] = {'6':0};
								мДанные[пИнд]["мПотери"]["6"] += зДанных.ВремяКОплате/60;
							}
							else
							{
								if( мДанные[пИнд]["мКар"] == undefined )
									мДанные[пИнд]["мКар"] = {};
								if( мДанные[пИнд]["мКар"][зДанных.ИдВид]  == undefined )
									мДанные[пИнд]["мКар"][зДанных.ИдВид] = 0;
								мДанные[пИнд]["мКар"][зДанных.ИдВид] += зДанных.ВремяРаботы/60;
								if( мДанные[пИнд]["Кар"] == undefined )
									мДанные[пИнд]["Кар"] = {'Итог':0};
								мДанные[пИнд]["Кар"]["Итог"] += зДанных.ВремяРаботы/60;
							}
						}
				   		break;
						case "КОтдых": // "СО":
						{
							if( мДанные[пИнд]["мОтдых"] == undefined )
								мДанные[пИнд]["мОтдых"] = {};
							if( мДанные[пИнд]["мОтдых"][зДанных.ИдВид]  == undefined )
								мДанные[пИнд]["мОтдых"][зДанных.ИдВид] = 0;
							мДанные[пИнд]["мОтдых"][зДанных.ИдВид] += зДанных.ВремяРаботы/60;
							if( мДанные[пИнд]["Отдых"] == undefined )
								мДанные[пИнд]["Отдых"] = {'Итог':0};
							мДанные[пИнд]["Отдых"]["Итог"] += зДанных.ВремяРаботы/60;
						}
						break;
						case "КПродажа":
						{
							if( мДанные[пИнд]["мПрод"] == undefined )
								мДанные[пИнд]["мПрод"] = {};
							if( мДанные[пИнд]["мПрод"][зДанных.ИдВид]  == undefined )
								мДанные[пИнд]["мПрод"][зДанных.ИдВид] = 0;
							мДанные[пИнд]["мПрод"][зДанных.ИдВид] += зДанных.ВремяРаботы/60;
							if( мДанные[пИнд]["Прод"] == undefined )
								мДанные[пИнд]["Прод"] = {'Итог':0};
							мДанные[пИнд]["Прод"]["Итог"]    += зДанных.ВремяКОплате/60;
						}
						break;
						case "КСопровождение":
						{
							if( мДанные[пИнд]["мСопр"] == undefined )
								мДанные[пИнд]["мСопр"] = {};
							if( мДанные[пИнд]["мСопр"][зДанных.ИдВид]  == undefined )
								мДанные[пИнд]["мСопр"][зДанных.ИдВид] = 0;
							мДанные[пИнд]["мСопр"][зДанных.ИдВид] += зДанных.ВремяРаботы/60;
							if( мДанные[пИнд]["Сопр"] == undefined )
								мДанные[пИнд]["Сопр"] = {'Итог':0, 'Опл':0};
							мДанные[пИнд]["Сопр"]["Итог"] += зДанных.ВремяРаботы/60;
							if( категория16 != "Ошибки" )
								мДанные[пИнд]["Сопр"]["Опл"] += зДанных.ВремяКОплате/60;
						}
						break;
						case "КВнедрение":
						{
							if( мДанные[пИнд]["мВнедр"] == undefined )
								мДанные[пИнд]["мВнедр"] = {};
							if( мДанные[пИнд]["мВнедр"][зДанных.ИдВид]  == undefined )
								мДанные[пИнд]["мВнедр"][зДанных.ИдВид] = 0;
							мДанные[пИнд]["мВнедр"][зДанных.ИдВид] += зДанных.ВремяРаботы/60;
							if( мДанные[пИнд]["Внедр"] == undefined )
							мДанные[пИнд]["Внедр"] = {'Итог':0, 'Опл':0};
							мДанные[пИнд]["Внедр"]["Итог"] += зДанных.ВремяРаботы/60;
							if( категория16 != "Ошибки" )
								мДанные[пИнд]["Внедр"]["Опл"] += зДанных.ВремяКОплате/60;
						}
						break;
						default:
						{
							пИнд1 = пИнд + зДанных.ТемаДоговора + зДанных.Категория;
							if( мОшибки[пИнд1] == undefined )
								мОшибки[пИнд1] = {'Отработано':0, 'КОплате':0};
							мОшибки[пИнд1].Сотрудник   = зДанных.Сотрудник;
							мОшибки[пИнд1].ТемаДог     = зДанных.ТемаДоговора;
							мОшибки[пИнд1].Категория   = зДанных.Категория;
							мОшибки[пИнд1].Отработано += зДанных.ВремяРаботы;
							мОшибки[пИнд1].КОплате    += зДанных.ВремяКОплате;
						}
					}
					if( категория16 == "Ошибки" )
					{
						if( мДанные[пИнд]["мПотери"] == undefined )
							мДанные[пИнд]["мПотери"] = {'1':0, '2': 0, '3':0, '4':0, '5':0, '6':0};
						if( зДанных.Аналитика1 % 2 >= 1 ) // заносим свои ошибки
							мДанные[пИнд]["мПотери"]["4"] += зДанных.ВремяРаботы/60;

						мДанные[пИнд]["мПотери"]["5"] += зДанных.ВремяРаботы/60; // считаем итог по ошибкам
						switch( зДанных.Категория )
						{
							case "Ошибки сопровождения":
							{
								мДанные[пИнд]["мПотери"]["1"] += зДанных.ВремяРаботы/60;
							}
							break;
							case "Ошибки внедрения":
							{
								мДанные[пИнд]["мПотери"]["2"]   += зДанных.ВремяРаботы/60;
							}
							break;
							case "Ошибки инсталляции":
							{
								мДанные[пИнд]["мПотери"]["3"] += зДанных.ВремяРаботы/60;
							}
							break;
							default:
							{
								пИнд1 = пИнд + зДанных.ТемаДоговора + зДанных.Категория;
								if( мОшибки[пИнд1] == undefined )
									мОшибки[пИнд1] = {'Отработано':0};
								мОшибки[пИнд1].Сотрудник   = зДанных.Сотрудник;
								мОшибки[пИнд1].ТемаДог     = зДанных.ТемаДоговора;
								мОшибки[пИнд1].Категория   = зДанных.Категория;
								мОшибки[пИнд1].Отработано += зДанных.ВремяРаботы;
							}
						}
					}
					мДанные[пИнд].Сотрудник   = ФИО( зДанных.Сотрудник );
					if( мДанные[пИнд].ИтогоРаб  == undefined )
						мДанные[пИнд].ИтогоРаб = 0;
					мДанные[пИнд].ИтогоРаб    += зДанных.ВремяРаботы/60;
					// к зачету считаем без категория отдыха и профроста
					if( зДанных.КатегорияДог != "КОтдых" && Вниз(зДанных.Категория) != "профрост" )
					{
						if( мДанные[пИнд].ИтогоОпл  == undefined )
							мДанные[пИнд].ИтогоОпл = 0;
						мДанные[пИнд].ИтогоОпл    += зДанных.ВремяКОплате/60;
					}
					if( зДанных.Аналитика1%4 >= 2 ) // дополнительные часы
					{
						if( мДанные[пИнд].ИтогоДоп  == undefined )
							мДанные[пИнд].ИтогоДоп = 0;
						мДанные[пИнд].ИтогоДоп += зДанных.ВремяРаботы / 60;
					}
						//        мВиды[зДанных.Тема, зДанных.Категория] += зДанных.ВремяРаботы/60;  // Для отладки
				}
			}

			if( пИнд )
			{
            var мДанныеСортированные = Object.keys(мДанные).sort();
				for( var инд_д of мДанныеСортированные )
				{
               if( !мДанные.hasOwnProperty(инд_д) ) continue;
					var пИндЗвена = "";
					if(пГрупЗвено || пФКатег)
					{
						var мИнд = инд_д.split("_");
						var пИндЗвена = мИнд[1] != undefined ? мИнд[1] : "";
						пИндТекГр = пИндЗвена;
					}

					Таблица["Сотрудник"         ] = мДанные[инд_д].Сотрудник != undefined ? мДанные[инд_д].Сотрудник : 0;
					Таблица["ЧасовВсего"        ] = ( мДанные[инд_д].ИтогоРаб != undefined ? мДанные[инд_д].ИтогоРаб : 0 ).toFixed(1);
					Таблица["Аккорд"            ] = ( мДанные[инд_д].ИтогоДоп != undefined ? мДанные[инд_д].ИтогоДоп : 0 ).toFixed(1);
					Таблица["ЧасовКОплате"      ] = ( мДанные[инд_д].ИтогоОпл != undefined ? мДанные[инд_д].ИтогоОпл : 0 ).toFixed(1);
					// переносим данные varенных групп в запись таблицы
					for( var индК in мВидыРаб )
					{
                  if( !мВидыРаб.hasOwnProperty(индК) ) continue;
						префЧас = мВидыРаб[индК].префЧас;
						имяМасД = мВидыРаб[индК].имяМасД;
						for( var индП in мВидыРаб[индК] )
						{
                     if( !мВидыРаб[индК].hasOwnProperty(индП) ) continue;
							if( индП != "префЧас" && индП != "имяМасД" )
								Таблица[префЧас + индП] = (((мДанные[инд_д][имяМасД] != undefined) && (мДанные[инд_д][имяМасД][индП] != undefined)) ? (мДанные[инд_д][имяМасД][индП]).toFixed(1) : 0);
                     
                     
                     
                     /*if( инд_д == "Головина Ольга Сергеевна" )
                     {
                        Сообщить(префЧас + индП);
                        Сообщить(Таблица[префЧас + индП]);
                     }*/
						}
					}
					// Итоги
					Таблица["stotal1"] = ((мДанные[инд_д].Сопр != undefined ) ? мДанные[инд_д].Сопр.Итог : 0).toFixed(1);
					Таблица["stotal2"] = ((мДанные[инд_д].Сопр != undefined ) ? мДанные[инд_д].Сопр.Опл : 0).toFixed(1);
					Таблица["vtotal1"] = ((мДанные[инд_д].Внедр != undefined ) ? мДанные[инд_д].Внедр.Итог : 0).toFixed(1);
					Таблица["vtotal2"] = ((мДанные[инд_д].Внедр != undefined ) ? мДанные[инд_д].Внедр.Опл : 0).toFixed(1);
					Таблица["itotal1"] = ((мДанные[инд_д].Инст != undefined ) ? мДанные[инд_д].Инст.Итог : 0).toFixed(1);
					Таблица["ktotal1"] = ((мДанные[инд_д].Кар != undefined ) ? мДанные[инд_д].Кар.Итог : 0).toFixed(1);
					Таблица["ototal1"] = ((мДанные[инд_д].Отдых != undefined ) ? мДанные[инд_д].Отдых.Итог : 0).toFixed(1);
					Таблица["ptotal1"] = ((мДанные[инд_д].Прод != undefined ) ? мДанные[инд_д].Прод.Итог : 0).toFixed(1);
					Таблица["СопрВнедрОпл"      ] = (( (мДанные[инд_д].Сопр != undefined ) ? мДанные[инд_д].Сопр.Опл : 0) +
														( (мДанные[инд_д].Внедр != undefined ) ? мДанные[инд_д].Внедр.Опл : 0) ).toFixed(1);

					//Таблица["Звено"             ] = пИндЗвена;
					//if(пФКатег)
					//{
					//   Таблица["текст_заголовок"] = "Категория " + Number(пИндЗвена);
					//   Таблица["текст_итог"]      = "Всего по категории " + Number(пИндЗвена);
					//}
					//if(пГрупЗвено)
					//{
					//   Таблица["текст_заголовок"] = "Звено " + Number(пИндЗвена)/100;
					//   Таблица["текст_итог"]      = "Всего по звену " + Number(пИндЗвена)/100;
					//}
					Об.Добавить( "Таблица", Таблица );
				}
				// выводим неучтенные часы в отчете
				//ДляВсех( ПодОбъектов(мОшибки, инд_д) )
				//{
				//   Очистить( Ошибки );
				//   Ошибки["Сотрудник" ] = Извлечь( мОшибки[инд_д].Сотрудник, "" );
				//   Ошибки["ТемаДог"   ] = Извлечь( мОшибки[инд_д].ТемаДог, "" );
				//   Ошибки["Категория" ] = Извлечь( мОшибки[инд_д].Категория, "" );
				//   Ошибки["Отработано"] = Окр( Извлечь(мОшибки[инд_д].Отработано, 0)/60, 0.1 );
				//   Ошибки["КОплате"   ] = Окр( Извлечь(мОшибки[инд_д].КОплате, 0)/60, 0.1 );
				//   Об.Добавить( "Ошибки", Ошибки );
				//}

				Данные["Период"] = ((д.ДатНач.getTime() == д.ДатКнц.getTime() || д.ДатКнц.isEmpty()) ? д.ДатНач.format("rusDateDashed") : д.ДатНач.format("rusDateDashed") + " - " + д.ДатКнц.format("rusDateDashed"));
				Данные["НазваниеОтчета"] = "Отчет о сотрудниках" + (Размер(мОшибки) > 0 ? "  (Данные не корректны)" : "" );
				//Форма["Тема"  ] = Тема;
				Об.Добавить( "Отчет", Данные );

				Об.Отчет();
			}
			else
				Сообщить( "Нет данных для отчета" );
		}
// ------------------------- Короткий (эффективность) -------------------------
   		else if( пВариант == 2 )
		{
			this.ФайлОтчета = отчеты.КаталогОтчета( "ОтработаноПоСотрудникам" )+"SHABLON\\DO\\Отработано_по_сотрудникам_эффект.ods"
			//если строим по всем группируя - используем шаблон с подитогом
			if((пГрупЗвено && !пФЗвено) || пФКатег)
				this.ФайлОтчета = отчеты.КаталогОтчета( "ОтработаноПоСотрудникам" )+"SHABLON\\DO\\Отработано_по_сотрудникам_эффект_гр.ods";

			Счетчик = 0;
			Об = ПостроительОтчета("Open Office");
			Об.Имя( this.ФайлОтчета );
			Об.Источник("Данные", `Сотрудник,A,ЧасовВсего,N,ЧасовКОплате,N,СопрВнедрОпл,N,Эфф,A,Звено,N,ЭффИтог,A,текст_заголовок,A,текст_итог,A`);

			var зДанных = BufferedReader( `;WITH Hier_down_Kat AS(
                                         SELECT row_id, Аналитики, Тема [КатегорияДог], cast('' as varchar(256)) [ТемаДог], Аналитики_ADD
                                         FROM ~Аналитики~ WHERE Аналитики=-10
                                         UNION ALL 
                                         SELECT child.row_id, child.Аналитики, Hier_down_Kat.КатегорияДог, child.Тема [ТемаДог], child.Аналитики_ADD
                                         FROM ~Аналитики~ child
                                              JOIN Hier_down_Kat ON Hier_down_Kat.ROW_ID=child.Аналитики
                                       )
                                       SELECT sotr.[ФИО] [Сотрудник],sotr.ФлагВнедр, Hier_down_Kat.КатегорияДог, kjob.Категория, dog.Тема [ТемаДоговора], card.row_id карточка,
                                             sum(60*datepart(hour, hour.[Время работы]) + datepart(minute, hour.[Время работы])) [ВремяРаботы],
                                             sum(60*datepart(hour, hour.[Время к оплате]) + datepart(minute, hour.[Время к оплате])) [ВремяКОплате],
                                             hour.Аналитика1,sotr.Звено, sotr.Признаки, sotr.Категория катег_сотр
                                       FROM ~ДО часы~ hour
                                            JOIN ~ДО задания~ work ON hour.[Часы-Задание]=work.[row_id]
                                            JOIN ~ДО карточки~ card on work.[Задание-Карточка]=card.[row_id]
                                            JOIN ~Договор~ dog on card.[Карточка-Договор]=dog.[row_id]
                                            JOIN ~Сотрудники~ sotr ON sotr.[row_id]=work.[Задание-Исполнитель]
                                            JOIN ~ДО категории работ~ kjob ON hour.[Часы-Категория]=kjob.ROW_ID
                                            JOIN Hier_down_Kat on dog.Тема LIKE Hier_down_Kat.ТемаДог AND Hier_down_Kat.Аналитики_ADD=1
                                       WHERE hour.[Дата ввода] between :1 and :2 ` + пФильтрЗвено + `
                                       GROUP BY sotr.Звено, sotr.Категория, sotr.Признаки,sotr.[ФИО], dog.[Тема], kjob.Категория, sotr.ФлагВнедр, 
                                             card.row_id, hour.Аналитика1, Hier_down_Kat.КатегорияДог
                                       ORDER BY sotr.[ФИО]`, 500, "DatN,D,DatK,D" );

			зДанных.УстановитьПараметры( д.ДатНач, д.ДатКнц );
			//var мДанные = {};
			while( зДанных.Следующий() )
			{
				if( !пФильтр || зДанных.ФлагВнедр%2 == 1 )
				{
					if( пГрупЗвено )
						пИнд = ( 100 * зДанных.Звено).toString() + "_" +  ( зДанных.Признаки == 1 ? 0 : 1 ).toString()  + "_" + зДанных.Сотрудник;
					else if( пФКатег )
						пИнд = ЧислосВедущимиНулями(3,зДанных.катег_сотр) + "_" + зДанных.Сотрудник;
					else
						пИнд = зДанных.Сотрудник;

               if( мДанные[пИнд] == undefined )
                  мДанные[пИнд] = {'ИтогоРаб':0, 'ИтогоОпл':0};
					if( зДанных.Категория.substr( 0, 6 ) != "Ошибки" )
					{
						switch( зДанных.КатегорияДог )
						{
							case "КСопровождение":
                        if( мДанные[пИнд]["Сопр"] == undefined )
                           мДанные[пИнд]["Сопр"] = {'Опл':0};
								мДанные[пИнд]["Сопр"]["Опл"] += зДанных.ВремяКОплате/60;
								break;
							case "ККарьера": // "СК":
							{
								if( зДанных.Категория == "Политика" ) {
                           if( мДанные[пИнд]["Сопр"] == undefined )
                              мДанные[пИнд]["Сопр"] = {'Опл':0};
									мДанные[пИнд]["Сопр"]["Опл"] += зДанных.ВремяКОплате / 60;
								}
							}
							break;
							case "КВнедрение":
                        if( мДанные[пИнд]["Внедр"] == undefined )
                           мДанные[пИнд]["Внедр"] = {'Опл':0};
								мДанные[пИнд]["Внедр"]["Опл"] += зДанных.ВремяКОплате/60;
								break;
						}
					}
					//if( зДанных.Тема != "СПП" и зДанных.Тема != "СК" и зДанных.Тема != "СО" ) // не инсталляция, не карьера и не отдых
					//{
					//   if( Подстрока(зДанных.Категория, 1, 6) != "Ошибки" )
					//   {
					//      if( ДоговорСопровождения(зДанных.Тема) )
					//         мДанные[пИнд, "Сопр", "Опл"] += зДанных.ВремяКОплате/60;
					//      else
					//         мДанные[пИнд, "Внедр", "Опл"] += зДанных.ВремяКОплате/60;
					//   }
					//}
					мДанные[пИнд].Сотрудник   = зДанных.Сотрудник;
					мДанные[пИнд].ИтогоРаб    += зДанных.ВремяРаботы/60;
					//if( зДанных.Тема != "СО" )
					if( зДанных.КатегорияДог != "КОтдых" && Вниз(зДанных.Категория) != "профрост" )
						мДанные[пИнд].ИтогоОпл    += зДанных.ВремяКОплате/60;
				}
			}

			//для вывода процентов по подгруппам, т.к. openOffice не дает вставлять свои формулы в итоги
			//Очистить(мИтогДанные);

			var мИтогДанные= {};
			if( Размер(мДанные) > 0 )
			{
             var iii = 0;
				for( var инд_д in мДанные )
				{
               if( !мДанные.hasOwnProperty(инд_д) ) continue;
					var пИндЗвена = "";
					if(пГрупЗвено || пФКатег)
					{
						var мИнд = инд_д.split("_");
						var пИндЗвена = мИнд[1] != undefined ? мИнд[1] : "";
						пИндТекГр = пИндЗвена;
					}

					Данные["Сотрудник"   ] = мДанные[инд_д].Сотрудник != undefined ? мДанные[инд_д].Сотрудник : 0;
					Данные["ЧасовВсего"  ] = ( мДанные[инд_д].ИтогоРаб != undefined ? мДанные[инд_д].ИтогоРаб : 0 ).toFixed(1);
					Данные["ЧасовКОплате"] = ( мДанные[инд_д].ИтогоОпл != undefined ? мДанные[инд_д].ИтогоОпл : 0 ).toFixed(1);
					var пСопрВнедрОпл = Number( ( мДанные[инд_д].Сопр != undefined  && мДанные[инд_д].Сопр.Опл != undefined ? мДанные[инд_д].Сопр.Опл : 0).toFixed(1) )+
										Number( ( мДанные[инд_д].Внедр != undefined  && мДанные[инд_д].Внедр.Опл != undefined ? мДанные[инд_д].Внедр.Опл : 0).toFixed(1) );
					Данные["СопрВнедрОпл"] = (Number(пСопрВнедрОпл)).toFixed(1);
					var пИтогоРаб = мДанные[инд_д].ИтогоРаб != undefined ? мДанные[инд_д].ИтогоРаб : 0;
					var delet = Данные["СопрВнедрОпл"] / мДанные[инд_д].ИтогоРаб;
					var пЭфф = пИтогоРаб != 0 ? ( delet ) : 0;
					Данные["Эфф"] = (пЭфф*100).toFixed(2) + " %";
					Данные["Звено"] = пИндЗвена;
					if(пФКатег)
					{
						Данные["текст_заголовок"] = "Категория " + Number(пИндЗвена);
						Данные["текст_итог"]      = "Всего по категории " + Number(пИндЗвена);
					}
					if(пГрупЗвено)
					{
						Данные["текст_заголовок"] = "Звено " + Number(пИндЗвена)/100;
						Данные["текст_итог"]      = "Всего по звену " + Number(пИндЗвена)/100;
					}

					if( мИтогДанные[пИндЗвена] == undefined )
						мИтогДанные[пИндЗвена] = {};
					мИтогДанные[пИндЗвена]["ОплСВ"] += пСопрВнедрОпл;
					мИтогДанные[пИндЗвена]["ИтогоРаб"] += ( мДанные[инд_д].ИтогоРаб != undefined ? мДанные[инд_д].ИтогоРаб : 0 ).toFixed(1);
					Данные["ЭффИтог"] = ((мИтогДанные[пИндЗвена]["ИтогоРаб"]!=0)? мИтогДанные[пИндЗвена]["ОплСВ"]*100/мИтогДанные[пИндЗвена,"ИтогоРаб"] : 0).toFixed(2) + " %";

					Об.Добавить("Данные", Данные);
				}

				var Форма = {};
				Форма["Период"] =  ( (д.ДатНач == д.ДатКнц) || (д.ДатКнц == new Date(0,0,0))  ) ? д.ДатНач.format("rusDateDashed") :
                                                            д.ДатНач.format("rusDateDashed") + " - " + д.ДатКнц.format("rusDateDashed");
				Об.Данные( "Форма", Форма);

				Об.Отчет();
			}
			else
				Сообщить( "Нет данных для отчета" );
		}
		else
			Сообщить( "Не могу определить тип отчета" );
	}
}

отчеты.Add( "ОшибкиСотрудников", "Ошибки сотрудников" );
class ОшибкиСотрудников {
	constructor() {
		this.ФайлОтчета = отчеты.КаталогОтчета( "ОшибкиСотрудников" ) + "SHABLON\\DO\\Ошибки_сотрудников.ods";
	}

	ИмяОтчета() {
		return "Ошибки сотрудников";
	}

	Формирователь_отчета()
	{
		var д = СоздатьДиалог("Отчет для сотрудников");
		д.ДатНач = РабМес();//СледующийМесяц( РабДат(), 0 );
		д.ДатКнц = д.ДатНач.ПоследнееЧисло();
      д.Элементы["@ВариантОтчета"].Запрещен = 1;
		if (!д.Выполнить())
			throw "ReportBreak: Построение отчета прервано";

		var зСотр = Query(`select row_id from ~Сотрудники~ where ФИО = :1`, 1, "fio,A");
		зСотр.УстановитьПараметры(д['@Сотрудник']);
		var поз_сотр;
		if(!зСотр.Следующий())
			зСотр.row_id = -1;
		поз_сотр = зСотр.row_id;

		var Счетчик = 0;
		var Об = ПостроительОтчета("Open Office");
		Об.Имя(this.ФайлОтчета);
		Об.Источник("Данные", "Сотр,A,Время,A,Тип,A,Дата,A,Орг,A,Опис,A,Ком,A,Вин,A");

		var стрЗапр = `declare @sotr int;
                    set @sotr = :1;
                    SELECT sotr.[ФИО] [Сотрудник],sotr.ФлагВнедр,
                           dog.[Тема],
                           datepart(hour, hour.[Время работы]) часыРаб,
                           datepart(minute, hour.[Время работы]) МинутыРаб,
                           kjob.[Категория],
                           hour.[Дата ввода] Дата,
                           org.[Название] Организация,
                           hour.Примечание,
                           hour.Комментарий,
                           hour.Аналитика1,
                           sotr2.ФИО Виновник
                      FROM ~ДО часы~ hour
                inner join ~ДО задания~ work ON hour.[Часы-Задание]=work.[row_id]
                inner join ~ДО карточки~ card on work.[Задание-Карточка]=card.[row_id]
                inner join ~Договор~ dog on card.[Карточка-Договор]=dog.[row_id]
                inner join ~Организации~ org  ON dog.[Грузополучатель]=org.[row_id]
                inner join ~Сотрудники~ sotr ON sotr.[row_id]=work.[Задание-Исполнитель]
                 LEFT JOIN ~ДО категории работ~ kjob ON hour.[Часы-Категория] = kjob.ROW_ID
                 left join ~Сотрудники~ sotr2 ON hour.[Ошибка-Виновник]=sotr2.row_id
                  WHERE hour.[Дата ввода] between :2 and :3
                    and kjob.Категория like 'Ошибк%' and kjob.Категория not like '%пользователей'`;

		if (поз_сотр != -1)
			стрЗапр += ` and (sotr.row_id = @sotr or sotr2.row_id = @sotr)`;
		стрЗапр += ` order by sotr.ФИО, hour.[Дата ввода]`;

		var зДанных = BufferedReader(стрЗапр, 500, "sotr,S,DatN,D,DatK,D");

		var итМин = 0;
		зДанных.УстановитьПараметры(поз_сотр, д.ДатНач, д.ДатКнц);
		while(зДанных.Следующий())
		{
			var Данные = {};
			Данные.Сотр = зДанных.Сотрудник;
			Данные.Время = зДанных.часыРаб.ЧислоСВедущимиНулями(2) + ":" + зДанных.минутыРаб.ЧислоСВедущимиНулями(2);
			итМин += зДанных.часыРаб * 60 + зДанных.минутыРаб;
			Данные.Тип = зДанных.Категория.substr(7);
			Данные.Дата = зДанных.Дата;
			Данные.Орг = зДанных.Организация;
			Данные.Опис = зДанных.Примечание;
			Данные.Ком = зДанных.Комментарий;
			//Данные.Вин   = (зДанных.Аналитика1 == 1) ? " своя" : зДанных.Виновник;
			Данные.Вин = (зДанных.Аналитика1 % 2 >= 1) ? " своя" : зДанных.Виновник;
			Об.Добавить("Данные", Данные);
		}
		var Данные = {};
		Данные.Сотр = "           Итого:";
		Данные.Время = (итМин / 60 - (итМин / 60) % 1).ЧислоСВедущимиНулями(2) + ":" + (итМин % 60).ЧислоСВедущимиНулями(2);
		Об.Добавить("Данные", Данные);

		var Форма = {};
		Форма.Период = ( д.ДатНач.equals( д.ДатКнц) || д.ДатКнц.isEmpty() ) ? д.ДатНач.format("rusDateDashed") :
                                                   д.ДатНач.format("rusDateDashed") + " - " + д.ДатКнц.format("rusDateDashed");
		Об.Данные("Форма", Форма);

		Об.Отчет();
	}
}

отчеты.Add( "ПросроченныеЗаявки", "Просроченные заявки" );
class ПросроченныеЗаявки
{
	constructor()
	{
		this.ФайлОтчета = отчеты.КаталогОтчета( "ПросроченныеЗаявки" ) + "SHABLON\\DO\\Отчет_по_просроч_заявкам.ods";
	}

	ИмяОтчета()
	{
		return "Просроченные заявки";
	}

	Формирователь_отчета()
	{
		var Счетчик = 0;
		var Об = ПостроительОтчета("Open Office");
		Об.Имя(this.ФайлОтчета);
		Об.Источник("Данные", "Организация,A,Договор,A,НомерЗаявки,A,ЗавершитьДо,A,ТекстЗаявки,M,Исполнители,A");

		var зДанных = BufferedReader(`;with tab as (SELECT card.[row_id],
                                               ISNULL( card.[Завершить До],'20000101') [ЗавершитьДо], 
                                               MAX( ISNULL(work.[Дата завершения],'20450905') ) [ДатаЗавершения] 
                                          FROM ~ДО карточки~ card
                                    INNER JOIN ~ДО задания~ work ON card.[row_id]=work.[Задание-Карточка]
                                         WHERE work.[Статус завершения]=0
                                      GROUP BY card.[row_id],card.[Завершить До]
                                        ) 

                         SELECT card.[row_id],
                                org.[Наименование] [Организация], 
                                convert(varchar(10),dog.[Номер])+'/'+dog.[Тема] [Договор],
                                card.[Номер] [НомерЗаявки],
                                card.[Завершить До],
                                card.[Примечание] [ТекстЗаявки]
                           FROM ~ДО карточки~ card
                     INNER JOIN tab ON card.[row_id]=tab.[row_id]
                     INNER JOIN ~Договор~ dog ON dog.[row_id]=card.[Карточка-Договор]
                     INNER JOIN ~Организации~ org ON org.[row_id]=dog.[Грузополучатель]
                          WHERE tab.[ЗавершитьДо]<tab.[ДатаЗавершения] 
                             AND card.[Завершить До] IS NOT NULL
                             AND tab.[ДатаЗавершения]='20450905'
                             AND tab.[ЗавершитьДо]<getdate()
                         ORDER BY [Завершить до] desc
                        `, 500, "");

		var зИсполнителей = Query(`SELECT sotr.[ФИО]
                                  FROM ~ДО карточки~ card
                            INNER JOIN ~ДО задания~ work ON work.[Задание-Карточка]=card.[row_id]
                            INNER JOIN ~Сотрудники~ sotr ON work.[Задание-Исполнитель]=sotr.[row_id]
                                 WHERE card.[row_id]=:1 and work.[Статус завершения]=0
                              GROUP BY sotr.[ФИО]
                              `, 1, "Zaya,S")

		зДанных.УстановитьПараметры();
		while(зДанных.Следующий())
		{
			var Данные = {};
			ВывестиСтатус("Обработано заявок " + Счетчик++);
			Данные["Организация"] = зДанных.Организация;
			Данные["Договор"] = зДанных.Договор;
			Данные["НомерЗаявки"] = зДанных.НомерЗаявки;
			Данные["ЗавершитьДо"] = зДанных["Завершить до"];
			Данные["ТекстЗаявки"] = зДанных.ТекстЗаявки;

			Данные["Исполнители"] = "";
			зИсполнителей.УстановитьПараметры(зДанных.row_id);
			while (зИсполнителей.Следующий())
				Данные["Исполнители"] += Данные["Исполнители"] == "" ? ФИО(зИсполнителей.ФИО) : "\n" + ФИО(зИсполнителей.ФИО);

			Об.Добавить("Данные", Данные);
		}

		var Форма = {};
		Форма["Период"] = РабДат().format("rusDateDashed");
		Форма["Количество"] = Счетчик;
		Об.Данные("Форма", Форма);

		ВывестиСтатус("Идет вывод документа OpenOffice... ");
		Об.Отчет();
	}
}

отчеты.Add( "ЗаявкиБольшеПлана", "Заявки больше плана" );
class ЗаявкиБольшеПлана
{
	constructor()
	{
		this.ФайлОтчета = отчеты.КаталогОтчета( "ЗаявкиБольшеПлана" ) + "SHABLON\\DO\\Отчет_по_заявкам_больше_плана.ods";
	}

	ИмяОтчета()
	{
		return "Заявки больше плана";
	}

	Формирователь_отчета()
	{
		var Счетчик = 0;
		var Кол = 0;
		var ДатНач = РабМес();//СледующийМесяц( РабДат(), 0 );
		var ДатКнц = ДатНач.ПоследнееЧисло();
		var резСпросить = Спросить("Введите период выборки заявок с ", ДатНач, "по ", ДатКнц);
		if( !резСпросить )
			throw "ReportBreak: Построение отчета прервано";

		ДатНач = резСпросить[0];
		ДатКнц = резСпросить[1];

		var Об = ПостроительОтчета("Open Office");
		Об.Имя(this.ФайлОтчета);
		Об.Источник("Данные", "Организация,A,Договор,A,НомерЗаявки,A,ДатаСоздания,A,ЗавершитьДо,A,ТекстЗаявки,M,ПланЧасов,N,ВремяВсего,N,ВремяКОплате,N,СтатусЗаявки,A");

		var зДанных = Query(`SELECT card.[row_id],
                                 card.[Номер] [НомерЗаявки],
                                 card.[ПланЧасов]*60 [ПланНаЗаявку],
                                 card.[Дата создания],
                                 card.[Завершить до],
                                 org.[Название] [Организация],
                                 convert( varchar(10), dog.[Номер])+'/'+dog.[Тема] [Договор],
                                 sum(60*datepart(hour, hour.[Время работы]) + datepart(minute, hour.[Время работы])) [ВремяРаботы],
                                 sum(60*datepart(hour, hour.[Время к оплате]) + datepart(minute, hour.[Время к оплате])) [ВремяКОплате]
                            FROM ~ДО часы~ hour
                      INNER JOIN ~ДО задания~ work ON hour.[Часы-Задание]=work.[row_id]
                      INNER JOIN ~ДО карточки~ card ON work.[Задание-Карточка]=card.[row_id]
                      INNER JOIN ~Договор~ dog ON card.[Карточка-Договор]=dog.[row_id]
                      INNER JOIN ~Организации~ org ON dog.[Грузополучатель]=org.[row_id]
                           WHERE card.[ПланЧасов]>0   
                               AND card.[Дата создания] between :1 and :2 
                        GROUP BY card.[row_id],card.[Номер],card.[ПланЧасов],card.[Дата создания],card.[Завершить до],
                                 org.[Название], dog.[Номер], dog.[Тема] 
                        ORDER BY card.[Дата создания]
                         `, 1, "DatN,D,DatK,D");

		var зТекстаЗаявки = Query(`SELECT [Примечание] FROM ~ДО карточки~ WHERE row_id=:1`, 1, "ID,S");

		var зСтатуса = Query(`SELECT TOP 1 dt.[Статус завершения] [Статус], [Исполнитель]
                             FROM ~ДО задания~ dt,
                              (SELECT tdg."Задание-Карточка", 
                                    [Исполнитель] = (CASE WHEN MIN([Задание-Исполнитель])=-1 THEN 0 ELSE 1 END)
                              FROM ~ДО задания~ tdg
                              WHERE tdg."Задание-Карточка"=:1
                              GROUP BY tdg."Задание-Карточка" )   AS dtmax
                             WHERE dt.[Задание-Карточка] = dtmax.[Задание-Карточка]
                             ORDER BY dt.[Статус завершения] 
                            `, 10, "doc,S");

		зДанных.УстановитьПараметры(ДатНач, ДатКнц);
		while(зДанных.Следующий())
		{
			ВывестиСтатус("Обработано заявок " + Счетчик++);
			if((зДанных.ВремяРаботы / 60).toFixed(1) > (зДанных.ПланНаЗаявку / 60).toFixed(1))
			{
				var Данные = {};
				Данные["Организация"] = зДанных.Организация;
				Данные["Договор"] = зДанных.Договор;
				Данные["НомерЗаявки"] = зДанных.НомерЗаявки;
				Данные["ДатаСоздания"] = зДанных['Дата создания'];
				Данные["ЗавершитьДо"] = зДанных['Завершить до'];
				Данные["ПланЧасов"] = (зДанных.ПланНаЗаявку / 60).toFixed(1);
				Данные["ВремяВсего"] = (зДанных.ВремяРаботы / 60).toFixed(1);
				Данные["ВремяКОплате"] = (зДанных.ВремяКОплате / 60).toFixed(1);

				зТекстаЗаявки.УстановитьПараметры(зДанных.row_id);
				Данные["ТекстЗаявки"] = зТекстаЗаявки.Следующий() ? зТекстаЗаявки.Примечание : "";

				зСтатуса.УстановитьПараметры(зДанных.row_id);
				зСтатуса.Статус = 999;
				if (зСтатуса.Следующий())
					зСтатуса.Статус = зСтатуса.Исполнитель == 0 ? 99 : зСтатуса.Статус;
				switch(зСтатуса.Статус)
				{
					case 0:
						Данные["СтатусЗаявки"] = "в процессе";
						break;
					case 1:
						Данные["СтатусЗаявки"] = "завершено";
						break;
					case 99:
						Данные["СтатусЗаявки"] = "без исполнителя";
						break; // в заявке есть нераспределенные работы
					default:
						Данные["СтатусЗаявки"] = "";
				}

				Об.Добавить("Данные", Данные);
				Кол++;
			}
		}
		var Форма = {};
		Форма["Период"] = ( (ДатНач == ДатКнц) || (ДатКнц == new Date(0,0,0))  ) ? ДатНач.format("rusDateDashed") :
                                                      ДатНач.format("rusDateDashed") + " - " + ДатКнц.format("rusDateDashed");
		Форма["Количество"] = Кол;
		Об.Данные("Форма", Форма);

		ВывестиСтатус("Идет вывод документа OpenOffice... ");
		Об.Отчет();
	}
}

отчеты.Add( "РаботыБольшеПлана", "Работы больше плана" );
class РаботыБольшеПлана
{
	constructor()
	{
		this.ФайлОтчета = отчеты.КаталогОтчета( "РаботыБольшеПлана" ) + "SHABLON\\DO\\Отчет_по_заявкам_больше_плана.ods";
	}

	ИмяОтчета()
	{
		return "Работы больше плана";
	}

	Формирователь_отчета()
	{
		var Счетчик = 0;
		var Кол = 0;
		var ДатНач = РабМес();
		var ДатКнц = ДатНач.ПоследнееЧисло();
		var резСпросить = Спросить("Введите период выборки заявок с ", ДатНач, "по ", ДатКнц);
		if( !резСпросить )
			throw "ReportBreak: Построение отчета прервано";

		ДатНач = резСпросить[0];
		ДатКнц = резСпросить[1];
		var Об = ПостроительОтчета("Open Office");
		Об.Имя(this.ФайлОтчета);
		Об.Источник("Данные", "Организация,A,Договор,A,НомерЗаявки,A,ВремяВыдачи,A,ЗавершитьДо,A,Отметки,M,Исполнитель,A,ВремяВыста,N,ВремяКОплате,N,СтатусЗаявки,A,Комментарии,M");

		var зДанных = BufferedReader(`select zad.row_id [id], convert( varchar(10), dog.[Номер])+'/'+dog.[Тема] as [Договор],
                        kart.[Номер] as 'Номер заявки', zad.[Время выдачи], zad.[Завершить до],
                   zad.[Отметки], zad.[Статус завершения],
                   sotr.ФИО as [Исполнитель]
           from ~ДО задания~ zad
                          left join ~Сотрудники~ sotr ON sotr.row_id = zad.[Задание-Исполнитель]
                          left join ~ДО карточки~ kart ON zad.[Задание-Карточка] = kart.row_id
                          left join ~Договор~ dog ON dog.row_id=kart.[Карточка-Договор]
                          left join ~ДО часы~ hour ON hour.[Часы-Задание]=zad.[row_id] 
                          where zad.[Время выдачи] between :1 and :2
           order by zad.[Время выдачи]`, 10000, "DN,D,DK,D");

		var зЧасы = Query(`select sum(60*datepart(hour, hour.[Время работы]) + datepart(minute, hour.[Время работы])) [ВремяРаботы],
                      sum(60*datepart(hour, hour.[Время к оплате]) + datepart(minute, hour.[Время к оплате])) [ВремяКОплате]
         from ~ДО задания~ zad, ~ДО карточки~ kart, ~Договор~ dog, ~ДО часы~ hour
         where zad.row_id=:1 and zad.[Задание-Карточка]=kart.row_id and 
                     dog.row_id=kart.[Карточка-Договор] and hour.[Часы-Задание]=zad.[row_id]`, 10000, "id,S");

		var зОрганизация = Query(`select [Название] from ~Организации~ where row_id in
                                             (select dog.[Плательщик] 
                               from ~ДО задания~ zad, ~ДО карточки~ kart, ~Договор~ dog
                               where zad.row_id=:1 and zad.[Задание-Карточка]=kart.row_id and 
                                                    dog.row_id=kart.[Карточка-Договор]
                                             )`, 1, "id,S");

		var зПримечания = Query(`select kart.[Примечание]
                              from  ~ДО карточки~ kart, ~ДО задания~ zad
                              where zad.row_id=:1 and zad.[Задание-Карточка]=kart.row_id`, 1, "id,S");

		зДанных.УстановитьПараметры(ДатНач, ДатКнц);

      var Данные = {};
		while(зДанных.Следующий())
		{
			ВывестиСтатус("Обработано работ " + Счетчик++);
			зЧасы.УстановитьПараметры(зДанных.id)
			if(зЧасы.Следующий())
			{
				if(зЧасы.ВремяРаботы > зЧасы.ВремяКОплате)
				{
					зОрганизация.УстановитьПараметры(зДанных.id);
					зПримечания.УстановитьПараметры(зДанных.id);
					Данные["Организация"] = зОрганизация.Следующий() ? зОрганизация.Название : "";
					Данные["Договор"] = зДанных.Договор;
					Данные["НомерЗаявки"] = зДанных['Номер заявки'];
					Данные["ВремяВыдачи"] = зДанных['Время выдачи'];
					Данные["ЗавершитьДо"] = зДанных['Завершить до'];
					Данные["Исполнитель"] = зДанных.Исполнитель;
					Данные["ВремяВыста"] = (зЧасы.ВремяРаботы / 60).toFixed(2);
					Данные["ВремяКОплате"] = (зЧасы.ВремяКОплате / 60).toFixed(2);
					Данные["Отметки"] = зДанных.Отметки; // ? зТекстаЗаявки.Примечание : "";
					Данные["ТекстЗаявки"] = зПримечания.Следующий() ? зПримечания.Примечание : "";

					switch ('зДанных.Статус завершения') {
						case 0:
							Данные["СтатусЗаявки"] = "в процессе";
							break;
						case 1:
							Данные["СтатусЗаявки"] = "завершено";
							break;
						default:
							Данные["СтатусЗаявки"] = "";
					}

					Об.Добавить("Данные", Данные);
					Кол++;
				}
			}
		}
		var Форма = {};
		Форма["Период"] = ( (ДатНач == ДатКнц) || (ДатКнц == new Date(0,0,0))  ) ? ДатНач.format("rusDateDashed") : ДатНач.format("rusDateDashed") +
                                                   " - " + ДатКнц.format("rusDateDashed");
		Форма["Количество"] = "Итого работ = " + Кол;
		Об.Данные("Форма", Форма);

		ВывестиСтатус("Идет вывод документа OpenOffice... ");
		Об.Отчет();
	}
}

отчеты.Add( "ОтчетПоПланамПрограммистов", "Отчет по планам программистов" );
class ОтчетПоПланамПрограммистов
{
	constructor()
	{
			this.ФайлОтчета = отчеты.КаталогОтчета( "ОтчетПоПланамПрограммистов" )+"SHABLON\\DO\\Отчет_для_программистов.ods"
	}
	
	ИмяОтчета()
	{
	    return "Отчет по планам программистов";
	}
	
    ТипРаботы( _тип )
    {
       switch( _тип )
       {
          case 1: return "Доработки кода";
          case 2: return "Очередь";
          case 3: return "Сделать по возможности";
       }
       return "";
    }
	
	Формирователь_отчета()
	{
		var Счетчик = 0;
		var Кол = 0;
		var Д = СоздатьДиалог("Отчет для программистов");
		Д.ДатНач = new Date(2000,0,1);
		Д.ДатКнц = new Date(2045,8,5);
		if (!Д.Выполнить())
			throw "ReportBreak: Построение отчета прервано";
		var поз_исп = ЗначениеВыпадающегоСписка("Отчет для программистов", "@Сотрудник")

		var Об = ПостроительОтчета("Open Office");
		Об.Имя(this.ФайлОтчета);
		Об.Источник("Данные", "ТипРаботы,A,ДатаСоздания,A,ЗавершитьДо,A,ТекстЗаявки,M,Исполнитель,A");
	   
		var зДанных = Query(`declare @dateN datetime;
								  set @dateN=:1
							  declare @dateK datetime;
								  set @dateK=:2
														
							   select (CASE WHEN card.[Папки]=178485 THEN 1
										   WHEN card.[Папки]=180167 THEN 2
										   WHEN card.[Папки]=179905 THEN 3 END) as [Тип],
									  isnull( work.[Завершить до],'20450905' ),
									  card.[row_id]            [нзЗаявки],
									  card.[Завершить до]      [ЗавДоЗаявки],
									  card.[Дата создания]     [ДатаЗаявки],
									  work.[row_id]            [нзРаботы],
									  work.[Отметки]           [ТекстРаботы],
									  work.[Завершить до]      [ЗавДоРаботы], 
									  work.[Дата выдачи]       [ДатаРаботы],
									  work.[Статус завершения] [СтатусРаботы],
									  sotr.[row_id]            [нзИсп],
									  sotr.[ФИО]               [Исполнитель]
								 from ~ДО карточки~ card
							left join ~ДО задания~ work on work.[Задание-Карточка]=card.[row_id] 
														 and work.[Статус завершения]=0
							left join ~Сотрудники~ sotr ON work.[Задание-Исполнитель]=sotr.[row_id]
								where card.[Папки] in (178485,180167,179905) 
								   and card.[Папки_ADD]=1 
								   and card.[Завершить до] between @dateN and @dateK
							  order by 1,2,card.[Завершить до],work.[Завершить до]
							 `,10,"DateDoN,D,DateDoK,D");

		var зТекстаЗаявки = Query(`SELECT [Примечание] FROM ~ДО карточки~ WHERE row_id=:1`,1,"ID,S");
		
		зДанных.УстановитьПараметры(Д.ДатНач, Д.ДатКнц);
        var Форма = {};
        while(зДанных.Следующий())
        {
            ВывестиСтатус("Обработано заявок " + Счетчик++);
            if (поз_исп == -1 || зДанных.нзИсп == поз_исп)
            {
                var Данные = {};
                Данные["ТипРаботы"] = this.ТипРаботы(зДанных.Тип);
                Форма["Исполнитель"] = поз_исп == -1 ? "" : зДанных.Исполнитель;
                if(зДанных.ТекстРаботы == "")
                {
                    зТекстаЗаявки.УстановитьПараметры(зДанных.нзЗаявки);
                    Данные["ТекстЗаявки"] = зТекстаЗаявки.Следующий() ? зТекстаЗаявки.Примечание : "";

                    Данные["ДатаСоздания"] = зДанных.ДатаЗаявки;
                    Данные["ЗавершитьДо"] = зДанных.ЗавДоЗаявки;
                    Данные["Исполнитель"] = "";
                }
                else
                {
                    Данные["ДатаСоздания"] = зДанных.ДатаРаботы;
                    Данные["ЗавершитьДо"] = зДанных.ЗавДоРаботы;
                    Данные["ТекстЗаявки"] = зДанных.ТекстРаботы;
                    Данные["Исполнитель"] = зДанных.Исполнитель;
                }
                Об.Добавить("Данные", Данные);
            }
        }

        Форма["Период"] = Д.ДатНач.format("rusDateDashed") + " - " + Д.ДатКнц.format("rusDateDashed");
        Об.Данные("Форма", Форма);
        Об.Отчет();
	}
}

отчеты.Add( "ОтчетОРИОН", "Отчет ОРИОН" );
class ОтчетОРИОН {
	constructor() {
		this.фШаблон = отчеты.КаталогОтчета( "ОтчетОРИОН" ) + "SHABLON\\DOCREC\\ОтчетПоОриону.xls";
		this.ВыходнойФайл = "Отчет по Ориону.xls";
	}

	ИмяОтчета() {
		return "Отчет по планам программистов";
	}

	Формирователь_отчета() {
		var диал = СоздатьДиалог("Отчет для сотрудников");
		диал.ДатНач = new Date( 2014, 10, 1);
		диал.ДатКнц = РабДат();
      диал.Элементы["@ВариантОтчета"].Скрытый = 1;
      диал.Элементы["@Сотрудник"].Запрещен = 1;
		if(!диал.Выполнить())
			throw "ReportBreak: Построение отчета прервано";

		var ДатН = диал.ДатНач;
		var ДатК = диал.ДатКнц;

		var qu_tabel = BufferedReader(`DECLARE @data1 datetime;      set @data1 = :1;
                                     DECLARE @data2 datetime;      set @data2 = :2;
                                     DECLARE @data3 datetime;      set @data3 = convert(varchar(8),:3,108);
                                     SELECT [Дата], [ФИО],
                                     DATEDIFF(hh, MIN(CAST([Время] AS time)), MAX(CAST([Время] AS time))) as h,
                                     DATEDIFF(mi, MIN(CAST([Время] AS time)), MAX(CAST([Время] AS time))) as m,
                                     DATEDIFF(ss, MIN(CAST([Время] AS time)), MAX(CAST([Время] AS time))) as s,
                                     MIN( convert(varchar(8), case when [Действие]=1 then [Время] else @data3 end, 108) ) as mn,
                                     MAX( convert(varchar(8), case when [Действие]=2 then [Время] else 0      end, 108) ) as mx,
                                     CONVERT(varchar(8), DATEADD(ss, DATEDIFF(ss, MIN(CAST([Время] AS time)), MAX(CAST([Время] AS time))), @data1), 108) as sec_in_time
                                       FROM ~ДО табель~
                                       WHERE [Дата] between @data1 and @data2
                                     GROUP BY [ФИО],[Дата]
                                     ORDER BY [ФИО],[Дата]
                                    `, 500, "P1,D,P2,D,P3,A");

		var мЭксель = {};
		var мДанных = {};
		var мИтого = {};
		var НачатьС = 5;
		var i = 0;

		qu_tabel.УстановитьПараметры(ДатН, ДатК, "23:59:59");
		while (qu_tabel.Следующий())
		{
			var _фио = qu_tabel.ФИО;
			var _дата = qu_tabel.Дата.format("isoDate");
			мДанных[_фио] = {};
			мДанных[_фио].фио = _фио;
			мДанных[_фио][_дата] = {};
			мДанных[_фио][_дата].вход = qu_tabel.mn == "23:59:59" ? "0:00:00" : qu_tabel.mn;
			мДанных[_фио][_дата].выход = qu_tabel.mx;
			мДанных[_фио][_дата]["на_работе"] = qu_tabel.sec_in_time;
		}

		if(Размер(мДанных) > 0)
		{
			for( let имд in мДанных)
			{
				мЭксель[i] = {};
				мЭксель[i][0] = мДанных[имд].фио;
				мЭксель[i][1] = "=RC[+3]";
				var дней = 0;
				var РабДат = ДатН;
				while(РабДат <= ДатК)
				{
					var идата = РабДат.format("isoDate");
					if((мДанных[имд][идата]) != undefined )
					{
						мЭксель[i][2 + 3 * дней] = мДанных[имд][идата].вход;
						мЭксель[i][3 + 3 * дней] = мДанных[имд][идата].выход;
						мЭксель[i][4 + 3 * дней] = мДанных[имд][идата]["на_работе"];
						мИтого [i] += мДанных[имд][идата]["на_работе"];
					}
					РабДат = new Date( РабДат.setDate( РабДат.getDate() + 1 ) );
					дней++;
					if(дней > 1)
						мЭксель[i][1] += "+RC[+" + 3 * дней + "]";
				}
				i++;
			}
		}

		//Excel_Create(фШаблон, ВыходнойФайл);

		var excelObjCurrent = new ExcelObj( "Excel" );
		excelObjCurrent.Create( this.фШаблон, this.ВыходнойФайл );

		дней = 0;
		РабДат = ДатН;
		while(РабДат <= ДатК)
		{
			//Excel_Cell0("C3", День(РабДат) + " " + МесяцВРодПад(РабДат));
			excelObjCurrent.Cell0("C3", РабДат.getDate() + " " + МесяцВРодПад(РабДат));
			//Excel_Copy(1, 3, 3, 4, 5, 1, 3, 6 + 3 * дней);            // 2 строки заголовков
			excelObjCurrent.Copy(1, 3, 3, 4, 5, 1, 3, 6 + 3 * дней);            // 2 строки заголовков
			РабДат = new Date( РабДат.setDate( РабДат.getDate() + 1 ) );
			дней++;
		}
		//var sh = книга_Excel.Sheets(1);                          // 1 блок лишний
		excelObjCurrent.Sheets(1);                          // 1 блок лишний
		//var rang = sh.Range("C3:E4");
		excelObjCurrent.SheetRange("C3:E4");
		//rang.Delete(xlToLeft = -4159);
		//todo xlToLeft
      var xlToLeft = -4159;
		excelObjCurrent.RangeDelete( xlToLeft );

//   Excel_Merge( 1, 3, 2+3*дней, 4, 2+3*дней );
//   Excel_Borders( 1, 3, 2+3*дней, 4, 2+3*дней );
//   names = sh.Range( sh.Cells.Item(3, 2+3*дней), sh.Cells.Item(4, 2+3*дней) );
//   names.Value = "Всего за период";
//   names.WrapText = 1;

		//Excel_Data(1, НачатьС, 1, мЭксель, "г");
		excelObjCurrent.Data(1, НачатьС, 1, мЭксель, "г");
		var _строка_периода = "за период с " + ДатаВРодПад(ДатН) + " по " + ДатаВРодПад(ДатК);
		//Excel_Cell0("A1", "Отчет по данным, переданным через систему ОРИОН, " + _строка_периода);
		excelObjCurrent.Cell0("A1", "Отчет по данным, переданным через систему ОРИОН, " + _строка_периода);

		//Excel_Close(1);
		excelObjCurrent.Close( 1 );
	}
}